# Message we display for inspection if user uses custom class type members that do not exist
custom.type.mimic.name=基於 {0} 的動態類

### Refactoring

refactoring.extract.method.error.interrupted.execution.flow=執行流中斷時無法執行重構
refactoring.extract.method.error.star.import=無法使用程式碼塊內的星號 import 語句執行重構
refactoring.extract.method.error.yield=無法使用程式碼塊內的 'yield' 語句執行重構

### Annotators ###
ANN.deleting.none=刪除 None
ANN.assign.to.none=賦值給 None
ANN.cant.assign.to.call=無法賦值給函數調用
ANN.cant.delete.call=無法刪除函數調用
ANN.cant.aug.assign.to.generator=無法對生成器表達式進行增強賦值
ANN.cant.aug.assign.to.tuple.or.generator=無法對元組文字或生成器表達式進行增強賦值
ANN.cant.assign.to.generator=無法賦值給生成器表達式
ANN.cant.assign.to.operator=無法賦值給運算符
ANN.cant.assign.to.parens=無法賦值給 ()
ANN.cant.aug.assign.to.list.or.comprh=無法對列表文字或推導式進行增強賦值
ANN.cant.assign.to.comprh=無法賦值給列表推導式
ANN.cant.assign.to.dict.comprh=無法賦值給字典推導式
ANN.cant.assign.to.set.comprh=無法賦值給集合推導式
ANN.cant.aug.assign.to.comprh=無法對列表推導式進行增強賦值
ANN.cant.aug.assign.to.dict.comprh=無法對字典推導式進行增強賦值
ANN.cant.aug.assign.to.set.comprh=無法對集合推導式進行增強賦值
ANN.cant.aug.assign.starred.assignment.target.must.be.in.list.or.tuple=帶星號的賦值目標必須位於列表或元組中
ANN.cant.assign.to.literal=無法賦值給文字
ANN.cant.delete.literal=無法刪除文字
ANN.cant.assign.to.lambda=無法賦值給 lambda

ANN.break.outside.loop='break' 在迴圈外
ANN.continue.outside.loop='continue' 在迴圈外

ANN.duplicate.param.name=重複的參數名稱
ANN.starred.param.after.kwparam=* 參數在 ** 參數後面
ANN.regular.param.after.vararg=正則參數在 * 參數後面
ANN.regular.param.after.keyword=正則參數在 ** 參數後面
ANN.non.default.param.after.default=預設參數後面跟隨非預設參數
ANN.named.parameters.after.star=僅帶有 * 時，後面必須跟隨命名參數
ANN.named.parameters.before.slash=僅帶有 * 時，前面必須有命名參數
ANN.tuple.py3=Python 3 中不支持元組參數解包
ANN.multiple.args=不允許多個 * 參數
ANN.multiple.kwargs=不允許多個 ** 參數
ANN.multiple.slash=不允許多個 / 參數
ANN.slash.param.after.vararg=/ 參數必須在 * 參數前面
ANN.slash.param.after.keyword=/ 參數必須在 ** 參數前面

ANN.star.import.at.top.only=僅在模組級別允許 'import *'

ANN.missing.closing.quote=缺少右引號 [{0}]
ANN.missing.closing.triple.quotes=缺少右三引號

ANN.default.except.must.be.last=預設 'except:' 必須為最後一個
ANN.no.exception.to.reraise=沒有要重新引發的異常

ANN.name.used.both.as.global.and.param=名稱 ''{0}'' 同時用作參數和全域變數

ANN.assignment.to.keyword=關鍵字賦值
ANN.cannot.assign.to.debug=無法賦值給 __debug__
ANN.unparenthesized.assignment.expression.statement=在表達式語句的頂層禁止使用不帶括號的賦值表達式
ANN.unparenthesized.assignment.expression.value=在賦值語句右側的頂層禁止使用不帶括號的賦值表達式
ANN.assignment.expressions.within.a.comprehension.cannot.be.used.in.a.class.body=推導式中的賦值表達式不能在類主體中使用
ANN.assignment.expression.as.a.target=賦值表達式不能用作此處的目標
ANN.assignment.expression.in.an.iterable=不能在推導式迭代中使用賦值表達式
ANN.ignore.errors.like.this=忽略這樣的錯誤
ANN.function.cannot.be.async=函數 "{0}" 不能是異步函數
ANN.python.does.not.support.yield.from.inside.async.functions=Python 不支持在異步函數中使用 'yield from'
ANN.yield.outside.of.function='yield' 在函數外部
ANN.non.empty.return.inside.asynchronous.generator=異步生成器內部的 'return' 非空
ANN.return.outside.of.function='return' 在函數外部
ANN.can.t.use.starred.expression.here=這裡不能使用星號表達式
ANN.illegal.target.for.variable.annotation=變數註解目標非法
ANN.variable.annotation.cannot.be.combined.with.tuple.unpacking=變數註解不能與元組解包相結合
ANN.variable.annotation.cannot.be.used.in.assignment.with.multiple.targets=變數註解不能用於具有多個目標的賦值
ANN.generator.expression.must.be.parenthesized.if.not.sole.argument=如果不是唯一實參，則必須為生成器表達式添加括號

ANN.fstrings.expression.fragment.inside.fstring.nested.too.deeply=f-string 中的表達片段嵌套太深
ANN.fstrings.missing.conversion.character=預期為轉換字符: 應為 's'、'r'、'a' 之一
ANN.fstrings.illegal.conversion.character=非法轉換字符 ''{0}'': 應為 ''s''、''r''、''a'' 之一
ANN.fstrings.expression.fragments.cannot.include.backslashes=f-string 中的表達式片段不能包含反斜杠
ANN.fstrings.single.right.brace.not.allowed.inside.fstrings=f-string 中不允許使用單個 '}'
ANN.fstrings.expression.fragments.cannot.include.line.comments=f-string 中的表達式片段不能包含行註釋


### parsing
PARSE.expected.expression=應為表達式
PARSE.expected.rbracket=應為 ']'
PARSE.expected.expr.or.comma.or.bracket=應為表達式 ',' 或 ']'
PARSE.expected.in=應為 'in'
PARSE.expected.for.or.bracket=應為 ']' 或 'for'
PARSE.expected.comma=應為 ','
PARSE.expected.colon=應為 ':'
PARSE.expected.rpar=應為 ')'
PARSE.expected.lpar=應為 '('
PARSE.expected.rbrace=應為 '}'
PARSE.expected.tick=應為 '`' (反引號)
PARSE.expected.name=應為名稱
PARSE.expected.colon.or.rbracket=應為 ':' 或 ']'
PARSE.expected.comma.or.rpar=應為 ',' 或 ')'
PARSE.expected.else=應為 'else'

PARSE.expected.identifier=應為關鍵字
PARSE.expected.comma.lpar.rpar=應為 ',' 或 '(' 或 ')'
PARSE.expected.statement.break=應為 break 語句
PARSE.expected.@.or.def=應為 '@' 或 'def'
PARSE.expected.formal.param.name=應為參數名稱
PARSE.0.expected=應為 ''{0}''
PARSE.expected.ellipsis=應為 '…'
PARSE.string.literal.expected=應為字串文字
PARSE.expected.symbols=應為 ''{0}'' 或 ''{1}''
PARSE.expected.symbols.first.quotation=應為 ''{0}'' 或 {1}
PARSE.expected.symbols.second.quotation=應為 {0} 或 ''{1}''
PARSE.declarator.should.be.empty=宣告符應為空
PARSE.string.literal=字串文字
PARSE.newline.expected=應為換行符
PARSE.eq.expected=應為 '='
PARSE.from.expected=應為 'from'
PARSE.gt.expected=應為 '>'
PARSE.expected.fstring.quote=應為 {0}
PARSE.expected.fstring.rbrace=應為 '}'
PARSE.expected.fstring.colon.or.rbrace=應為 : 或 '}'
PARSE.expected.fstring.type.conversion.or.colon.or.rbrace=應為類型轉換、':' 或 '}'
PARSE.single.star.parameter.not.supported.py2=Python 2 不支持僅帶一個星號的參數
PARSE.async.keyword.not.expected.here=此處不應為 'async' 關鍵字
PARSE.keyword.cannot.be.used.as.identifier.py2=''{0}'' 關鍵字不能在 Python 2 中用作關鍵字
PARSE.expected.number=應為數字
PARSE.expected.case.clause=應為 case 子句
PARSE.expected.pattern=應為模式
PARSE.expected.name.or.wildcard=應為名稱或 '_'

statement.expected.found.0=應為語句，實際為 {0}
unexpected.indent=意外縮排
unindent.does.not.match.any.outer.indent=取消縮排不符合任何外部縮排級別
except.or.finally.expected=應為 'except' 或 'finally'
expected.statement=應為語句
indent.expected=應縮排
cannot.assign.to.yield.expression=無法賦值給 'yield' 表達式
end.of.statement.expected=應為語句結束
import.expected=應為 'import'
def.or.with.or.for.expected=應為 'def'、'with' 或 'for'
rbracket.or.comma.expected=應為 ']' 或 ','
unexpected.expression.syntax=意外表達式語法
tuple.expression.expected=應為元組表達式
value.expression.expected=應為值表達式
unexpected.expression.part=意外的表達式部分
unexpected.f.string.token=意外的 f-string 標記
can.t.assign.to.await.expression=無法賦值給 await 表達式
for.expected=應為 'for'
rarrow.expected=應為 '->'
unexpected.tokens=意外的標記

PARSE.function.type.annotations.py2=Python 2 不支持類型註解
PARSE.function.return.type.annotations.py2=Python 2 不支持返回類型註解

PARSE.console.multiline.magic.warn=多行魔術不能用作表達式
PARSE.console.help.request.warn=名稱後面必須跟隨幫助請求

### quick doc generator
QDOC.module.path.unknown=(模組路徑未知)
QDOC.epydoc.python2.sdk.not.found=您需要設定好的 Python 2 SDK 來渲染 <a href='http://epydoc.sourceforge.net/'>Epydoc</a> docstring
QDOC.local.sdk.not.found=您需要設定好的本地 Python SDK 來渲染 docstring。
QDOC.assigned.to=賦值給:
QDOC.documentation.is.copied.from=文檔複製自:
QDOC.accessor.kind=存取器類型:
QDOC.raises=引發:
QDOC.keyword.args=關鍵字實參:
QDOC.returns=返回值:
QDOC.params=參數:

### Formatter
formatter.panel.dict.alignment.do.not.align=不對齊
formatter.panel.dict.alignment.align.on.colon=通過冒號對齊
formatter.panel.dict.alignment.align.on.value=通過值對齊

ignore.overridden.functions=忽略被覆寫的函數

### Intentions ###

INTN.replace.octal.numeric.literal=將八進制數字文字轉換為支援的形式
INTN.convert.builtin.import=將內建模組匯入轉換為支援的形式

QFIX.NAME.convert.builtin=轉換內建模組匯入

INTN.NAME.convert.import.unqualify=將 'import module' 轉換為 'from module import'
INTN.convert.to.from.import=轉換為 ''from {0} import {1}''

INTN.NAME.convert.import.qualify=將 'from 模組 import' 轉換為 'import 模組'
INTN.convert.to.plain.import=轉換為 ''import {0}''

INTN.convert.except.to=將 'except exceptClass, Target' 轉換為 'except exceptClass as Target'

INTN.NAME.toggle.import.alias=使用 import 別名進行切換
INTN.add.import.alias=添加別名
INTN.add.import.alias.to.name=添加別名到 ''{0}''
INTN.add.import.alias.dialog.message=''{0}'' 的別名:
INTN.add.import.alias.title=添加別名
INTN.remove.import.alias=移除別名 ''{0}''

INTN.replace.noteq.operator=取代不等運算符

QFIX.NAME.remove.string.prefix=移除前綴
QFIX.remove.string.prefix=移除前導 {0}

INTN.replace.backquote.expression=取代反引號表達式
INTN.replace.raise.statement=將 raise 語句轉換為支援的形式

INTN.replace.list.comprehensions=將列表推導式轉換為支援的形式

# PyConvertToFStringIntention
INTN.convert.to.fstring.literal=轉換為格式化字串文字
INTN.replace.with.method=取代為 str.format 方法調用

# ConvertFormatOperatorToMethodIntention
INTN.format.operator.to.method=將格式運算符轉換為 'str.format' 方法調用

INTN.replace.list.comprehensions.with.for=將列表推導式轉換為 'for' 迴圈

INTN.NAME.split.if=拆分 'if' 語句
INTN.split.if=拆分成 2 條 'if' 語句

INTN.NAME.negate.comparison=求反比較
INTN.negate.comparison=將 ''{0}'' 求反為 ''{1}''

INTN.string.concatenation.to.format=將字串串聯取代為 'str.format'
INTN.replace.plus.with.format.operator=將 + 取代為字串格式化運算符
INTN.replace.plus.with.str.format=將 + 取代為 str.format 方法調用


INTN.NAME.flip.comparison=翻轉比較
INTN.flip.comparison=翻轉 ''{0}''
INTN.flip.comparison.to.operator=將 ''{0}'' 翻轉為 ''{1}''

INTN.NAME.join.if=聯接 'if' 語句
INTN.join.if=聯接兩個 'if' 語句

INTN.convert.dict.constructor.to.dict.literal=將 dict 構造函數轉換為 dict 文字
INTN.convert.dict.literal.to.dict.constructor=將 dict 文字轉換為 dict 構造函數

INTN.quoted.string=將帶單引號的字串轉換為帶雙引號的字串，反之亦然
INTN.quoted.string.single.to.double=將單引號字串轉換為雙引號字串
INTN.quoted.string.double.to.single=將雙引號字串轉換為單引號字串

INTN.convert.lambda.to.function=將 lambda 轉換為函數

INTN.convert.variadic.param=將可變形參轉換為正常參數

# PyConvertTripleQuotedStringIntention
INTN.triple.quoted.string=將三引號字串轉換為單引號字串

# PyBaseConvertCollectionLiteralIntention
INTN.NAME.convert.collection.literal=將集合轉換為 {0}
INTN.convert.collection.literal=將 {0} 轉換為 {1}

# PyConvertTypeCommentToVariableAnnotation
INTN.NAME.convert.type.comment.to.variable.annotation=將類型註釋轉換為變數註解
INTN.convert.type.comment.to.variable.annotation=轉換為變數註解

INTN.NAME.demorgan.law=德摩根定律

# PyTransformConditionalExpressionIntention
INTN.transform.into.if.else.statement=將條件表達式轉換為 'if/else' 語句

# PyGenerateDocstringIntention
INTN.NAME.insert.docstring.stub=插入 docstring 存根
INTN.insert.docstring.stub=插入 docstring 存根
INTN.add.parameters.to.docstring=向 docstring 添加參數

#SpecifyTypeInDocstringIntention
INTN.NAME.specify.type.in.docstring=指定 docstring 中引用的類型
INTN.specify.type.in.docstring=指定 docstring 中的引用類型
INTN.specify.return.type.in.docstring=指定 docstring 中的返回類型

#SpecifyTypeInPy3AnnotationsIntention
INTN.NAME.specify.type.in.annotation=使用註解指定引用類型
INTN.specify.type.in.annotation=使用註解指定引用類型
INTN.specify.return.type.in.annotation=使用註解指定返回類型

#PyAnnotateTypesIntention
INTN.NAME.add.type.hints.for.function=為函數添加類型提示
INTN.add.type.hints.for.function=為函數 ''{0}'' 添加類型提示

# PyAnnotateVariableTypeIntention
INTN.NAME.add.type.hint.for.variable=為變數添加類型提示
INTN.add.type.hint.for.variable=為變數 ''{0}'' 添加類型提示
INTN.add.type.hint.for.variable.PEP484.incompatible.type=類型 ''{0}'' 不能以 PEP 484 格式內聯表示

#TypeAssertionIntention
INTN.insert.assertion=插入類型斷言

#PyYieldFromIntention
INTN.yield.from=將含有 'yield' 的顯式迭代轉換為 'yield from' 表達式

#PyConvertStaticMethodToFunctionIntention
INTN.convert.static.method.to.function=將 static 方法轉換為函數

#PyConvertMethodToPropertyIntention
INTN.convert.method.to.property=將方法轉換為屬性

#PyConvertImportIntentionAction
INTN.convert.relative.to.absolute=將相對匯入轉換為絕對匯入
INTN.convert.absolute.to.relative=將絕對匯入轉換為相對匯入

#PyInvertIfConditionIntention
INTN.invert.if.condition=反轉 'if' 條件

### Quick fixes ###
QFIX.add.qualifier=添加限定符

QFIX.NAME.auto.import=匯入
QFIX.auto.import.import.this.name=匯入此名稱
QFIX.auto.import.import.name=匯入 ''{0}''

QFIX.NAME.local.auto.import=本地匯入
QFIX.local.auto.import.import.locally=本地{0}

QFIX.augment.assignment=將賦值取代為增強賦值
QFIX.NAME.remove.call=移除調用
QFIX.replace.equality=取代相等
QFIX.dict.creation=取代字典創建
QFIX.NAME.remove.dict.key=移除此鍵
QFIX.NAME.move.except.up=上移 except 子句
QFIX.NAME.add.field.to.class=將欄位添加到類
QFIX.add.field.to.class=將欄位 ''{0}'' 添加到類 {1}
QFIX.add.field.to.class.popup.content.added.init=已將 __init__ 添加到類 <code>{0}</code><br/>，以適應新字段 <code>{1}</code>
QFIX.NAME.remove.parameter=移除參數
QFIX.NAME.rename.parameter=重命名參數
QFIX.rename.parameter=重命名為 ''{0}''
QFIX.NAME.remove.statement=移除語句
QFIX.NAME.remove.with.target=移除 'with' 目標
QFIX.NAME.remove.exception.target=移除異常目標
QFIX.NAME.remove.assignment.target=移除賦值目標
QFIX.failed.to.add.field=<br/>無法添加欄位!<br/><br/>
QFIX.redundant.parentheses=移除冗餘圓括號
QFIX.NAME.simplify.boolean.expression=簡化布爾表達式
QFIX.simplify.boolean.expression=將布爾表達式取代為 ''{0}''
QFIX.chained.comparison=簡化鏈式比較
QFIX.move.from.future.import=將 'from __future__ import' 移至正確位置
QFIX.list.creation=取代列表創建
QFIX.add.super=添加超類調用
QFIX.NAME.remove.assignment=移除賦值
QFIX.NAME.remove.argument=移除實參
QFIX.add.parameter.self=添加參數 ''{0}''
QFIX.statement.effect=取代為函數調用
QFIX.remove.trailing.semicolon=移除尾隨分號
QFIX.introduce.variable=為語句引入變數
QFIX.NAME.make.list=將元組取代為列表
QFIX.NAME.add.specifier=添加格式說明符字符
QFIX.add.global=添加全域語句
QFIX.create.property=創建屬性
QFIX.add.property=添加欄位的屬性
QFIX.use.property=使用此欄位的屬性
QFIX.make.public=設為 public
QFIX.NAME.update.parameters=更新參數
QFIX.convert.to.new.style=轉換為新樣式類
QFIX.change.base.class=更改基類
QFIX.classic.class.transform=從物件繼承
QFIX.NAME.rename.argument=重命名實參
QFIX.NAME.add.exception.base=添加 Exception 基類
QFIX.add.encoding=添加編碼宣告
QFIX.remove.trailing.suffix=移除尾隨後綴
QFIX.action.failed=操作失敗
QFIX.create.class=創建類
QFIX.create.class.0=創建類 ''{0}''
QFIX.create.class.in.module=在模組 {1} 中創建類 ''{0}''

QFIX.optimize.imports=最佳化 import
QFIX.unresolved.reference=將 ''{0}'' 取代為 ''{1}.{0}''

QFIX.NAME.unresolved.reference.add.param=創建引用參數
QFIX.unresolved.reference.add.param=創建參數 ''{0}''

#PyRenameUnresolvedRefQuickFix
QFIX.rename.unresolved.reference=重命名引用

# UnresolvedRefCreateFunctionQuickFix
QFIX.unresolved.reference.create.function=創建函數
QFIX.NAME.unresolved.reference.create.function=創建函數 ''{0}''

#UnresolvedRefTrueFalseQuickFix
QFIX.NAME.replace.with.true.or.false=取代為 True 或 False
QFIX.replace.with.true.or.false=取代為 {0}

#PyRemoveUnderscoresInNumericLiteralsQuickFix
QFIX.NAME.remove.underscores.in.numeric=移除數字文字中的下劃線

# ReplaceFunctionWithSetLiteralQuickFix
QFIX.replace.function.set.with.literal=將函數調用取代為集合文字

#RemoveArgumentEqualDefaultQuickFix
QFIX.remove.argument.equal.default=移除等於預設值的實參

#PyDefaultArgumentQuickFix
QFIX.default.argument=取代可變預設實參

#PyMoveAttributeToInitQuickFix
QFIX.move.attribute=將特性移至 __init__ 方法

#DocstringQuickFix
QFIX.NAME.docstring=修正 docstring
QFIX.docstring.add.parameter=添加 docstring 參數 ''{0}''
QFIX.docstring.remove.parameter=移除 docstring 參數 ''{0}''
QFIX.docstring.insert.stub=插入 docstring

#PyMakeMethodStaticQuickFix
QFIX.NAME.make.static=將方法設為 static

#PyMakeFunctionFromMethodQuickFix
QFIX.NAME.make.function=從方法中生成函數

#ConvertIndents
QFIX.convert.indents=轉換縮排
QFIX.convert.indents.to.tabs=將縮排轉換為制表符
QFIX.convert.indents.to.spaces=將縮排轉換為空格

# ConvertDocstringQuickFix
QFIX.convert.single.quoted.docstring=將 docstring 轉換為帶三個雙引號的字串形式

# RemoveUnnecessaryBackslashQuickFix
QFIX.remove.unnecessary.backslash=移除表達式中不必要的反斜杠

#RemoveDecoratorQuickFix
QFIX.remove.decorator=移除裝飾器

#PyMakeFunctionReturnTypeQuickFix
QFIX.NAME.make.function.return.type=使函數返回推斷的類型
QFIX.make.function.return.type=使 ''{0}'' 返回 ''{1}''

# Add method quick fix
QFIX.NAME.add.method.to.class=添加方法到類
QFIX.add.method.to.class=將方法 {0}() 添加到類 {1}
QFIX.failed.to.add.method=<br/>無法添加方法!<br/><br/>

QFIX.NAME.create.function.in.module=在模組中創建函數
QFIX.create.function.in.module=在模組 {1} 中創建函數 {0}()
QFIX.failed.to.add.function=<br/>無法添加函數!<br/><br/>

# InstallAndImportQuickFix
QFIX.install.and.import.package=安裝並匯入軟體套件
QFIX.NAME.install.and.import.package=安裝並匯入軟體套件 ''{0}''

# PyAsyncCallInspection
QFIX.coroutine.is.not.awaited=未等待協同程序


# Actions and associated commands
ACT.CMD.use.import=使用匯入的模組
ACT.qualify.with.module=使用匯入的模組進行限定
ACT.from.some.module.import=匯入自…


filetype.python.docstring.description=Python docstring
filetype.python.function.type.annotation.description=Python PEP-484 函數類型註釋
filetype.python.type.hint.description=Python PEP-484 類型提示
python.docstring.format=docstring 格式:
python.docstring.select.type=選擇 Docstring 類型

### Inspections: INSP ###
INSP.GROUP.python=Python

INSP.abstract.class.set.as.metaclass=設定 ''{0}'' 為元類
INSP.abstract.class.add.to.superclasses=添加 ''{0}'' 至超類
INSP.named.tuple=無效的 'typing.NamedTuple' 定義
INSP.shadows.name.from.outer.scope=從外部範圍隱藏名稱 ''{0}''
INSP.trailing.semicolon=語句中的尾隨分號
INSP.protected.member.ignore.annotations=忽略註解
INSP.protected.member.ignore.test.functions=忽略測試函數
INSP.docstring.types.fix.docstring=修正 docstring
INSP.docstring.types.change.type=將 {0} 類型從 {1} 更改為 {2}
INSP.interpreter.configure.python.interpreter=設定 Python 解釋器
INSP.interpreter.interpreter.settings=解釋器設定
INSP.interpreter.use.interpreter=使用 {0}
INSP.interpreter.use.suggested.interpreter=使用建議的解釋器
INSP.method.parameters.metaclass.method.first.argument.name=元類方法第一個實參的名稱

INSP.package.requirements.requirements.have.been.ignored=已忽略要求
INSP.package.requirements.requirement.has.been.ignored=已忽略 ''{0}''
INSP.package.requirements.add.import=添加匯入
INSP.package.requirements.administrator.privileges.required=需要管理員權限
INSP.package.requirements.administrator.privileges.required.description=將軟體套件安裝到 ''{0}'' 需要具備管理員權限。\n\
\n\
將每個專案的虛擬環境設定為專案解釋器，\n\
以避免將包安裝到檔案系統的受保護區域。
INSP.package.requirements.administrator.privileges.required.button.configure=設定
INSP.package.requirements.administrator.privileges.required.button.install.anyway=仍要安裝
INSP.package.requirements.requirements.file.empty=要求檔案為空
QFIX.add.imported.packages.to.requirements=將匯入的軟體套件添加到需求中…

INSP.pep8.ignore.base.class=忽略基類
INSP.pep8.ignore.method.names.for.descendants.of.class=忽略類後代的方法名稱
INSP.stub.packages.compatibility.ignore=忽略 ''{0}'' 兼容性
INSP.stub.packages.compatibility.ignored.packages=已忽略的存根軟體套件
INSP.stub.packages.compatibility.ignored.packages.label=已忽略的存根軟體套件:
INSP.stub.packages.compatibility.incompatible.packages.message=''{0}{1}{2}'' 與 ''{3}{4}{5}'' 不相容。預期 ''{6}'' 版本: [{7}]
INSP.arguments.not.declared.but.provided.by.decorator=以下實參未宣告，而是由修飾器提供：{0}
INSP.pep8.coding.style.violation=PEP 8 編碼樣式違規
INSP.shadowing.names=正在從外部範圍隱藏名稱
INSP.stub.packages.compatibility=不相容的存根軟體套件
INSP.stub.packages=存根軟體套件廣播程序

# PyCallingNonCallableInspection
INSP.NAME.calling.non.callable=嘗試調用不可調用的物件
INSP.class.object.is.not.callable=''{0}'' 物件不可調用
INSP.symbol.is.not.callable=''{0}'' 不可調用
INSP.expression.is.not.callable=表達式不可調用

# PyArgumentListInspection
INSP.NAME.incorrect.call.arguments=錯誤的調用實參
INSP.unexpected.arg=意外實參
INSP.unexpected.arg(s)=意外實參
INSP.parameter.unfilled=參數 ''{0}'' 未填
INSP.parameter(s).unfilled=參數未填
INSP.possible.callees=可能的被調用方
INSP.function.lacks.positional.argument=函數 ''{0}'' 缺乏位置實參
INSP.expected.dict.got.type=應為字典，得到的是 {0}
INSP.expected.iterable.got.type=應為迭代，得到的是 {0}

# PyMethodParametersInspection
INSP.NAME.problematic.first.parameter=不正確的第一個參數
INSP.must.have.first.parameter=方法必須有第一個參數，通常叫做 ''{0}''
INSP.probably.mistyped.self=你不是指 'self' 嗎？
INSP.usually.named.self=方法的第一個參數通常叫做 'self'
INSP.usually.named=這些方法的第一個參數通常叫做 ''{0}''
INSP.first.param.must.not.be.tuple=非 static 方法的第一個參數不能是元組

# PyNestedDecoratorsInspection
INSP.NAME.nested.decorators=裝飾器嵌套有問題
INSP.decorator.receives.unexpected.builtin=此裝飾器不會收到所預期的可調用；內建裝飾器返回特殊物件

# PyRedeclarationInspection
INSP.NAME.redeclaration=無用法的重新宣告名稱
INSP.redeclared.name=已重新宣告上文定義的無用法的 ''{0}''

# PyUnresolvedReferencesInspection
INSP.try.except.import.error=包含 ''except ImportError'' 的 try 塊中的 ''{0}'' 也應在 except 塊中定義
INSP.unused.import.statement=未使用的 import 語句 <code>#ref</code>

# PyInterpreterInspection
INSP.NAME.invalid.interpreter=無效的解釋器
INSP.interpreter.pipenv.interpreter.associated.with.another.project=Pipenv 解釋器與另一個專案關聯: ''{0}''
INSP.interpreter.pipenv.interpreter.associated.with.another.module=Pipenv 解釋器與另一個模組關聯: ''{0}''
INSP.interpreter.pipenv.interpreter.not.associated.with.any.project=Pipenv 解釋器未與任何專案關聯
INSP.interpreter.pipenv.interpreter.not.associated.with.any.module=Pipenv 解釋器未與任何模組關聯
INSP.interpreter.invalid.python.interpreter.selected.for.project=為專案選擇的 Python 解釋器無效
INSP.interpreter.invalid.python.interpreter.selected.for.module=為模組選擇的 Python 解釋器無效
INSP.interpreter.python.has.reached.its.end.of.life.and.is.no.longer.supported.in.pycharm=Python {0} 已達到壽命終止日期，不再受到 PyCharm 支援
INSP.interpreter.python.has.reached.its.end.life.and.is.no.longer.supported.in.python.plugin=Python {0} 已達到壽命終止日期，不再受到 Python 延伸模組支援
INSP.interpreter.no.python.interpreter.configured.for.project=未為專案設定 Python 解釋器
INSP.interpreter.no.python.interpreter.configured.for.module=未為模組設定 Python 解釋器

# ReturnValueFromInitInspection
INSP.NAME.init.return=返回值的 __init__ 方法
INSP.cant.return.value.from.init=無法從 __init__ 返回值

# PyUnreachableCodeInspection
INSP.NAME.unreachable.code=不可到達的程式碼
INSP.unreachable.code=此程式碼無法存取

# PyStringFormatInspection
INSP.NAME.str.format=字串格式化操作出錯
INSP.format.requires.no.mapping=格式無需映射
INSP.str.format.key.has.no.argument=鍵 ''{0}'' 沒有相應的實參
INSP.str.format.unexpected.argument.type=意外類型 {0}
INSP.too.few.keys=映射鍵太少
INSP.no.format.specifier.char=缺少格式說明符
INSP.format.requires.mapping=格式需要映射
INSP.too.many.args.for.fmt.string=格式字串的實參太多
INSP.too.few.args.for.fmt.string=格式字串的實參太少
INSP.incompatible.options=塊 "{0}" 中的格式選項不相容
INSP.unsupported.format.character=格式字符 ''{0}'' 不受支援
INSP.manual.to.auto.field.numbering=無法從手動欄位規範切換到自動欄位編號
INSP.auto.to.manual.field.numbering=無法從自動欄位編號切換到手動欄位規範
INSP.str.format.unsupported.format.character.b=不受支援的格式字符 'b'
INSP.str.format.can.not.use.star.in.formats.when.using.mapping=使用映射時，格式中不能使用 '*'

# PyMethodOverridingInspection
INSP.NAME.method.over=方法簽名與被覆蓋方法的簽名不符合
INSP.signature.mismatch=方法 ''{0}'' 的簽名與類 ''{1}'' 中基方法的簽名不符合

# PyInitNewSignatureInspection
INSP.NAME.new.init.signature=__new__ 和 __init__ 的簽名不相容
INSP.new.incompatible.to.init=簽名不相容 __init__
INSP.init.incompatible.to.new=簽名不相容 __new__

# PyTrailingSemicolonInspection
INSP.NAME.trailing.semicolon=語句中的禁止尾隨分號


# PyUnboundLocalVariableInspection
INSP.NAME.unbound=未綁定的局部變數
INSP.unbound.local.variable=局部變數 ''{0}'' 可能在賦值前引用
INSP.unbound.nonlocal.variable=非局部變數 ''{0}'' 必須綁定在外部函數範圍中
INSP.unbound.name.undefined=可以未定義名稱 ''{0}''
INSP.unbound.function.too.large=函數 ''{0}'' 太大，無法分析

# PyListCreationInspection
INSP.NAME.list.creation=非最優列表宣告
INSP.list.creation.this.list.creation.could.be.rewritten.as.list.literal=此列表創建可以作為列表文字覆寫

# PyTupleAssignmentBalanceInspection
INSP.NAME.tuple.assignment.balance=元組賦值 balance 不正確
INSP.tuple.assignment.balance.only.one.starred.expression.allowed.in.assignment=賦值中僅允許帶一個星號的表達式
INSP.tuple.assignment.balance.need.more.values.to.unpack=需要更多值才能解包
INSP.tuple.assignment.balance.too.many.values.to.unpack=值太多，無法解包

# PyClassicStyleClassInspection
INSP.NAME.classic.class.usage=經典樣式類用法
INSP.classic.class.usage.old.style.class=老式類
INSP.classic.class.usage.old.style.class.ancestors=老式類，因為它所繼承的所有類都是老式類


# PyExceptionInheritance
INSP.NAME.exception.not.inherit=不從標準 'Exception' 類繼承異常
INSP.exception.inheritance.exception.does.not.inherit.from.base.exception.class=異常未從 'Exception' 基類繼承

# PyDefaultArgumentInspection
INSP.NAME.default.argument=預設實參是可變實參
INSP.default.arguments.default.argument.value.mutable=預設實參值可變

# PyDocstringTypesInspection
INSP.NAME.docstring.types=docstring 中的類型與推斷的類型不符合
INSP.docstring.types.dynamically.inferred.type.does.not.match.specified.type=動態推斷的類型 ''{0}'' 與指定的類型 ''{1}'' 不符合

# PyStatementEffectInspection
INSP.NAME.statement.effect=語句無效
INSP.statement.effect.statement.seems.to.have.no.effect=語句似乎無效
INSP.statement.effect.statement.having.no.effect.can.be.replaced.with.function.call=語句似乎無效，取代為函數調用即可生效

# PySuperArgumentsInspection
INSP.NAME.wrong.super.arguments=錯誤的調用 super 實參
INSP.class.is.not.subtype.of.class=''{0}'' 不是 ''{1}'' 的實例或子類

# PyNonAsciiCharInspection
INSP.NAME.non.ascii=檔案包含非 ASCII 字符
INSP.non.ascii.char.non.ascii.character.in.file.but.no.encoding.declared=檔案中有非 ASCII 字符 ''{0}''，但未宣告編碼

# PyMandatoryEncodingInspection
INSP.NAME.mandatory.encoding=未為檔案指定編碼
INSP.mandatory.encoding.label.encoding.comment.format=編碼註釋格式：
INSP.mandatory.encoding.label.select.default.encoding=選擇預設編碼:
INSP.mandatory.encoding.checkbox.enable.in.python.3=在 Python 3+ 中啟用
INSP.mandatory.encoding.no.encoding.specified.for.file=未為檔案指定編碼

# PyTupleItemAssignmentInspection
INSP.NAME.tuple.item.assignment=禁止元組條目賦值
INSP.tuples.never.assign.items=元組不支持專案賦值

# PyPropertyAccessInspection
INSP.NAME.property.access=不當的屬性存取
INSP.property.cannot.be.set=無法設定屬性 ''{0}''
INSP.property.cannot.be.read=無法讀取屬性 ''{0}''
INSP.property.cannot.be.deleted=無法刪除屬性 ''{0}''

# PyPropertyDefinitionInspection
INSP.NAME.property.definition=不正確的屬性定義
INSP.doc.param.should.be.str=doc 參數應為字串
INSP.strange.arg.want.callable=奇怪實參；應為可調用對象
INSP.func.property.name.mismatch=函數和裝飾器的名稱不符合；未創建屬性存取器
INSP.getter.return.smth=Getter 應返回或生成某些內容
INSP.setter.should.not.return=setter 不應返回值
INSP.deleter.should.not.return=刪除程序不應返回值
INSP.getter.signature.advice=Getter 簽名應為 (self)
INSP.setter.signature.advice=Setter 簽名應為 (self, value)
INSP.deleter.signature.advice=刪除程序簽名應為 (self)

# PyProtectedMemberInspection
INSP.NAME.protected.member=存取類或模組的 protected 成員
INSP.protected.member.access.to.protected.member.of.class=保護成員的存取類 {0}
INSP.protected.member.access.to.protected.member.of.module=存取模組的 protected 成員 {0}
INSP.protected.member.name.not.declared.in.all=__all__ 中未宣告 ''{0}''

# PyOldStyleClassesInspection
INSP.NAME.oldstyle.class=老式類包含新式類功能
INSP.oldstyle.class.slots=老式類包含 __slots__ 定義
INSP.oldstyle.class.getattribute=老式類包含 __getattribute__ 定義
INSP.oldstyle.class.super=老式類包含對 super 方法的調用

# PyCompatibilityInspection
INSP.NAME.compatibility=程式碼與特定的 Python 版本不相容
INSP.compatibility.this.syntax.available.only.since.py3=此語法僅自 Python 3 起可用
INSP.compatibility.check.for.compatibility.with.python.versions=檢查與 python 版本的兼容性：
INSP.compatibility.inspection.unsupported.feature.prefix=Python {0,choice,1#版本|2#版本} {1} {0,choice,1#|2#}不{2}
INSP.compatibility.feature.support.variable.annotations=支援變數註解
INSP.compatibility.feature.support.this.syntax=支援此語法
INSP.compatibility.feature.have.module.builtins=具有模組內建物件
INSP.compatibility.feature.have.module.builtin=具有模組 __builtin__
INSP.compatibility.feature.support.starred.expressions.as.assignment.targets=支援將帶星號的表達式作為賦值目標
INSP.compatibility.feature.support.starred.expressions.in.tuples.lists.and.sets=支援在元組、列表和集合中使用帶星號的表達式
INSP.compatibility.feature.support.unpacking.without.parentheses.in.return.statements=支援在 return 語句中沒有圓括號的情況下解包
INSP.compatibility.feature.support.unpacking.without.parentheses.in.yield.statements=支援在 yield 語句中沒有圓括號的情況下解包
INSP.compatibility.feature.support.starred.expressions.in.dicts=支援在字典中使用帶星號的表達式
INSP.compatibility.feature.support.diamond.operator=支援 <>，請改用 use !=
INSP.compatibility.feature.support.matrix.multiplication.operators=支援矩陣乘法運算符
INSP.compatibility.feature.support.long.integer.literal.suffix=支援尾隨 ''{0}''
INSP.compatibility.feature.support.old.style.octal.literals=支援此語法。八進制文字需要使用 '0o' 前綴
INSP.compatibility.feature.support.underscores.in.numeric.literals=支援在數值文字中使用下劃線
INSP.compatibility.feature.support.string.literal.prefix=支援 ''{0}'' 前綴
INSP.compatibility.feature.allow.to.mix.bytes.and.non.bytes.literals=允許混合字節文字和非字節文字
INSP.compatibility.feature.support.this.syntax.in.list.comprehensions=支援在列表推導式中使用此語法
INSP.compatibility.feature.support.raise.with.no.arguments.outside.except.block=支援此語法。只能在 except 塊中使用不帶實參的 raise
INSP.compatibility.feature.support.backquotes=支援反引號，請改用 repr()
INSP.compatibility.feature.support.print.statement=支援此語法。print 語句已取代為 print() 函數
INSP.compatibility.feature.support.super.without.arguments=支援此語法。在 Python 2 中 super() 應有實參
INSP.compatibility.py35.does.not.support.yield.inside.async.functions=Python 3.5 版不支持在 async 函數中使用 'yield'
INSP.compatibility.feature.support.yield.from=支援此語法。自 Python 3.3 起可以委託給子生成器；改為對子生成器使用顯式迭代。
INSP.compatibility.pre35.versions.do.not.allow.return.with.argument.inside.generator=Python 3.3 以下的版本不允許在生成器內部使用帶實參的 'return'。
INSP.compatibility.feature.support.ellipsis.outside.slices=支援在序列切片外部使用 '…'
INSP.compatibility.feature.have.nonlocal.keyword=具有非本地關鍵字
INSP.compatibility.keyword.argument.repeated=關鍵字實參重複
INSP.compatibility.feature.allow.keyword.arguments.after.kwargs=允許在 ** 表達式後面使用關鍵字實參
INSP.compatibility.feature.allow.duplicate.kwargs=允許重複的 ** 表達式
INSP.compatibility.feature.allow.duplicate.positional.varargs=允許重複的 * 表達式
INSP.compatibility.feature.allow.positional.arguments.after.expression=允許在 * 表達式後面使用位置實參
INSP.compatibility.positional.argument.after.keyword.argument=位置實參位於關鍵字實參後面
INSP.compatibility.positional.argument.after.kwargs=位置實參位於 ** 表達式後面
INSP.compatibility.feature.allow.trailing.comma.after.kwargs=允許在 ** 表達式後面使用尾隨逗號
INSP.compatibility.feature.allow.trailing.comma.after.positional.vararg=允許在 * 表達式後面使用尾隨逗號
INSP.compatibility.py35.does.not.support.async.inside.comprehensions.and.generator.expressions=Python 3.5 版不支持在推導式和生成器表達式內部使用 'async'
INSP.compatibility.py35.does.not.support.await.inside.comprehensions=Python 3.5 版不支持在推導式內部使用 'await'
INSP.compatibility.feature.support.positional.only.parameters=支援純位置參數
INSP.compatibility.support.equality.signs.in.fstrings=支援在 f-string 中使用等號
INSP.compatibility.feature.support.assignment.expressions=支援賦值表達式
INSP.compatibility.feature.support.continue.inside.finally.clause=支援在 'finally'子句內部使用 'continue'
INSP.compatibility.feature.support.arbitrary.expressions.as.decorator=支援任意表達式作為裝飾器
INSP.compatibility.feature.have.type.long=類型為 long。請改用 int。
INSP.compatibility.feature.have.method=具有方法 {0}
INSP.compatibility.feature.have.module=具有模組 {0}
INSP.compatibility.feature.allow.async.and.await.as.names=允許使用 'async' 和 'await' 作為名稱
INSP.compatibility.old.dict.methods.not.available.in.py3=dict.iterkeys()、dict.iteritems() 和 dict.itervalues() 方法在 Python 3 中不可用
INSP.compatibility.basestring.type.not.available.in.py3=basestring 類型在 Python 3 中不可用
INSP.compatibility.new.union.syntax.not.available.in.earlier.version=允許將聯合類型編寫為 X | Y

# PyUnnecessaryBackslashInspection
INSP.NAME.unnecessary.backslash=不必要的反斜杠
INSP.unnecessary.backslash.unnecessary.backslash.in.expression=表達式中有不必要的反斜杠

# PySingleQuotedDocstringInspection
INSP.NAME.single.quoted.docstring=帶單引號的 docstring
INSP.message.single.quoted.docstring=應對 docstring 使用帶三個雙引號的字串。

# PyMissingConstructorInspection
INSP.NAME.missing.super.constructor=缺少對超類 '__init__' 的調用
INSP.missing.super.constructor.message=缺少對超類 __init__ 的調用

# PySetFunctionToLiteralInspection
INSP.NAME.set.function.to.literal=函數調用可以取代為集合文字

# PyDecoratorInspection
INSP.NAME.decorator.outside.class=在類的外部使用了特定於類的裝飾器
INSP.decorators.method.only.decorator.on.method.outside.class=方法上的裝飾器 {0} 位於類外部

# PyPackageRequirementsInspection
INSP.NAME.requirements=未滿足的軟體套件要求
INSP.requirements.column.name.ignore.packages=忽略軟體套件
INSP.requirements.ignore.packages.label=已忽略的軟體套件:
INSP.requirements.package.requirements.not.satisfied=不滿足軟體套件{1,choice,1#要求|2#要求} {0} {1,choice,1#|2#}
INSP.requirements.package.containing.module.not.listed.in.project.requirements=專案要求中未列出包含模組 ''{0}'' 的軟體套件
QFIX.NAME.install.requirements=安裝{0,choice,1#要求|2#要求}
QFIX.NAME.ignore.requirements=忽略{0,choice,1#要求|2#要求}

# PyClassHasNoInitInspection
INSP.NAME.class.has.no.init=類沒有 `__init__` 方法
INSP.class.has.no.init=類沒有 __init__ 方法

#PyNoneFunctionAssignmentInspection
INSP.NAME.none.function.assignment=分配不返回任何內容的函數調用
INSP.none.function.assignment=函數 ''{0}'' 不返回任何內容

# PyTestParametrizedInspection
INSP.NAME.pytest-parametrized=@pytest.mark.parametrize 中的不正確實參

# PyUnusedLocalInspection
INSP.NAME.unused=未使用的局部符號
INSP.unused.locals.parameter.isnot.used=未使用參數 ''{0}'' 的值
INSP.unused.locals.local.variable.isnot.used=未使用局部變數 ''{0}'' 的值
INSP.unused.locals.replace.with.wildcard=取代為 _
INSP.unused.locals.local.function.isnot.used=未使用本地函數 ''{0}''
INSP.unused.locals.local.class.isnot.used=未使用局部類 ''{0}''

INSP.unused.locals.ignore.variables.starting.with=忽略以 '_' 開頭的變數
INSP.unused.locals.ignore.range.iteration.variables=忽略範圍迭代變數
INSP.unused.locals.ignore.lambda.parameters=忽略 lambda 參數
INSP.unused.locals.ignore.variables.used.in.tuple.unpacking=忽略元組解包中使用的變數

# PyChainedComparsonsInspection
INSP.NAME.chained.comparisons=過於複雜的鏈式比較
INSP.chained.comparisons.ignore.statements.with.constant.in.the.middle=忽略中間有常數的語句
INSP.simplify.chained.comparison=簡化鏈式比較

# PyAugmentAssignmentInspection
INSP.NAME.augment.assignment=賦值可以取代為增強賦值
INSP.assignment.can.be.replaced.with.augmented.assignment=賦值可以取代為增強賦值

# PyBroadExceptionInspection
INSP.NAME.too.broad.exception.clauses=不明確的異常子句
INSP.too.broad.exception.clause=異常子句過於寬泛

# PyByteLiteralInspection
INSP.NAME.byte.literal=字節文字包含非 ASCII 字符
INSP.byte.literal.contains.illegal.characters=字節文字包含的字符數超過 255 個

# PyComparisonWithNoneInspection
INSP.NAME.comparison.with.none=使用相等運算符與 None 進行比較
INSP.comparison.with.none.performed.with.equality.operators=使用相等運算符執行了與 None 的比較

# PyDictCreationInspection
INSP.NAME.dict.creation=通過字典文字可以覆寫字典創建
INSP.dict.creation.this.dictionary.creation.could.be.rewritten.as.dictionary.literal=字典創建可以作為字典文字進行覆寫

# PyDictDuplicateKeysInspection
INSP.NAME.duplicate.keys=字典包含重複鍵
INSP.duplicate.keys.dictionary.contains.duplicate.keys=字典包含重複鍵 ''{0}''

# PyFromFutureImportInspection
INSP.NAME.from.future.import=位置不當的 from __future__ import
INSP.from.future.import.from.future.imports.must.occur.at.beginning.file=從 __future__ 匯入必須在檔案開頭處進行

# PyMethodFirstArgAssignmentInspection
INSP.NAME.first.arg.assign=此方法的第一個實參被重新賦值
INSP.first.arg.assign.method.parameter.reassigned=方法參數 ''{0}'' 已重新賦值

# PyMethodMayBeStaticInspection
INSP.NAME.method.may.be.static=方法未宣告為 static
INSP.method.may.be.static=方法 <code>#ref</code> 可能為 'static'

# PyAbstractClassInspection
INSP.NAME.abstract.class=類必須實作所有 abstract 方法
INSP.abstract.class.class.must.implement.all.abstract.methods=類 {0} 必須實作所有 abstract 方法

#PyAssignmentToLoopOrWithParameterInspection
INSP.NAME.assignment.to.loop.or.with.parameter=賦值給 'for' 迴圈或 'with' 語句參數
INSP.assignment.to.loop.or.with.parameter=已在上面的 ''for'' 迴圈或 ''with'' 語句中宣告變數 ''{0}''

# PyArgumentEqualDefaultInspection
INSP.NAME.argument.equal.default=函數實參等於預設參數值
INSP.argument.equals.to.default=實參等於預設參數值

#PyAsyncCallInspection
INSP.NAME.coroutine.is.not.awaited=未等待協同程序 ''{0}''
INSP.async.call=協同程序調用中缺少 `await` 語法

# PyAttributeOutsideInitInspection
INSP.NAME.attribute.outside.init=實例特性在 `__init__` 外部定義
INSP.attribute.outside.init=實例特性 {0} 在 __init__ 外部定義

# PyMissingOrEmptyDocstringInspection
INSP.NAME.missing.or.empty.docstring=缺失或空 docstring
INSP.no.docstring=缺失 docstring
INSP.empty.docstring=空 docstring

# PyUnresolvedReferencesInspection
INSP.NAME.unresolved.refs=未解析的引用
INSP.unresolved.refs.module.not.found=找不到模組 ''{0}''
INSP.unresolved.refs.unresolved.reference=未解析的引用 ''{0}''
INSP.unresolved.refs.unresolved.attribute.for.class=類 ''{1}'' 的未解析的特性引用 ''{0}''
INSP.unresolved.refs.cannot.find.reference.in.type=在 ''{1}'' 中找不到引用 ''{0}''
INSP.unresolved.refs.class.object.has.no.attribute=''{0}'' 物件沒有特性 ''{1}''
INSP.unresolved.refs.import.resolves.to.its.containing.file=匯入解析為其包含檔案
INSP.unresolved.refs.class.does.not.define.operator=類 ''{0}'' 未定義 ''{1}''，所以不能對其實例使用 ''{2}'' 運算符
INSP.unresolved.refs.column.name.ignore.references=忽略引用
INSP.unresolved.refs.ignore.references.label=已忽略的引用:
unresolved.docstring.param.reference=函數 ''{0}'' 沒有參數 ''{1}''
unresolved.import.reference=沒有名稱為 ''{0}'' 的模組

filetype.python.stub.description=Python 存根

# PyRedundantParenthesesInspection
INSP.NAME.redundant.parentheses=冗餘圓括號
INSP.redundant.parens.ignore.empty.lists.of.base.classes=忽略基類的空列表
INSP.redundant.parens.ignore.tuples=忽略元組
INSP.redundant.parens.ignore.argument.of.operator=忽略 % 運算符的實參

# PySimplifyBooleanCheckInspection
INSP.NAME.check.can.be.simplified=冗餘布爾變數檢查
INSP.expression.can.be.simplified=可以簡化表達式
INSP.simplify.boolean.check.ignore.comparison.to.zero=忽略與零的比較

# PyIncorrectDocstringInspection
INSP.NAME.incorrect.docstring=不正確的 docstring
INSP.missing.parameter.in.docstring=docstring 中的缺失參數 {0}
INSP.unexpected.parameter.in.docstring=docstring 中的意外參數 {0}

# PyExceptClausesOrderInspection
INSP.NAME.bad.except.clauses.order=順序錯誤的 'except' 子句
INSP.bad.except.exception.class.already.caught=已捕獲異常類 ''{0}''
INSP.bad.except.superclass.of.exception.class.already.caught=已捕獲異常類 ''{1}'' 的超類 ''{0}''

#PyGlobalUndefinedInspection
INSP.NAME.global.undefined=全域變數並非在模組級別定義
INSP.global.variable.undefined=全域變數 ''{0}'' 在模組級別未定義

#PyDataclassInspection
INSP.NAME.dataclass.definition.and.usages=無效的資料類定義和用法
INSP.dataclasses.operator.not.supported.between.instances.of.class=''{1}'' 的實例之間不支持 ''{0}''
INSP.dataclasses.operator.not.supported.between.instances.of.classes=''{1}'' 和 ''{2}'' 的實例之間不支持 ''{0}''
INSP.dataclasses.object.could.have.no.attribute.because.it.declared.as.init.only=''{0}'' 物件不能有特性 ''{1}''，因為它被宣告為僅初始化
INSP.dataclasses.object.attribute.read.only=''{0}'' 物件特性 ''{1}'' 為唯讀特性
INSP.dataclasses.eq.must.be.true.if.order.true=如果 'order' 為 true，則 'eq' 必須為 true
INSP.dataclasses.argument.ignored.if.class.already.defines.method=如果類已定義 ''{1}'' 方法，則忽略 ''{0}''
INSP.dataclasses.order.argument.should.be.false.if.class.defines.one.of.order.methods=如果類定義一種 order 方法，則 'order' 應為 False
INSP.dataclasses.frozen.attribute.should.be.false.if.class.defines.setattr.or.delattr=如果類定義 '__setattr__' 或 '__delattr__'，則 'frozen' 應為 False
INSP.dataclasses.unsafe.hash.attribute.should.be.false.if.class.defines.hash=如果類定義 '__hash__'，則 'unsafe_hash' 應為 False
INSP.dataclasses.frozen.dataclasses.can.not.inherit.non.frozen.one=凍結的資料類不能繼承非凍結的資料類，非凍結的資料類也不能繼承凍結的資料類
INSP.dataclasses.method.is.ignored.if.class.already.defines.parameter=如果類已定義 ''{1}'' 參數，則忽略 ''{0}''
INSP.dataclasses.hash.ignored.if.class.already.defines.cmp.or.order.or.frozen.parameters=如果類已定義 'cmp/order' 和 'frozen' 參數，則忽略 '__hash__'
INSP.dataclasses.mutable.attribute.default.not.allowed.use.default.factory=不允許使用可變的預設 ''{0}''。使用 ''default_factory''
INSP.dataclasses.attribute.default.is.set.using.attr.ib=使用 'attr.ib()' 設定預設值
INSP.dataclasses.attribute.default.set.using.method=使用 ''{0}'' 設定預設值
INSP.dataclasses.method.should.take.only.n.parameter=''{0}'' 應僅使用 {1} 個{1,choice, 1#參數|2#參數}
INSP.dataclasses.attribute.lacks.type.annotation=特性 ''{0}'' 缺少類型註解
INSP.dataclasses.cannot.specify.both.default.and.factory=無法同時指定 'default' 和 'factory'
INSP.dataclasses.attribute.useless.until.post.init.declared=只有宣告 ''__post_init__'' 之後，特性 ''{0}'' 才有用
INSP.dataclasses.field.cannot.have.default.factory=欄位不能有預設工廠
INSP.dataclasses.cannot.specify.both.default.and.default.factory=無法同時指定 'default' 和 'default_factory'
INSP.dataclasses.post.init.would.not.be.called.until.init.parameter.set.to.true=只有在 'init' 參數設定為 True 後，才會調用 '__post_init__'
INSP.dataclasses.post.init.should.take.all.init.only.variables.including.inherited.in.same.order.they.defined='__post_init__' 應按照定義的順序接受所有僅初始化變數(包括繼承的變數)
INSP.dataclasses.post.init.should.take.all.init.only.variables.in.same.order.they.defined='__post_init__' 應按照定義的順序接受所有僅初始化變數
INSP.dataclasses.attrs.post.init.would.not.be.called.until.init.parameter.set.to.true=只有在 'init' 參數設定為 True 後，才會調用 '__attrs_post_init__'
INSP.dataclasses.attrs.post.init.should.not.take.any.parameters.except.self='__attrs_post_init__' 不應接受除 'self' 以外的任何參數
INSP.dataclasses.method.should.be.called.on.dataclass.instances.or.types=應對資料類實例或類型調用 ''{0}'' 方法
INSP.dataclasses.method.should.be.called.on.dataclass.instances=應對資料類實例調用 ''{0}'' 方法
INSP.dataclasses.method.should.be.called.on.attrs.instances=應對特性實例調用 ''{0}'' 方法
INSP.dataclasses.method.should.be.called.on.attrs.types=應對特性類型調用 ''{0}'' 方法

# PyHighlightingAnnotator
INSP.python.trailing.suffix.not.support=Python 不支持尾隨 ''{0}''

# PyDeprecationInspection
INSP.NAME.deprecated.function.class.or.module=棄用的函數、類或模組
INSP.deprecation.abc.decorator.deprecated.use.alternative=自 Python 3.3 起已棄用 ''{0}''。改為使用 ''{1}'' 和 ''{2}''

# PyDunderSlotsInspection
INSP.NAME.dunder.slots=具有 '__slots__' 定義的無效類用法
INSP.dunder.slots.name.in.slots.conflicts.with.class.variable=__slots__ 中的 ''{0}'' 與類變數衝突
INSP.dunder.slots.class.object.attribute.read.only=''{0}'' 物件特性 ''{1}'' 為唯讀特性

# PyFinalInspection
INSP.NAME.final.classes.methods.and.variables=無效的 final 類、方法和變數用法
INSP.final.super.classes.are.marked.as.final.and.should.not.be.subclassed={0} {1,choice,1#|2#}被標記為 ''@final''，不應為子類
INSP.final.final.should.be.placed.on.first.overload='@final' 應放在第一個多載中
INSP.final.method.marked.as.final.should.not.be.overridden=''{0}'' 被標記為 ''@final''，不應被覆寫
INSP.final.final.should.be.placed.on.implementation='@final' 應放在實作中
INSP.final.final.could.not.be.mixed.with.abstract.decorators='Final' 不能與抽象裝飾器混用
INSP.final.final.class.could.not.contain.abstract.methods='Final' 類不能包含抽象方法
INSP.final.no.need.to.mark.method.in.final.class.as.final=無需將 'Final' 類中的方法標記為 '@final'
INSP.final.non.method.function.could.not.be.marked.as.final=非方法函數不能被標記為 '@final'
INSP.final.final.could.not.be.used.in.annotations.for.function.parameters=不能在函數參數註解中使用 'Final'
INSP.final.final.could.not.be.used.in.annotation.for.function.return.value=不能在函數返回值的註解中使用 'final'
INSP.final.if.assigned.value.omitted.there.should.be.explicit.type.argument.to.final=如果忽略所賦之值，則應有一個顯式類型實參為 'Final'
INSP.final.final.name.should.be.initialized.with.value='Final' 名稱應使用值進行初始化
INSP.final.already.declared.name.could.not.be.redefined.as.final=已宣告的名稱無法被重新定義為 'Final'
INSP.final.either.instance.attribute.or.class.attribute.could.be.type.hinted.as.final=實例特性或類特性可以有類型提示 'Final'
INSP.final.final.attribute.could.not.be.overridden=''{0}'' 為 ''Final''，不能被覆寫
INSP.final.final.attribute.should.be.declared.in.class.body.or.init='Final' 特性應在類主體或 '__init__' 中宣告
INSP.final.final.target.could.not.be.reassigned=''{0}'' 為 ''Final''，不能被重新賦值
INSP.final.final.could.only.be.used.as.outermost.type='Final' 只能用作最外側的類型
INSP.final.final.could.not.be.used.inside.loop=不能在迴圈內部使用 'Final'

# PyInconsistentIndentationInspection
INSP.NAME.inconsistent.indentation=縮排不一致
INSP.inconsistent.indentation.mix.tabs.spaces=縮排不一致: 混用制表符和空格
INSP.inconsistent.indentation.previous.line.used.tabs.this.line.uses.spaces=縮排不一致: 上一行使用制表符，此行使用空格
INSP.inconsistent.indentation.previous.line.used.spaces.this.line.uses.tabs=縮排不一致: 上一行使用空格，此行使用制表符

# PyMissingTypeHintsInspection
INSP.NAME.missing.type.hints=缺少函數定義的類型提示
INSP.missing.type.hints.type.hinting.missing.for.function.definition=函數定義缺少類型提示
INSP.missing.type.hints.add.type.hints=添加類型提示
INSP.missing.type.hints.add.type.hints.for=為 ''{0}'' 添加類型提示
INSP.missing.type.hints.checkbox.only.when.types.are.known=僅當類型已知時(從執行時收集或推斷)

# PyOverloadsInspection
INSP.NAME.overloads.in.regular.python.files=一般 Python 檔案中的多載
INSP.overloads.series.overload.decorated.methods.should.always.be.followed.by.implementation=一連串 @overload-decorated 方法後面始終應跟隨非 @overload-ed 的實作
INSP.overloads.series.overload.decorated.functions.should.always.be.followed.by.implementation=一連串 @overload-decorated 函數後面始終應跟隨非 @overload-ed 的實作
INSP.overloads.this.method.overload.signature.not.compatible.with.implementation=此 @overload-decorated 方法的簽名與實作不相容
INSP.overloads.this.function.overload.signature.not.compatible.with.implementation=此 @overload-decorated 函數的簽名與實作不相容

# PyPep8NamingInspection
INSP.NAME.pep8.naming=PEP 8 命名慣例違規
INSP.pep8.naming.column.name.excluded.base.classes=已排除的基類
INSP.pep8.naming.column.name.ignored.errors=已忽略的錯誤
QFIX.NAME.ignore.errors.like.this=忽略此類錯誤
INSP.pep8.naming.class.names.should.use.camelcase.convention=類名應使用駝峰式命名法慣例
INSP.pep8.naming.function.name.should.be.lowercase=函數名稱應小寫
INSP.pep8.naming.argument.name.should.be.lowercase=實參名稱應小寫
INSP.pep8.naming.variable.in.function.should.be.lowercase=函數中的變數應小寫
INSP.pep8.naming.constant.variable.imported.as.non.constant=常數變數作為非常數匯入
INSP.pep8.naming.lowercase.variable.imported.as.non.lowercase=小寫變數作為非小寫匯入
INSP.pep8.naming.camelcase.variable.imported.as.lowercase=駝峰式命名法變數作為小寫匯入
INSP.pep8.naming.camelcase.variable.imported.as.constant=駝峰式命名法變數作為常數匯入

# PyProtocolInspection
INSP.NAME.protocol.definition.and.usages=無效的協議定義和用法
INSP.protocol.all.bases.protocol.must.be.protocols=協議的所有基礎必須為協議
INSP.protocol.only.runtime.checkable.protocols.can.be.used.with.instance.class.checks=僅 @runtime_checkable 協議可以與實例和類檢查一起使用
INSP.protocol.newtype.cannot.be.used.with.protocol.classes=NewType 不能與協議類一起使用
INSP.protocol.element.type.incompatible.with.protocol=''{0}'' 的類型與 ''{1}'' 不相容

# PyShadowingBuiltinsInspection
INSP.NAME.shadowing.builtins=隱藏內建名稱
INSP.shadowing.builtins.shadows.built.in.name=隱藏內建名稱 ''{0}''
INSP.shadowing.builtins.column.name.ignore.built.ins=忽略內建物件
INSP.shadowing.builtins.ignore.built.ins.label=已忽略的內建物件:
QFIX.NAME.ignore.shadowed.built.in.name=忽略有陰影的內建名稱
QFIX.ignore.shadowed.built.in.name=忽略隱藏的內建名稱 "{0}"

# PyTypeCheckerInspection
INSP.NAME.type.checker=錯誤類型
INSP.type.checker.expected.type.got.type.instead=應為類型 ''{0}''，但實際為 ''{1}''
INSP.type.checker.expected.to.return.type.got.no.return=應返回 ''{0}''，但沒有返回任何內容
INSP.type.checker.init.should.return.none=__init__ 應返回 None
INSP.type.checker.type.does.not.have.expected.attribute=類型 ''{0}'' 沒有預期的{1, choice,1#特性|2#特性} {2}
INSP.type.checker.only.concrete.class.can.be.used.where.matched.protocol.expected=在應為 ''{0}'' (符合的泛型類型 ''{1}'')協議的地方，只能使用一個具體類
INSP.type.checker.only.concrete.class.can.be.used.where.protocol.expected=在應為 ''{0}'' 協議的地方，只能使用一個具體類
INSP.type.checker.expected.matched.type.got.type.instead=應為類型 ''{0}'' (符合的泛型類型 ''{1}'')，但實際為 ''{2}''
INSP.type.checker.unexpected.types.prefix=意外類型:
INSP.type.checker.expected.types.prefix=可能的類型:

# PyTypedDictInspection
INSP.NAME.typed.dict=無效的 TypedDict 定義和用法
INSP.typeddict.typeddict.key.must.be.string.literal.expected.one=TypedDict 鍵必須為字串文字；應為({0})之一
INSP.typeddict.typeddict.has.no.key=TypedDict "{0}" 沒有鍵 ''{1}''
INSP.typeddict.typeddict.has.no.keys=TypedDict "{0}" 沒有鍵({1})
INSP.typeddict.first.argument.has.to.match.variable.name=第一個實參必須符合變數名稱
INSP.typeddict.typeddict.cannot.inherit.from.non.typeddict.base.class=TypedDict 無法從非 TypedDict 基類繼承
INSP.typeddict.specifying.metaclass.not.allowed.in.typeddict=TypedDict 中不允許指定元類
INSP.typeddict.cannot.overwrite.typeddict.field.while.merging=合併時無法覆蓋 TypedDict 欄位 ''{0}''
INSP.typeddict.invalid.statement.in.typeddict.definition.expected.field.name.field.type=TypedDict 定義中的語句無效；應為 'field_name: field_type'
INSP.typeddict.right.hand.side.values.are.not.supported.in.typeddict=TypedDict 不支持右側值
INSP.typeddict.cannot.overwrite.typeddict.field=無法覆蓋 TypedDict 欄位
INSP.typeddict.key.cannot.be.deleted=無法刪除 TypedDict ''{1}'' 的鍵 ''{0}''
INSP.typeddict.this.operation.might.break.typeddict.consistency=此操作可能會破壞 TypedDict 一致性
INSP.typeddict.key.should.be.string=鍵應為字串
INSP.typeddict.value.must.be.type=值必須為某種類型
INSP.typeddict.total.value.must.be.true.or.false='total' 的值必須為 True 或 False
INSP.typeddict.typeddict.cannot.have.key=TypedDict "{0}" 不能具有鍵 ''{1}''
INSP.typeddict.cannot.add.non.string.key.to.typeddict=無法向 TypedDict "{0}" 添加非字串鍵

# PyTypeHintsInspection
INSP.NAME.type.hints=無效的類型提示定義和用法
INSP.type.hints.builtin.cannot.be.parameterized.directly=無法直接參數化內建 ''{0}''
INSP.type.hints.invalid.type.self=無效的類型 'self'
INSP.type.hints.literal.must.have.at.least.one.parameter='Literal' 必須至少有一個參數
INSP.type.hints.annotated.must.be.called.with.at.least.two.arguments=必須至少使用兩個實參調用 'Annotated'
INSP.type.hints.type.specified.both.in.type.comment.and.annotation=同時在類型註釋和註解中指定了類型
INSP.type.hints.typevar.expression.must.be.always.directly.assigned.to.variable='TypeVar()' 表達式始終必須直接賦值給變數
INSP.type.hints.type.variables.must.not.be.redefined=不得重新定義類型變數
INSP.type.hints.typevar.expects.string.literal.as.first.argument='TypeVar()' 的第一個實參應為字串文字
INSP.type.hints.argument.to.typevar.must.be.string.equal.to.variable.name='TypeVar()' 的實參必須為字串，且該字串與被賦予該字串的變數名稱相同
INSP.type.hints.bivariant.type.variables.are.not.supported=不支持雙變數類型變數
INSP.type.hints.typevar.constraints.cannot.be.combined.with.bound=約束不能與 bound=… 結合使用
INSP.type.hints.single.typevar.constraint.not.allowed=不允許單個約束
INSP.type.hints.typevar.constraints.cannot.be.parametrized.by.type.variables=約束無法被類型變數參數化
INSP.type.hints.type.variables.cannot.be.used.with.instance.class.checks=類型變數不能與實例和類檢查一起使用
INSP.type.hints.type.cannot.be.used.with.instance.class.checks=''{0}'' 不能與實例和類檢查一起使用
INSP.type.hints.parameterized.generics.cannot.be.used.with.instance.class.checks=參數化泛型不能與實例和類檢查一起使用
INSP.type.hints.generics.should.be.specified.through.square.brackets=泛型應通過方括號指定
INSP.type.hints.cannot.inherit.from.plain.generic=不能從普通的 'Generic' 繼承
INSP.type.hints.cannot.inherit.from.generic.multiple.times=無法從 'Generic[…]' 多次繼承
INSP.type.hints.some.type.variables.are.not.listed.in.generic=某些類型變數({0})未在 ''Generic[{1}]'' 中列出
INSP.type.hints.illegal.literal.parameter=可以使用文字 int、字節和 unicode 字串、bool、枚舉值、None、其他文字類型或其他文字類型的類型別名參數化 'Literal'
INSP.type.hints.parameters.to.generic.must.all.be.type.variables='Generic[…]' 的參數必須全部為類型變數
INSP.type.hints.parameters.to.generic.must.all.be.unique='Generic[…]' 的參數必須全部唯一
INSP.type.hints.illegal.callable.format='Callable' 必須作為 'Callable[[arg, …], result]' 使用
INSP.type.hints.parameters.to.generic.types.must.be.types=泛型類型的參數必須為類型
INSP.type.hints.type.comment.cannot.be.matched.with.unpacked.variables=類型註釋不能與解包的變數相符合
INSP.type.hints.type.signature.has.too.few.arguments=類型簽名的實參太少
INSP.type.hints.type.signature.has.too.many.arguments=類型簽名的實參太多
INSP.type.hints.type.self.not.supertype.its.class=self ''{0}'' 的類型不是其類 ''{1}'' 的父類型
INSP.type.hints.non.self.attribute.could.not.be.type.hinted=非 self 特性不能有類型提示
INSP.type.hints.type.alias.must.be.used.as.standalone.type.hint='TypeAlias' 必須用作獨立的類型提示
INSP.type.hints.type.alias.must.be.immediately.initialized=類型別名必須立即初始化
INSP.type.hints.type.alias.must.be.top.level.declaration=類型別名必須是頂層宣告
INSP.type.hints.type.alias.cannot.be.parameterized=無法參數化 'TypeAlias'
QFIX.remove.function.annotations=移除函數註解
QFIX.replace.with.target.name=取代為目標名稱
QFIX.remove.generic.parameters=移除泛型參數
QFIX.replace.with.square.brackets=取代為方括號
QFIX.surround.with.square.brackets=用方括號環繞
QFIX.remove.square.brackets=移除方括號
QFIX.replace.with.typing.alias=取代為類型別名
QFIX.remove.type.comment=移除類型註釋
QFIX.remove.annotation=移除註解
QFIX.replace.with.type.name=取代為類型名稱
QFIX.replace.with.old.union.style=取代為舊式聯合

# PyInspectionsSuppressor
INSP.python.suppressor.suppress.for.function=對函數禁止
INSP.python.suppressor.suppress.for.class=對類禁止
INSP.python.suppressor.suppress.for.statement=對語句禁止

find.usages.unnamed=<unnamed>
find.usages.keyword.argument=關鍵字實參
find.usages.variable=變數
find.usages.imported.module.alias=已匯入的模組別名
find.usages.class=類
find.usages.function=函數
find.usages.method=方法
find.usages.parameter=參數

python.find.usages=尋找用法
python.find.usages.base.method.question=方法 {0} 覆寫類 {1} 的方法。\n\
要尋找基方法的用法嗎?
python.find.usages.usage.in.superclass.list=在超類列表中的用法
python.find.usages.usage.in.isinstance=在 isinstance() 中的用法
python.find.usages.untyped.probable.usage=(可能的)無類型用法
python.find.usages.usage.in.import.statement=在 import 語句中的用法

# PyPackagesInspection
INSP.NAME.relative.import=可疑的相對 import
INSP.relative.import.relative.import.outside.package=軟體套件外部的相對匯入

debugger.cleaning.signature.cache=正在清理動態收集類型的快取

INTN.category.python=Python
QFIX.add.from.future.import.annotations=Add 'from __future__ import annotations'