# suppress inspection "UnusedProperty" for whole file
## Language plugins
## used in org.jetbrains.plugins.gradle.documentation.GradleDocumentationProvider.findDoc
gradle.documentation.org.gradle.api.Project.apply.plugin.java.non-html=將 Java 編譯、測試和捆綁功能添加到專案中。它是其他許多 Gradle 延伸模組的基礎。
gradle.documentation.org.gradle.api.Project.apply.plugin.java=<p>將 Java 編譯、測試和捆綁功能添加到專案中。它是其他許多 Gradle 延伸模組的基礎。另請參閱<a class="xref" href="http://www.gradle.org/docs/current/userguide/tutorial_java_projects.html">第 7 章 <i>Java 快速入門</i></a>。</p><p>自動套用: java-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.groovy.non-html=添加了對建置 Groovy 專案的支援。
gradle.documentation.org.gradle.api.Project.apply.plugin.groovy=<p>添加 Groovy 專案建置支援。另請參閱<a class="xref" href="http://www.gradle.org/docs/current/userguide/tutorial_groovy_projects.html">第 9 章 <i>Groovy 快速入門</i></a>。</p><p>自動套用: java、groovy-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.scala.non-html=添加了對建置 Scala 專案的支援。
gradle.documentation.org.gradle.api.Project.apply.plugin.scala=<p>添加了對建置 Scala 專案的支援。</p><p>自動套用: java、scala-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.antlr.non-html=添加了對使用 Antlr 生成解析器的支援
gradle.documentation.org.gradle.api.Project.apply.plugin.antlr=<p>添加了對使用 <a class="ulink" href="http://www.antlr.org/" target="_top">Antlr</a> 生成解析器的支援。</p><p>自動套用: java</p>

## Integration plugins
gradle.documentation.org.gradle.api.Project.apply.plugin.application.non-html=添加了將 Java 專案作為命令行應用程式執行和捆綁的任務。
gradle.documentation.org.gradle.api.Project.apply.plugin.application=<p>添加了將 Java 專案作為命令行應用程式執行和捆綁的任務。</p><p>自動套用: java</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.ear.non-html=添加了對建置 J2EE 應用程式的支援。
gradle.documentation.org.gradle.api.Project.apply.plugin.ear=<p>添加了對建置 J2EE 應用程式的支援。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.jetty.non-html=將 Web 應用程式部署到嵌入在建置中的 Jetty Web 容器。
gradle.documentation.org.gradle.api.Project.apply.plugin.jetty=<p>將 Web 應用程式部署到嵌入在建置中的 Jetty Web 容器。另請參閱<a class="xref" href="http://www.gradle.org/docs/current/userguide/web_project_tutorial.html">第 10 章 <i>Web 套用程序快速入門</i></a>。</p><p>自動套用: war</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.maven.non-html=添加對發佈工件到 Maven 儲存庫的支援。
gradle.documentation.org.gradle.api.Project.apply.plugin.maven=<p>添加對發佈工件到 Maven 儲存庫的支援。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.osgi.non-html=添加了對建置 OSGi 捆綁包的支援。
gradle.documentation.org.gradle.api.Project.apply.plugin.osgi=<p>添加了對建置 OSGi 捆綁包的支援。</p><p>自動套用: java-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.war.non-html=添加了對裝配 Web 套用程序 WAR 檔案的支援。
gradle.documentation.org.gradle.api.Project.apply.plugin.war=<p>添加了對裝配 Web 套用程序 WAR 檔案的支援。另請參閱<a class="xref" href="http://www.gradle.org/docs/current/userguide/web_project_tutorial.html">第 10 章 <i>Web 套用程序快速入門</i></a>。</p><p>自動套用: java</p>

## Software development plugins
gradle.documentation.org.gradle.api.Project.apply.plugin.announce.non-html=將訊息發佈到您最喜愛的平台，例如 Twitter 或 Growl。
gradle.documentation.org.gradle.api.Project.apply.plugin.announce=<p>將訊息發佈到您最喜愛的平台，例如 Twitter 或 Growl。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.build-announcements.non-html=將建置生命周期中有趣事件的本地公告发送到桌面。
gradle.documentation.org.gradle.api.Project.apply.plugin.build-announcements=<p>將建置生命周期中有趣事件的本地公告发送到桌面。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.checkstyle.non-html=使用 Checkstyle 對專案的 Java 源文件執行品質檢查，並根據這些檢查生成報告。
gradle.documentation.org.gradle.api.Project.apply.plugin.checkstyle=<p>使用 <a class="ulink" href="http://checkstyle.sourceforge.net/index.html" target="_top">Checkstyle</a> 對專案的 Java 源文件執行品質檢查，並根據這些檢查生成報告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.codenarc.non-html=使用 CodeNarc 對專案的 Groovy 源文件執行品質檢查，並根據這些檢查生成報告。
gradle.documentation.org.gradle.api.Project.apply.plugin.codenarc=<p>使用 <a class="ulink" href="http://codenarc.sourceforge.net/index.html" target="_top">CodeNarc</a> 對專案的 Groovy 源文件執行品質檢查，並根據這些檢查生成報告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse.non-html=生成供 Eclipse IDE 使用的檔案，從而可以將專案匯入 Eclipse。
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse=<p>生成供 <a class="ulink" href="http://eclipse.org" target="_top">Eclipse IDE</a> 使用的檔案，從而可以將專案匯入 Eclipse。另請參見<a class="xref" href="http://www.gradle.org/docs/current/userguide/tutorial_java_projects.html">第 7 章 <i>Java 快速入門</i></a>。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse-wtp.non-html=與 Eclipse 延伸模組相同，此外還會生成 Eclipse WTP (Web Tools Platform) 設定檔案。匯入 Eclipse 後，您的 war/ear 專案應設定為可以使用 WTP。
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse-wtp=<p>與 Eclipse 延伸模組相同，此外還會生成 Eclipse WTP (Web Tools Platform) 設定檔案。匯入 Eclipse 後，您的 war/ear 專案應設定為可以使用 WTP。另請參閱<a class="xref" href="http://www.gradle.org/docs/current/userguide/tutorial_java_projects.html">第 7 章 <i>Java 快速入門</i></a>。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.findbugs.non-html=使用 FindBugs 對專案的 Java 源文件執行品質檢查，並根據這些檢查生成報告。
gradle.documentation.org.gradle.api.Project.apply.plugin.findbugs=<p>使用 <a class="ulink" href="http://findbugs.sourceforge.net" target="_top">FindBugs</a> 對專案的 Java 源文件執行品質檢查，並根據這些檢查生成報告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.idea.non-html=生成檔案並套用 Intellij IDEA IDE 使用的 IDEA 特定自訂，從而可以將專案匯入 IDEA。
gradle.documentation.org.gradle.api.Project.apply.plugin.idea=<p>生成檔案並套用 <a class="ulink" href="https://www.jetbrains.com/idea/index.html" target="_top">Intellij IDEA IDE</a> 使用的 IDEA 特定自訂，從而可以將專案匯入 IDEA。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.jdepend.non-html=使用 JDepend 對專案的源文件執行品質檢查，並根據這些檢查生成報告。
gradle.documentation.org.gradle.api.Project.apply.plugin.jdepend=<p>使用 <a class="ulink" href="http://clarkware.com/software/JDepend.html" target="_top">JDepend</a> 對專案的源文件執行品質檢查，並根據這些檢查生成報告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.pmd.non-html=使用 PMD 對專案的 Java 源文件執行品質檢查，並根據這些檢查生成報告。
gradle.documentation.org.gradle.api.Project.apply.plugin.pmd=<p>使用 <a class="ulink" href="http://pmd.sourceforge.net" target="_top">PMD</a> 對專案的 Java 源文件執行品質檢查，並根據這些檢查生成報告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.project-report.non-html=生成包含 Gradle 建置的相關實用資訊的報告。
gradle.documentation.org.gradle.api.Project.apply.plugin.project-report=<p>生成包含 Gradle 建置的相關實用資訊的報告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.signing.non-html=添加對建置檔案和工件進行數位簽章的功能。
gradle.documentation.org.gradle.api.Project.apply.plugin.signing=<p>添加對建置檔案和工件進行數位簽章的功能。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.sonar.non-html=提供與 Sonar 程式碼品質平台的整合。被 sonar-runner 延伸模組取代。
gradle.documentation.org.gradle.api.Project.apply.plugin.sonar=<p>提供與 <a class="ulink" href="http://www.sonarsource.org" target="_top">Sonar</a>程式碼品質平台的整合。被 <a class="link" href="http://www.gradle.org/docs/current/userguide/sonar_runner_plugin.html"> <code class="literal">sonar-runner</code></a> 延伸模組取代。</p>

gradle.cmd.option.full.stacktrace=列印出任何異常的完整(非常詳細)堆疊跟踪
gradle.cmd.option.stacktrace=也列印出使用者異常(例如編譯錯誤)的堆疊跟踪
gradle.cmd.option.scan=使用有關 Gradle 建置所有方面的詳細資訊創建建置掃描
gradle.cmd.option.build.cache=切換 Gradle 建置快取。Gradle 將嘗試重用以前建置的輸出。\n預設為關閉。
gradle.cmd.option.no.build.cache=切換 Gradle 建置快取。Gradle 將嘗試重用以前建置的輸出。\n預設為關閉。
gradle.cmd.option.configure.on.demand=切換按需設定。在此建置執行中僅設定相關專案。\n預設為關閉。
gradle.cmd.option.no.configure.on.demand=切換按需設定。在此建置執行中僅設定相關專案。\n預設為關閉。
gradle.cmd.option.max.workers=設定 Gradle 可以使用的最大工作執行緒數。預設值為處理器數量。
gradle.cmd.option.parallel=並行建置專案
gradle.cmd.option.no.parallel=關閉並行建置
gradle.cmd.option.priority=指定 Gradle 守護程序及其啟動的所有行程的排程優先級。值為正常或低。預設為正常。
gradle.cmd.option.profile=分析建置執行時間並在 buildDir/reports/profile 目錄中生成報告
gradle.cmd.option.quiet=僅記錄錯誤
gradle.cmd.option.warn=設定警告日誌級別
gradle.cmd.option.info=設定資訊日誌級別 
gradle.cmd.option.debug=在偵錯模式下記錄(包含正常堆疊跟踪)
gradle.cmd.option.warning.mode=指定如何記錄警告。預設為摘要。可用模式(全部、失敗、無、摘要)
gradle.cmd.option.include.build=將建置作為複合建置執行，包括指定的建置。
gradle.cmd.option.offline=指定建置應在不存取網絡資源的情況下執行
gradle.cmd.option.refresh.dependencies=重新整理依賴項的狀態
gradle.cmd.option.dry.run=在禁用所有任務操作的情況下執行建置 
gradle.cmd.option.write.locks=指示所有可鎖定的已解析設定均應保留其鎖定狀態。
gradle.cmd.option.update.locks=指示必須在鎖定檔案中更新指定模組的版本。\n此標誌還意味著 --write-locks。 
gradle.cmd.option.no.rebuild=不重新建置專案依賴項
gradle.cmd.option.build.file=指定建置檔案
gradle.cmd.option.settings.file=指定設定檔案
gradle.cmd.option.gradle.user.home=指定 Gradle 使用者主目錄。預設值為使用者主目錄中的 .gradle 目錄。
gradle.cmd.option.project.dir=指定 Gradle 的起始目錄。預設為當前目錄。
gradle.cmd.option.project.cache.dir=指定專案特定的快取目錄。根專案目錄中的預設值為 .gradle。
gradle.cmd.option.system.prop=設定 JVM 的系統屬性，例如 -Dmyprop=myvalue
gradle.cmd.option.init.script=指定初始化腳本
gradle.cmd.option.project.prop=設定根專案的專案屬性，例如 -Pmyprop=myvalue
gradle.cmd.option.exclude.task=指定排除在執行範圍外的任務
gradle.cmd.option.rerun.tasks=指定忽略任何任務最佳化
gradle.cmd.option.continue=任務失敗後繼續執行任務
gradle.documentation.groovy.initial.value.got.during.last.import=上次匯入時已獲取初始值
gradle.documentation.groovy.gradle.property=Gradle 屬性: {0}