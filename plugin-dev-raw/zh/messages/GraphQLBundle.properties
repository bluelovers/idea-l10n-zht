action.GraphQLCreateConfigFile.description=建立新的 GraphQL 組態檔案
action.GraphQLCreateConfigFile.text=GraphQL 組態
action.GraphQLEditEnvironmentVariables.text=編輯 GraphQL 環境變數
action.GraphQLExecuteEditor.description=針對指定的 GraphQL 端點執行當前的 GraphQL 檔案
action.GraphQLExecuteEditor.text=執行 GraphQL
action.GraphQLMigrateLegacyConfig.text=遷移 GraphQL 組態
action.GraphQLNewFileAction.description=建立新的 GraphQL 檔案
action.GraphQLNewFileAction.text=GraphQL 檔案
action.GraphQLRerunLatestIntrospection.description=重新執行執行的最新內省查詢以更新本地架構，例如，當遠端架構已更改時
action.GraphQLRerunLatestIntrospection.text=重新執行內省查詢
action.GraphQLRestartSchemaDiscovery.description=在整個專案中執行 GraphQL 架構發現
action.GraphQLRestartSchemaDiscovery.text=重新啟動架構發現
advanced.setting.graphql.introspection.detect.schema.capabilities=架構功能檢測模式
advanced.setting.graphql.introspection.detect.schema.capabilities.description=在架構內省之前啟用初步請求來檢測 GraphQL 伺服器功能。
advanced.setting.graphql.introspection.include.empty.types=在內省結果中包含空類型
advanced.setting.graphql.introspection.skip.default.values=在內省查詢中跳過預設值
advanced.setting.graphql.introspection.skip.default.values.description=通過跳過預設值來提高與不相容端點的兼容性，但這會從架構中移除預設值資訊。
graphql=GraphQL
graphql.action.add.schema.configuration.text=新增架構組態
graphql.action.adds.new.graphql.configuration.file.description=新增新的 GraphQL 組態檔案
graphql.action.create.config.file.command=建立 GraphQL 組態
graphql.action.create.file.from.template.dialog.kind=GraphQL 檔案
graphql.action.create.file.from.template.dialog.title=新增 GraphQL 檔案
graphql.action.create.file.from.template.name=建立 GraphQL {0}
graphql.action.edit.environment.variables.toolbar.title=編輯環境變數
graphql.action.edit.selected.schema.configuration.text=編輯所選架構組態
graphql.action.open.config.file.title=開啟組態檔案
graphql.action.open.introspection.schema.title=開啟內省架構
graphql.action.opens.graphql.config.file.for.selected.schema.description=開啟所選架構的 GraphQL 組態檔案
graphql.action.rerun.latest.introspection.schema.title=重新執行內省查詢({0})
graphql.action.run.introspection.query.title=執行內省查詢
graphql.action.schemas.panel.help.text=幫助
graphql.action.schemas.panel.open.documentation.description=開啟 GraphQL 延伸模組文檔
graphql.action.toggle.variables.editor.desc=切換 GraphQL 變數編輯器
graphql.action.toggle.variables.editor.title=切換變數編輯器
graphql.attribute.descriptor.argument=實參
graphql.attribute.descriptor.comment=評論
graphql.attribute.descriptor.constant=常數
graphql.attribute.descriptor.directive=指令
graphql.attribute.descriptor.field.alias=欄位別名
graphql.attribute.descriptor.field.name=欄位名稱
graphql.attribute.descriptor.fragment.definition=片段定義
graphql.attribute.descriptor.fragment.spread=片段傳播
graphql.attribute.descriptor.keyword=關鍵字
graphql.attribute.descriptor.number=數字
graphql.attribute.descriptor.object.field=物件欄位
graphql.attribute.descriptor.operation.definition=動作定義
graphql.attribute.descriptor.parameter=參數
graphql.attribute.descriptor.string=字串
graphql.attribute.descriptor.type.name=類型名稱
graphql.attribute.descriptor.unused.fragment=未使用的片段
graphql.attribute.descriptor.variable=變數
graphql.attribute.descriptor.variable.definition=變數定義
graphql.command.name.reformat.generated.graphql.sdl=重新設定生成的 GraphQL SDL 格式
graphql.config.error.title=GraphQL 組態錯誤
graphql.config.evaluation.error=無法評估組態
graphql.config.evaluation.interpreter.not.found.error=無法評估 GraphQL 組態檔案 ''{0}''，因為找不到 Node.js 解釋器
graphql.config.legacy.schema.name=GraphQL 舊版組態
graphql.config.node.interpreter.error=找不到 Node.js 解釋器
graphql.config.reload=重新載入
graphql.config.schema.name=GraphQL 組態
graphql.dialog.title.select.graphql.configuration.folder=選擇 GraphQL 組態目錄
graphql.dialog.title.select.graphql.schema.base.directory=選擇 GraphQL 架構基目錄
graphql.editor.element.is.included.in.query.execution=元素包含在查詢執行中
graphql.editor.hint.text.executed.selection=已執行選區
graphql.editor.query.hint.description=將文字游標放在<a href\="{0}">動作內部</a>以單獨執行該動作。<br>自動包含參照的片段。<br><div style\="margin\: 4px 0 4px 0;"><a style\="text-decoration\: none" href\="{1}">不再顯示</a></div>
graphql.endpoint.tooltip=GraphQL 端點
graphql.environment.variables.dialog.title=GraphQL 環境變數
graphql.find.usage.argument=實參
graphql.find.usage.directive=指令
graphql.find.usage.enum.value=枚舉值
graphql.find.usage.field=欄位
graphql.find.usage.fragment=片段
graphql.find.usage.type=類型
graphql.find.usage.unknown=未知
graphql.hint.text.executed.anonymous.operation=已執行匿名{0}
graphql.hint.text.executed.buffer=已執行緩衝區“{0}”
graphql.hint.text.executed.named.operation=已執行{0}“{1}”
graphql.hint.text.failed.to.parse.variables.as.json=無法將變數解析為 JSON\:\n{0}
graphql.inspection.deprecated.symbols.description.template=已棄用\: {0}
graphql.inspection.deprecated.symbols.description.template.default=使用了棄用的符號，請查閱文檔了解更好的替代方案
graphql.inspection.display.name.deprecated.symbols=棄用的符號
graphql.inspection.display.name.duplicate.argument=重複實參
graphql.inspection.display.name.duplicate.directive=重複指令
graphql.inspection.display.name.empty.type=空類型
graphql.inspection.display.name.illegal.directive.argument=非法指令實參
graphql.inspection.display.name.illegal.name=非法名稱
graphql.inspection.display.name.interface.implementation=接口實作
graphql.inspection.display.name.invalid.directive.location=指令位置無效
graphql.inspection.display.name.member.redefinition=成員重新定義
graphql.inspection.display.name.missing.type=缺少類型
graphql.inspection.display.name.schema.validation=架構驗證
graphql.inspection.display.name.type.redefinition=類型重新定義
graphql.inspection.display.name.unexpected.type=意外類型
graphql.inspection.display.name.unresolved.reference=未解析的參照
graphql.inspection.go.to.related.definition.family.name=導覽至相關定義
graphql.inspection.go.to.related.definition.name=導覽至相關定義 ''{0}''
graphql.inspection.group.general=一般
graphql.inspection.group.schema=架構
graphql.inspection.related.definitions=相關定義\:
graphql.inspection.suppress.for.definition=對定義禁止
graphql.inspection.suppress.for.file=對檔案禁止
graphql.intention.create.missing.type.definition.family.name=建立缺少的類型定義
graphql.intention.name.add.missing.type=新增 "{0} {1}"
graphql.introspection.capabilities.detection.failed.errors=內省功能檢測查詢返回了錯誤\: {0}
graphql.introspection.errors=內省查詢返回錯誤\: {0}
graphql.introspection.missing.data=`data` 鍵應出現在查詢結果中。
graphql.introspection.missing.schema=`__schema` 鍵應出現在查詢結果資料中。
graphql.introspection.run.query=執行內省查詢以生成 GraphQL SDL 架構檔案
graphql.library.apollokotlin=Apollo Kotlin
graphql.library.built.in=規範
graphql.library.federation=Federation
graphql.library.prefix=GraphQL\: {0}
graphql.library.relay=Relay
graphql.line.marker.generate.schema.file=生成 GraphQL SDL 架構檔案
graphql.notification.config.not.found.body=搜尋當前目錄和父目錄，直至專案根目錄。
graphql.notification.config.not.found.create.action=建立組態檔案
graphql.notification.config.not.found.title=找不到 GraphQL 組態
graphql.notification.configuration.error=GraphQL 組態錯誤
graphql.notification.content.open.schema.file=開啟架構檔案
graphql.notification.content.request.to.url.failed=對 {0} 的 GraphQL 請求失敗。
graphql.notification.content.unable.to.create.file.in.directory=無法在目錄 ''{1}'' 中建立檔案 ''{0}''\: {2}
graphql.notification.error.title=GraphQL 錯誤
graphql.notification.introspection.empty.endpoint.url=請在組態檔案中提供非空端點 URL。
graphql.notification.introspection.empty.schema.path=請在組態檔案中提供架構的有效路徑。第一個架構模式應包含檔案在檔案系統中的正確路徑。{0}
graphql.notification.introspection.empty.schema.path.provided=提供了 ''{0}''。
graphql.notification.introspection.endpoint.config.not.found=找不到端點的組態。
graphql.notification.introspection.error.body=無法使用內省結果建置有效架構。
graphql.notification.introspection.error.title=GraphQL 內省
graphql.notification.introspection.parse.error=伺服器內省響應無法解析為有效的 JSON 物件。
graphql.notification.introspection.spec.error.body=無法使用內省結果建置有效架構。端點可能不遵循 GraphQL 規範。
graphql.notification.introspection.unable.to.build.path=無法建置檔案路徑來儲存內省結果
graphql.notification.invalid.config.file=GraphQL 組態檔案無效
graphql.notification.load.schema.from.endpoint.action=內省 ''{0}''
graphql.notification.load.schema.from.endpoint.body=內省 ''{0}'' 以更新本地架構檔案。
graphql.notification.load.schema.from.endpoint.title=是否立即從端點獲取 GraphQL 架構?
graphql.notification.migrate.config.action=遷移
graphql.notification.migrate.config.text=將 GraphQL 組態遷移到新語法
graphql.notification.open.file=開啟 ''{0}''
graphql.notification.retry=重試
graphql.notification.sdl.generation.error.text=無法使用提供的內省結果建置有效的 GraphQL 架構
graphql.notification.sdl.generation.hide.notification.action=隱藏通知
graphql.notification.sdl.generation.stack.trace.action=堆疊追蹤
graphql.notification.sdl.generation.syntax.error.text=伺服器內省響應無法解析為有效的 JSON 物件
graphql.notification.show.query.error.details.action=顯示錯誤
graphql.notification.ssl.cert.error.title=SSL 憑證錯誤
graphql.notification.title.limit.graphql.that.sent.to.server=限制發送到伺服器的查詢
graphql.notification.title.unable.to.create=無法建立 {0}
graphql.notification.trust.all.hosts=信任所有主機
graphql.notification.unable.to.create.file=無法在目錄 ''{1}'' 中建立檔案 ''{0}''.
graphql.notification.unable.to.delete.file=無法刪除目錄 ''{1}'' 中的檔案 ''{0}''。
graphql.notification.unable.to.open.editor=無法開啟 ''{0}'' 的編輯器
graphql.notification.unable.to.parse.file=無法解析 {0}
graphql.parsing.error.injection.placeholder=注入佔位符
graphql.progress.executing.introspection.query=正在執行 GraphQL 內省查詢
graphql.progress.title.executing.graphql=正在執行 GraphQL
graphql.query.result.statistics={0}\: {1} 毫秒執行時間，{2} 響應
graphql.query.result.statistics.error=, {0} {1}
graphql.query.result.statistics.multiple.errors=錯誤
graphql.query.result.statistics.single.error=錯誤
graphql.query.result.window.bytes.count={0} 位元組
graphql.schema.is.too.complex.error.text=架構大小超出了 {0} 類型定義的上限。此上限由 IDE 設定，以防止出現性能問題。要解決此問題，請考慮通過建立 GraphQL 組態檔案來定義更具體的作用域
graphql.search.schema.registry.0=搜尋架構註冊表“{0}”
graphql.settings.frameworks=框架
graphql.settings.introspection=內省
graphql.settings.introspection.open.editor.label=在編輯器中開啟內省結果
graphql.tab.title.graphql.schema=GraphQL 架構({0})
graphql.tab.title.query.result=查詢結果
graphql.tab.title.schemas.project.structure=架構和專案結構
graphql.tooltip.endpoints.perform.introspection.queries.mutations=端點允許您執行 GraphQL 內省、查詢和變異
graphql.tooltip.search.schema.registry=雙擊或按 Enter 搜尋架構註冊表
graphql.toolwindow.action.create.scratch=新增 GraphQL 臨時檔案
graphql.toolwindow.action.introspect.endpoint=從端點獲取 GraphQL 架構
graphql.toolwindow.default.schema.node.name=預設的專案範圍架構
graphql.toolwindow.discovery.not.completed=架構發現尚未完成
graphql.toolwindow.projects.node.name=專案
graphql.toolwindow.schema.content.directives.count={0} 條指令
graphql.toolwindow.schema.content.empty.node.tooltip=架構為空
graphql.toolwindow.schema.content.enums.count={0} 個枚舉
graphql.toolwindow.schema.content.inputs.count={0} 個輸入
graphql.toolwindow.schema.content.interfaces.count={0} 個接口
graphql.toolwindow.schema.content.node.name=架構發現摘要
graphql.toolwindow.schema.content.scalars.count={0} 個標量
graphql.toolwindow.schema.content.types.count={0} 個類型
graphql.toolwindow.schema.content.unions.count={0} 個聯合體
graphql.toolwindow.schema.endpoints.default.node.name=預設架構中沒有可用的端點
graphql.toolwindow.schema.endpoints.list.node.name=端點
graphql.toolwindow.schema.error.node.tooltip=雙擊可開啟堆疊追蹤
graphql.toolwindow.schema.errors.list.node.empty.errors=未發現錯誤
graphql.toolwindow.schema.errors.list.node.name=架構錯誤
graphql.validation.did.you.mean.0=。您是否指的是 {0}?
graphql.validation.enum.values.can.not.be.named.0=枚舉值不能命名為 ''{0}''
graphql.validation.field.name.suggestion.delimiter=, 或
graphql.validation.interface.type=接口
graphql.validation.object.type=物件
graphql.validation.on.0.type.1=(在{0}類型“{1}”上)
graphql.validation.on.input.type.0=(在輸入類型“{0}”上)
graphql.validation.parent.selection.or.operation.does.not.resolve.to.a.valid.schema.type=\: 父選區或動作未解析為有效的架構類型
graphql.validation.unknown.argument.0=未知實參“{0}”
graphql.validation.unknown.directive.0=未知指令“{0}”
graphql.validation.unknown.directive.location.0=未知指令位置 ''{0}''
graphql.validation.unknown.field.0=未知欄位“{0}”
graphql.validation.unknown.fragment.spread.0=未知片段傳播“{0}”
graphql.validation.unknown.type.0=未知類型“{0}”
group.advanced.settings.graphql=GraphQL
