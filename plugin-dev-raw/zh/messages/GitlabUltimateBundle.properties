action.GitLabCiSwitchShellLanguageInjectionAction.text=在 GitLab CI/CD 中注入 Shell 腳本
gitlab.ci.expression.color.bad.character=錯誤字元
gitlab.ci.expression.color.comparison.operator=比較運算符(\=\=、\!\=、\=~、\!~)
gitlab.ci.expression.color.identifier=關鍵字
gitlab.ci.expression.color.logical.operator=邏輯運算符(&&、||)
gitlab.ci.expression.color.parentheses=圓括號
gitlab.ci.expression.color.regexp=正則表達式
gitlab.ci.expression.color.settings.display.name=GitLab CI 表達式
gitlab.ci.expression.color.string=字串
gitlab.ci.expression.color.variable.prefix=變數前綴($)
gitlab.ci.expression.language.description="GitLab CI 表達式語言"
gitlab.ci.inspections.duplicated.job.usage=重複的作業用法
gitlab.ci.inspections.duplicated.job.usage.inspection.message=“needs”映射中存在重複的作業“{0}”
gitlab.ci.inspections.name=GitLab CI/CD
gitlab.ci.inspections.undefined.job=未定義的作業
gitlab.ci.inspections.undefined.job.inspection.message=未解析的作業參照\:“{0}”
gitlab.ci.inspections.undefined.stage=未定義的暫存
gitlab.ci.inspections.undefined.stage.inspection.message=未解析的暫存參照\:“{0}”
gitlab.ci.intention.category=GitLab CI/CD
intention.GitLabCiSwitchShellLanguageInjectionIntention.text=switch shell 腳本注入
yaml.document.search.scope.name=YAML 文檔
