ActionGroupDropDown.label=動作
AttribitePanel.validation=驗證
AttributeTipInfo.Severity.LEAST_EFFICIENT=效率最低
AttributeTipInfo.Severity.MORE_EFFICIENT=效率較高
AttributeTipInfo.Severity.MOST_EFFICIENT=效率最高
ColumnRenderer.inDb.prefix=在資料庫中\:
ColumnValueCellRenderer.usedBy=被{0}使用
ConfirmDialog.title=請確認
ConstraintCheckDigitIndexItem.name=檢查數字索引
ConstraintCurrencyItem.name=單位
ConstraintFractionItem.name=分數
ConstraintHostItem.name=主機
ConstraintIgnoreNonDigitCharactersItem.name=忽略非數字字元
ConstraintInclusiveItem.name=包含
ConstraintIntegerItem.name=整數
ConstraintMaxItem.name=最大值
ConstraintMaxLongItem.name=最大值
ConstraintMessageItem.name=訊息
ConstraintMinItem.name=最小值
ConstraintMinLongItem.name=最小值
ConstraintPortItem.name=連接埠
ConstraintProtocolItem.name=協議
ConstraintRegexpItem.name=正則表達式
ConverterAttributeItem.name=轉換器
CreateIndexDialog.label.name=名稱
CreateIndexDialog.label.unique=唯一
CreateRepoLookupItem.command.name=建立儲存庫
DaysDurationItem.days=天
DaysDurationItem.hours=小時
DaysDurationItem.millis=毫秒
DaysDurationItem.minutes=分鐘
DaysDurationItem.nanos=納秒
DaysDurationItem.seconds=秒
DisplayName.codingAssistance=程式碼輔助
DisplayName.dbDrivers=資料庫驅動程序
DisplayName.dtoDeclaration=DTO 宣告
DisplayName.entityDeclaration=JPA 實體宣告
DisplayName.hibernateEnvers=Hibernate Envers
DisplayName.mapperDeclaration=Mapper 宣告
DisplayName.projectionDeclaration=投影宣告
DisplayName.repository=Spring Data 儲存庫
DomainEntityType.JPA=JPA 實體
DomainEntityType.MONGODB=MongoDB 文檔
DtoAttributePanel.mappingWillBeHandledImplicitly=映射將被隱式處理
DtoAttributePanel.unsetName=<取消設定名稱>
EndIndexItem.name=結束索引
EntityFromPojoAttributeType.EXISTING_CLASS=選擇現有實體類別
EntityFromPojoAttributeType.NEW_CLASS=建立新實體類別
EntityFromPojoAttributeType.TRANSIENT=瞬時
EntityToDtoMapperDialog.fromDto=映射 {0} 自…
EntityToDtoMapperDialog.toDto=將 {0} 映射到…
EntityViewCreateDialog.title=新增{0}
EnvironmentVariablesDialog.message.illegalNameEnvironmentVariable=非法的環境變數名稱\: {0}
EnvironmentVariablesDialog.message.illegalValueEnvironmentVariable=環境變數 ''{0}'' 的值非法\: ''{1}''
ExtractJpqlQueryIntention.error={0} 錯誤
GenerateEntityAttributeAction.TypeField.radio.element.collection=元素集合
GenerateEntityAttributeAction.TypeField.radio.id=ID
GenerateEntityAttributeAction.TypeField.radio.persist=持久
GenerateEntityAttributeAction.TypeField.radio.transient=瞬時
GenerateEntityAttributeAction.popup.title.enterAttributeType=輸入特性類型
InheritanceField.default=預設({0})
InjectionInsertHandler.hint.text.canNotPerformCompletion.canNotFindInjectingClass=無法執行補全\: 找不到注入類別。
InjectionInsertHandler.hint.text.canNotPerformCompletion.targetClassNotFound=無法執行補全\: 找不到目標類別。
Item.notImplemented.text=此功能尚未實作。我們計劃在未來的更新中實作。
JpaAttributePropertiesPanel.action.createItem=建立反向特性…
JpaAttributePropertiesPanel.notification.unableToDefineEntityId=無法定義 ''{0}'' 實體的 ID 類型
JpaColumnNamesEditor.validation.columnMustNotBeEmpty=列列表不得為空
JpaToolWindowManager.designer=設計器
JpaToolWindowManager.jpaDesignerEmptyText=設計器僅支援以下檔案類型\:\n• JPA 實體\n• JPA 儲存庫\n• SQL 腳本\n• Liquibase 更改集
JpaToolWindowManager.jpaDesignerTitle=JPA 設計器
JpaToolWindowManager.toolWindowId=JPA Buddy
MapperMethodCreationDialog.single=單一
MapperMethodCreationDialog.title.from.dto.to.entity=從 DTO 到實體
MapperMethodCreationDialog.title.from.entity.to.dto=從實體到 DTO
MessageDialog.no.thanks=不，謝謝
MessageDialog.request.ultimate.trial=試用 IntelliJ IDEA Ultimate
MethodType.COUNT=計數
MethodType.DELETE=刪除
MethodType.EXISTS=Exists
MethodType.FIND_COLLECTION=尋找集合
MethodType.FIND_INSTANCE=尋找實例
MethodType.QUERY_COUNT=計數
MethodType.QUERY_DELETE=刪除
MethodType.QUERY_EXISTS=Exists
MethodType.QUERY_FIND_COLLECTION=尋找集合
MethodType.QUERY_FIND_INSTANCE=尋找實例
MethodType.QUERY_UPDATE=更新
NewType.INDEX=索引
NewType.UNIQUE_CONSTRAINT=唯一約束
NotImplemented.title=即將推出
PTableGroup.association=關聯
PTableGroup.basic=基本
PTableGroup.column=列
PTableGroup.format=格式
PTableGroup.general=一般
PTableGroup.hibernate.envers=Hibernate Envers
PTableGroup.id=ID
PTableGroup.inheritance=繼承
PTableGroup.jpa.buddy=JPA Buddy
PTableGroup.lombok=Lombok
PTableGroup.table=表
PTableGroup.validation=驗證
Palette.category.attributes=屬性
Palette.category.audit=審核
Palette.category.indexes=索引
Palette.category.lifecycleCallbacks=生存期回調
Palette.category.liquibase.add=新增
Palette.category.liquibase.create=建立
Palette.category.liquibase.drop=刪除
Palette.category.liquibase.filter=Liquibase 檔案
Palette.category.liquibase.rename=重新命名
Palette.category.method=方法
Palette.category.namedGraph=命名圖
Palette.category.namedGraphs=命名圖
Palette.category.namedQuery=命名查詢
Palette.category.other=其他
Palette.category.query=查詢
Palette.category.reverseEngineering=逆向工程
Palette.category.utils=實用工具
QueryType.COUNT=計數
QueryType.DELETE=刪除
QueryType.EXISTS=Exists
QueryType.FIND=尋找
QueryType.UPDATE=更新
RepositoryCreationDialog.mode.bulk=批量
RepositoryCreationDialog.mode.single=單一
RepositoryCreationDialog.title=新增 Spring Data 儲存庫
RepositoryGraphEditor.radio.fetch=提取
RepositoryGraphEditor.radio.load=載入
RepositoryMethodDialog.changeSettings=更改設定
RepositoryMethodDialog.is=(Is)
RevisionListenerRenderer.newClass=新類別
SpringAuditItem.name=Spring 審核
StartIndexItem.name=開始索引
TabularPropertiesEditor.propertiesNotFound=找不到屬性
TabularPropertiesEditor.validation.number=數值無效
ToStringType.ALL=所有
ToStringType.NONE=無
ToStringType.ONLY_EXPLICITLY_INCLUDED=僅顯式包含
TypeInject.CONSTRUCTOR_OR_AUTOWIRED=建構函式/@Autowired
TypeInject.LOOKUP=尋找方法
TypeInject.OBJECT_FACTORY=物件工廠
action.CreateLiquibaseChangeLog.text=Liquibase 空更新日誌
action.CreateLiquibaseChangeLogItem.description=建立 Liquibase 更改
action.CreateLiquibaseChangeLogItem.text=Liquibase 更改
action.CreateReverseEngineeringItem.description=將資料庫列逆向工程為 JPA 實體特性
action.CreateReverseEngineeringItem.text=資料庫中的實體特性…
action.JpbAddAttributesFromPojo.text=從 DTO 新增特性
action.JpbAddAttributesToDTO.text=將特性新增到 DTO
action.JpbAddMapperMethods.description=新增 Mapper 方法
action.JpbAddMapperMethods.text=Mapper 方法…
action.JpbConfigureToolWindow.description=組態編輯器工具列和工具視窗
action.JpbConfigureToolWindow.text=組態編輯器工具列和工具視窗
action.JpbCreateCustomDs.text=資料庫連線…
action.JpbCreateCustomType.text=Hibernate 自訂類型
action.JpbCreateDto.text=建立 DTO
action.JpbCreateEntity.text=JPA 實體
action.JpbCreateEntityActionWithRelationFrom.text=參照實體…
action.JpbCreateEntityActionWithRelationTo.text=參照的實體
action.JpbCreateEntityFromPojo.text=從 POJO 生成 JPA 實體
action.JpbCreateEntityView.text=Blaze 持久性實體檢視
action.JpbCreateHibernateEvent.text=建立 Hibernate 事件
action.JpbCreateIndex.description=建立索引
action.JpbCreateIndex.text=索引/約束…
action.JpbCreateJpaConverter.text=JPA 轉換器
action.JpbCreateJpaDto.text=DTO
action.JpbCreateJpaRepository.text=Spring Data JPA 儲存庫
action.JpbCreateMapper.text=MapStruct 接口
action.JpbCreateRelatedEntityPopup.description=新增帶有參照實體的特性
action.JpbCreateRelatedEntityPopup.text=建立參照的實體
action.JpbCreateRepositoryMethod.description=建立儲存庫方法
action.JpbCreateRepositoryMethod.text=儲存庫方法…
action.JpbCreateRevisionEntity.text=修訂實體
action.JpbCreateSpringDataSource.description=基架資料來源屬性
action.JpbCreateSpringDataSource.text=資料來源
action.JpbCreateSpringProjection.text=Spring Data 投影
action.JpbDeleteDataStore.text=刪除…
action.JpbDetectDataSource.text=檢測連線…
action.JpbEditCustomDataSource.text=編輯資料庫連線
action.JpbExtractMappedSuperClass.text=提取到 MappedSuperclass
action.JpbFlywayAddDdlChange.text=新增 DDL/SQL 語句
action.JpbFlywayCreateSqlChange.description=建立 DDL 語句
action.JpbFlywayCreateSqlChange.text=DDL/SQL 語句
action.JpbFlywayGenerateDiffDdlChanges.text=生成差異 DDL 語句
action.JpbGenerateEntityAttribute.description=新增實體特性
action.JpbGenerateEntityAttribute.text=實體特性…
action.JpbGenerateLifecycleCallback.description=新增 JPA 生存期回調
action.JpbGenerateLifecycleCallback.text=生存期回調…
action.JpbGenerateNamedQuery.description=新增命名查詢
action.JpbGenerateNamedQuery.text=命名查詢…
action.JpbGenerateUtilities.description=JPA 實用工具
action.JpbGenerateUtilities.text=JPA 實用工具…
action.JpbLiquibaseDeleteTag.text=刪除標記
action.JpbMapperCreation.text=建立 MapStruct 接口
action.JpbReEntityAttributeFromDb.text=資料庫中的實體特性
action.JpbReferencesTreeNotification.text=參照
action.JpbRefreshJpaStructure.text=重新整理 JPA 資源管理器樹
action.JpbSafeDeleteAttribute.description=安全刪除特性
action.JpbSafeDeleteAttribute.text=安全刪除…
action.JpbSafeDeleteClass.text=安全刪除類別
action.JpbSafeDeleteMethod.description=安全刪除方法
action.JpbSafeDeleteMethod.text=安全刪除…
action.JpbSearchInLibraries.text=在庫中搜尋
action.JpbShowEntityDdl.text=顯示 DDL
action.JpbShowInspectorPopup.description=顯示檢查器彈出視窗
action.JpbShowInspectorPopup.text=顯示檢查器彈出視窗
action.JpbShowJpaSettings.text=JPA Buddy 設定
action.JpbSyncDtoWithEntity.text=從實體新增特性
action.JpbSyncEntityWithDto.text=DTO 中的實體特性
action.actions.text=動作
action.add.text=新增
action.add.to.source.text=新增到源
action.browse.text=瀏覽
action.create.dto.text=建立 DTO
action.create.jpa.converter.text=建立 JPA 轉換器
action.create.projection.text=建立投影
action.delete.tag.text=刪除標記
action.delete.text=刪除…
action.description.create.projection=建立投影…
action.description.migration=類型遷移…
action.description.smart.refactoring=智能重構
action.documentation.text=文檔
action.edit.lowercase=編輯
action.extract.lowercase=提取…
action.navigate.lowercase=導覽
action.new.text=新增
action.select.item.text=選擇條目
add=新增
add.attribute.dto=將特性新增到 DTO
add.attributes.from.dto.to.entity=將來自 DTO 的特性新增到{0}
add.attributes.to.entity=將特性新增到實體
addShortCut=新增鍵盤快捷鍵
additional.db.drivers=其他資料庫驅動程序
apply=套用
attributeItem.readModel=讀取特性模型
bean.injection.symbols.comment=如果輸入的符號數量小於指定數量，則不會顯示 Bean 注入補全。
border.title.autowiring.code.style=自動裝配程式碼樣式
cancel=取消
category.all.results=所有結果
changes.please.enter.a.valid.regex=請輸入有效的{0}
checkbox.update.entity.from.dto=從 DTO 更新實體
choose.table.columns=選擇表列
class.comment=類別註釋
class.name.postfix=類別名後綴
column.name.attribute=特性
column.name.column=列
column.name.condition=條件
column.name.direction=方向
column.name.entity=實體
column.name.ignoreCase=忽略大小寫
column.name.name=名稱
column.name.nullability=為 null 性
column.name.nullable=可為 null
column.name.operator=運算符
column.name.repository=儲存庫
column.name.unique=唯一
columns=列
command.name.add.lifecycle.callback=新增生存期回調 ''{0}''
command.name.append.changes.to.sql.file=將更改追加到 Sql 檔案
command.name.change.repository.method.nullability=更改儲存庫方法為 null 性
command.name.create=建立{0}
command.name.create.changeset=建立 ChangeSet
command.name.create.tag=建立 {0} 標記
command.name.generate.repository.method=生成儲存庫方法
command.name.override.repository.method=覆寫儲存庫方法
configurable.group.jpa.buddy.tools.settings.description=<html><body>JPA Buddy 是一種開發工具，旨在自動執行與 Java 和 Kotlin 應用程式中的資料建模相關的日常工作。
configurable.group.jpa.buddy.tools.settings.display.name=JPA Buddy
configure.editor.header.and.tool.windows=組態編輯器工具列和工具視窗
continue=繼續
copy=複製
could.not.parse.repository.method.name=無法解析儲存庫方法名稱。\n請檢查“{0}”是否使用 Spring Data 方法命名約定。
create=建立
create.db.connection=建立資料庫連線
db.connection.0.has.been.created=資料庫連線“{0}”已建立
db.driver.version=驅動程序版本
ddl.generate.in.existing.file.feature.description=使用此功能，只需點擊幾下即可為您的 JPA 實體生成 DDL 語句。它可以生成初始化腳本以從頭開始建立資料庫架構，也可以生成差異 DDL 以根據 JPA 實體將現有資料庫更新為有效狀態。此外，此功能對於替代容易出錯的 spring.jpa.hibernate.ddl-auto 屬性非常有用。通過使用 JPA Buddy 動作，您將能夠在執行之前完全控制 DDL、設定正確的 Java -> DB 類型映射、使用特性轉換器和 Hibernate 類型映射欄位、生成 drop 語句等。
default.beans.inject.strategy=預設 Bean 注入器策略
default.beans.inject.strategy.constructor=建立 final Bean 參照欄位並通過類別建構函式初始化
default.beans.inject.strategy.field=使用 @Autowired 註解建立 Bean 參照欄位
default.beans.inject.strategy.setter=使用 @Autowired 註解建立 Bean 參照欄位和 setter 方法
default.repository.name.suffix=預設儲存庫名稱後綴
delete=刪除
delete.db.persistenceUnit=是否刪除持久性單元“{0}”?
designer.settings=設計器設定
designers=設計器
designers.changelog=Liquibase 更新日誌
designers.entity=JPA 實體
designers.repository=Spring Data 儲存庫
designers.sql=SQL 檔案類型
detect.dataSource.not.found=<html>JPA Buddy 在屬性檔案中找不到任何資料來源組態。請記住，JPA Buddy 只能檢測<a href\="https\://www.jetbrains.com/help/idea/jpa-buddy-database-connections.html" target\="_blank">支援的資料庫</a>的連線。</html>
detected.data.sources=檢測到的資料來源
dialog.message.entity.projectionTypeInvalid=實體/投影類型無效\!
dialog.message.this.not.valid.length=這不是有效長度
dialog.message.validation.attributeOverridesHaveEmptyValues=特性覆寫具有空值
dialog.message.validation.columnHaventSpecified=未指定列
dialog.message.value.length.must.be.between.symbols=值長度必須為 1 至 {0} 個字元
dialog.title.attribute.overrides=特性覆寫
dialog.title.choose.attributes.to.concatenate=選擇要串聯的特性
dialog.title.choose.attributes.to.include=選擇要包含的特性
dialog.title.create.choice.constraint.index=建立{0, choice, 0\#約束|1\#索引}
dialog.title.delete=刪除
dialog.title.entity.projection.type.migration=實體/投影類型遷移
dialog.title.new.spring.projection=新增 Spring 投影
dialog.title.spring.auditing=Spring 審核
discard=捨棄
done=更改已儲存
driver.class=驅動程序類別
dto.and.mapper.feature.description=DTO 對於 Web 套用至關重要，但它們的實作會帶來樣板程式碼。數十個幾乎複製您的實體的類別，每個都帶有一個 mapper。使用 <b>DTO 生成</b>功能，您可以節省日常工作的時間。您可以根據 JPA 實體定義建立 DTO 和 MapStruct mapper，但這還不是全部\! 隨著時間的推移，實體可能會發生變化，您需要相應地更改 DTO。JPA Buddy 也能解決這個問題。它允許您<b>將實體與其 DTO 同步</b>，反之亦然。此外，JPA Buddy 還提供<b>從 POJO 生成 JPA 實體</b>動作，幫助從任何 java/kotlin 類別生成 JPA 實體。如果您按照 API 優先的方式開發應用程式，此功能可能會很有幫助\: 首先為 API 定義 DTO，然後再實作資料模型。
dto.class.comment.help.tooltip=<html>變數 <b>ENTITY_FQN</b> - 建立 DTO 所依據的實體完全限定名稱。</html>
dto.comment.description=<html>註釋鏈接正則表達式允許 JPA Buddy 將 DTO 與其 JPA 實體相關聯。要在註釋中指定目標實體 FQN 的佔位符，請使用 <b>(?\\&lt;entity\\&gt;.*)</b> 模式。<br><br>因此，如果正則表達式被定義為 <b>A DTO for the {@link (?.*)} entity.</b>，它將在以下註釋中解析\: <i>//A DTO for the {@link io.jpabuddy.demo.entities.Project} entity.</i>。<br><br>當欄位為空時，該功能將被停用。</html>
dto.comment.regexp=註釋鏈接正則表達式
dto.name.pattern.description=<html>如果您在 JPA 實體與 DTO 之間使用強命名約定，您可以在此處宣告它們。它允許 JPA Buddy 將 DTO 與其 JPA 實體相關聯。<br><br>要為目標 JPA 實體的簡單類別名稱指定佔位符，請使用 <b>(?\\&lt;entity\\&gt;.*)</b> 模式。例如，(?.*)Dto 表示 MyEntityDto 類別將被視為 MyEntity 的 DTO。<br><br>當欄位為空時，該功能將被停用。</html>
dto.name.pattern.regexp=類別名正則表達式
duplicate.method.name=已在儲存庫中定義名稱為 ''{0}'' 的方法
edit=編輯
editor.toolbar=編輯器工具列
editorMode=編輯器模式
editorMode.enable=啟用極簡模式
enable.completion=智能補全
entity.attributes.from.dto=DTO 中的實體特性
entity.listener=實體偵聽器
entity.listeners=實體偵聽器
feature.available.only.with.subscription=此功能僅在 IntelliJ IDEA Ultimate Edition 中可用
field.exists=已存在使用此名稱的欄位
field.required=欄位 ''{0}'' 為必需項
fixes.createCustomEntity=建立 JPA 實體…
fixes.createMappedSuperclassEntity=建立 JPA MappedSuperclass“{0}”
fixes.createMissingAttribute=建立缺少的特性
flyway.diff.feature.description=Flyway 版本化遷移生成是一項非常有用的功能，可以在日常工作中節省大量時間。通過使用此功能，您可以自動生成包含更新資料庫所需的 DDL 的遷移，以使其符合您的 JPA 模型。可以通過將 JPA 實體與一個資料庫、兩個資料庫甚至一個 VCS 分支的 JPA 實體與另一個 VCS 分支的 JPA 實體進行比較來生成此類別具有差異 DDL 的 Flyway 遷移，這在您無權存取目標資料庫時非常有用。
flyway.init.feature.description=Flyway 初始化架構遷移動作可幫助開發者從頭開始生成資料庫架構。它可以使用您的 JPA 實體或現有資料庫作為源。因此，您將獲得包含架構初始化所需的 DDL 的 Flyway 版本化遷移。如果您將 Flyway 整合到現有應用程式中，或者決定生成用於資料庫初始化的單個腳本而不是執行大量舊遷移，則此功能將非常有用。此外，它還可以幫助設定新的開發或測試環境。
follow.this.link.to.watch.feature=<a href\="{0}">觀看此短視訊</a>了解功能的實際運作。
following.licence.options=您可以通過以下選項啟用此功能\: <ol><li>如果您還沒有試用過 IntelliJ IDEA Ultimate，可以<a href\="https\://www.jetbrains.com/lp/idea-extended-trial/\#\:~\:text\=90%2Dday%20Trial%20for%20Your%20Whole%20Team&text\=Complete%20a%20short%20form%20and,a%20set%20of%20simple%20criteria">立即為您甚至整個團隊申請試用</a></li><li>如果您是學生或教師，正在教授或學習課程或者開發開源專案，可以<a href\="https\://www.jetbrains.com/idea/buy/?section\=discounts&billing\=yearly">免費獲取 IntelliJ IDEA Ultimate</a></li><li><a href\="https\://www.jetbrains.com/idea/buy/?section\=commercial&billing\=yearly">購買 IntelliJ IDEA Ultimate</a></li></ol>
from.db=從資料庫
from.dto=從 DTO
generate.ddl.by.entities=使用“通過實體生成 DDL”動作，開發者只需點擊幾下即可將實體轉換為 DDL 語句。它可以生成初始化腳本以從頭開始建立資料庫架構，也可以生成差異 DDL 以根據 JPA 實體將現有資料庫更新為有效狀態。此外，此功能對於替代容易出錯的 spring.jpa.hibernate.ddl-auto 屬性非常有用。通過使用 JPA Buddy 動作，您將能夠在執行之前完全控制 DDL、設定正確的 Java -> 資料庫類型映射、使用特性轉換器和 Hibernate 類型映射欄位、生成 drop 語句等。
generate.ddl.from.run.console.feature.description=當您的 JPA 實體無法正確映射到資料庫表和欄位時，就會出現此異常。JPA Buddy 提供了一個非常有用的功能，可以輕鬆解決這個問題。直接從堆疊追蹤生成 DDL 以填補 JPA 實體與資料庫之間的差異\! 然後，檢查生成的腳本，執行它並再次啟動應用程式。通過設定 ddl-auto 或 hbm2ddl 屬性來重新生成資料庫或更新資料庫可以解決相同的問題。不過，此解決方案有很大的限制。請觀看下面的視訊，了解這些限制以及 JPA Buddy 提出的更好的解決方案。
generate.equals.and.hashcode.empty.fields=實體沒有要包含到 equals() 和 hashCode() 中的特性
generate.equals.and.hashcode.empty.fields.title=找不到欄位
generateEntity.resolveAttributeInfo=解析特性資訊
go.to.reference.element=轉到參照元素
group.com.intellij.jpb.group.otherNewGroup.text=其他
group.com.intellij.jpb.structure.toolbar.new.flyway.text=所有新動作
group.com.intellij.jpb.structure.toolbar.new.text=所有新動作
hsql.unsupported.rename.sequence=HSQL 不支持重新命名序列
hsql.unsupported.rename.view=HSQL 不支持重新命名檢視
ide=IDE
inspection.ConverterSpecifiedIncorrectlyInspection=轉換器的類型與特性類型不符合
inspection.ConverterSpecifiedIncorrectlyInspectionExt=轉換器的類型 {0} 與特性類型 {1} 不符合
inspection.LombokDataInspection=不建議對 JPA 實體使用 @Data。它可能會導致嚴重的性能和記憶體消耗問題。
inspection.LombokEqualsInspection=不建議對 JPA 實體使用 @EqualsAndHashCode。它可能會導致嚴重的性能和記憶體消耗問題。
inspection.LombokToStringIncludeInspection=此欄位延遲載入，但包含在 @ToString 中。它可能會導致性能和記憶體消耗問題。
inspection.LombokToStringInspection=@ToString 包括延遲載入的欄位和/或關聯。這可能會導致性能和記憶體消耗問題。
inspection.NoArgsConstructorInspection=實體必須具有一個 public 或 protected 無實參建構函式
inspection.cantFindHibernateCustomType=找不到 Hibernate 自訂類型
inspection.cantFindInverseAttribute=找不到反向特性
inspection.cantFindRelatedAttribute=找不到相關特性
inspection.compositeIdClassSerializableInspection=複合 ID 類別必須實作 Serializable
inspection.converterNotAnnotated=JPA 轉換器必須使用 @Converter 進行註解
inspection.dataClassRequiredEqualsAndHashCode=不建議將 equals()、hashCode() 和 toString() 的資料類別實作用於 JPA 實體。它們可能會導致嚴重的性能和記憶體消耗問題。
inspection.dataClassRequiredEqualsAndHashCode.key=不建議將資料類別用於 JPA 實體。
inspection.entityIdMissing=實體沒有主鍵
inspection.entityIdMissing.fix.createEntityId=新增 ID 特性
inspection.group.key.jpbCommon=JPA Buddy
inspection.incompatibleTableAnnotation=@Table 註解不應該與 SINGLE_TABLE 繼承策略一起使用。
inspection.message.unknown.column=未知列 {0}
inspection.missingConverter=類型不受支援的特性應為 @Transient 或具有自訂類型或轉換器宣告
inspection.serializable.annotator.message=類別 ''{0}'' 應實作 ''Serializable''
inspection.toManyVersionAnnotations=每個類別只能使用一個 Version 屬性或欄位
inspector=檢查器
inspector.tool.window=檢查器工具視窗
intention.create.dto.confirmation.message=此實體沒有相關的 DTO。是否要新增一個?
intention.create.dto.confirmation.title=找不到 DTO
intention.showInspector=顯示檢查器彈出視窗
invalid.method.name=方法名稱無效
jpa.buddy.generation=JPA Buddy
jpa.entity.from.pojo=從 POJO 生成 JPA 實體
jpa.structure=JPA 資源管理器
jpa.structure.updated=JPA 資源管理器樹已更新
jpaBuddy.title=JPA Buddy
label.index=索引
label.migrate.entity.projection.type.repositoryMethodTo=將儲存庫方法{0}“{1}”的實體/投影類型遷移到
label.named.query=命名查詢
liquibase.diff.feature.description=差異 Liquibase 更新日誌生成是一項非常有用的功能，可以在日常工作中節省大量時間。通過使用此功能，您可以自動生成包含更新資料庫所需的所有程式碼的 Liquibase 更新日誌，以使其符合您的 JPA 模型。可以通過將 JPA 實體與一個資料庫、兩個資料庫，甚至一個 VCS 分支中的 JPA 實體與另一個 VCS 分支中的 JPA 實體進行比較來生成差異更新日誌，這在您無權存取目標資料庫時非常有用。
liquibase.diff.in.existing.file.feature.description=差異 Liquibase 更新日誌生成是一項非常有用的功能，可以在日常工作中節省大量時間。通過使用此功能，您可以自動生成包含更新資料庫所需的所有程式碼的 Liquibase 更新日誌，以使其符合您的 JPA 模型。可以通過將 JPA 實體與一個資料庫、兩個資料庫，甚至一個 VCS 分支中的 JPA 實體與另一個 VCS 分支中的 JPA 實體進行比較來生成差異更新日誌，這在您無權存取目標資料庫時非常有用。
liquibase.init.feature.description=初始化架構 Liquibase 更新日誌動作可幫助開發者從頭開始生成資料庫架構。它可以使用您的 JPA 實體或現有資料庫作為源。因此，您將獲得一個 Liquibase 更新日誌，其中包含架構初始化所需的所有指令。如果您將 Liquibase 整合到現有應用程式中，或者決定生成用於資料庫初始化的單個腳本而不是執行大量舊的更新日誌，則此功能非常有用。此外，它還可以幫助設定新的開發或測試環境。
mapper.naming=命名模式
mapper.naming.collection.strategy=集合的映射命名策略
mapper.naming.hint=使用 ${ENTITY_NAME} 和 ${DTO_NAME} 將相應的類別名放入方法名稱中
mapper.naming.to.dto=從實體到 DTO
mapper.naming.to.entity=從 DTO 到實體
mapper.naming.update=從 DTO 更新實體
mapping.methodAlreadyExists=類別中已存在具有相同名稱和不同簽名的方法
mysql.unsupported.sequence=MySQL 不支持的序列。改用 AUTO_INCRMENT。
new=新
no=否
notification.content.attribute.must.be.embedded.type=特性必須為嵌入式類型\!
notification.content.class.not.found.or.it.not.entity=找不到類別 ''{0}'' 或它不是實體
notification.content.containing.file.not.found=找不到包含檔案
notification.content.entity.not.found=找不到實體
notification.content.errorMessage={0}<br/> 有關詳情，請參閱日誌檔案({1})
notification.content.incorrect.property.type.for.object.editor=物件編輯器的屬性類型不正確\!
notification.content.not.implemented=未實作\!
notification.content.psi.file.not.found.in.jpa.palette=在 JPA 面板中找不到 Psi 檔案
ok=確定
open=開啟
palette=面板
palette.tool.window=面板工具視窗
plugin.cannot.be.dynamically.uploaded=JPA Buddy 延伸模組目前無法動態移除
popup.content.dragging.from.palette.not.available.indices=當索引更新時，無法從面板中拖動。
popup.title.choose.repository.class=選擇儲存庫類別
popup.title.inspector=檢查器
popup.title.jpa.utilities=JPA 實用工具
popup.title.lifecycle.callback=生存期回調
popup.title.liquibase.item=Liquibase 條目
popup.title.repository.method=儲存庫方法
progress.title.create.dto.class=建立 DTO 類別…
project.error.caption=JPA Buddy 錯誤
project.persistenceUnit.caption=JPA Buddy
project.persistenceUnit.changeSettings=更改設定
project.persistenceUnit.initialized=預設持久性單元已初始化
projection.class.comment.help.tooltip=<html>變數 <b>ENTITY_FQN</b> - 建立投影所依據的實體完全限定名稱。</html>
projection.comment.description=<html>註釋鏈接正則表達式允許 JPA Buddy 將投影與其 JPA 實體相關聯。要在註釋中指定目標實體 FQN 的佔位符，請使用 <b>(?\\&lt;entity\\&gt;.*)</b> 模式。<br><br>因此，如果正則表達式被定義為 <b>A Projection for the {@link (?.*)} entity.</b>，它將在以下註釋中解析\: <i>//A Projection for the {@link io.jpabuddy.demo.entities.Project} entity.</i>。<br><br>當欄位為空時，該功能將被停用。</html>
projection.name.pattern.description=<html>如果您在 JPA 實體與投影之間使用強命名約定，您可以在此處宣告它們。它允許 JPA Buddy 將投影與其 JPA 實體相關聯。<br><br>要為目標 JPA 實體的簡單類別名指定佔位符，請使用 <b>(?\\&lt;entity\\&gt;.*)</b> 模式。例如，(?.*)Prj 表示 MyEntityPrj 類別將被視為 MyEntity 的投影。<br><br>當欄位為空時，該功能將被停用。</html>
properties.calculation.error=屬性計算錯誤
properties.calculation.error.message=異常資訊
properties.calculation.logForDetails=參閱日誌了解詳細資訊
re.columns.from.db.feature.description=如果您喜歡先設計資料庫，然後編寫 JPA 實體來映射表，那麼此功能對您來說將非常方便，並且可以在日常工作中節省大量時間\! 使用“資料庫中的列”動作，您將能夠將所選特性轉換為 JPA 實體中的欄位。它還支援 ManyToOne、OneToOne、OneToMany 和 ManyToMany 關聯的映射。最棒的是它不會重新生成整個實體，而是將新字段新增到現有的實體宣告中。
re.entities.from.db.feature.description=如果您喜歡先設計資料庫，然後編寫 JPA 實體來映射表，或者如果您是在現有資料庫上開發應用程式，那麼此功能對您來說將非常方便，並且可以在日常工作中節省大量時間\! 使用“從資料庫生成實體”動作，只需點擊幾下即可將所選資料庫表及其特性轉換為 JPA 實體，包括約束、索引、列屬性等。它還支援 ManyToOne、OneToOne、OneToMany 和 ManyToMany 關聯的映射。最棒的是它不會重新生成整個實體，而是將新字段新增到現有的實體宣告中。
refactoring.rename.accessors=重新命名存取器
refactoring.rename.dto.fields=重新命名 DTO 欄位
regexp.should.have.one.group={0} 必須有一個名為“{1}”的組，例如 (?<{1}>.*)
remove=移除
repository.equality.condition.form=相等條件形式
repository.no.selected.item=請至少選擇 {0} 中的一個條目
repository.no.selected.item.warning=請至少選擇其中的一個條目
repository.other.conditions.form=其他條件形式
repository.verb.conditions.form=動詞條件形式
save=儲存
select.columns=選擇列
separator.class=類別
separator.entity=實體
separator.item.name=分隔符條目
separator.other=其他
serializable.type=Serializable 類型
show.all=全部顯示
show.bean.injection.completion.on=顯示 Bean 注入補全\:
showDiff=顯示更改
smart.bean.injection=自動檢測 Bean 注入類型
smart.bean.injection.help=根據先前為所選類別注入的 Bean，自動檢測 Bean 注入類型。如果沒有注入的 Bean，將使用“預設 Bean 注入器策略”
smart.bean.injection.injectToBeanMethodSignature=對 @Bean 方法使用方法參數注入
smart.completion.availability.disable.caption=停用
smart.completion.availability.enableCreation.caption=基於現有程式碼和建議的程式碼顯示選項
smart.completion.availability.enableCreation.example=例如，如果它們對應於現有的 JPA 實體，<br>則在補全列表中顯示不存在的 Spring Data JPA 儲存庫<a href\="https\://www.jetbrains.com/help/idea/jpa-buddy-coding-assistance.html\#code-completion">了解詳情</a>
smart.completion.availability.enableExisting.caption=基於現有程式碼顯示選項
smart.completion.availability.enableExisting.example=例如，映射到實體的 DTO 選項以及基於現有 MapStruct <br> mapper 和 Spring Data JPA 儲存庫的尋找選項
spring.data.repository=Spring Data 儲存庫
sql.empty=生成的 SQL 為空
start.typing.for.search=開始輸入以進行搜尋
structure.mode.none=不可見
structure.mode.none.help=“JPA 資源管理器”工具視窗完全隱藏。您無法從任何地方存取它。
structure.mode.project=專案工具視窗中的選項
structure.mode.project.help=“JPA 資源管理器”工具視窗可以作為專案的替代表示。要存取它，請開啟“專案”工具視窗並從下拉選單中選擇“JPA 資源管理器”。
structure.mode.separate=單獨的工具視窗
structure.mode.separate.help=JPA 資源管理器作為單獨的工具視窗呈現。
structure.mode.unified=統一工具視窗
structure.mode.unified.help=“JPA 資源管理器”工具視窗在統一工具視窗內顯示為頁籤。要存取它，請開啟 JPA Buddy 工具視窗並選擇“結構”頁籤。
subscription.request.license=JPA Buddy 授權
subscription.request.licenseeEmail=被許可人電子郵件地址
subscription.request.link=<a href\="requestLicense">存取鏈接以獲取授權。</a>
subscription.request.success=感謝您申請\! IntelliJ IDEA Ultimate 授權申請已成功發送。
subscription.request.title=IntelliJ IDEA Ultimate 授權
subscription.request.topLabel=我們注意到您正在使用帶有 JPA Buddy 延伸模組有效授權的 IntelliJ IDEA Community Edition，該授權即將到期。如您所知，JPA Buddy 於 2023 年被 JetBrains 收購。自此之後，JPA Buddy 的所有付費功能均已轉移到 IntelliJ IDEA Ultimate。為了使您能夠繼續存取 JPA Buddy 的付費功能，我們為您提供了為期六個月的 IntelliJ IDEA Ultimate 授權。
subscription.requestUltimate=IntelliJ IDEA Ultimate 授權申請
subscription.requestUltimate.description=您有資格獲得為期六個月的 IntelliJ IDEA Ultimate 授權。請點擊下方申請授權。
subscription.required=在 IntelliJ IDEA Ultimate Edition 中可用
subscription.sendRequest=申請授權
suppress.LombokBuilderAllArgsInspection=Lombok @Builder 需要針對此類別的適當建構函式
symbols=符號
text.comment=評論
toolWindow.infoDialog.text=極簡模式旨在最大限度地減少對開發者的干擾。如果您喜歡一切觸手可及，一定會喜歡它\!<br/><ul><li>JPA Buddy 工具視窗將被隱藏；<li>JPA 資源管理器將在“專案”工具視窗中可用，還包括其他選項(專案、軟體套件等)；<li>JPA 設計器中的所有動作都可以在<b>生成</b>選單(<b>{0}</b>)、<b>上下文動作</b>選單(<b>{1}</b>)和<b>編輯器工具列<b>中找到；<li>此外，您還可以通過點擊“新增鍵盤快捷鍵”或稍後在<b>{2} ->  按鍵映射</b>中綁定您最喜歡的快捷鍵來呼叫 JPA 設計器。<li>您還可以為工具視窗指定<a href\="\#designer-settings">自訂可見性設定</a>；</li></ul>請檢視我們準備的關於極簡模式的<a href\="https\://www.jetbrains.com/help/idea/jpa-buddy-minimalistic-mode.html">指南</a>。
tooltip.choose.class=選擇類別
tooltip.go.to=轉到
tooltip.hibernate.custom.type=Hibernate 自訂類型
tooltip.jpa.converter=JPA 轉換器
tooltip.navigate.to=導覽到 {0}
tooltip.show.entity.attribute=顯示實體特性
tooltip.show.usages=顯示用法
tree.dto.and.projection=DTO 和投影
unresolved.reference=未解析的參照\: {0}
use.lombok=使用 Lombok
validation_error=驗證錯誤
view.mode=檢視模式
view.mode.custom=自訂
view.mode.custom.help=選擇您想看檢視的內容和方式。
view.mode.extensive=擴展
view.mode.extensive.help=顯示 JPA Buddy 工具視窗及其所有內容。對於那些即將開始使用 JPA 的人很有用。所有熱門選項將始終在您眼前，因此更容易學習並選擇正確的選項來生成和修改程式碼。
view.mode.minimalistic=極簡
view.mode.minimalistic.help=不顯示 JPA Buddy 工具視窗。JPA 資源管理器作為“專案”工具視窗中的一個選項提供。可以使用標準生成快捷鍵(<b>{0}</b>)或在“編輯器”工具列中找到程式碼生成選項。JPA 檢查器以彈出視窗形式提供，並且可以按意圖或使用快捷鍵(<b>{1}</b>)呼叫。對於那些喜歡使用快捷鍵而不是可視化工具的人來說非常有用。
warning=警告
yes=是
