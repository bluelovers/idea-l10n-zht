build=建置
build.something=建置 {0}
generate.xcodeproj=生成 Xcode 專案
run.configuration.name=Kotlin Mobile
run.configuration.description=iOS/Android 套用
run.configuration.test.name=Kotlin Mobile 測試
run.configuration.test.description=XCTest/JUnit 測試
run.configuration.editor.module=模組:
run.android.started=會話以行程 {0} 開始
run.android.finished=行程已完成
run.waiting=正在等待裝置…
run.preparing=正在準備應用程式…
run.installing=正在安裝應用程式…
run.installing.tests=正在安裝測試執行程序…
run.starting=正在啟動應用程式…
run.starting.tests=正在開始測試…
run.configuration.name.common.tests=通用測試
run.configuration.name.apple=iOS 套用
run.configuration.name.apple.tests=iOS 庫測試
run.configuration.name.apple.tests.xctest=iOS 套用測試
run.configuration.name.android=Android 套用
run.configuration.name.android.tests=Android 庫測試
run.configuration.device.not.selected=未選擇目標裝置

device.host=本地裝置
device.not.selected=未選擇裝置
notification.group.id=移動
xcodeproj.changed.manually=Xcode 專案已手動修改
xcodeproj.changed.manually.description=對 Xcode 專案的變更沒有效果。\n請使用 Gradle 設定專案設定。
sdk.sync.missing.sdk.title=Android SDK
sdk.sync.missing.sdk.content=找不到 Android SDK。請安裝 SDK 並在 local.properties 中設定 sdk.dir。
run.configuration.name.android.app.tests=Android 套用測試
android.emulator.launch.timeout=無法啟動模擬器: 超時
android.aapt.empty=AAPT 沒有為 ''{0}'' 返回資料
android.aapt.no.package=AAPT 未返回軟體套件名稱
android.aapt.no.main=AAPT 沒有為 ''{0}'' 返回主 Activity 名稱
gradle.loading=正在載入 Gradle Apple 專案…
import.build.view.name=匯入
import.event.start.message=匯入…
import.event.warning.build.target.not.found.message=目標 {0}: 找不到({1}, {2}, {3})的建置目標
import.event.warning.xcframework.slice.not.found.message=目標 {0}: 找不到({2}, {3})的 {1} 切片
import.event.finish.success.message=已完成
import.event.finish.failure.message=已失敗
import.event.finish.skipped.message=已跳過
android.migration.notification.title=Kotlin Android 模組遷移
android.migration.notification.suggest=該專案使用 Kotlin Android 延伸模組。遷移到 Kotlin Multiplatform 延伸模組，即可從 Kotlin Multiplatform Mobile 開發的所有功能中獲益。
android.migration.action.name=將專案從 Kotlin Android 遷移到 Kotlin Multiplatform
android.migration.command.name=從 Kotlin Android 遷移到 Kotlin Multiplatform
android.migration.not.possible.warning.notification.title=無法從 Kotlin Android 延伸模組遷移
android.migration.not.possible.warning.notification.message=模組 ''{0}'' 使用的是舊式 KMM 專案設定，無法自動更新。\n請考慮手動將 Kotlin Android 延伸模組取代為 Kotlin MultiPlatform。
android.migration.action.module.name=將模組 ''{0}'' 從 Kotlin Android 遷移到 Kotlin Multiplatform
android.migration.force.action.name=強制將專案從 Kotlin Android 遷移到 Kotlin Multiplatform。這可能會導致重新載入 Gradle 專案時出錯。
android.migration.force.action.module.name=強制將模組 ''{0}'' 從 Kotlin Android 遷移到 Kotlin MultiPlatform。這可能會導致重新載入 Gradle 專案時出錯。
android.migration.title=將模組 ''{0}'' 從 Kotlin Android 遷移到 Kotlin Multiplatform
android.migration.dialog.confirm.button.migrate=遷移
android.migration.dialog.confirm.text.intro=遷移後不會移動以下 ''{0}'' 模組依賴項:
android.migration.dialog.confirm.text.explanation=使用這些依賴項的程式碼可能會以紅色高亮顯示，但專案將正確編譯。
android.migration.dialog.confirm.text.question=繼續?
android.migration.step.create.sourceset.progress=創建 ''{0}'' 源集
android.migration.step.create.kotlin.config.progress=創建 Kotlin 設定
android.migration.step.delete.kotlin.options.progress=刪除 Kotlin 選項
android.migration.step.remove.unused.dependencies.progress=從主範圍中刪除遷移的依賴項
android.migration.step.clean.dependencies.progress=清除頂級依賴項
android.migration.step.replace.plugin.progress=取代延伸模組
android.migration.step.add.kotlin.config.progress=添加 Kotlin 設定
android.migration.intention.action.name=遷移專案
android.migration.highlighting.pass.description=該專案使用 Kotlin Android 延伸模組。遷移到 Kotlin Multiplatform 延伸模組，即可從 Kotlin Multiplatform Mobile 開發的所有功能中獲益。
android.migration.highlighting.pass.tooltip=執行建置檔案的自動遷移，並開始在 Android 專案模組中使用 Kotlin Multiplatform 延伸模組。您將能夠使用 Android 模組中的所有 AppCode 功能。
android.migration.highlighting.action.name=遷移
android.migration.kotlin.module.0.uses.kotlin.1.message=模組 ''{0}'' 使用 Kotlin 延伸模組版本 {1}。
android.migration.kotlin.modules.0.uses.kotlin.1.message=模組 {0} 使用 Kotlin 延伸模組版本 {1}。
android.migration.kotlin.plugin.suggest.update.to.0.message=請考慮手動將延伸模組升級到版本 {0} 或更高版本，以避免在重新載入遷移的 Gradle 專案時可能出現的錯誤。