spring.boot.application.endpoints.tab.title=Actuator
spring.boot.application.endpoints.beans.tab.title=Bean
spring.boot.application.endpoints.health.tab.title=執行狀況
spring.boot.application.endpoints.health.tab.configurable.name=執行狀況

spring.boot.application.endpoints.refresh.action.name=重新整理
spring.boot.application.endpoints.refresh.action.description=重新整理套用程序端點資料

spring.boot.application.endpoints.navigate.to.bean.class.action.name=導航到 Bean 類
spring.boot.application.endpoints.navigate.to.bean.class.action.description=導航到所選 Bean 類
spring.boot.application.endpoints.show.context.action.name=顯示上下文
spring.boot.application.endpoints.diagram.mode.action.name=圖模式
spring.boot.application.endpoints.configure.health.tab.action.name=設定執行狀況頁籤設定
spring.boot.application.endpoints.health.tab.refresh.action.name=重新整理(已啟用自動重新整理，有 {0} 秒延遲)
spring.boot.application.endpoints.beans.diagram.provider=Spring 執行時 Bean

spring.boot.application.endpoints.root.context=根上下文
spring.boot.application.endpoints.parent.context=父上下文: {0}
spring.boot.application.endpoints.health.status=狀態: {0}
spring.boot.application.endpoints.health.indicators.disabled=所有執行狀況指示器均已禁用。只能了解整體狀態。

spring.boot.application.endpoints.application.ready.check.failed=<html>無法檢查應用程式就緒狀態: {0}<br>按“重新整理”按鈕可重新開始就緒狀態檢查</html>
spring.boot.application.endpoints.application.ready.check.timeout.exceeded=已超過超時時間
spring.boot.application.endpoints.error.jmx.agent.not.loaded=未載入 JMX 代理
spring.boot.application.endpoints.error.failed.to.retrieve.jmx.service.url=無法檢索應用程式 JMX 服務 URL
spring.boot.application.endpoints.error.failed.to.retrieve.application.port=無法檢索套用程序連接埠:<br> {0}
spring.boot.application.endpoints.error.failed.to.retrieve.application.beans.snapshot=<html>無法檢索應用程式 Bean 快照:<br> {0}</html>
spring.boot.application.endpoints.error.failed.to.retrieve.endpoint.data=無法檢索 ''{0}'' 端點資料
spring.boot.application.endpoints.error.property.is.set.to.false=''{0}'' 屬性設定為 false
spring.boot.application.endpoints.error.not.exposed=端點未通過 ''{0}'' 屬性公開
spring.boot.application.endpoints.error.excluded=端點通過 ''{0}'' 屬性排除
spring.boot.application.endpoints.error.bean.not.initialized=未初始化 ''{0}'' Bean
spring.boot.application.endpoints.config.file.not.found=找不到設定檔案
spring.boot.application.endpoints.bean.definition.not.found=找不到 Bean 定義
spring.boot.application.endpoints.bean.class.not.found=找不到 Bean 類
spring.boot.application.endpoints.bean.not.injected=未在任何位置注入 Bean
spring.boot.application.endpoints.bean.injected.into=已注入到
spring.boot.application.endpoints.bean.depends.on=依賴於
spring.boot.application.endpoints.bean.item.group.dependent=依賴執行時 Bean
spring.boot.application.endpoints.bean.item.group.injected=注入的執行時 Bean
spring.boot.application.endpoints.bean.popup.title=執行時 Bean
spring.boot.application.endpoints.bean.auto.configuration=自動設定
spring.boot.application.endpoints.health.check=狀態重新整理間隔
spring.boot.application.endpoints.health.check.unit= 秒
spring.boot.application.endpoints.health.check.tooltip=自動重新整理狀態樹

spring.boot.application.url.path.dialog.title=設定預設路徑
spring.boot.application.url.path.label=預設路徑:

spring.boot.choose.class.dialog.title=選擇 Spring Boot 類

action.SpringBootApplicationUrlPathEditAction.text=編輯預設路徑

spring.boot.application.run.configuration.main.class=主類
spring.boot.application.run.configuration.debug.output=啟用偵錯輸出(&D)
spring.boot.application.run.configuration.debug.output.tooltip=<html>通過添加虛擬機選項 <code>-Ddebug</code> 啟用偵錯輸出</html>
spring.boot.application.run.configuration.hide.banner=隱藏橫幅(&H)
spring.boot.application.run.configuration.hide.banner.tooltip=<html>通過添加虛擬機選項 <code>-Dspring.main.banner-mode=OFF</code> 隱藏橫幅<br>(<code>-Dspring.main.show-banner=false</code> 適用於 Spring Boot 1.4.x 或更早版本)</html>
spring.boot.application.run.configuration.launch.optimization=啟用啟動最佳化(&Z)
spring.boot.application.run.configuration.launch.optimization.tooltip=<html>添加虛擬機選項 <code>-XX:TieredStopAtLevel=1</code> 和 <code>-noverify</code> 以加快啟動速度。<br>請驗證這些選項不會對您的特定專案產生不利影響。</html>
spring.boot.application.run.configuration.jmx.agent=啟用 JM&X 代理(&X)
spring.boot.application.run.configuration.jmx.agent.tooltip=<html>通過添加以下虛擬機選項啟用 JMX 代理來顯示應用程式端點資料: <code><br>-Dcom.sun.management.jmxremote <br>-Dspring.jmx.enabled=true <br>-Dspring.liveBeansView.mbeanDomain <br>-Dspring.application.admin.enabled=true</code><p>啟用此選項可能會減慢啟動速度。<p>要求 Spring Boot 1.3.0 或更高版本。</html>
spring.boot.application.run.configuration.on.update.action=執行“更新”操作時(&U)
spring.boot.application.run.configuration.on.frame.deactivation=切換出 IDE 時(&F)
spring.boot.application.run.configuration.do.nothing=不執行任何操作
spring.boot.application.run.configuration.active.profiles=有效設定檔案
spring.boot.application.run.configuration.active.profiles.tooltip=逗號分隔的設定檔案列表
spring.boot.application.run.configuration.override.parameters=覆寫設定屬性(&P):
spring.boot.application.run.configuration.class.not.specified=未指定 Spring Boot 應用程式類
spring.boot.application.run.configuration.invalid.class=不是有效的 Spring Boot 應用程式類
spring.boot.application.run.configuration.invalid.parameter=第 {0} 行中的屬性名稱為空
spring.boot.application.run.configuration.policy.not.available.on.update.action=執行“更新”操作時 ''{0}'' 不可用
spring.boot.application.run.configuration.policy.not.available.on.frame.deactivation=切換出IDE時 ''{0}'' 不可用
spring.boot.application.run.configuration.environment.section=環境(&M)
spring.boot.application.run.configuration.framework.section=Spring Boot(&G)
spring.boot.jmx.setup.cant.parse.jmx.port=無法解析 JMX 遠端連接埠 {0}
spring.boot.jmx.setup.for.remote.case.two.ports.should.match=對於遠端目標，JMX 註冊表連接埠 {0} 和 JMX RMI 伺服器連接埠 {1} 應設定為相同的值
spring.boot.update.policy.classes.resources.name=更新類和資源
spring.boot.update.policy.classes.resources.description=<nobr>編譯所有已修改和依賴檔案。</nobr>
spring.boot.update.policy.classes.trigger.name=熱交換類，如果失敗則更新觸發器檔案
spring.boot.update.policy.classes.trigger.description=<i>在偵錯模式下:</i> <br>編譯所有已修改和依賴檔案、熱交換類，<br>在熱交換失敗時更新觸發器檔案。<br><i>否則:</i> <br>編譯所有已修改和依賴檔案並更新觸發器檔案。<br>通過添加 VM 選項 <code>-Dspring.devtools.restart.trigger-file=.restartTriggerFile</code> 指定觸發器文件名
spring.boot.update.policy.resources.name=更新資源
spring.boot.update.policy.resources.description=<nobr>編譯所有已修改和依賴資源檔案。</nobr>
spring.boot.update.policy.trigger.name=更新觸發器檔案
spring.boot.update.policy.trigger.description=更新觸發器檔案。<br>添加 VM 選項 <code>-Dspring.devtools.restart.trigger-file=.restartTriggerFile</code> 指定觸發器文件名
spring.boot.run.config.type.name=Spring Boot
spring.boot.run.config.type.description=Spring Boot 套用程序
spring.boot.run.config.update.application=更新 ''{0}'' 套用程序
spring.boot.run.config.settings.background.compilation.enabled=已啟用背景編譯
spring.boot.run.config.settings.running.application.update.policies=執行套用程序更新策略
spring.boot.run.config.settings.on.update.action=執行“更新”操作時
spring.boot.run.config.settings.on.frame.deactivation=切換出IDE時
spring.boot.run.config.fragment.framework.group=Spring Boot
spring.boot.run.config.fragment.launch.optimization=禁用啟動最佳化(&Z)
spring.boot.run.config.fragment.jmx.agent=禁用 JMX 代理(&X)
spring.boot.run.config.fragment.override.properties=覆蓋設定屬性(&P)