add.annotation.value.intention.family.name=新增 'value\='
add.annotation.value.intention.name=新增 'value\='
change.to.c.style.comment.intention.family.name=取代為 C 樣式註釋
change.to.c.style.comment.intention.name=取代為 C 樣式註釋
change.to.end.of.line.comment.intention.family.name=取代為行尾註釋
change.to.end.of.line.comment.intention.name=取代為行尾註釋
convert.closure.to.method.intention.family.name=將屬性轉換為方法
convert.closure.to.method.intention.name=轉換為方法
convert.concatenation.to.gstring.intention.family.name=將字串串聯轉換為 GString
convert.concatenation.to.gstring.intention.name=轉換為 GString
convert.from.geese.braces.intention.family.name=格式化單獨的行中的大括號
convert.from.geese.braces.intention.name=格式化單獨的行中的大括號
convert.g.string.to.string.intention.family.name=將 GString 轉換為字串
convert.g.string.to.string.intention.name=轉換為字串
convert.integer.to.binary.intention.family.name=轉換為二進制
convert.integer.to.binary.intention.name=轉換為二進制
convert.integer.to.decimal.intention.family.name=轉換為十進制
convert.integer.to.decimal.intention.name=轉換為十進制
convert.integer.to.hex.intention.family.name=轉換為十六進制
convert.integer.to.hex.intention.name=轉換為十六進制
convert.integer.to.octal.intention.family.name=轉換為八進制
convert.integer.to.octal.intention.name=轉換為八進制
convert.java.style.array.intention.family.name=將 Java 樣式陣列建立轉換為 Groovy 語法
convert.java.style.array.intention.name=轉換 Java 樣式陣列建立
convert.junit.assertion.to.assert.statement.intention.family.name=將 JUnit 斷言轉換為 assert 語句
convert.junit.assertion.to.assert.statement.intention.name=將 JUnit 斷言轉換為 assert 語句
convert.map.to.class.intention.family.name=將 Groovy 原生映射轉換為類別實例
convert.map.to.class.intention.name=轉換為類別
convert.method.to.closure.intention.family.name=將方法轉換為閉包類型的屬性
convert.method.to.closure.intention.name=轉換為閉包屬性
convert.multiline.string.to.single.line.intention.family.name=將多行字串轉換為單行
convert.multiline.string.to.single.line.intention.name=轉換為單行文字
convert.parameter.to.map.entry.intention.family.name=將方法或閉包參數轉換為映射條目
convert.parameter.to.map.entry.intention.name=將參數轉換為映射條目
convert.simple.getter.to.property.intention.family.name=將簡單的 getter 轉換為屬性
convert.simple.getter.to.property.intention.name=轉換為屬性
convert.string.to.g.string.intention.family.name=將字串轉換為 GString
convert.string.to.g.string.intention.name=轉換為 GString
convert.string.to.multiline.intention.family.name=將文字轉換為多行文字
convert.string.to.multiline.intention.name=轉換為多行
convert.to.dollar.slash.regex.intention.family.name=將字串文字轉換為 $/ 字串
convert.to.dollar.slash.regex.intention.name=轉換為 $/ 字串
convert.to.geese.braces.intention.family.name=將閉包的右大括號置於一行中
convert.to.geese.braces.intention.name=將大括號置於一行中
convert.to.regex.intention.family.name=將字串文字轉換為正則表達式
convert.to.regex.intention.name=轉換為正則表達式
create.parameter.for.field.intention.family.name=為欄位新增建構函式參數
create.parameter.for.field.intention.name=為欄位新增建構函式參數
demorgans.intention.name1=將 '\\&\\&' 取代為 '||'
demorgans.intention.name2=將 '||' 取代為 '\\&\\&'
demorgans.law.intention.family.name=德摩根定律
each.to.for.intention.family.name=將 each 取代為 for-in
each.to.for.intention.name=取代為 for-in
expand.boolean.intention.family.name=擴展布爾
expand.boolean.intention.name=將布爾使用擴展為 if-else
flip.comparison.intention.family.name=翻轉比較動作數
flip.comparison.intention.name=將 ''{0}'' 翻轉為 ''{1}''
flip.conditional.intention.family.name=翻轉條件
flip.conditional.intention.name=翻轉 '?\:'
flip.conjunction.intention.family.name=翻轉合取動作數
flip.if.intention.family.name=翻轉 if 語句
flip.if.intention.name=翻轉 if 語句
flip.smth.intention.name=翻轉 ''{0}''
for.to.each.intention.family.name=將 for-in 取代為 each
for.to.each.intention.name=取代為“.each”
gr.alias.import.intention.family.name=別名匯入靜態匯入的成員
gr.alias.import.intention.name=別名匯入
gr.break.string.on.line.breaks.intention.family.name=出現 '\\n' 時斷開字串
gr.break.string.on.line.breaks.intention.name=出現 '\\n' 時斷開字串
gr.convert.string.to.char.intention.family.name=轉換為 char
gr.convert.string.to.char.intention.name=轉換為 char
gr.convert.type.cast.to.safe.cast.intention.family.name=將轉換表達式轉換為安全的轉換表達式
gr.convert.type.cast.to.safe.cast.intention.name=轉換為安全轉換
gr.copy.string.concatenation.content.intention.family.name=將字串串聯文本複製到剪貼簿
gr.copy.string.literal.content.intention.text=將字串文字文本複製到剪貼簿
gr.create.missing.switch.branches.intention.family.name=建立缺少的 'switch' 分支
gr.create.missing.switch.branches.intention.name=建立缺少的 'switch' 分支
gr.introduce.local.variable.intention.family.name=引入區域變數
gr.introduce.local.variable.intention.name=引入區域變數
gr.make.member.private.intention.family.name=設為 'private'
gr.make.member.private.intention.name=設為 'private'
gr.make.member.protected.intention.family.name=設為 'protected'
gr.make.member.protected.intention.name=設為 'protected'
gr.make.member.public.intention.family.name=設為 'public'
gr.make.member.public.intention.name=設為 'public'
gr.redundant.else.intention.family.name=移除冗餘的 'else' 關鍵字
gr.redundant.else.intention.name=移除冗餘的 'else' 關鍵字
gr.remove.annotation.intention.family.name=移除註解
gr.remove.annotation.intention.name=移除
gr.remove.explicit.type.declaration.intention.family.name=移除顯式類型宣告
gr.remove.explicit.type.declaration.intention.name=移除顯式類型
gr.set.strong.type.intention.family.name=宣告顯式類型
gr.set.strong.type.intention.name=宣告顯式類型
gr.sort.map.keys.intention.family.name=按字母順序對映射項排序
gr.sort.map.keys.intention.name=按字母順序排序
gr.split.declaration.intention.family.name=拆分變數宣告
import.on.demand.intention.family.name=新增按需 static import
import.on.demand.intention.name=新增按需匯入
import.static.intention.family.name=新增單成員 static import
import.static.intention.name=新增 static import
indexed.expression.conversion.intention.family.name=將 [] 形式轉換為索引方法
indexed.expression.conversion.intention.name=將 [] 存取轉換為方法形式
indexing.method.conversion.intention.family.name=將索引方法轉換為 [] 形式
indexing.method.conversion.intention.name=轉換為 [] 形式
invert.if.intention.family.name=反轉 'if' 條件
invert.if.intention.name=反轉 'if' 條件
make.closure.call.explicit.intention.family.name=將閉包呼叫設為顯式
make.closure.call.explicit.intention.name=將閉包呼叫設為顯式
make.closure.call.implicit.intention.family.name=將閉包呼叫設為隱式
make.closure.call.implicit.intention.name=將閉包呼叫設為隱式
merge.else.if.intention.family.name=合併 else if
merge.else.if.intention.name=合併 else-if
merge.if.and.intention.family.name=將嵌套 if 合併為 and-ed 條件
merge.if.and.intention.name=合併 if
move.class.to.new.file.intention.family.name=將類別移至單獨的檔案
move.class.to.new.file.intention.name=移至單獨的檔案
negate.comparison.intention.family.name=求反比較
negate.comparison.intention.name=將 ''{0}'' 求反為 ''{1}''
remove.parentheses.from.method.call.intention.family.name=從方法呼叫中移除不必要的圓括號
remove.parentheses.from.method.call.intention.name=移除不必要的圓括號
remove.redundant.class.property.intention.family.name=移除冗餘 .class
remove.redundant.class.property.intention.name=移除冗餘 .class
remove.unnecessary.braces.in.g.string.intention.family.name=移除 GString 中不必要的大括號
remove.unnecessary.braces.in.g.string.intention.name=移除 GString 中不必要的大括號
remove.unnecessary.escape.characters.intention.family.name=移除不必要轉義字元
remove.unnecessary.escape.characters.intention.name=移除不必要轉義字元
remove.unnecessary.return.intention.family.name=移除不必要的 'return' 關鍵字
remove.unnecessary.return.intention.name=移除 'return' 關鍵字
rename.class.to.0=將類別重命名為 ''{0}''
rename.class.to.file.name.intention.family.name=將類別重命名為相應的檔名
rename.file.with.class.intention.family.name=將檔案重命名為相應的類別名
rename.file.with.class.intention.name=將檔案重命名為類別名
replace.abstract.class.instance.by.map.intention.family.name=將匿名類別更改為動態實例化
replace.abstract.class.instance.by.map.intention.name=更改為動態實例化
replace.if.with.ternary.intention.family.name=將 if 語句取代為三元運算符
replace.if.with.ternary.intention.name=取代為 ?\:
replace.qualified.reference.with.import.intention.family.name=將限定參照取代為匯入
replace.qualified.reference.with.import.intention.name=取代為匯入
replace.ternary.with.if.else.intention.family.name=將 '?\:' 取代為 if else
replace.ternary.with.if.else.intention.name=將 '?\:' 取代為 if else
simplify.ternary.operator.intention.family.name=簡化條件表達式
simplify.ternary.operator.intention.name=簡化條件表達式
split.else.if.intention.family.name=拆分 else if
split.else.if.intention.name=拆分 else-if
split.if.intention.family.name=拆分成 2 條 'if' 語句
split.if.intention.name=拆分成 2 條 'if' 語句
split.into.declaration.and.assignment=拆分為宣告和賦值
split.into.separate.declaration=拆分為單獨的宣告
