action.Angular2ExtractComponentAction.text=提取組件…
action.Angular2VisualizeGeneratedTcbAction.description=直觀呈現生成的 Angular 模板 TCB
action.Angular2VisualizeGeneratedTcbAction.text=直觀呈現生成的 Angular 模板 TCB
action.angularCliAdd.text=Angular 相依項…
action.angularCliGenerate.text=Angular 原理圖…
action.angularCliGenerate.title=生成 {0}
angular.action.goto-declaration.component=組件宣告(&D)
angular.action.goto-declaration.directive=指令宣告(&D)
angular.action.goto-related.component-class=組件類別
angular.action.goto-related.group-name=Angular 組件
angular.action.goto-related.inline=<inline>
angular.action.goto-related.module=模組類別
angular.action.goto-related.styles=樣式{0}
angular.action.goto-related.template=模板
angular.action.goto-related.tests=測試{0}
angular.action.goto-type-declaration.component-template=組件模板(&T)
angular.action.new-project.description=Angular CLI 有助於建立新的開箱即用 Angular 應用程式。
angular.action.new-project.label-additional-parameters=附加參數\:
angular.action.new-project.label-content-root-folder=內容根目錄
angular.action.new-project.label-defaults=使用預設專案設定(&D)
angular.action.new-project.label-project-name=專案
angular.action.new-project.label-standalone=使用獨立組件建立新項目(&S)
angular.action.new-project.name=Angular CLI
angular.action.new-project.presentable-package-name=Angular CLI(&C)\:
angular.action.new-project.wrong-folder-name={0} 名稱 ''{1}'' 無效。{0} 名稱必須以字母開頭，並且只能包含字母數字字元或短劃線。新增短劃線時，短劃線後的分段也必須以字母開頭。
angular.action.ng-add.button-close=關閉
angular.action.ng-add.button-install=安裝
angular.action.ng-add.cant-add-new-dependency=無法新增新的 Angular 相依項
angular.action.ng-add.install-current=安裝當前
angular.action.ng-add.install-latest=安裝最新
angular.action.ng-add.install-other=安裝未在上面列出的軟體套件…
angular.action.ng-add.installing-for=正在為 {1} 安裝 {0}
angular.action.ng-add.not-supported-installed-try-latest=已安裝的軟體套件版本似乎不支持 'ng add'。\n\n是否要安裝該軟體套件的最新版本?
angular.action.ng-add.not-supported-specified-try-latest=指定的軟體套件版本似乎不支持 'ng add'。\n\n是否要安裝該軟體套件的最新版本?
angular.action.ng-add.pacakge-not-installed=未安裝 Angular CLI 軟體套件。
angular.action.ng-add.package-name=軟體套件名稱
angular.action.ng-add.title=通過 'ng add' 安裝
angular.action.ng-generate.cant-generate-code=無法從 Angular Schematics 生成程式碼
angular.action.ng-generate.error-label=\ - 錯誤\: {0}
angular.action.ng-generate.label.parameters=參數 {0}
angular.action.ng-generate.params.options=<選項…>
angular.action.ng-generate.title=使用 Angular Schematics 生成程式碼
angular.colors.banana-binding=雙向資料綁定 ‘[(...)]’
angular.colors.block-braces=塊大括號
angular.colors.block-name=塊名稱
angular.colors.event-binding=事件綁定 ‘(event)’
angular.colors.expansion-form=複數表達式
angular.colors.expansion-form-comma=複數表達式中的逗號
angular.colors.expansion-form-delimiter=複數表達式中的大括號
angular.colors.interpolation-delimiter=插值中的大括號
angular.colors.ng-deep-pseudo=偽選擇器 ‘\:\:ng-deep’
angular.colors.property-binding=屬性綁定 ‘[property]’
angular.colors.signal=信號
angular.colors.template-binding=結構指令 ‘*directive’
angular.colors.template-expression=模板表達式
angular.colors.template-variable=模板變數
angular.command.name.auto-import-angular-directives=自動匯入 Angular 指令
angular.configurable.name.angular.template=Angular 模板
angular.configurable.service.auto=自動
angular.configurable.service.auto.help=選擇此選項可在可能的情況下啟用 WebStorm 自訂 Angular TypeScript 延伸模組。WebStorm 將使用 TypeScript 語言伺服器檢查來分析模板表達式。如果啟用了“使用來自伺服器的類型”選項，類型評估也將在 TypeScript 語言服務中進行。
angular.configurable.service.disabled=已停用
angular.configurable.service.disabled.help=選擇此選項可以關閉語言服務。將僅使用內部 IDE 檢查。
angular.configurable.service.group=WebStorm Angular TypeScript 延伸模組
angular.configurable.service.title=Angular
angular.description.and-separator=和
angular.description.angular-cli=Angular CLI
angular.description.attribute-selector=特性選擇器
angular.description.element-selector=元素選擇器
angular.description.pipe=管道
angular.description.ref-var=模板參照變數
angular.description.unknown-class=<unknown class>
angular.description.unnamed=<unnamed>
angular.entity.component=組件
angular.entity.component.or.directive=組件或指令
angular.entity.directive=指令
angular.entity.directive.inout=指令輸入/輸出
angular.entity.directive.input=指令輸入
angular.entity.directive.output=指令輸出
angular.entity.directive.property=指令屬性
angular.entity.module=模組
angular.entity.pipe=管道
angular.html.template=Angular HTML 模板
angular.html.template.17=Angular HTML 模板(17+)
angular.html.template.181=Angular HTML 模板(18.1+)
angular.html.template.20=Angular HTML 模板(20+)
angular.inlay.params.option.pipe.arguments=管道實參
angular.inspection.ambiguous-component-tag.message.embedded=組件位於嵌入式模板上\: {0}
angular.inspection.ambiguous-component-tag.message.many-components=在此元素上符合多個組件\: {0}
angular.inspection.ambiguous-component-tag.name=不明確的組件標記
angular.inspection.animation-trigger-assignment.message=動畫觸發器賦值無效
angular.inspection.animation-trigger-assignment.name=動畫觸發器賦值無效
angular.inspection.cyclic-module-dependency.message.cycle=以下各項之間的迴圈相依關係\: {0}
angular.inspection.cyclic-module-dependency.message.self-export={0} 將自身匯出
angular.inspection.cyclic-module-dependency.message.self-import={0} 將自身匯入
angular.inspection.cyclic-module-dependency.message.separator=->
angular.inspection.cyclic-module-dependency.name=遞迴匯入或匯出 Angular 模組或獨立組件
angular.inspection.defer-block-on-trigger.message.argument-not-supported=觸發器 {0} 不支持實參
angular.inspection.defer-block-on-trigger.message.argument-required=觸發器 {0} 需要實參
angular.inspection.defer-block-on-trigger.message.template-var-ref-required=觸發器 {0} 僅支援模板變數參照
angular.inspection.defer-block-on-trigger.message.time-duration-required=觸發器 {0} 僅支援持續時間
angular.inspection.defer-block-on-trigger.name=@defer `on` 觸發器的問題
angular.inspection.for-block-non-iterable.message.non-iterable-type=類型 {0} 必須具有返回迭代器的 {1} 方法。
angular.inspection.for-block-non-iterable.name=@for 塊中的不可迭代類型
angular.inspection.group.name=Angular
angular.inspection.i18n.message.empty={0} 特性應包含待翻譯特性的名稱
angular.inspection.i18n.message.not-matching=已翻譯的特性 {0} 不存在
angular.inspection.i18n.name=i18n 特性無效
angular.inspection.illegal-for-loop-access.message=無法在 track 表達式內部存取 {0}。此表達式僅可存取 {1} 和包含組件上的屬性。
angular.inspection.illegal-for-loop-access.name=非法 @for 迴圈存取
angular.inspection.inaccessible-symbol.aot.message={0} {1} 是 {2}，並且只有在使用 AOT 編譯器時才能在類別 {3} 內存取
angular.inspection.inaccessible-symbol.name=無法存取的組件成員或指令輸入
angular.inspection.inaccessible-symbol.strict.private.message={0} {1} 是 {2}，並且只能在類別 {3} 中存取
angular.inspection.inaccessible-symbol.strict.protected.message={0} {1} 是 {2}，並且只能在類別 {3} 及其子類別內存取
angular.inspection.inaccessible-symbol.strict.read-only.message=無法賦值給輸入 {0}，因為它是唯讀屬性
angular.inspection.incorrect-block-usage.message.cannot-be-nested={0} 塊不能嵌套在 {1} 下
angular.inspection.incorrect-block-usage.message.duplicated-block={0} 塊只能有一個 {1} 塊
angular.inspection.incorrect-block-usage.message.duplicated-parameter={0} 塊只能有一個 {1} 參數
angular.inspection.incorrect-block-usage.message.hydrate-never-surplus-trigger=如果存在 {1}，則無法指定其他 {0} 觸發器
angular.inspection.incorrect-block-usage.message.missing-block-name=缺少塊名稱
angular.inspection.incorrect-block-usage.message.missing-expression={0} 需要 {1} 參數
angular.inspection.incorrect-block-usage.message.missing-primary-block.parent={0} 塊必須嵌套在主塊 {1} 下
angular.inspection.incorrect-block-usage.message.missing-primary-block.sibling={0} 塊必須是主塊 {1} 的同級塊
angular.inspection.incorrect-block-usage.message.missing-primary-expression={0} 需要一個表達式作為第一個參數
angular.inspection.incorrect-block-usage.message.no-params-allowed={0} 塊不能有參數
angular.inspection.incorrect-block-usage.message.not-last={0} 塊必須位於 {1} 內的最後
angular.inspection.incorrect-block-usage.message.undefined=未知塊 {0}
angular.inspection.incorrect-block-usage.message.unrecognized-parameter={0} 不支持參數 {1}
angular.inspection.incorrect-block-usage.message.unrecognized-parameter-prefix={0} 不支持參數前綴 {1}
angular.inspection.incorrect-block-usage.name=Angular 塊的錯誤用法
angular.inspection.incorrect-let-usage.message.conflicting-declaration=無法宣告名為 {1} 的 {0}，因為同一模板作用域中存在另一個同名的符號。
angular.inspection.incorrect-let-usage.message.used-before-declaration=在定義之前無法讀取 {0} 宣告 {1}
angular.inspection.incorrect-let-usage.name=@let 宣告的錯誤用法
angular.inspection.insecure-binding-to-event.message.attribute=出於安全原因，不允許綁定到事件特性 {0}
angular.inspection.insecure-binding-to-event.message.property=出於安全原因，不允許綁定到事件屬性 {0}
angular.inspection.insecure-binding-to-event.name=綁定到事件不安全
angular.inspection.install-with-ng-add.message=可以使用 ''ng add'' 指令安裝 {0}
angular.inspection.install-with-ng-add.name=Angular CLI 新增相依項
angular.inspection.invalid-binding-type.name=無效的綁定類型
angular.inspection.invalid-declaration-in-module.message.declared-in-many={0} 在多個 Angular 模組中宣告\: {1}
angular.inspection.invalid-declaration-in-module.message.not-declared={0} 未在任何 Angular 模組中宣告
angular.inspection.invalid-declaration-in-module.name=模組中的組件、指令或管道宣告缺失或無效
angular.inspection.invalid-directive-selector.message.missing=指令缺少必需的 {0} 屬性
angular.inspection.invalid-directive-selector.name=選擇器缺失或無效
angular.inspection.invalid-entry-component.message.not-array-of-class-types=表達式不會解析為類別類型的陣列或類別類型
angular.inspection.invalid-entry-component.message.not-component=類別 {0} 不是 Angular 組件
angular.inspection.invalid-entry-component.message.standalone=組件 {0} 是獨立的，不能在 {1} 陣列中使用。請改用 {2} 函式進行引導
angular.inspection.invalid-entry-component.name=入口組件無效
angular.inspection.invalid-template-definition.message.duplicated={0} 和 {1} 不能一起使用
angular.inspection.invalid-template-definition.message.missing={0} 沒有模板
angular.inspection.invalid-template-definition.name=組件模板定義不正確
angular.inspection.invalid-template-ref-var.message.ambiguous-name=存在多個 {0} 設定為 {1} 的指令\: {2}
angular.inspection.invalid-template-ref-var.message.unbound=沒有任何 {0} 設定為 {1} 的指令
angular.inspection.invalid-template-ref-var.name=模板參照變數未綁定或不明確
angular.inspection.missing-event-handler.message=事件綁定沒有事件處理語句
angular.inspection.missing-event-handler.name=缺少事件處理程序
angular.inspection.missing-required-directive-input-binding.message=缺少指令 {1} 的所需輸入 {0} 的綁定
angular.inspection.missing-required-directive-input-binding.message.component=缺少組件 {1} 的所需輸入 {0} 的綁定
angular.inspection.missing-required-directive-input.name=缺少必需的指令輸入
angular.inspection.multiple-structural-directives.message=只能套用一個結構指令
angular.inspection.multiple-structural-directives.name=一個元素上有多個結構指令
angular.inspection.ng-content-with-content.message={0} 元素不能有內容
angular.inspection.ng-content-with-content.name=內容位於 <ng-content> 標記中
angular.inspection.ng-optimized-image.message.both.fill.attributes.not.allowed={2} 指令不允許同時使用 {0} 和 {1} 特性
angular.inspection.ng-optimized-image.message.both.fill.width.or.height.attributes.not.allowed={3} 指令不允許同時使用 {0} 和 {1} 或 {2} 特性
angular.inspection.ng-optimized-image.message.both.width.height.attributes.required={2} 指令同時需要 {0} 和 {1} 特性
angular.inspection.ng-optimized-image.message.ngsrc.requires.width.height.attributes={0} 需要 {1} 和 {2} 特性
angular.inspection.ng-optimized-image.message.ngsrc.requires.width.height.or.fill.attributes={0} 需要 {1} 和 {2} 或 {3} 特性
angular.inspection.ng-optimized-image.message.use-ngsrc=使用 {0} ({1} 指令)提高性能
angular.inspection.ng-optimized-image.name=在 img 標記中使用 ngSrc 的問題
angular.inspection.non-standalone-component-imports.message=只有獨立組件才能使用 import
angular.inspection.non-standalone-component-imports.name=非獨立組件中的無效 import 用法
angular.inspection.undefined-binding.message.attribute-directive-out-of-scope=提供特性 {0} 的指令超出當前模板的作用域
angular.inspection.undefined-binding.message.banana-box-binding-not-provided=由於任何適用指令均不提供，無法綁定到 {0}
angular.inspection.undefined-binding.message.embedded.event-not-emitted=嵌入式模板上的任何適用指令均不發出事件 {0}
angular.inspection.undefined-binding.message.embedded.no-directive-matched=特性 {0} 上沒有符合的指令
angular.inspection.undefined-binding.message.embedded.property-not-provided=嵌入式模板上的任何適用指令均不提供屬性 {0}
angular.inspection.undefined-binding.message.event-not-emitted=任何適用指令或 {1} 元素均不發出事件 {0}
angular.inspection.undefined-binding.message.property-not-provided=任何適用指令或 {1} 元素均不提供屬性 {0}
angular.inspection.undefined-binding.message.unknown-attribute=此處不允許使用特性 {0}
angular.inspection.undefined-binding.name=未定義的綁定
angular.inspection.undefined-export.message=無法從 {1} 匯出 {0}，因為其中既未宣告也未匯入
angular.inspection.undefined-export.name=未定義從 Angular 模組匯出
angular.inspection.undefined-tag.message.out-of-scope=符合 {0} 元素的組件或指令超出當前模板的作用域
angular.inspection.undefined-tag.name=未定義的標記
angular.inspection.unresolved-pipe.message=未解析的管道 {0}
angular.inspection.unresolved-pipe.name=未解析的管道
angular.inspection.unsupported-syntax-inspection.message.operator-ng-or-above=僅在 Angular {1} 及更高版本中支援 {0} 運算符。
angular.inspection.unsupported-syntax-inspection.message.template=僅在 Angular 19.2 及更高版本中支援未標記的模板語法。
angular.inspection.unsupported-syntax-inspection.name=不支持的 Angular 表達式語法
angular.inspection.unused-component-import.declaration.message={0} 從未在組件模板中使用
angular.inspection.unused-component-import.name=Angular 組件宣告中未使用的 import
angular.inspection.unused-component-import.pseudo-module.message=組件模板中未使用 {0} 提供的任何宣告
angular.inspection.wrong-entity-type.message.not-declarable={0}類別既不是 Angular 組件，也不是指令或管道
angular.inspection.wrong-entity-type.message.not-entity={0}類別既不是 Angular 模組，也不是組件、指令或管道
angular.inspection.wrong-entity-type.message.not-importable=類別{0}無法匯入(既不是 Angular 模組，也不是獨立可宣告物件)
angular.inspection.wrong-entity-type.message.not-standalone={0} 不是獨立的，無法直接匯入。它必須通過 NgModule 匯入。
angular.inspection.wrong-entity-type.message.standalone-declarable={0} 是獨立的，無法在 Angular 模組中宣告。是否要改為將其匯入?
angular.inspection.wrong-entity-type.name=匯入或宣告的符號無效
angular.intention.category=Angular
angular.intention.extract.component.template.name=將 Angular 組件模板提取到單獨的檔案中
angular.intention.inline.component.template.name=內聯 Angular 組件模板
angular.intention.introduce.let.variable.name=引入 @let 變數
angular.intention.introduce.let.variable.title=提取 @let 變數
angular.live.template.context.angular=Angular
angular.live.template.context.template=模板
angular.notify.cli.required-package-not-installed=未安裝所需軟體套件 '@angular/cli'。
angular.parse.expression.assignment-in-binding=綁定表達式不能包含賦值
angular.parse.expression.chained-expression-in-binding=綁定表達式不能包含鏈式表達式
angular.parse.expression.deferred-time.bad-numeric-format=只允許自然數或小數
angular.parse.expression.deferred-time.wrong-time-unit=僅支援 's' 和 'ms' 時間單位
angular.parse.expression.expected-comma=應為 ','
angular.parse.expression.expected-eq=應為 '\='
angular.parse.expression.expected-identifier-keyword-or-string=應為關鍵字、關鍵字或字串
angular.parse.expression.expected-identifier-or-keyword=應為關鍵字或關鍵字
angular.parse.expression.expected-numeric-literal=應為數字字面量
angular.parse.expression.expected-of=應為 'of'
angular.parse.expression.expected-on-when=應為 'when' 或 'on'
angular.parse.expression.expected-on-when-never=應為 'when'、'on' 或 'never'
angular.parse.expression.expected-whitespace=應為空格
angular.parse.expression.pipe-in-action=動作表達式不能包含管道
angular.parse.expression.pipe-in-host-binding=主機綁定表達式不能包含管道
angular.parse.expression.unexpected-token=意外的標記 ''{0}''
angular.parse.expression.unexpected-whitespace=意外空格
angular.parse.selector.multiple-not=\:not 中的多個選擇器不受支援
angular.parse.selector.nested-not=選擇器中不允許嵌套 \:not
angular.parse.template.animation-trigger-missing-phase-value=動畫觸發器輸出事件 (@{0}) 缺少其階段值名稱(當前支援 ''start'' 或 ''done'')
angular.parse.template.animation-trigger-wrong-output-phase=不支持為 ''@{1}'' 提供的動畫輸出階段值 ''{0}'' (使用 ''start'' 或 ''done'')
angular.parse.template.invalid-icu-message-expected-comma=ICU 訊息無效。應為 ','。
angular.parse.template.invalid-icu-message-expected-left-brace=ICU 訊息無效。缺少 '{'。
angular.parse.template.invalid-icu-message-missing-case-value=ICU 訊息無效。缺少 case 值。
angular.parse.template.invalid-icu-message-missing-right-brace=ICU 訊息無效。缺少 '}'。
angular.parse.template.let-dash-not-allowed-in-name=變數名稱中不允許使用 '-'
angular.parse.template.let-only-on-ng-template=僅在 <ng-template> 元素上支援 'let-'
angular.parse.template.missing-block-closing-rbrace=不完整的塊 – 缺少 }
angular.parse.template.missing-block-opening-lbrace=不完整的塊 – 缺少 {
angular.parse.template.missing-let-block-closing-semicolon=不完整的 @let 塊 - 缺失；
angular.parse.template.ref-var-dash-not-allowed-in-name=參照名稱中不允許使用 '-'
angular.parse.template.unexpected-block-closing-rbrace=意外 } – 沒有要關閉的符合塊
angular.parse.template.unterminated-expansion-form=未終止的擴展形式
angular.parse.template.unterminated-interpolation=未終止的插值
angular.progress.title.auto-importing-angular-directives-on-paste=在貼上時自動匯入 Angular 指令…
angular.quickfix.decorator.add-property.family=新增屬性
angular.quickfix.decorator.add-property.name=新增 ''{0}'' 屬性
angular.quickfix.decorator.remove-property.family=移除屬性
angular.quickfix.decorator.remove-property.name=移除 ''{0}'' 屬性
angular.quickfix.forms.create-form-ctrl-in-form-group.family=建立 FormGroup 控件
angular.quickfix.forms.create-form-ctrl-in-form-group.name=在 ''{2}'' 表單組中建立 ''{0}'' 表單 {1}
angular.quickfix.json.ng-add.error.cant-run=無法執行 'ng add'
angular.quickfix.json.ng-add.family=執行 'ng add'
angular.quickfix.json.ng-add.name.reinstall=通過 ''ng add {0}'' 重新安裝
angular.quickfix.json.ng-add.name.run=執行 ''ng add {0}''
angular.quickfix.ngmodule.declare.family=向模組新增宣告
angular.quickfix.ngmodule.declare.name=在 {1} 中宣告 {0}
angular.quickfix.ngmodule.declare.name.choice=在 Angular 模組中宣告 {0}…
angular.quickfix.ngmodule.declare.select.declarable=要宣告的 {0}
angular.quickfix.ngmodule.declare.select.module=在 Angular 模組中宣告 {0}
angular.quickfix.ngmodule.export.family=從模組匯出實體
angular.quickfix.ngmodule.export.name=匯出 {0}
angular.quickfix.ngmodule.export.select.declarable=要匯出的 {0}
angular.quickfix.ngmodule.import.family=匯入 Angular 模組
angular.quickfix.ngmodule.import.name=匯入 {0}
angular.quickfix.ngmodule.import.name.choice=匯入 Angular 實體…
angular.quickfix.ngmodule.import.select.module=要匯入的 Angular 實體
angular.quickfix.remove-import.family=移除 import
angular.quickfix.remove-import.name=移除 ''{0}'' import
angular.quickfix.standalone.convert-to-non-standalone.family=將可宣告類別設為非獨立
angular.quickfix.standalone.convert-to-non-standalone.name=將 {0} 設為非獨立
angular.quickfix.standalone.convert-to-standalone.family=將可宣告類別設為獨立
angular.quickfix.standalone.convert-to-standalone.name=將 {0} 設為獨立
angular.quickfix.standalone.move-to-imports.family=改為匯入可宣告類別
angular.quickfix.standalone.move-to-imports.name=改為匯入{0}
angular.quickfix.template.add-attribute-value.family=新增特性值
angular.quickfix.template.add-attribute-value.name=新增特性值
angular.quickfix.template.bind-to-event.family=綁定到事件
angular.quickfix.template.bind-to-event.name=綁定到事件({0})
angular.quickfix.template.bind-to-property.family=綁定到屬性
angular.quickfix.template.bind-to-property.name=綁定到屬性 [{0}]
angular.quickfix.template.covert-to-ng-src.family=轉換為使用 ngSrc
angular.quickfix.template.create-attribute.family=建立特性
angular.quickfix.template.create-attribute.name=建立 ''{0}'' 特性
angular.quickfix.template.create-height-width-attributes.name=建立 'width' 和 'height' 特性
angular.quickfix.template.create-input-transformer.family=建立輸入轉換器
angular.quickfix.template.create-input-transformer.std.name=使用 {0} 輸入轉換器
angular.quickfix.template.create-input.name=建立輸入 ''{0}''
angular.quickfix.template.create-model.name=建立模型 ''{0}''
angular.quickfix.template.create-output.name=建立輸出 ''{0}''
angular.quickfix.template.create-required-input.name=建立所需信號輸入 ''{0}''
angular.quickfix.template.create-required-model.name=建立所需模型 ''{0}''
angular.quickfix.template.create-signal-input.name=建立信號輸入 ''{0}''
angular.quickfix.template.create-signal.name=建立信號 ''{0}''
angular.quickfix.template.popup.choose-target-class=選擇目標類別
angular.quickfix.template.remove-attribute-value.family=移除特性值
angular.quickfix.template.remove-attribute-value.name=移除特性值
angular.quickfix.template.remove-tag-content.family=移除標記內容
angular.quickfix.template.remove-tag-content.name=移除內容
angular.quickfix.template.rename-attribute.family=重新命名特性
angular.quickfix.template.rename-attribute.name=將特性重命名為 ''{0}''
angular.quickfix.wrap-with-forwardRef.family=使用 forwardRef 呼叫包裝 import
angular.refactor.extractComponent.after-generator-error=檔案修改過程中出錯
angular.refactor.extractComponent.animations=不支持動畫
angular.refactor.extractComponent.cli-error=無法使用 Angular CLI 建立組件
angular.refactor.extractComponent.dialog=提取組件
angular.refactor.extractComponent.dialog.name=名稱\:
angular.refactor.extractComponent.task=正在提取組件
angular.refactor.extractComponent.unexpected-cli-output=Angular CLI 意外輸出
angular.refactor.extractComponent.unsupported-i18n=不支持 I18n 語法
angular.refactor.extractComponent.unsupported-multiple-carets=請使用單文字游標
angular.refactor.extractComponent.unsupported-ng-content=不支持元素 ng-content
angular.refactor.extractComponent.unsupported-selection=請選擇整個元素
angular.refactor.selector.invalid.html.attribute.name={0} 不是有效的 HTML 特性名稱。
angular.refactor.selector.invalid.html.element.name={0} 不是有效的 HTML 元素名稱。
angular.search-scope.template=模板
angular.service.name=Angular 語言伺服器
angular.suppress.for-expression=對表達式禁止
angular.svg.template=Angular SVG 模板
angular.svg.template.17=Angular SVG 模板(17+)
angular.svg.template.181=Angular SVG 模板(18.1+)
angular.svg.template.20=Angular SVG 模板(20+)
description.angularCliAdd.description=新增新的相依項並執行關聯的 'ng-add' 原理圖
description.angularCliGenerate.description=從 Angular 原理圖生成新程式碼
filetype.angular17html.description=Angular HTML 模板(17+)
filetype.angular17svg.description=Angular SVG 模板(17+)
filetype.angular181html.description=Angular HTML 模板(18.1+)
filetype.angular181svg.description=Angular SVG 模板(18.1+)
filetype.angular20html.description=Angular HTML 模板(20+)
filetype.angular20svg.description=Angular SVG 模板(20+)
filetype.angular2html.description=Angular HTML 模板
filetype.angular2svg.description=Angular SVG 模板
livetemplate.description.angular2.a-class=Angular [class] 綁定
livetemplate.description.angular2.a-component=Angular 組件
livetemplate.description.angular2.a-component-inline=帶內聯模板的 Angular 組件
livetemplate.description.angular2.a-component-root=Angular 套用根組件
livetemplate.description.angular2.a-ctor-skip-self=Angular 模組 SkipSelf 建構函式
livetemplate.description.angular2.a-directive=Angular 指令
livetemplate.description.angular2.a-formControlName=Angular formControlName
livetemplate.description.angular2.a-formGroup=Angular formGroup
livetemplate.description.angular2.a-formGroupName=Angular formGroupName
livetemplate.description.angular2.a-guard-can-activate=Angular CanActivate guard
livetemplate.description.angular2.a-guard-can-activate-child=Angular CanActivateChild guard
livetemplate.description.angular2.a-guard-can-deactivate=Angular CanDeactivate guard
livetemplate.description.angular2.a-guard-can-load=Angular CanLoad guard
livetemplate.description.angular2.a-http-interceptor=用於 HttpClient 的空 Angular HttpInterceptor
livetemplate.description.angular2.a-http-interceptor-headers=用於標頭 HttpClient 的 Angular HttpInterceptor
livetemplate.description.angular2.a-http-interceptor-logging=用於登入 HttpClient 的 Angular HttpInterceptor
livetemplate.description.angular2.a-httpclient-get=Angular HttpClient.get
livetemplate.description.angular2.a-injectable-providedin=Angular 可注入 ProvidedIn
livetemplate.description.angular2.a-module=Angular 模組
livetemplate.description.angular2.a-module-root=Angular 根模組
livetemplate.description.angular2.a-module-with-routing=將路由合併到一個檔案中的 Angular 模組
livetemplate.description.angular2.a-ngClass=Angular ngClass
livetemplate.description.angular2.a-ngFor=Angular *ngFor
livetemplate.description.angular2.a-ngFor-trackBy=帶 trackBy 的 Angular *ngFor
livetemplate.description.angular2.a-ngForAsync=Angular *ngForAsync
livetemplate.description.angular2.a-ngIf=Angular *ngIf
livetemplate.description.angular2.a-ngIfElse=Angular *ngIfElse
livetemplate.description.angular2.a-ngModel=Angular ngModel
livetemplate.description.angular2.a-ngStyle=Angular ngStyle
livetemplate.description.angular2.a-ngSwitch=Angular ngSwitch
livetemplate.description.angular2.a-ngrx-data-entity-collection-data-service=NgRx Data Entity Collection Data Service
livetemplate.description.angular2.a-ngrx-data-entity-metadata=NgRx Data Entity Metadata
livetemplate.description.angular2.a-ngrx-data-store-module=NgRx Data Store Module
livetemplate.description.angular2.a-output-event=Angular @Output 事件和發射器
livetemplate.description.angular2.a-pipe=Angular 管道
livetemplate.description.angular2.a-prej=Angular 預偵錯 | json
livetemplate.description.angular2.a-preja=Angular 預偵錯 | 異步 | json
livetemplate.description.angular2.a-preload-strategy=Angular 自訂預載入策略
livetemplate.description.angular2.a-route-params-subscribe=Angular - 訂閱路由參數
livetemplate.description.angular2.a-route-path-404=Angular 404 路由路徑
livetemplate.description.angular2.a-route-path-default=Angular 預設路由路徑
livetemplate.description.angular2.a-route-path-eager=Angular eager 路由路徑
livetemplate.description.angular2.a-route-path-lazy=Angular lazy 路由路徑
livetemplate.description.angular2.a-route-path-with-children=帶子級的 Angular 路由路徑
livetemplate.description.angular2.a-router-events=Angular 路由器事件
livetemplate.description.angular2.a-routerLink=Angular routerLink
livetemplate.description.angular2.a-routerLink-param=帶路由參數的 Angular routerLink
livetemplate.description.angular2.a-rxjs-import=RxJs 匯入
livetemplate.description.angular2.a-rxjs-operator-import=RxJs 匯入
livetemplate.description.angular2.a-select=帶 ngModel 的 <select> 控制
livetemplate.description.angular2.a-service=Angular 服務
livetemplate.description.angular2.a-service-httpclient=帶 HttpClient 的 Angular 服務
livetemplate.description.angular2.a-style=Angular [style] 綁定
livetemplate.description.angular2.a-subscribe=Angular 可觀測訂閱
