0.field.is.always.initialized.not.null=@{0} field is always initialized non-null
access.can.be.0=存取可以是 ''{0}''
access.can.be.package.private=存取可以為 package-private
access.to.field.code.ref.code.outside.of.declared.guards.loc=存取宣告的 guard 外部的欄位 <code>\#ref</code> \#loc
add.explicit.type.arguments=新增顯式類型實參
add.explicit.type.arguments.else=向 else-branch 呼叫新增顯式類型實參
add.explicit.type.arguments.then=向 then-branch 呼叫新增顯式類型實參
annotate.as.safevarargs=註解為 '@SafeVarargs'
annotate.overridden.methods.parameters=將覆寫方法參數註解為 ''@{0}''
annotate.overridden.methods.parameters.family.name=註解覆寫方法參數
anonymous.ref.loc.can.be.replaced.with.0=匿名 \#ref \#loc 可被取代為 {0}
anonymous.ref.loc.can.be.replaced.with.lambda=匿名 \#ref \#loc 可被取代為 lambda
arguments.count.mismatch=應為{0, choice, 0\#無實參|1\# 1 個實參|1< {0} 個實參}，但實際為 {1} 個
assigning.a.collection.of.nullable.elements=正在將可以為 null 的元素集合指定給非 null 元素集合
call.to.method.code.ref.code.outside.of.declared.guards.loc=在宣告的 guard 外呼叫方法 <code>\#ref()</code> \#loc
change.type.arguments=更改類型實參
change.type.arguments.to.0=將類型實參更改為 <{0}>
change.visibility.level=將 {0} 設為 {1}
chooser.popup.title.select.class.to.move.members.to=選擇目標類別
comparision.between.object.and.primitive=物件與基元之間的比較非法，僅在 Java 7 中接受
contract.return.validator.incompatible.return.parameter.type=返回值類型 ''{0}'' 必須可以從參數類型 ''{1}'' 轉換而來
contract.return.validator.method.return.incompatible.with.method.containing.class=方法返回值類型應與包含類別的方法相容
contract.return.validator.not.applicable.for.constructor=不適用於建構函式
contract.return.validator.not.applicable.primitive=不適用於基元返回值類型 ''{0}''
contract.return.validator.not.applicable.static=不適用於 static 方法
contract.return.validator.return.type.must.be.boolean=方法返回值類型必須為 'boolean'
contract.return.validator.too.few.parameters=不適用於{0, choice, 0\#無形參|1\#有 1 個參數|2\#有 {0} 個參數}的方法
contract.return.value.validation.prefix=協定返回值 ''{0}''\:
custom.exception.class.should.have.a.constructor=自訂異常類別應具有一個包含字串類型的單個訊息參數的建構函式
dataflow.message.array.index.out.of.bounds=陣列索引超出範圍
dataflow.message.arraystore=將 <code>{0}</code> 類型的元素存儲到 <code>{1}</code> 元素的陣列將生成 <code>ArrayStoreException</code>
dataflow.message.assigning.null=<code>null</code> is assigned to a non-null variable
dataflow.message.assigning.null.notannotated=正在將 <code>null</code> 值指定給非註解欄位
dataflow.message.assigning.nullable=Expression <code>\#ref</code> might evaluate to null but is assigned to a non-null variable
dataflow.message.assigning.nullable.notannotated=表達式 <code>\#ref</code> \#loc 可能為 null，但被指定給非註解欄位
dataflow.message.cce=將 <code>{0}</code> 轉換為 <code>\#ref</code> \#loc 可能產生 <code>ClassCastException</code>
dataflow.message.cce.always=將 <code>{0}</code> 轉換為 <code>\#ref</code> \#loc 會為任意非 null 值生成 <code>ClassCastException</code>
dataflow.message.constant.condition=條件 <code>\#ref</code> \#loc 始終為 <code>{0, choice, 0\#false|1\#true}</code>
dataflow.message.constant.condition.when.reached=到達時，條件 <code>\#ref</code> \#loc 始終為 <code>{0, choice, 0\#false|1\#true}</code>
dataflow.message.constant.expression=<code>\#ref</code> \#loc 的結果總是 ''{0}''
dataflow.message.constant.method.reference=方法參照結果始終為''{0}''
dataflow.message.constant.no.ref=條件始終為 {0, choice, 0\#false|1\#true}
dataflow.message.constant.value=值 <code>\#ref</code> \#loc 總是 ''{0}''
dataflow.message.contract.fail=依據其方法協定，對 '\#ref' 的呼叫始終失敗
dataflow.message.contract.fail.index=由於實參超出範圍，對 '\#ref' 的呼叫總是失敗
dataflow.message.fail=對 '\#ref' 的呼叫始終失敗並出現異常
dataflow.message.immutable.modified=不可變物件已被修改
dataflow.message.immutable.passed=不可變物件在預期可變位置傳遞
dataflow.message.negative.array.size=陣列大小為負
dataflow.message.npe.array.access=陣列存取 <code>\#ref</code> \#loc 可能產生 <code>NullPointerException</code>
dataflow.message.npe.array.access.sure=陣列存取 <code>\#ref</code> \#loc 可能生成 <code>NullPointerException</code>
dataflow.message.npe.field.access=解參照<code>\#ref</code> \#loc 可能導致 <code>NullPointerException</code>
dataflow.message.npe.field.access.sure=解參照 <code>\#ref</code> \#loc 將產生 <code>NullPointerException</code>
dataflow.message.npe.inner.class.construction=內聯類別建立可能會產生<code>NullPointerException</code>
dataflow.message.npe.inner.class.construction.sure=內部類別建構將生成 <code>NullPointerException</code>
dataflow.message.npe.method.invocation=方法呼叫 <code>\#ref</code> \#loc 可能產生 <code>NullPointerException</code>
dataflow.message.npe.method.invocation.sure=方法呼叫 <code>\#ref</code> \#loc 可能生成 <code>NullPointerException</code>
dataflow.message.npe.methodref.invocation=方法參照呼叫 <code>\#ref</code> \#loc 可能產生 <code>NullPointerException</code>
dataflow.message.npe.template.invocation=模板處理器呼叫可能會產生 <code>NullPointerException</code>
dataflow.message.npe.template.invocation.sure=模板處理器呼叫將產生 <code>NullPointerException</code>
dataflow.message.only.switch.label=Switch 標籤 <code>\#ref</code> \#loc 是整個 switch 中唯一可存取的物件
dataflow.message.passing.non.null.argument.to.optional=具有非 null 實參的 'Optional.ofNullable()' 應被取代為 'Optional.of()'
dataflow.message.passing.null.argument=正在將 <code>null</code> 實參傳遞到註解為 @NotNull 的參數
dataflow.message.passing.null.argument.nonannotated=正在將 <code>null</code> 實參傳遞到非註解參數
dataflow.message.passing.null.argument.to.optional=具有 null 實參的 'Optional.ofNullable()' 應被取代為 'Optional.empty()'
dataflow.message.passing.nullable.argument=實參 <code>\#ref</code> \#loc 可能為null
dataflow.message.passing.nullable.argument.methodref=方法參照實參可能為 null
dataflow.message.passing.nullable.argument.methodref.nonannotated=方法參照實參可能為 null，但被傳遞給非註解參數
dataflow.message.passing.nullable.argument.nonannotated=實參 <code>\#ref</code> \#loc 可能為 null，但被傳遞給非註解參數
dataflow.message.pointless.assignment.expression=條件 <code>\#ref</code> \#loc 在賦值表達式的左側是永遠 <code>{0}</code>. 可以簡化
dataflow.message.pointless.same.argument.and.result='\#ref' 的結果與{0,choice,1\#第 1 個|2\#第 2 個}實參相同使呼叫毫無意義
dataflow.message.pointless.same.arguments='\#ref' 的實參相同。呼叫包含相同實參的此方法毫無意義
dataflow.message.redundant.assignment=變數已被指定給此值
dataflow.message.redundant.instanceof=條件 <code>\#ref</code> \#loc是多餘的，可以用 <code>\!\= null</code>
dataflow.message.redundant.update=變數更新不執行任何動作
dataflow.message.return.notnull.from.nullable=@{0} 方法 ''{1}'' 始終返回非 null 值
dataflow.message.return.null.from.notnull=<code>null</code> 由宣告為 @{0} 的方法返回
dataflow.message.return.null.from.notnullable=<code>null</code> 由未被宣告為 @{0} 的方法返回
dataflow.message.return.nullable.from.notnull=表達式 <code>\#ref</code> 的求值結果可能為 null，但由宣告為 @{0} 的方法返回
dataflow.message.return.nullable.from.notnull.function=函式可能返回null,但這裡不允許
dataflow.message.return.nullable.from.notnullable=表達式 <code>\#ref</code> 的求值結果可能為 null，但由未被宣告為 @{0} 的方法返回
dataflow.message.storing.array.null=<code>null</code> 已存儲到 @NotNull 元素的陣列中
dataflow.message.storing.array.nullable=表達式 <code>\#ref</code> 的求值結果可能為 null，但已存儲到 @NotNull 元素的陣列
dataflow.message.stream.consumed=流可能已被鏈接或使用
dataflow.message.stream.consumed.always=流已被鏈接或使用
dataflow.message.unboxing=<code>\#ref</code> \#loc 取消裝箱可能產生 <code>NullPointerException</code>
dataflow.message.unboxing.method.reference=使用 <code>\#ref</code> \#loc 需要取消裝箱，這可能會產生 <code>NullPointerException</code>
dataflow.message.unboxing.nullable.argument.methodref=將實參傳遞到方法參照需要拆箱，這可能會產生 <code>NullPointerException</code>
dataflow.message.unknown.nullability=(為 null 性未知)
dataflow.message.unreachable.switch.label=Switch 標籤 <code>\#ref</code> \#loc 不可到達
dataflow.method.fails.with.null.argument=當參數為 null 時，方法將拋出異常
dataflow.not.precise={0} 複雜\: 數據流結果可能不準確
dataflow.too.complex={0}太複雜，無法通過數據流演算法進行分析
delete.repeated.0=刪除重複的 ''{0}''
delete.repeated.interface=刪除重複的接口
delimiters.argument.contains.duplicated.characters=StringTokenizer 'delimiters' 實參包含重複字元
deprecated.class.usage.group.xml=XML
deprecated.member.0.is.still.used=棄用的成員 ''{0}'' 仍在使用
detach.library.quickfix.name=分離庫
detach.library.roots.quickfix.name=分離未使用的庫根
dfa.find.cause.an.execution.might.exist.where=一個執行可能存在於\:
dfa.find.cause.and.another=和 {0}
dfa.find.cause.array.length.is.always.non.negative=陣列長度始終為非負數
dfa.find.cause.call.always.fails=呼叫始終失敗
dfa.find.cause.cast.may.fail=轉換可能失敗
dfa.find.cause.collection.size.is.always.non.negative=集合大小始終為非負數
dfa.find.cause.comparison.arguments.are.different.constants=比較實參為不同常數
dfa.find.cause.comparison.arguments.are.the.same=比較實參相同
dfa.find.cause.compile.time.constant=編譯時常量，求值結果為 ''{0}''
dfa.find.cause.condition.is.known.from.place=已知 ''{0}'' 來自 ___PLACE___
dfa.find.cause.condition.was.checked.before=條件 ''{0}'' 先前已檢查
dfa.find.cause.condition.was.deduced=條件 ''{0}'' 已被推導
dfa.find.cause.contract.kind.explicit=約定
dfa.find.cause.contract.kind.hard.coded=硬編碼約定
dfa.find.cause.contract.kind.inferred=推斷約定
dfa.find.cause.contract.returns.on.condition=根據{0}，{1} ''{2}'' 會在{4}時返回 ''{3}''
dfa.find.cause.contract.throws.on.condition=根據{0}，{1} ''{2}'' 會在{3}時拋出異常
dfa.find.cause.contract.trivial=根據{0}，{1} ''{2}'' 始終返回 ''{3}'' 值
dfa.find.cause.equality.established.from.condition=''{0}'' 自條件建立
dfa.find.cause.field.assigned.nullability=已知欄位 ''{0}'' 始終初始化為 ''{1}'' 值
dfa.find.cause.field.initializer.nullability=欄位 ''{0}'' 初始化為 ''{1}'' 值
dfa.find.cause.instanceof.implies.non.nullity='instanceof' 檢查表示非 null
dfa.find.cause.left.operand.range.template=左動作數為 %s
dfa.find.cause.may.be.null=可能為 null
dfa.find.cause.nonnull.expression.kind.concatenation=串聯
dfa.find.cause.nonnull.expression.kind.literal=字面量
dfa.find.cause.nonnull.expression.kind.newly.created.object=新建立的物件
dfa.find.cause.nonnull.expression.kind.primitive.type=基元類型 ''{0}'' 的值
dfa.find.cause.nonnull.expression.kind.this.object='this' 物件
dfa.find.cause.nullability.explicitly.annotated={0} ''{1}'' 註解為 ''{2}''
dfa.find.cause.nullability.externally.annotated={0} ''{1}'' 外部註解為 ''{2}''
dfa.find.cause.nullability.inferred={0} ''{1}'' 已推斷為 ''{2}''
dfa.find.cause.nullability.inherited.from.class={0} ''{1}'' 自類別 {2} 繼承註解，因此 ''{3}''
dfa.find.cause.nullability.inherited.from.container={0} ''{1}'' 繼承容器註解，因此 ''{2}''
dfa.find.cause.nullability.inherited.from.named.element={0} ''{1}'' 繼承自 {2}，因此 ''{3}''
dfa.find.cause.nullability.inherited.from.package={0} ''{1}'' 自軟體套件 {2} 繼承註解，因此 ''{3}''
dfa.find.cause.numeric.cast.operand.template=轉換動作數為 %s
dfa.find.cause.numeric.range.generic.template=值為 %s
dfa.find.cause.object.kind.expression=表達式
dfa.find.cause.object.kind.generic=物件
dfa.find.cause.object.kind.method.return=方法返回值
dfa.find.cause.obviously.non.null.expression=表達式不可為 null，因為它是 {0}
dfa.find.cause.one.of.the.following.happens=發生以下情況之一\:
dfa.find.cause.operand.of.boolean.expression.is.the.same={1, choice, 0\#and|1\#or}-鏈的動作數 \#{0} 是 {2}
dfa.find.cause.or.another=或{0}
dfa.find.cause.place.here=此處
dfa.find.cause.place.line.number=行 \#{0}
dfa.find.cause.primitive.boxed=基元值已裝箱
dfa.find.cause.range.is.known.from.place=從 ___PLACE___ 已知範圍
dfa.find.cause.range.is.specified.by.annotation=註解將 ''{0}'' 的範圍指定為 {1}
dfa.find.cause.result.of.numeric.operation.template=''{0}'' 的結果為 %s
dfa.find.cause.result.of.primitive.cast.template=''({0})'' 轉換的結果為 %s
dfa.find.cause.right.operand.range.template=右動作數為 %s
dfa.find.cause.size.is.always.zero=大小始終為 0
dfa.find.cause.special.field.of.something={0}/{1}
dfa.find.cause.string.length.is.always.non.negative=字串長度始終為非負數
dfa.find.cause.type.is.known.from.place=從 ___PLACE___ 已知 ''{0}'' 類型
dfa.find.cause.type.known={0} 類型為 {1}
dfa.find.cause.unable=找不到原因
dfa.find.cause.value.is.always.the.same=值始終為 {0}
dfa.find.cause.value.is.known.from.place=''{0}'' 已知為來自 ___PLACE___ 的 ''{1}''
dfa.find.cause.value.x.is.always.the.same=值 ''{0}'' 始終為 ''{1}''
dfa.find.cause.values.cannot.be.equal.because=值不能相等，因為 {0}
dfa.find.cause.variable.is.initialized={0} ''{1}'' 初始化為 {2}
dfa.find.cause.was.assigned=''{0}'' 已分配
dfa.find.cause.was.assigned.to=''{0}'' 已分配到 ''{1}''
dfa.find.cause.was.dereferenced=''{0}'' 已解參照
dfa.find.cause.was.passed.as.non.null.parameter=''{0}'' 作為實參傳遞到接受非 null 參數的方法
dftype.presentation.empty.optional=空 Optional
dftype.presentation.present.optional=目前的 Optional
don.t.report.unused.jars.inside.used.library=不要在使用的庫內報告未使用的 jar
duplication.policy.ask=詢問
duplication.policy.generate.duplicate=生成重複方法
duplication.policy.replace=取代現有
element.kind.keys=鍵
element.kind.objects=物件
element.kind.values=值
error.class.not.found=找不到類別 {0}
error.message.invalid.java.type=無效的 Java 類型
exception.handler.will.become.unreachable=Catch 部分將變得無法存取
explicit.type.argument.ref.loc.can.be.replaced.with=顯式類型實參 \#ref \#loc 可被取代為 <>
exports.to.itself.delete.module.ref.fix=刪除模組''{0}''的參照
exports.to.itself.delete.statement.fix=刪除宣告
find.searching.for.references.to.class.progress=正在搜尋對類別 {0} 的參照…
find.usages.panel.title.base.methods=基方法的用法
find.usages.panel.title.base.methods.cap=基方法的用法
find.usages.panel.title.derived.classes=派生類別
find.usages.panel.title.derived.classes.cap=派生類別
find.usages.panel.title.derived.interfaces=派生接口
find.usages.panel.title.derived.interfaces.cap=派生接口
find.usages.panel.title.implementing.classes=實作類別
find.usages.panel.title.implementing.classes.cap=實作類別
find.usages.panel.title.implementing.methods=實作方法
find.usages.panel.title.implementing.methods.cap=實作方法
find.usages.panel.title.overloaded.methods.usages=多載方法
find.usages.panel.title.overloaded.methods.usages.cap=多載方法
find.usages.panel.title.overriding.methods=覆寫方法
find.usages.panel.title.overriding.methods.cap=覆寫方法
generate.members.position.after.equals.and.hashcode=equals() 和 hashCode() 後
generate.members.position.at.caret=文字游標處
generate.members.position.at.the.end.of.class=類別結尾處
highlighting.try.blocks=正在醒目提示 try 塊…
html.classes.exposed.with.code.module.info.code.html=<html>類別通過 <code>module-info</code> 公開</html>
html.ignore.overrides.of.deprecated.abstract.methods=<html>在未棄用的 super 中忽略棄用的 abstract 方法的覆寫</html>
ignore.casts.in.suspicious.collections.method.calls=忽略澄清轉換
ignore.exceptions.thrown.by.entry.points.methods=忽略由入口點方法拋出的異常
ignore.in.the.same.outermost.class=在相同的最外側類別中忽略
ignore.in.the.same.project=忽略此專案中宣告的 API
ignore.inside.deprecated.members=在棄用的成員內忽略
ignore.inside.non.static.imports=在非 static import 內忽略
ignore.members.of.deprecated.classes=忽略棄用類別的成員
ignore.operation.which.results.in.negative.value=忽略 '<<' 動作，後者會導致負值
inspection.annotate.method.quickfix.family.name=標註方法
inspection.annotate.method.quickfix.name=使用 ''@{0}'' 註解方法
inspection.annotate.overridden.method.and.self.quickfix.family.name=註解覆寫方法和自身
inspection.annotate.overridden.method.and.self.quickfix.name=使用 ''@{0}'' 註解覆寫方法和自身
inspection.annotate.overridden.method.nullable.quickfix.name=將覆寫方法註解為 ''@{0}''
inspection.annotate.overridden.method.quickfix.family.name=註解覆寫方法
inspection.annotate.overridden.method.quickfix.name=使用 ''@{0}'' 註解覆寫方法
inspection.anonymous.has.lambda.alternative.display.name=匿名類型有較短的 lambda 替代項
inspection.block.marker.comments.display.name=塊標記註釋
inspection.c.style.array.declarations.option=忽略變數中的 C 樣式宣告
inspection.can.be.final.accept.quickfix=設為 final
inspection.can.be.final.display.name=宣告可以有 'final' 修飾符
inspection.can.be.final.option=報告類別
inspection.can.be.final.option1=報告方法
inspection.can.be.final.option2=報告欄位
inspection.can.be.local.parameter.problem.descriptor=參數 <code>\#ref</code> 可以具有 <code>final</code> 修飾符
inspection.can.be.local.variable.problem.descriptor=變數 <code>\#ref</code> 可以具有 <code>final</code> 修飾符
inspection.can.be.replaced.with.message=可被取代為 ''{0}''
inspection.class.getclass.display.name='Class.getClass()' 呼叫可疑
inspection.class.getclass.fix.remove.name=移除 'getClass()' 呼叫
inspection.class.getclass.fix.replace.name=取代為 'Class.class'
inspection.class.getclass.message=在類別實例上呼叫了 'getClass()'
inspection.class.has.no.to.string.method.description=類別 ''{0}'' 不會覆寫 ''toString()'' 方法
inspection.class.has.no.to.string.method.display.name=類別不會覆寫 'toString()' 方法
inspection.class.has.no.to.string.method.exclude.classes.reg.exp.option=排除類別 (reg exp)\:
inspection.class.has.no.to.string.method.ignore.abstract.classes.option=忽略抽象類別
inspection.class.has.no.to.string.method.ignore.deprecated.classes.option=忽略棄用的類別
inspection.class.has.no.to.string.method.ignore.enum.classes.option=忽略枚舉類別
inspection.class.has.no.to.string.method.ignore.exception.classes.option=忽略異常類別
inspection.class.has.no.to.string.method.ignore.inner.classes.option=忽略內部類別
inspection.class.has.no.to.string.method.ignore.records.option=忽略記錄
inspection.class.has.no.to.string.method.ignore.test.classes.option=忽略測試類別
inspection.common.if.parts.disable.highlight.tail.call=如果尾語句是呼叫，則不要醒目提示公用部分
inspection.common.if.parts.family=提取 'if' 語句的公用部分
inspection.common.if.parts.family.else.if=合併 'else if' 語句
inspection.common.if.parts.family.else.if.description=可以合併 'else if'
inspection.common.if.parts.family.else.if.invert=合併反轉第二個條件的 'else if' 語句
inspection.common.if.parts.settings.highlight.else.if=醒目提示可以簡化的 else-if 鏈
inspection.common.if.parts.settings.highlight.when.tail.call=在最後一條公用語句為調用時醒目提示
inspection.compiler.javac.quirks.anno.array.comma.fix=移除尾隨逗號
inspection.compiler.javac.quirks.anno.array.comma.problem=使用較舊的 javac 版本(例如 JDK 5 和 JDK 6)時，註解陣列初始設定式中的尾隨逗號可能會導致編譯錯誤
inspection.compiler.javac.quirks.illegal.forward.reference=使用較舊的 javac 版本(例如 JDK 5 和 JDK 6)時，前向參照可能會導致編譯錯誤
inspection.compiler.javac.quirks.name=Javac 雜項
inspection.compiler.javac.quirks.qualifier.type.args.fix=移除泛型參數
inspection.compiler.javac.quirks.qualifier.type.args.problem=使用較舊的 javac 版本(例如 JDK 5 和 JDK 6)時，限定符參照中的泛型可能會導致編譯錯誤
inspection.constant.on.wrong.side.of.a.comparison.side.option=常數應位於比較一側
inspection.contract.checker.boolean.condition.for.nonboolean.parameter=參數 ''{0}'' 具有 ''{1}'' 類型(應為布爾型)
inspection.contract.checker.clause.syntax=協定子句的格式必須為 arg1, ..., argN -> 返回值
inspection.contract.checker.contract.clause.never.satisfied=協定子句 ''{0}'' 從未滿足，因為以前的協定涵蓋了其條件
inspection.contract.checker.contract.violated=違反協定子句 ''{0}''
inspection.contract.checker.empty.constraint=約束不應為空
inspection.contract.checker.inferred.notnull.parameter.notnull=Parameter ''{0}'' is inferred to be non-null, so ''\!null'' is always satisfied
inspection.contract.checker.inferred.notnull.parameter.null=Parameter ''{0}'' is inferred to be non-null, so ''null'' is not applicable
inspection.contract.checker.method.always.fails.nontrivial=子句 ''{0}'' 的返回值可被取代為 ''fail''，因為此子句中的方法總是失敗
inspection.contract.checker.method.always.fails.trivial=子句 ''{0}'' 的返回值可被取代為 ''fail''，因為方法總是失敗
inspection.contract.checker.no.exception.thrown=違反協定子句 ''{0}''\: 未拋出異常
inspection.contract.checker.notnull.parameter.notnull=Parameter ''{0}'' is annotated as non-null, so ''\!null'' is always satisfied
inspection.contract.checker.notnull.parameter.null=Parameter ''{0}'' is annotated as non-null, so ''null'' is not applicable
inspection.contract.checker.parameter.count.mismatch=方法採用 {0} 個參數，而協定子句 ''{1}'' 預期 {2} 個
inspection.contract.checker.primitive.parameter.nullability=參數 ''{0}'' 具有基元類型 ''{1}''，因此 ''{2}'' 不適用
inspection.contract.checker.pure.method.mutation.contract=純方法不能有變異協定
inspection.contract.checker.unknown.constraint=約束應為以下值之一\: {0}。實際為 {1}
inspection.contract.checker.unknown.return.value=返回值應為以下值之一\: {0}。實際為 {1}
inspection.contract.checker.unreachable.contract.clause=協定子句 ''{0}'' 不可到達\: 以前的協定涵蓋了所有可能的情況
inspection.contract.display.name=合同的問題
inspection.convert.2.diamond.display.name=顯式類型可被取代為 '<>'
inspection.convert.2.lambda.display.name=匿名類型可被取代為 lambda
inspection.data.flow.redundant.instanceof.quickfix=取代為\!\= null
inspection.data.flow.simplify.boolean.expression.quickfix=簡化布爾表達式
inspection.data.flow.simplify.to.assignment.quickfix.name=簡化正常作業
inspection.data.flow.turn.off.constant.references.quickfix=不要報告總是不變的值
inspection.data.flow.turn.off.nullable.returning.notnull.quickfix=Don't report nullable methods which always return non-null value
inspection.data.flow.turn.off.true.asserts.quickfix=不要報告總是為true的斷言
inspection.data.flow.warn.when.reading.a.value.guaranteed.to.be.constant=當常數存儲在變數中時發出警告
inspection.depends.on.the.java.feature=此檢查依賴於 Java 功能 ''{0}''，該功能自 Java {1} 起可用。
inspection.depends.on.the.java.features=此檢查依賴於以下 Java 功能\:
inspection.depends.on.the.java.features.minimal.version=這些功能自 Java {0} 起可用。
inspection.deprecated.class.usage.inspection.display.name=XML 中的棄用 API 用法
inspection.deprecated.is.still.used.display.name=棄用的成員仍在使用
inspection.duplicate.throws.display.name=重複拋出
inspection.duplicate.throws.ignore.subclassing.option=忽略子類別化其他異常的異常
inspection.duplicate.throws.more.general.problem=throws 列表中已經存在一個更一般的異常 ''{0}''。
inspection.duplicate.throws.problem=throws 重複
inspection.equals.hashcode.only.one.defined.problem.descriptor=類別有{0}定義但沒有定義{1}
inspection.export.results.can.be.final.description=宣告可以具有 final 修飾符
inspection.expression.can.be.replaced.with.message=表達式可被取代為 ''{0}''
inspection.extract.method.dont.suggest.length=不建議提取如此短的方法
inspection.extract.method.dont.suggest.parameters=不建議提取帶有 {0} 個或更多參數的方法
inspection.extract.method.inspection.name=方法可以提取
inspection.extract.method.message=可以從長周圍方法中提取返回 ''{0}'' 的方法
inspection.extract.method.nothing=無任何內容
inspection.extract.method.option.max.parameters=最大參數數量\:
inspection.extract.method.option.min.length=要提取的最小程式碼長度\:|符號
inspection.extract.method.preview.html=將 {0} 語句提取到一個方法中，該方法接受 {1} 並返回 <b>{2}</b>
inspection.field.access.not.guarded.display.name=不受保護的欄位存取或方法呼叫
inspection.field.not.used.in.to.string.description=方法 ''{0}'' 未在 ''toString()'' 方法中使用
inspection.field.not.used.in.to.string.description2=欄位 ''{0}'' 未在 ''toString()'' 方法中使用
inspection.field.not.used.in.to.string.display.name=欄位未在 'toString()' 方法中使用
inspection.fix.name.remove.scheduled.for.removal.annotation.by.attribute=將 @ScheduledForRemoval 取代為 @Deprecated 註解中的 'forRemoval' 特性
inspection.i18n.quickfix.annotate=註解…
inspection.i18n.quickfix.annotate.as=註解為 ''@{0}''
inspection.i18n.quickfix.annotate.element=註解{0} ''{1}''…
inspection.i18n.quickfix.annotate.element.as=將{0} ''{1}'' 註解為 ''@{2}''
inspection.implicit.subclass.display.forClass=類別 ''{0}'' 可以隱式子類別化，並且不得為 final
inspection.implicit.subclass.display.name=final 宣告不能在執行時被覆寫
inspection.implicit.subclass.extendable=使''{0}''可以覆蓋
inspection.implicit.subclass.make.class.extendable=使類別''{0}'' {1,choice,0\#|1\#和方法 {2} |1<和 {1} 個必須的方法}可擴展
inspection.inconsistent.language.level.display.name=語言級別設定不一致
inspection.infinite.loop.option=放置在 Thread.run 中時忽略
inspection.instance.guarded.by.static.display.name=由 static 欄位保護的實例成員
inspection.invalid.comparator.method.reference.display.name=用於 'Comparator' 的無效方法參照
inspection.java.8.list.sort.display.name='Collections.sort()' 可被取代為 'List.sort()'
inspection.java.9.redundant.requires.statement.display.name=module-info 中的冗餘 'requires' 指令
inspection.java.module.definition=Java 模組定義問題
inspection.java.module.naming=Java 模組名稱違反約定
inspection.java.module.naming.terminal.digits=模組名稱 ''{0}'' 不應使用末尾數字來編碼版本資訊
inspection.local.can.be.final.display.name=區域變數或參數可以是 'final'
inspection.local.can.be.final.option=報告區域變數
inspection.local.can.be.final.option1=報告方法參數
inspection.local.can.be.final.option2=報告 catch 參數
inspection.local.can.be.final.option3=報告 foreach 參數
inspection.local.can.be.final.option4=<html>報告為隱式 final 的變數<br/>(多 catch 或使用 try-with-resources 參數)</html>
inspection.local.can.be.final.option5=報告模式變數
inspection.message.code.generation.different.nullability.annotation.will.be.used=生成的程式碼將使用 ''@{1}'' 而不是 ''@{0}''
inspection.message.expression.compared.to.itself.description=表達式與自身進行比較
inspection.message.javac.quick.intersection.type.problem=因為 ''{1}'' 為 final，交叉類型 ''{0}'' 無法實例化
inspection.message.non.annotated.method.implements.non.null.method=''{1}'' 中的非註解方法 ''{0}'' 實作 ''{2}'' 中的非 null 方法
inspection.message.non.annotated.parameter.should.not.override.non.null.parameter=''{2}'' 中方法 ''{1}'' 的非註解參數 ''{0}'' 不應當覆寫 ''{3}'' 中非 null 參數
inspection.message.non.null.parameter.should.not.override.non.annotated.parameter=''{2}'' 中方法 ''{1}'' 的非 null 參數 ''{0}'' 不應當覆寫 ''{3}'' 中的非註解參數
inspection.message.non.null.parameter.should.not.override.nullable.parameter=''{2}'' 中方法 ''{1}'' 的非 null 參數 ''{0}'' 不應當覆寫 ''{3}'' 中可為 null 的參數
inspection.message.nullable.method.implements.non.null.method=''{1}'' 中可為 null 的方法 ''{0}'' 實作 ''{2}'' 中的非 null 方法
inspection.message.scheduled.for.removal.annotation.can.be.removed=可以移除 @ScheduledForRemoval 註解
inspection.message.scheduled.for.removal.annotation.can.be.replaced.by.attribute=@ScheduledForRemoval 註解可被取代為 @Deprecated 註解中的 'forRemoval' 特性
inspection.module.exports.package.to.itself=模組將軟體套件匯出/開啟到本身
inspection.name.can.be.replaced.with.long.hashcode=可以使用標準 'hashCode()' 方法
inspection.name.redundant.scheduled.for.removal.annotation=冗餘的 @ScheduledForRemoval 註解
inspection.non.final.field.in.immutable.display.name='@Immutable' 類別中有非 final 欄位
inspection.non.final.guard.display.name=非 final '@GuardedBy' 欄位
inspection.nullable.problems.NotNull.parameter.overrides.Nullable=使用 @{0} 註解的參數不得覆寫 @{1} 參數
inspection.nullable.problems.NotNull.parameter.overrides.not.annotated=使用 @{0} 註解的參數不應覆寫非註解參數
inspection.nullable.problems.NotNull.parameter.receives.null.literal=使用 @{0} 註解的參數不應該接收 ''null'' 作為實參
inspection.nullable.problems.Nullable.NotNull.conflict=不能同時使用 @{0} 和 @{1} 註解
inspection.nullable.problems.Nullable.method.overrides.NotNull=@{0} 註解的方法不能覆寫 @{1} 方法
inspection.nullable.problems.annotated.field.constructor.parameter.not.annotated=@{0} 欄位的建構函式參數可能會使用 @{0} 自身註解
inspection.nullable.problems.annotated.field.getter.conflict=@{0}欄位的Getter已經註解 @{1}
inspection.nullable.problems.annotated.field.getter.not.annotated=@{0}欄位的Getter可能會註解 @{0}本身
inspection.nullable.problems.annotated.field.setter.parameter.conflict=@{0} 欄位的 setter 參數使用 @{1} 註解
inspection.nullable.problems.annotated.field.setter.parameter.not.annotated=@{0} 欄位的 setter 參數可能會使用 @{0} 自身註解
inspection.nullable.problems.applied.to.package=完全限定名稱的註解必須放在最後一個組件之前
inspection.nullable.problems.at.class=為 null 性註解不適用於類別
inspection.nullable.problems.at.constructor=為 null 性註解不適用於建構函式
inspection.nullable.problems.at.enum.constant=為 null 性註解不適用於枚舉常數
inspection.nullable.problems.at.local.variable=為 null 性註解不適用於區域變數
inspection.nullable.problems.at.reference.list=為 null 性註解不適用於 extends/implements 子句
inspection.nullable.problems.at.type.parameter=為 null 性註解不適用於類型參數
inspection.nullable.problems.at.wildcard=為 null 性註解不適用於萬用字元類型
inspection.nullable.problems.constructor.not.compatible.non.null.type.argument=建構函式與非 null 類型實參不相容
inspection.nullable.problems.method.overrides.NotNull=未註解的方法覆寫註解為 @{0} 的方法
inspection.nullable.problems.nullable.instantiation.of.notnull=Non-null type parameter ''{0}'' cannot be instantiated with @{1} type
inspection.nullable.problems.nullable.instantiation.of.notnull.container=Non-null type parameter ''{0}'' cannot be instantiated under @{1}
inspection.nullable.problems.outer.type=Outer type is inherently non-null
inspection.nullable.problems.parameter.overrides.NotNull=未註解的參數覆寫 @{0} 參數
inspection.nullable.problems.primitive.type.annotation=不能註解基元類型成員
inspection.nullable.problems.receiver.annotation=Receiver parameter is inherently non-null
inspection.nullable.problems.redundant.annotation.inherited.notnull=Redundant nullability annotation\: type parameter upper bound is already non-null
inspection.nullable.problems.redundant.annotation.under.container=@{0} 作用域內的冗餘為 null 性註解
inspection.numeric.overflow.display.name=數值溢出
inspection.objects.equals.can.be.simplified.display.name='Objects.equals()' 可被取代為 'equals()'
inspection.quirk.method.reference.return.type.message=目標方法返回值類型提及了不可存取的類別 {0}，這將在執行時導致 IllegalAccessError
inspection.redundant.cast.display.name=冗餘類型轉換
inspection.redundant.cast.methodref.descriptor=轉換是冗餘的
inspection.redundant.cast.problem.descriptor=將 <code>{0}</code> 轉換為 <code>\#ref</code> \#loc 是冗餘的
inspection.redundant.cast.remove.quickfix=移除冗餘轉換
inspection.redundant.field.initialization.option=僅在初始化為 null 時發出警告
inspection.redundant.requires.statement.description=冗餘指令 ''requires {0}''。
inspection.redundant.requires.statement.fix.family=刪除冗餘 'requires' 指令
inspection.redundant.requires.statement.fix.name=刪除指令 ''requires {0}''
inspection.redundant.requires.statement.message.java.base.implicitly.required='java.base' 是隱式必填項。
inspection.redundant.requires.statement.message.module.unused=找不到模組軟體套件的用法。
inspection.redundant.requires.statement.message.transitive.dependencies.on.can.be.used.directly=可以直接使用 ''{0}'' 上的傳遞相依項。
inspection.redundant.throws.display.name=冗餘 'throws' 子句
inspection.redundant.throws.problem.descriptor=宣告的異常 <code>\#ref</code> 從不在任何方法實作中拋出
inspection.redundant.throws.problem.descriptor1=宣告的異常 <code>\#ref</code> 從不在此方法或其覆寫方法中拋出
inspection.redundant.throws.problem.descriptor2=宣告的異常 <code>\#ref</code> 從不拋出
inspection.redundant.throws.remove.quickfix=刪除不必要的拋出宣告
inspection.redundant.tostring.option.notnull.qualifier=Report only when qualifier is known to be non-null
inspection.redundant.type.display.name=冗餘類型實參
inspection.redundant.type.no.generics.method.reference.problem.descriptor=類型實參對於非泛型方法參照是冗餘的
inspection.redundant.type.no.generics.problem.descriptor=類型實參對於非泛型方法呼叫是冗餘的
inspection.redundant.type.problem.descriptor=顯式類型實參可以推斷
inspection.redundant.type.remove.quickfix=移除類型實參
inspection.reference.anonymous.class=匿名類別
inspection.reference.anonymous.name=匿名 ({0})
inspection.reference.default.lambda.name=lambda
inspection.reference.default.method.reference.name=方法參照
inspection.reference.default.package=<預設>
inspection.reference.implicit.class=compact source file ''{0}''
inspection.reference.implicit.constructor.name=隱式建構函式{0}
inspection.reference.jsp.holder.method.anonymous.name=<% 頁面內容 %>
inspection.reference.lambda.name=lambda ({0})
inspection.reference.method.reference.name=方法參照({0})
inspection.requires.auto.module=依賴於自動模組
inspection.requires.auto.module.message=自動匯入模組需要'requires'指令
inspection.requires.auto.module.option=僅醒目提示可傳遞相依項
inspection.requires.auto.module.transitive=自動模組需要'requires transitive'指令
inspection.safe.varargs.detector.display.name=參數化 vararg 類型可能導致堆污染
inspection.same.return.value.display.name=方法始終返回相同的值
inspection.same.return.value.problem.descriptor=方法 <code>\#ref()</code> 始終返回 <code>{0}</code>
inspection.same.return.value.problem.descriptor1=方法 <code>\#ref()</code> 及其所有覆寫方法始終返回 <code>{0}</code>
inspection.same.return.value.problem.descriptor2=方法 <code>\#ref()</code> 的所有實作始終返回 <code>{0}</code>
inspection.static.guarded.by.instance.display.name=由實例欄位或 this 保護的 static 成員
inspection.string.tokenizer.delimiter.display.name='StringTokenizer' 中的分隔符重複
inspection.surround.requirenonnull.quickfix=取代為 ''Objects.requireNonNull({0})''
inspection.suspicious.array.method.call.display.name=可疑的 'Arrays' 方法呼叫
inspection.suspicious.array.method.call.problem.arrays=Array類型不相容\: 陣列總是不同的
inspection.suspicious.array.method.call.problem.element=元素類型與陣列類型不相容
inspection.suspicious.collections.method.calls.display.name=可疑的集合方法呼叫
inspection.suspicious.collections.method.calls.problem.descriptor=''{0}''可能不包含類型''{1}''的{2}
inspection.suspicious.collections.method.calls.problem.descriptor1=可疑的呼叫''{0}''
inspection.suspicious.getter.setter.field.option=僅在存在欄位符合 getter/setter 名稱時發出警告
inspection.suspicious.integer.div.assignment.option=報告可疑但可能準確的除法
inspection.unary.plus.unary.binary.option=僅在混亂的二進制或一元表達式上下文中報告
inspection.unknown.guard.display.name=未知 '@GuardedBy' 欄位
inspection.unnecessary.super.qualifier.option=忽略說明 'super' 限定符
inspection.unreachable.catch.message=無法存取的部分\: {1, choice, 0\#異常|2\#異常} ''{0}'' {1, choice, 0\#已被|2\#已被}捕獲
inspection.unreachable.catch.name=不可到達的 catch 部分
inspection.unsatisfied.range.display.name=返回值超出宣告的範圍
inspection.unsatisfied.range.message=返回值範圍 ''{0}'' 在宣告的範圍 ''{1}'' 之外
inspection.unsatisfied.range.message.value=返回值 ''{0}'' 超出宣告的範圍 ''{1}''
inspection.use.compare.method.display.name=可以使用 'compare()' 方法比較數值
inspection.use.compare.method.fix.family.name=取代為單個比較方法
inspection.use.compare.method.option.double=建議使用 'Double.compare()' 和 'Float.compare()'
inspection.use.compare.method.turn.off.double=不建議使用 Double.compare() 和 Float.compare() 方法
inspection.visibility.accept.quickfix=接受建議的存取級別
inspection.visibility.compose.suggestion=可以是 {0}
inspection.visibility.option.constants=為常數建議較弱的可見性
inspection.visibility.option.package.private.members=為類別成員建議 package-private 可見性級別
inspection.visibility.package.private.top.level.classes=為頂級類別建議 package-private 可見性級別
inspection.visibility.private.inner.members=僅在從外部類別參照時為內部類別成員建議 'private'
inspection.weaker.access.display.name=宣告存取可以更弱
instance.member.guarded.by.static.0.loc=由 static“{0}”保護的實例成員 \#loc
instance.member.guarded.by.static.ref.loc=由 static \#ref 保護的實例成員 \#loc
intention.add.annotation.family=新增註解
intention.add.type.annotation.family=新增類型註解
intention.family.name.move.annotation.to.array=將註解移至陣列
intention.family.name.move.annotation.to.upper.bound=將註解移到上限
intention.family.name.move.members.into.class=將成員移至類別
intention.family.name.move.members.to=將成員移至 {0}
intention.family.name.remove.new.family.name=移除 'new'
intention.family.name.remove.repeating.call=移除重複呼叫
intention.family.name.replace.with.expression=取代為表達式
intention.family.name.replace.with.unnamed.pattern=取代為未命名的模式
intention.name.do.not.report.conditions.with.possible.side.effect=不報告可能有副作用的情況
intention.name.ignore.exception=忽略異常 ''{0}''
intention.name.make.variable.effectively.final=將變數設為有效 final
intention.name.move.members.into.class=將{0, choice, 1\#成員|2\#成員}移入類別中
intention.name.qualify.expression=使用 ''{1}'' 限定 {0} 表達式
intention.name.remove.repeating.call=移除重複呼叫 ''{0}()''
intention.text.remove.annotation=移除
make.0.default.annotation=將“{0}”設為預設註解
make.default.the.last.case.family.name=使 'default' 為最後一個 case
make.final.and.annotate.as.safevarargs=設為 final 並註解為 '@SafeVarargs'
message.class.inaccessible=類別 ''{0}'' 無法在此處存取
message.class.inaccessible.from.module=類別 ''{0}'' 無法從模組 ''{1}'' 存取
method.reference.mapped.to.comparator=映射到 'Comparator' 接口的方法參照不會履行 'Comparator' 約定
missorted.imports.inspection.display.name=錯誤排序的 import
module.0.with.language.level.1.depends.on.module.2.with.language.level.3=語言級別為 {1} 的模組 {0} 取決於語言級別為 {3} 的模組 {2}
module.ambiguous=不明確的模組參照\: {0}
module.service.unused=提供了服務接口，但未匯出或使用
move.0.to.the.beginning=將 ''{0}'' 移至開頭
move.annotations.to.package.info.file.family.name=將註解移動到 'package-info.java'
move.to.front=移到前面
mutability.modifiable=可修改
mutability.must.not.modify=不應修改的輸入參數
mutability.unknown=未知
mutability.unmodifiable=不可修改
mutability.unmodifiable.view=不可修改的檢視
mutation.signature.problem.invalid.token=無效的令牌\: {0}；支援的令牌為 ''this''、''io''、param1''、''param2'' 等。
mutation.signature.problem.parameter.has.immutable.type=參數 \#{0} 具有不可變類型 ''{1}''
mutation.signature.problem.reference.to.parameter.invalid=參數 \#{0} 的參照無效
mutation.signature.problem.static.method.cannot.mutate.this=static 方法無法改變 'this'
navigate.to.overridden.methods.title={0} 的覆寫方法
non.final.field.code.ref.code.in.immutable.class.loc=非 final 欄位 <code>\#ref</code> 位於 @Immutable 類別中 \#loc
non.final.guarded.by.field.0.loc=非 final @GuardedBy 欄位“{0}”\#loc
non.final.guarded.by.field.ref.loc=非 final @GuardedBy 欄位 \#ref \#loc
non.null.type.argument.is.expected=應為非 null 類型實參
notification.content.cannot.move.file=無法將 ''{0}'' 移動到 ''{1}'' 中\: {2}
notification.file.system.issue=檔案動作問題
nullability.non.null=非 null
nullability.null=null
nullability.nullable=可 null
nullable.stuff.error.overriding.notnull.with.nullable=Overriding a collection of non-null elements with a collection of nullable elements
nullable.stuff.error.overriding.nullable.with.notnull=使用非 null 元素集合覆寫可 null 元素的集合
nullable.stuff.problems.overridden.method.parameters.are.not.annotated=覆寫方法參數未註解
nullable.stuff.problems.overridden.methods.are.not.annotated=覆寫方法未註解
parameter.can.be.null=參數可以為 null
parameter.is.always.not.null=Parameter is always non-null
possible.heap.pollution.from.parameterized.vararg.type.loc=來自參數化 vararg 類型的可能的堆污染 \#loc
processing.method.usages=正在處理方法用法…
progress.title.searching.for.overridden.methods=正在搜尋被覆寫的方法
provided.type=已提供
qualify.0=限定 {0}
qualify.with.0.this=使用 {0}.this 限定
reassign.variable.display.name=重新分配的變數
redundant.block.marker=冗餘塊標記
remove.annotation=移除註解
remove.block.marker.comments=移除塊標記註釋
remove.dependency=移除相依項
remove.left.side.of.assignment=移除賦值的左側
remove.switch.branch.0=移除 switch 分支 ''{0}''
remove.switch.label=移除 switch 標籤
remove.switch.label.0=移除 switch 標籤 ''{0}''
replace.0.with=將“{0}”取代為“\=”
replace.anonymous.class.with.lambda.alternative=將匿名類別取代為 lambda 替代項
replace.get.class.with.class.literal=使用 .class 字面量取代 getClass()
replace.operator.assignment.with.assignment=將運算符賦值取代為賦值
replace.stringtokenizer.delimiters.parameter.with.unique.symbols=從 'delimiters' 實參中移除重複內容
replace.var.with.explicit.type=將 'var' 取代為顯式類型
replace.with.0=取代為 {0}
replace.with.boolean.equals=取代為 Boolean.equals
replace.with.comparator=取代為比較運算符
replace.with.constant.value=取代為常量值
replace.with.constant.value.title=取代為常量值
replace.with.expression.lambda=取代為表達式 lambda
replace.with.lambda=取代為 lambda
replace.with.stream.api.fix=使用流 ''{0}()'' 摺疊迴圈
report.suspicious.but.possibly.correct.method.calls=報告可疑的，但可能是正確的方法呼叫 (&R)
report.when.interface.is.not.annotated.with.functional.interface=在接口未使用 @FunctionalInterface 註解時報告
required.type=必需類型
safe.varargs.not.suppress.potentially.unsafe.operations=@SafeVarargs 不禁止潛在的不安全動作
safe.varargs.on.reifiable.type=@SafeVarargs 不適用於可具體化的類型
scope.package=軟體套件 {0}
searching.for.overriding.methods=正在搜尋覆寫方法
service.click.to.navigate=點擊以導覽
service.provides=提供服務
service.uses=使用服務
special.field.array.length=陣列長度
special.field.collection.size=大小
special.field.consumed.stream=已鏈接或已使用的流
special.field.enum.ordinal=枚舉序數
special.field.instantiable.class=可實例化類別
special.field.optional.value=可選值
special.field.string.length=字串長度
special.field.unboxed.value=拆箱的值
statement.lambda.can.be.replaced.with.expression.lambda=語句 lambda 可被取代為表達式 lambda
static.inheritrance.fix.replace.progress=正在取代 {0} 的用例
static.member.guarded.by.instance.0.loc=由實例“{0}”保護的 static 成員 \#loc
static.member.guarded.by.instance.ref.loc=由實例保護的 static 成員 \#ref \#loc
subclasses.search.progress.title=正在搜尋被覆寫的方法
suggest.package.private.visibility.level.for.classes.in.exported.packages.java.9=在匯出的軟體套件中為類別建議 package-private 可見性級別(Java 9+)
suppress.all.for.class=禁止類別的所有檢查
suppress.for.parameter=對參數禁止
suppress.for.statement.with.comment=使用註釋對語句禁止
suppress.inspection.class=對類別禁止
suppress.inspection.field=對欄位禁止
suppress.inspection.member=對成員禁止
suppress.inspection.method=對方法禁止
suppress.inspection.module=對模組宣告禁止
suspected.module.dependency.problem.descriptor=模組 ''{0}'' 不依賴於模組 ''{1}''。不過，未檢查 ''{1}'' 是否存在作用域 ''{2}'' 所需的匯出相依項
suspicious.invocation.handler.implementation.display.name=可疑的 'InvocationHandler' 實作
suspicious.invocation.handler.implementation.method.unused.message=方法從未在 'invoke()' 中使用\: 'hashCode()'、'equals()' 和 'toString()' 不太可能正確實作
suspicious.invocation.handler.implementation.null.returned.for.toString.message=代理方法 'toString()' 時，可能返回 null\: 不建議如此動作
suspicious.invocation.handler.implementation.null.returned.message=代理方法 ''{0}()'' 時，可能返回 null\: 這可能導致 NullPointerException
suspicious.invocation.handler.implementation.type.mismatch.message=代理方法 ''{0}()'' 時，可能返回不相容類型\: 要求 {1}，實際為 {2}
text.raw.ctor.reference.with.type.parameters=原始建構函式參照具有建構函式的顯式類型參數
text.unused.import.in.template=未使用的 import (在模板中指定)
type.constraint.assignability.explanation.definitely.inconvertible=已知 {0} 是 {1}，與 {2} 絕對不相容
type.constraint.assignability.explanation.exact={0} 已知為 {1}
type.constraint.assignability.explanation.exact.not.subtype={0} 類型恰好是 {1}，不是 {2} 的子類型
type.constraint.assignability.explanation.exact.subtype={0} 類型恰好是 {1}，是 {2} 的子類型
type.constraint.assignability.explanation.not.instance.of=已知 {0} 不是 {1}
type.constraint.assignability.explanation.not.instance.of.supertype=已知 {0} 不是 {2} 的父類型 {1}
type.constraint.assignability.explanation.subtype.of.subtype=已知 {0} 是 {1}，是 {2} 的子類型
type.mismatch.reason=原因\: {0}
uast.language.display.name=JVM 語言
unknown.guardedby.reference.0.loc=未知的 @GuardedBy 參照“{0}”\#loc
unknown.guardedby.reference.ref.loc=未知的 @GuardedBy 參照 \#ref \#loc
unnecessary.module.dependency.display.name=不必要的模組相依
unnecessary.module.dependency.problem.descriptor=模組''{0}''源不依賴於模組''{1}''源
unused.import.display.name=未使用的 import
unused.import.statement=未使用的 import 語句
unused.library.display.name=未使用的庫
unused.library.problem.descriptor=未使用的庫''{0}''
unused.library.roots.problem.descriptor=未使用的根{0}從庫''{1}''
var.can.be.replaced.with.explicit.type='var' 可被取代為顯式類型
vararg.method.call.with.50.poly.arguments=具有超過 50 個 poly 實參的 vararg 方法呼叫可能會導致編譯和分析速度減慢
