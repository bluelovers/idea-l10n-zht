action.CreateVueSingleFileComp.description=建立 Vue 組件檔案
action.CreateVueSingleFileComp.text=Vue 組件
action.VueExtractComponentAction.description=將 Vue.js 模板的所選部分提取到新的單檔案組件，並通過 props 傳遞使用的資料和方法
action.VueExtractComponentAction.text=提取 Vue 組件
nuxt.support.notification.contents=為獲取更好的程式碼補全建議，請向專案相依項中新增 @nuxt/types
nuxt.support.notification.title=Nuxt.js 支援
options.indent.label.top-level.caption=縮排頂級標記的子級\:
options.indent.radio.block-specific.caption=特定於塊中的語言
options.indent.radio.block-specific.tooltip=<template>、<script> 和 <style> 塊中的縮排將根據所使用語言的程式碼樣式設定進行設定。例如，<style lang\='scss'> 將使用 SCSS 中設定的縮排
options.indent.radio.uniform.caption=整個檔案中相同
vue.command.name.auto-import-external-symbols=自動匯入外部符號
vue.command.name.auto-import-vue-components=自動匯入 Vue 組件
vue.configurable.service.alpha.preview.comment=使用 Vue LS 3.0 中的 Vue TypeScript 延伸模組
vue.configurable.service.alpha.preview.label=Vue LS 3.0 預覽版
vue.configurable.service.alpha.preview.tooltip=在此模式下，Vue 專案中的 TypeScript 通過延伸模組實作“原生”支援。<br>選擇後，將忽略上述選項。
vue.configurable.service.auto=自動
vue.configurable.service.auto.help=選擇此選項可在可能的情況下啟用 Vue Language Server (在接管模式下)。仍將使用內部 IDE 檢查。
vue.configurable.service.disabled=已停用
vue.configurable.service.disabled.help=選擇此選項可關閉兩種語言服務。將僅使用內部 IDE 檢查。
vue.configurable.service.group=Vue 服務
vue.configurable.service.languageServerPackage=Vue 語言伺服器\:
vue.configurable.service.ts=經典 TypeScript 服務
vue.configurable.service.ts.help=選擇此選項可強制為 Vue 檔案啟用與 TypeScript 服務的經典整合。由於此整合不適用於 TypeScript 5.0 及更高版本，在這種情況下，將使用內部 IDE 檢查。
vue.configurable.service.typescriptPluginPackage=TypeScript 延伸模組\:
vue.configurable.title=Vue
vue.create.single.file.component.action.dialog.title=新增 {0}
vue.create.single.file.component.action.name=建立 Vue 組件檔案 ''{0}''
vue.create.single.file.component.template.class.api=Class API
vue.create.single.file.component.template.composition.api=Composition API
vue.create.single.file.component.template.options.api=Options API
vue.documentation.section.argument=實參\:
vue.documentation.section.default=預設\:
vue.documentation.section.library=庫\:
vue.documentation.section.pattern=模式\:
vue.documentation.section.required=必要
vue.documentation.section.slot.scope=作用域
vue.documentation.type.component=組件
vue.documentation.type.component.computed.property=組件計算屬性
vue.documentation.type.component.data.property=組件資料屬性
vue.documentation.type.component.event=組件事件
vue.documentation.type.component.method=組件方法
vue.documentation.type.component.property=組件屬性
vue.documentation.type.directive=指令
vue.documentation.type.directive.argument=指令實參
vue.documentation.type.directive.modifier=指令修飾符
vue.documentation.type.filter=篩選
vue.documentation.type.functional.component=函式組件
vue.documentation.type.slot=槽位
vue.documentation.vue=Vue
vue.inspection.display.name.data.function=資料函式
vue.inspection.display.name.deprecated.symbol=已棄用的符號
vue.inspection.display.name.duplicate.tag=重複的模板/腳本標記
vue.inspection.display.name.missing.component.import=缺少組件匯入
vue.inspection.display.name.unrecognized.directive=無法識別的指令
vue.inspection.display.name.unrecognized.slot=無法識別的槽位
vue.inspection.group.name=Vue
vue.inspection.message.attribute.does.not.accept.value={0} 不接受任何值
vue.inspection.message.data.property.should.be.function=資料屬性應是一個函式
vue.inspection.message.duplicate.tag=頂級標記 {0} 重複
vue.inspection.message.filter.function.with.no.args=篩選器函式應至少接受一個實參
vue.inspection.message.filter.invalid.number.of.arguments=篩選器實參數量無效，應為 {0} 個
vue.inspection.message.missing.component.import=未匯入組件 {0}
vue.inspection.message.unresolved.filter=未解析的篩選器 {0}
vue.live.template.context.component=Vue 組件
vue.live.template.context.script.tag=Vue 腳本標記內容
vue.live.template.context.template=Vue 模板
vue.live.template.context.template.tag.element=Vue 模板標記元素
vue.live.template.context.top.level=Vue 頂級元素
vue.param.hints.show.names.for.filters=篩選器實參
vue.parser.message.expected.comma.or.end.of.expression=應為逗號或表達式結尾
vue.parser.message.expected.end.of.expression=應為表達式結尾
vue.parser.message.expected.identifier.or.string=應為關鍵字或字串
vue.parser.message.expected.in.or.of=應為 'in' 或 'of'
vue.parser.message.expected.lparen.pipe.or.end.of.expression=應為 (, | 或表達式結尾
vue.parser.message.expected.pipe.or.end.of.expression=應為 | 或表達式結尾
vue.parser.message.generic.component.parameters.only.with.typescript=只有 TypeScript 語言支援泛型組件參數。
vue.parser.message.statements.not.allowed=Vue 表達式中不允許使用語句
vue.parser.message.unterminated.interpolation=未終止的插值
vue.progress.title.auto-importing-external-symbols-on-paste=在貼上時自動匯入外部符號…
vue.progress.title.auto-importing-vue-components-on-paste=在貼上時自動匯入 Vue 組件…
vue.project.generator.description=使用 <a href\='https\://cli.vuejs.org'>Vue CLI</a> 建立新的 <a href\='https\://vuejs.org'>Vue.js</a> 專案。
vue.project.generator.name=Vue.js
vue.project.generator.nuxt.description=使用 <a href\='https\://nuxt.com/docs/api/commands/init'>nuxi</a> 建立新的 <a href\='https\://nuxt.com/'>Nuxt</a> 專案。
vue.project.generator.nuxt.name=Nuxt
vue.project.generator.nuxt.presentable.package.name=Nuxt CLI(&C)
vue.project.generator.presentable.package.name=Vue CLI(&C)
vue.project.generator.use.default.project.setup=使用預設專案設定(&D)
vue.quickfix.import.component.family=匯入組件
vue.quickfix.import.component.name=匯入 ''{0}'' 組件
vue.quickfix.wrap.with.function.family=包裝物件
vue.quickfix.wrap.with.function.text=在函式中包裝資料物件
vue.search.scope.template.name=模板
vue.service.name=Vue 語言伺服器
vue.service.prefix=Vue
vue.symbol.presentation=Vue {0} {1}
vue.template.intention.extract.component.command.name=提取 Vue 組件
vue.template.intention.extract.component.continue=繼續編輯
vue.template.intention.extract.component.error.component.exists=組件 {0} 已存在
vue.template.intention.extract.component.error.component.name=組件名稱無效\: {0}
vue.template.intention.extract.component.error.file.exists=檔案 {0} 已存在
vue.template.intention.extract.component.family.name=提取 Vue 組件
vue.template.intention.import.component.family.name=本地匯入組件
vue.template.intention.v-model.expand.command.name=展開 v 模型
vue.template.intention.v-model.expand.family.name=展開 v 模型
vuex.inspection.message.unresolved.action=無法解析 Vuex 動作 {0}
vuex.inspection.message.unresolved.getter=無法解析 Vuex getter {0}
vuex.inspection.message.unresolved.mutation=無法解析 Vuex 變異 {0}
vuex.inspection.message.unresolved.namespace=未知 Vuex 模組命名空間 {0}
vuex.inspection.message.unresolved.state=無法解析 Vuex 狀態 {0}
vuex.inspection.message.unresolved.symbol=無法解析 Vuex 符號 {0}
