DefineLocalMetaConfigKeyFix=定義組態鍵
DefineLocalMetaConfigKeyFix.define.properties.configuration.key=定義屬性組態鍵
DefineLocalMetaConfigKeyFix.define.yaml.configuration.key=定義 YAML 組態鍵
SpringBootConfigFileHighlightingUtil.cannot.resolve.configuration.property=無法解析組態屬性 ''{0}''
SpringBootConfigFileHighlightingUtil.deprecated=已棄用\: {0}
SpringBootConfigFileHighlightingUtil.deprecated.configuration.property=棄用的組態屬性 ''{0}''
SpringBootReplacementTokenCompletionContributor.configure.replacement.tokens=組態取代令牌…
SpringBootReplacementTokenCompletionContributor.press.again.to.show.replacement.tokens=再次按 {0} 顯示取代令牌
additional.config.deprecated.property=屬性 'deprecated' 應取代為 'deprecation'
additional.config.missing.required.parameter=缺少所需的 {0, choice, 1\#參數|1<參數}\: {1}
additional.config.missing.required.property=缺少必需 ''{0}''
additional.config.text.should.end.with.dot=文本應以 '.' 結尾
additional.config.unresolved.config.key.reference=無法解析組態鍵參照 ''{0}''
additional.config.unresolved.provider=無法解析提供程序 ''{0}''
additional.config.usage.type=Spring Boot 附加組態元資料
additional.params.table.add=新增參數
additional.params.table.empty.text=未新增參數。
additional.params.table.name=名稱
additional.params.table.quick.doc=應用程式屬性快速文檔
additional.params.table.value=值
application.config.duplicate.entry=''{0}'' 的重複條目
application.config.missing.closing.bracket=缺少結束 ']'
application.config.missing.index.value=缺少索引值
application.config.missing.map.key=缺少映射鍵
application.config.non.integer.index=索引值必須是整數
application.config.rename.description=重新命名與 Spring 組態檔案 ''{0}'' 匹配的 Spring Boot 組態檔案
application.config.rename.entity.name=檔案
application.config.rename.option=Spring Boot 組態檔案
application.config.rename.title=重新命名 Spring Boot 組態檔案
application.config.replacement.quick.fix=使用取代鍵 ''{0}''
application.config.replacement.quick.fix.family.name=使用取代鍵
application.config.spring.profiles.completion.tail=\ (為此文檔定義組態檔案)
application.config.usage.type=Spring Boot 組態檔案
banner.unresolved.property=無法解析屬性 ''{0}''
configuration.properties.constructor.binding.component=已使用 @ConstructorBinding 註解但被定義為了 Spring 組件
configuration.properties.duplicated.prefix=前綴重複
configuration.properties.gutter.icon.name=組態屬性
configuration.properties.no.duplicates.found=未找到前綴 ''{0}'' 的重複項
configuration.properties.not.registered=未通過 {0} 註冊、標記為 Spring 組件或通過 {1} 掃描
configuration.properties.not.registered.below.2.2=未通過 {0} 註冊或標記為 Spring 組件
configuration.properties.prefix.must.be.in.canonical.form=前綴必須採用規範形式
configuration.properties.prefix.must.be.non.empty=前綴為空
configuration.properties.prefix.must.be.specified=未指定前綴
configuration.properties.related.config.file.line.marker.popup.title=Spring Boot 組態檔案
configuration.properties.related.config.file.line.marker.tooltip=在 Spring Boot 組態檔案中的用法
configuration.properties.related.config.file.task.base.title=組態屬性 ''{0}.{1}''
configuration.properties.related.config.file.task.caption=<html><body><b>{0}</b> 的用法 ({1}) </body></html>
configuration.properties.related.config.file.task.details=目前已發現 {0}
configuration.properties.related.config.file.task.details.finished=已找到 {0} 個
configuration.properties.related.config.file.task.title=正在搜尋 {0} 的用法
configuration.properties.show.duplicates=顯示重複項
configuration.properties.show.duplicates.for.prefix=前綴 ''{0}'' 的重複項
goto.hint.tooltip=導覽到{0,choice,1\#提示|1<提示}
icon.icons.SpringBoot.tooltip=Spring Boot
icon.icons.SpringBoot_Overlay.tooltip=Spring Boot
logical.spring.auto.configurations=自動組態
logical.spring.configured.properties=組態的屬性
logical.spring.properties.default=預設屬性
logical.spring.properties.group.others=其他
notification.group.request.mappings=Spring Boot 應用程式請求映射
runtime.beans.class.gutter.icon.name=執行時 Bean
runtime.beans.xml.gutter.icon.name=執行時 Bean (XML)
runtime.conditions.gutter.icon.name=執行時條件
spring.boot.additional.config.metadata.inspection.key=無效的 additional-spring-configuration-metadata.json
spring.boot.application.already.applies.annotation=@{0} 已套用 @{1}
spring.boot.application.already.applies.given.annotation=@{0} 已套用給定的 @{1}
spring.boot.application.attribute.in.wrong.annotation=應通過 @{0} 指定特性
spring.boot.application.endpoints.application.is.starting=''{0}'' 正在啟動
spring.boot.application.endpoints.error.actuator.starter.add.dependency=新增對 spring-boot-starter-actuator 的依賴以將其啟用
spring.boot.application.endpoints.error.actuator.starter.added=Actuator 相依項已新增。
spring.boot.application.endpoints.error.actuator.starter.disabled=Spring Boot Actuator 未啟用。
spring.boot.application.endpoints.error.actuator.starter.loading.changes=正在載入更改
spring.boot.application.endpoints.error.actuator.starter.not.added=無法新增 Actuator 相依項\:
spring.boot.application.endpoints.error.actuator.starter.not.reloaded=無法重新載入專案
spring.boot.application.endpoints.error.actuator.starter.restart=重啟應用程式
spring.boot.application.endpoints.error.caused.by=原因\: {0}\: {1}
spring.boot.application.endpoints.error.failed.to.retrieve.endpoint.data.detailed=無法檢索 ''{0}'' 端點資料\:
spring.boot.application.endpoints.updated.at=於 {0} 更新
spring.boot.application.in.default.package=預設軟體套件中的 Spring Boot 應用程式
spring.boot.application.properties.inspection.key=無效的屬性組態
spring.boot.application.redundant.declaration=冗餘宣告\: {0}
spring.boot.application.setup.inspection.key=無效的 Spring Boot 應用程式設定
spring.boot.application.yaml.inspection.key=無效的 YAML 組態
spring.boot.config.chooser.dialog.title=選擇自訂組態檔案
spring.boot.config.files.add.ad=使用(+)新增自訂位置中的組態檔案
spring.boot.config.files.name.setting=Spring Boot\: {0} 值
spring.boot.config.files.section.title=應用程式組態檔案
spring.boot.config.properties.inspection.key=無效的 @ConfigurationProperties
spring.boot.configuration.key.value.quick.info=“{0}”[{1}]
spring.boot.custom.config.files.locations=Spring Boot\: 自訂 bootstrap 組態檔案位置
spring.boot.customization.action.description=自訂 Spring Boot 自動檢測到的上下文
spring.boot.customization.action.name=自訂 Spring Boot…
spring.boot.customization.add.config.files.action=新增自訂組態檔案
spring.boot.customization.dialog.config.not.set=(未設定，使用預設 ''{0}'')
spring.boot.customization.dialog.config.tree.tooltip=取消選中可移除自訂組態檔案
spring.boot.customization.dialog.no.configs=未找到與模式 ''{0}'' 符合的組態檔案
spring.boot.customization.dialog.title=Spring Boot 上下文 ''{0}''
spring.boot.diagnostics.auto.config.progress=正在檢查自動組態類別…
spring.boot.diagnostics.conditional.on.progress=正在收集 @ConditionalOnXXX 註解…
spring.boot.diagnostics.config.keys.progress=正在檢查組態鍵…
spring.boot.diagnostics.module.info.progress=正在收集模組資訊…
spring.boot.diagnostics.progress=正在收集 Spring Boot 診斷…
spring.boot.imports.file.type.description=Spring Boot 匯入
spring.boot.imports.file.type.name=Spring Boot 匯入
spring.boot.imports.registration.title=選擇註冊
spring.boot.imports.registration.tooltip=導覽到匯入註冊
spring.boot.intention.category=Spring Boot
spring.boot.metadata.goto.related.item.group.name=Spring Boot 元資料
spring.boot.name=Spring Boot
spring.boot.non-strict.conditional.evaluation=Spring Boot\: 非嚴格 @Conditional 求值
spring.boot.properties.file.not.associated.with.json=檔案 ''{0}'' 未與 {1} 檔案類型關聯
spring.boot.properties.invalid.json=''{0}'' 中有無效的 JSON 結構
spring.boot.properties.json.metadata.create=為 ''{0}'' 建立 Spring Boot 元資料檔案
spring.boot.properties.no.json.metadata.hint=找不到其他元資料檔案。將建立一個新檔案
spring.boot.properties.no.json.metadata.popup=在以下目錄為 ''{0}'' 建立元資料檔案\:
spring.boot.properties.no.resources.roots=在模組 ''{0}'' 中未找到資源根
spring.boot.reactor.hooks.on.debug.inspection=初始化 ReactorDebugAgent 時呼叫 Hooks.onOperatorDebug()
spring.boot.reactor.hooks.on.debug.quickfix=移除 Hooks.onOperatorDebug() 呼叫
spring.boot.reactor.inspection.key=可疑的 Hooks.onOperatorDebug() 用法
spring.boot.replacement.token.label=取代令牌\:
spring.boot.settings.create.run.configuration=自動建立執行組態(&R)
spring.boot.settings.create.run.configuration.tooltip=(重新)匯入時新增 Spring Boot 執行組態(如果尚不存在)
spring.boot.settings.initializr=專案匯入
