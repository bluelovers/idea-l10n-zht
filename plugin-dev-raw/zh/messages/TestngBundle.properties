# Groups problem inspection
inspection.depends.on.groups.add.as.defined.test.group.fix=將 ''{0}'' 添加為定義的測試組。
inspection.depends.on.groups.defined.groups.panel.title=定義的組(&D)
inspection.depends.on.groups.family.name=TestNG
inspection.depends.on.groups.undefined.group.problem=組 ''{0}'' 未定義。
# "dependsOnMethods" problem inspection
inspection.depends.on.method.duplicated.name.problem=方法名稱重複: {0}
inspection.depends.on.method.unknown.method.problem=方法 ''{0}'' 未知。
inspection.depends.on.method.check=方法 ''{0}'' 不應包含 () 字符。
inspection.depends.on.method.is.not.test=方法 ''{0}'' 不是測試或設定方法。
inspection.depends.on.method.is.not.annotated=方法 ''{0}'' 未使用 @{1} 註解
# Data provider problems inspection
inspection.testng.data.provider.does.not.exist.problem=資料提供程序不存在
inspection.testng.data.provider.need.to.be.static=外類的資料提供程序需要為 static
# Expected exception never thrown in test method body inspection
inspection.testng.expected.exception.never.thrown.problem=從未在 ''{0}()'' 的正文中拋出預期 <code>#ref</code> #loc
# Undeclared test inspection
inspection.undeclared.test.create.suite.fix=創建套件
inspection.undeclared.test.problem.descriptor=未宣告的測試 ''{0}''
inspection.undeclared.test.register=註冊 ''{0}''
inspection.undeclared.test.register.test=註冊測試
junit.configuration.test.runner.parameters.label=測試執行參數:
test.case.can.be.converted.to.testng=TestCase 可以轉換為 TestNG
testng.annotate.dialog.title=註解
testng.browse.button.title=TestNG
testng.choose.test.group=選擇測試組
testng.configuration.across.module.dependencies.radio=整個模組依賴項(&D)
testng.configuration.class.label=類(&C)
testng.configuration.group.label=組(&G)
testng.configuration.in.single.module.radio=在單個模組中(&S)
testng.configuration.in.whole.project.radio=在整個專案中(&W)
testng.configuration.jdk.settings.pane=JDK 設定
testng.configuration.listeners.pane=偵聽器
testng.configuration.method.label=方法(&E)
testng.configuration.output.directory=輸出目錄(&O):
testng.configuration.package.label=包(&G)
testng.configuration.parameters.pane=參數
testng.configuration.pattern.label=模式
testng.configuration.properties.file=屬性檔案(&P)
testng.configuration.suite.label=套件(&S)
testng.configuration.test.kind.label=測試種類:
testng.configuration.use.default.reporters.option=使用預設報告者
testng.create.new.method.dialog.title=創建新方法
testng.create.setup.dialog.message=方法 ''{0}'' 已存在，但未註解為 @BeforeMethod。
testng.create.setup.dialog.title=創建 SetUp
testng.entry.point.test.cases=TestNG 測試用例
testng.group.browser.cannot.browse.groups=無法瀏覽組
testng.group.browser.no.tests.found.in.project=在專案中找不到測試
testng.output.directory.button.title=TestNG
testng.parameters.table.model.name=名稱
testng.parameters.table.model.value=值
testng.select.output.directory=選擇測試輸出目錄
testng.select.properties.file=為測試屬性選擇 .properties 檔案
testng.suite.browser.select.suite=選擇套件
testng.suite.browser.select.xml.or.yaml.suite.file=請選擇 xml 或 yaml 套件檔案
testng.util.found.test.class=找到測試類 {0}
testng.util.searching.test.progress.title=正在搜尋測試…
testng.util.unable.to.convert=無法轉換。
testng.util.will.be.added.to.module.classpath=TestNG 將被添加到模組類路徑

action.excludeFromTestNGSuite.text=從套件中排除
action.AddToTestNGSuite.text=添加到臨時套件

# Invalid data provider return type inspection
inspection.data.provider.return.type.check=資料提供程序必須返回 {0}
inspection.testNG.data.provider.display.name=資料提供程序問題
inspection.data.provider.return.type.display.name=資料提供程序返回類型無效
inspection.duplicated.data.provider.names.display.name=資料提供程序名稱重複
inspection.expected.exception.never.thrown.testNG.display.name=從未在測試方法正文中拋出預期異常
inspection.undeclared.tests.display.name=未宣告的測試
inspection.groups.testNG.display.name=未定義的組名
inspection.depends.on.method.testNG.display.name=傳遞給 'dependsOnMethods' 的方法名稱非法
inspection.convert.javadoc.display.name=TestNG Javadoc 可以轉換為註解
inspection.convert.old.annotations.display.name=使用了舊的 TestNG 註解 @Configuration
inspection.junit.testNG.display.name=JUnit 測試可以轉換為 TestNG
package.browser.dialog.title.choose.package=選擇軟體套件
test.class.browser.dialog.title.choose.test.class=選擇測試類
testng.config.editor.dialog.title.choose.listener.class=選擇偵聽器類
testng.test.class.dialog.message.invalid.scope.specified.exception=指定的範圍無效
testng.dialog.message.unable.to.parse.specified.exception=無法解析指定的 ''{0}''
testng.dialog.message.no.pattern.selected.warning=未選擇模式
tetsng.dialog.message.package.not.found.exception=找不到軟體套件 ''{0}''
testng.dialog.message.method.doesn.t.contain.test.exception=方法 ''{0}'' 不包含測試
testng.dialog.message.method.not.found.exception=找不到方法 ''{0}''
testng.dialog.message.class.not.found.exception=找不到類 ''{0}''
testng.dialog.message.invalid.scope.specified.exception=指定的範圍無效
dialog.message.no.tests.found.in.package=軟體套件 "{0}" 中找不到測試
dialog.message.cannot.test.anonymous.or.local.class=無法測試匿名類或局部類 "{0}"
dialog.message.no.tests.found.in.class=在類 "{0}" 中找不到測試
dialog.message.unable.to.bind.to.port=無法綁定到連接埠 {0}
dialog.message.unable.to.parse.suite=無法解析套件: {0}
checkbox.testng.test=TestNG 測試方法
dialog.message.no.tests.found.in.for.patterns=找不到模式 "{0}" 的測試
dialog.message.cannot.test.anonymous.or.local.class2=無法測試匿名類或局部類 "{0}"
inspection.message.data.provider.with.name.already.exists.in.context=上下文中已存在名稱為 ''{0}'' 的資料提供程序
intention.family.name.convert.testng.javadoc.to.annotations=將 TestNG Javadoc 轉換為 1.5 註解
inspection.message.testng.javadoc.can.be.converted.to.annotations=TestNG Javadoc 可以轉換為註解
intention.family.name.convert.testcase.to.testng=將 TestCase 轉換為 TestNG
intention.family.name.convert.old.configuration.testng.annotations=轉換舊的 @Configuration TestNG 註解
inspection.message.old.testng.annotation.configuration.used=已使用舊的 TestNG 註解 @Configuration
label.source.location.test.type=原始碼位置
label.pattern.test.type=模式
label.suite.test.type=套件
label.group.test.type=組
label.method.test.type=方法
label.class.test.type=類
label.all.in.package.test.type=軟體套件中的所有
group.names.testng.issues=TestNG
action.text.tests.for={0} 的測試
action.text.unknown.test.object=未知
action.text.temp.suite=臨時套件
action.text.tests.in.package="{0}" 中的測試
dialog.message.file.not.found=找不到檔案 ''{0}''