basic.completion.activate.explicitly=要顯式啟用基本補全，請按 {0}。
basic.completion.finish.explicit.completion=選擇 {0} 並按 {1}。
basic.completion.help.code.completion=基本補全
basic.completion.just.press.to.complete=現在，只需按 {0} 即可補全此語句。
basic.completion.lesson.name=基本補全
basic.completion.start.typing=預設情況下，<ide/> 會立即提供程式碼補全建議。在文字游標所在位置處開始鍵入 {0}，您會看到帶有符合建議的補全列表。
code.assistance.module.description=了解如何設定程式碼格式、獲取參數資訊和預覽快速彈出視窗。
code.assistance.module.name=程式碼輔助
code.completion.module.description=讓 IDE 補全您的程式碼。嘗試基本、智能和其他類型的補全。
code.completion.module.name=程式碼補全
code.format.help.link=組態程式碼樣式
code.format.lesson.name=程式碼格式
code.format.optimize.imports=您可以在此處組態重新設定格式的選項。例如，啟用 {0}，然後點擊“{1}”。
code.format.reformat.file=要在未選擇任何行的情況下重新設定整個檔案的格式，請使用 {0}。
code.format.reformat.selection=<ide/> 只需一個動作即可幫助您更正程式碼格式設定。按 {0} 重新設定所選程式碼段的格式。
code.format.show.reformat.file.dialog=使用 {0} 顯示重新設定格式的設定。
collapse.all.collapse=如果要摺疊檔案中的所有區域，請按 {0}。
collapse.all.expand=同樣，按 {0} 可展開所有可用區域。
collapse.help.link=展開或摺疊程式碼元素
collapse.hit.expand=要展開程式碼區域，請按 {0}。
collapse.lesson.name=摺疊
collapse.try.collapse=有時您需要摺疊一段程式碼以提高可讀性。嘗試使用 {0} 摺疊程式碼段。
comment.block.comment=若要使用塊註釋 {0} 進行註釋，請選擇程式碼塊並按 {1}。
comment.block.lesson.name=註釋行和程式碼塊
comment.block.uncomment=要取消對塊註釋的註釋，請將文字游標置於註釋塊中的任意位置，然後按 {0}。
comment.line.comment.any.line=使用 {0} 註釋掉任意一行。
comment.line.comment.several.lines=選擇幾行，然後使用 {0} 註釋掉。
comment.line.lesson.name=註釋行
comment.line.uncomment.several.lines=要取消對多行的註釋，請選擇所有註釋行，然後按 {0}。
comment.line.uncomment.that.line=使用相同的快捷方式取消註釋註釋行\: 將文字游標置於該行中的任意位置，然後按 {0}。
completion.with.tab.begin.completion=按 {0} 檢視補全建議。如果在建議列表中未看到 {1}，則開始輸入 {1}，直至看到此條目。
completion.with.tab.finish.with.tab=選擇 {0} 並按 {1}。此動作不是簡單地插入所選建議，而是完全取代文字游標處的單詞。
completion.with.tab.lesson.name=使用 Tab 補全
context.actions.apply.intention=我們來套用“{0}”動作。
context.actions.fix.warning=我們來套用第一個快速修復\: {0}。
context.actions.help.intention.actions=意圖動作
context.actions.invoke.general.intentions=您幾乎可以在任何上下文中呼叫“{0}”。我們來看看在另一個文字游標位置可以做些什麼。再次按 {1}。
context.actions.invoke.intentions.for.warning=<ide/> 有數百個上下文相關動作，可以幫助您轉換、改進和修正程式碼。按 {1} 以呼叫“{0}”。
context.actions.lesson.name=上下文動作
context.actions.refactorings.promotion=請注意，許多有用的重構無法通過 {0} 使用。轉到 {1} 模組了解如何呼叫和使用這些重構。
debug.workflow.check.result=按 {0} 對所選 return 語句求值。
debug.workflow.choose.method.to.step.in=請注意，有多個嵌套呼叫，“智能步入”會醒目提示所有這些呼叫。按 {1} 選擇 {0} 呼叫，然後按 {2} 步入。
debug.workflow.consider.to.add.a.shortcut=(不妨稍後指定快捷鍵)
debug.workflow.evaluate.expression=要檢查某個函式是否拋出異常，您可以對呼叫此函式的表達式求值。我們來複製所選表達式並將其貼上到“偵錯”視窗中醒目提示的欄位中。
debug.workflow.evaluate.it=按 {0} 對表達式求值。
debug.workflow.exception.description=程序會拋出異常，您可以在“執行”視窗中檢視它的堆疊追蹤。請注意，您可以點擊堆疊追蹤中的檔名和行號來導覽到編輯器。
debug.workflow.fix.error=糟糕，在陣列索引中有一個錯誤\! 現在，我們來修正此錯誤。按 {0} 關閉彈出視窗，然後將 0 更改為 1。
debug.workflow.frames.disabled.warning=要繼續本課次，請在偵錯工具視窗中<callback id\="{0}">啟用</callback> {1} 檢視。
debug.workflow.help.link=偵錯程式碼
debug.workflow.incorrect.breakpoints=本課次的中斷點設定不正確。
debug.workflow.lesson.name=偵錯工作流
debug.workflow.mute.breakpoints=糟糕，我們的中斷點又被命中了，但是這次我們不必停在這裡。我們通過點擊“偵錯”視窗中的“{0}”來忽略中斷點。
debug.workflow.need.restart.lesson=偵錯會話已停止。重新開始該課次。
debug.workflow.quick.evaluate=我們來看看將傳遞給 {0} 的內容。按 {1} 為所選實參呼叫“對表達式快速求值”。
debug.workflow.resume=呼叫現在可以無異常地工作。在“偵錯”視窗中按 {0} 或點擊“{1}”以恢復程序執行。
debug.workflow.run.current=我們來執行此範例程序，計算輸入中不同水果的平均數量。
debug.workflow.run.to.cursor.alternative=或者，將滑鼠懸停在左側區域並點擊嵌入 {0} 動作。
debug.workflow.run.to.cursor.intro=最後，我們來檢查一下 {0} 的結果(方便起見，我們已將文字游標移至其 {1} 語句)。
debug.workflow.run.to.cursor.note=請注意，即使停用中斷點，{0} 也可以工作。
debug.workflow.run.to.cursor.press=按 {0} 執行程序，直到文字游標所在的行。
debug.workflow.start.debug=要使用當前所選的執行組態開始偵錯，請點擊工具列上的“{0}”或按 {1}。
debug.workflow.step.into=要找出導致異常的原因，我們步入所選呼叫。在“偵錯”視窗中按 {0} 或點擊“{1}”。
debug.workflow.step.over=我們來檢查一下呼叫 {0} 是否會在我們修正後拋出異常。要步過該呼叫，請在“偵錯”視窗中按 {1} 或點擊“{2}”。
debug.workflow.stop.debug=結果正確\! 我們按 {0} 或點擊工具列上的“{1}”來完成偵錯。
debug.workflow.toggle.breakpoint=我們來設定一個中斷點以開始調查問題。為此，請在裝訂區域中點擊所需行或將文字游標設定到該行並按 {0}。
debug.workflow.use.watches=實際上，此表達式會導致異常。我們將此表達式新增到 {0}，以便它在將來自動求值。按 {1} 或點擊“{2}”。
debug.workflow.use.watches.shortcut=或者，您可以使用“{0}”動作將所選文本新增到{1} {2}。
declaration.and.usages.find.usages=按 {0} 可檢視更詳細的用法檢視。您可以對宣告或用法呼叫 {0}。
declaration.and.usages.help.link=轉到宣告及其類型
declaration.and.usages.hide.view=瀏覽完用法後，按 {0} 可隱藏檢視。
declaration.and.usages.jump.to.declaration=按 {0} 跳轉到方法的宣告。
declaration.and.usages.lesson.name=宣告和用法
declaration.and.usages.open.find.view=按 {0} 可再次開啟 {1} 檢視。
declaration.and.usages.pin.motivation=在“{0}”檢視中，您可以同時導覽到用法和宣告。下次搜尋將在“{0}”檢視中覆寫這些結果。為防止這種情況，請固定結果。
declaration.and.usages.right.click.tab=要固定頁籤，請右鍵點擊醒目提示的頁籤標題。
declaration.and.usages.select.pin.item=選擇 {0}。
declaration.and.usages.show.usages=文字游標現在位於方法宣告中。使用相同的快捷鍵 {0} 可檢視其所有用法，然後選擇其中之一。
duplicate.and.delete.lines.delete.line=要刪除當前行，請按 {0} 。
duplicate.and.delete.lines.duplicate.line=使用 {0} 複製文字游標所在的行。
duplicate.and.delete.lines.duplicate.several.lines=現在，按 {0} 複製所選行。
duplicate.and.delete.lines.lesson.name=複製和刪除行
duplicate.and.delete.lines.select.several.lines=您可以對多行套用相同的動作。例如，按兩下 {0} 以選擇當前行和上一行。
duplicate.and.delete.lines.unexpected.selection.restore=意外選區
editor.basics.module.description=使用智能快捷鍵新增、刪除、選擇、移動和複製程式碼。
editor.basics.module.name=編輯器基礎知識
editor.coding.assistance.fix.error=我們來修正此錯誤。按 {0}，然後選擇 {1}。
editor.coding.assistance.fix.warning=彈出視窗顯示了一條修正此警告的重構動作建議。
editor.coding.assistance.goto.next.error=按 {0} 轉到檔案中下一個醒目提示的錯誤。
editor.coding.assistance.goto.next.warning=我們轉到下一個警告。按 {0}。
editor.coding.assistance.help.link=使用原始碼
editor.coding.assistance.highlight.usages=另一種有用的工具是醒目提示用法。按 {0} 可醒目提示檔案中文字游標處符號的所有用法。
editor.coding.assistance.lesson.name=編輯器編碼輔助
editor.coding.assistance.show.warning.description=按 {0} 展開警告說明。
essential.module.description=了解 {0} 最基本的功能
essential.module.name=基本
extract.method.confirm.several.replaces=雞尾酒排序有兩個交換位置。第一個片段剛剛被提取。點擊 {0} 同時提取它們。
extract.method.help.link=提取方法
extract.method.invoke.action=按 {0} 將所選程式碼塊提取到方法。
extract.method.lesson.name=提取方法
extract.method.second.fragment=您現在可以確認或拒絕取代第二個片段。
extract.method.start.refactoring=點擊 {0} 開始重構。
extract.variable.choose.name=為新變數選擇名稱，或者保留不變。按 {0} 補全重構。
extract.variable.help.link=提取/引入變數
extract.variable.lesson.name=提取變數
extract.variable.replace.all=所選表達式在此程式碼塊中出現 3 次。選擇列表中的第二項以取代所有符合項。
extract.variable.start.refactoring=按 {0} 從 {1} 表達式中提取區域變數。
file.structure.help.link=檢視原始檔結構
file.structure.lesson.name=檔案結構
file.structure.navigate=僅剩一個條目。現在，按 {0} 跳轉到所選專案。
file.structure.open.popup=大型原始檔可能難以讀取和瀏覽。有時您只需要預覽此類別檔案。按 {0} 可開啟檔案結構。
file.structure.request.prefixes=假設您想找到名稱中含有 {0} 和 {1} 單詞的方法。鍵入 {2} (所需單詞的前綴)可篩選檔案結構。
file.structure.toolwindow=<ide/> 也可以將檔案結構顯示為工具視窗。使用 {0} 將其開啟。
find.help.link=在檔案中搜尋目標
find.in.files.confirm.replace=最後，在對話框中點擊 {0} 以確認。
find.in.files.go.to.file=此外，還可以在主編輯器中開啟所選檔案。按 {0} 或雙擊醒目提示的條目以移動到相應的檔案。
find.in.files.help.link=尋找並取代專案檔案中的文本
find.in.files.lesson.name=在檔案中尋找並取代
find.in.files.popup.closed.warning.message=按 {0} 可再次開啟 {1} 視窗。
find.in.files.press.replace.all=點擊 {0} 開始取代。
find.in.files.select.directory=您可以定義搜尋和取代的作用域。點擊 {0} 按鈕或按 {1} 將取代作用域縮小到當前目錄。
find.in.files.select.row=您可以在嵌入式編輯器中檢視找到的字串的上下文。點擊醒目提示的行或使用 {0} 和 {1} 按鈕導覽到該行。
find.in.files.show.find.popup=假設您希望尋找某個字串在專案中的所有符合項。按 {0} 可開啟 {1} 視窗。
find.in.files.show.replace.popup=假設您想用另一個字串取代所有找到的符合項。按順序在每個檔案中執行取代可能非常枯燥。<ide/> 將幫助您完成此任務。按 {0} 可開啟 {1} 視窗。
find.in.files.type.to.find=鍵入 {0} 以搜尋“學習”專案中的所有文本符合項。
find.in.files.type.to.replace=我們來用 {1} 取代 {0} 的所有符合項。在醒目提示的欄位中鍵入 {1}。
find.in.files.whole.words=您應當會找到 {0} 字串，但也會找到一些 {1} 條目。我們來將搜尋範圍縮小到一個完整的單詞。點擊“{2}”或按 {3}。
find.occurrences.close.search.tool=在關閉搜尋面板的情況下，仍然可以使用這些快捷鍵在最近找到的符合項之間導覽。按 {0} 關閉搜尋面板。
find.occurrences.find.next=<ide/> 會自動將所選文本複製到搜尋欄位中。我們來尋找下一個符合項。按 {0} 或 {1}。
find.occurrences.find.next.in.editor=使用“{0}”尋找下一個符合項。
find.occurrences.find.previous=要跳轉到上一個符合項，請按 {0}。
find.occurrences.find.previous.in.editor=並按 {0} 返回。
find.occurrences.invoke.find=在本課次中，您選擇了“{0}”。按 {1} 開始在當前檔案中執行全文搜尋。
find.occurrences.lesson.name=下一個/上一個符合項
find.occurrences.note.about.cyclic=<strong>注意</strong>\: 搜尋將迴圈進行。在最後的符合項處按兩下 {0} 時，將選擇第一個符合項。{1}也迴圈進行。
find.occurrences.search.closed.warning=按 {0} 再次開啟搜尋欄位。
goto.action.first.lines.toggle={0, choice, 0\#關閉|1\#開啟} 行號。
goto.action.invoke.about.action=假設您想了解 <ide/>，請鍵入 {0}，然後按 {1}。
goto.action.invoke.again=您還可以使用“{0}”或按兩次 {1} 來更改 IDE 和專案設定。再次按下其中一個快捷鍵。
goto.action.lesson.name=搜尋動作
goto.action.mac.workaround=如果<strong>終端</strong>搜尋開啟，而不是{0}，請參閱<a href\="{1}">本文</a>。
goto.action.popup.closed.warning.message=按 {0} 或按兩次 {1} 可再次開啟搜尋視窗。
goto.action.propose.to.go.next.new.ui=太棒了\! 只需按 {0} 或點擊下面的按鈕即可開始下一個課次。
goto.action.second.lines.toggle=現在，將行號切換回{0, choice, 0\#開啟|1\#關閉}狀態。
goto.action.show.line.numbers.request=鍵入 {0} 以檢視 {1} 選擇器。
goto.action.to.return.to.the.editor=按 {0} 返回編輯器。
goto.action.use.find.action.1=最有用的快捷鍵之一是 {0}。通過它可以搜尋所有可進行的 IDE 動作，而不必了解它們的確切名稱和快捷鍵。立即使用 {1} 嘗試。
goto.action.use.find.action.2=或者，您可以按兩次 {1} 來呼叫“{0}”，這可以幫助您找到專案程式碼實體<strong>和</strong> IDE 條目。選擇權在您。
help.code.comment=註釋和取消註釋程式碼
help.code.completion=程式碼補全
help.code.duplicate=複製行或選區
help.find.actions=尋找動作和設定
help.lines.of.code=程式碼行
help.search.everywhere=隨處搜尋
local.history.close.window=關閉對話框以返回到更改後的程式碼。按 {0}。
local.history.congratulations=很好\! 您已還原了程式碼段\!
local.history.dialog.message=IDE 會模擬編輯檔案的過程。請等待它完成。
local.history.editor.hint=檔案修改對當前步驟停用。
local.history.file.modification.progress=正在修改檔案
local.history.help.link=本地歷史記錄
local.history.imagine.restore=假設您需要還原先前刪除的程式碼。{0} 不會起作用，因為此後發生了多項更改，您不希望丟失這些更改。
local.history.invoke.context.menu=使用“{0}”，只需點擊幾次即可還原已刪除的程式碼。在編輯器中的任意位置點擊滑鼠右鍵即可開啟右鍵選單。
local.history.lesson.name=還原移除的程式碼
local.history.remove.code=在本課次中，您將學習如何使用“{0}”還原程式碼。按 {1} 可以刪除所選程式碼段。
local.history.restore.code=右窗格顯示檔案的所選修訂和當前修訂之間的差異。在這種情況下，所選修訂包含先前刪除的程式碼。要還原程式碼段，請點擊 V 形按鈕“{0}”。
local.history.restore.code.balloon=點擊以還原程式碼段
local.history.select.revision=“{0}”對話框的左側窗格顯示當前檔案的已儲存修訂列表。每當您編輯程式碼、執行測試和執行其他動作時，專案狀態會自動儲存到 {1}。我們來選擇醒目提示的修訂。
local.history.show.history=選擇“{0} → {1}”。
move.lesson.name=移動程式碼段
move.pull.down=重新排列行通常涉及兩項動作\: 剪下和貼上。使用 <ide/>，只需執行一項動作。按 {0} 向下拉取當前行。
move.pull.up=同樣，要向上拉取一行，請按 {0}。
move.whole.method.down=現在，使用 {0} 將其下移。
move.whole.method.up=嘗試使用 {0} 將整個方法上移。請注意，文字游標應位於方法的標頭處。
multiple.selections.deselect.symbol=按 {0} 可取消選擇上一個符合項。
multiple.selections.escape=按 {0} 重設多個選擇並返回單文字游標模式。
multiple.selections.help.multiple.carets=多個文字游標和選區
multiple.selections.lesson.name=多選
multiple.selections.replace=鍵入 {0}，將 {1} 的所有符合項取代為 {0}。
multiple.selections.select.all=按 {0} 可選擇檔案中的所有符合項。
multiple.selections.select.next.symbol=再次按 {0} 可選擇此符號的下一個符合項。
multiple.selections.select.symbol=按 {0} 可選擇文字游標處的符號。
navigation.module.description=跳轉到源，導覽到宣告、實作和檔案結構。
navigation.module.name=導覽
new.selection.add.quotes=第三次按 {0} 以在選擇中新增引號。
new.selection.select.call=再按 {0} {1,choice,1\#一|2\#兩|3\#三|4\#四}次可選擇整個呼叫。
new.selection.select.if=我們將文字游標移至 {0} 語句的開頭。按兩次 {1} 將其選中。只需按幾下，即可很好地將關鍵字作為選擇對應語句的一個起點。
new.selection.select.string=再次按 {0} 可選擇整個字串。
new.selection.select.word=按 {0} 可選擇文字游標處的單詞。
new.selection.unselect=假設我們實際上要選擇它的實參，而不是選擇整個呼叫。請按 {0} 將選區收縮到實參。
onboarding.return.to.welcome.remark=\ 並返回歡迎頁面
parameter.info.add.parameters=使用 {0} 的 width 和 {1} 的 height。
parameter.info.help.link=參數資訊
parameter.info.lesson.name=參數資訊
parameter.info.use.action=按 {0} 檢視方法簽名。
postfix.completion.help.link=後綴程式碼補全
postfix.completion.intro=後綴補全有助於在編寫程式碼時減少向後跳轉文字游標。使用它，您可以根據新增的後綴、表達式的類型及其上下文，將已鍵入的表達式轉換為另一種表達式。
postfix.completion.lesson.name=後綴補全
proceed.to.the.next.step=<callback id\="{0}">點擊以繼續</callback>
quick.popups.help.link=快速彈出視窗
quick.popups.lesson.name=快速彈出視窗
quick.popups.press.escape=按 {0} 可關閉彈出視窗。
quick.popups.show.documentation=按 {0} 可檢視文字游標處符號的文檔。
quick.popups.show.implementation=按 {0} 可檢視文字游標處符號的定義。
readme.bug.tracker.remark=如果遇到其他問題，請嘗試重新開始課次，或者在[我們的問題追蹤器]({0})中報告。
readme.conclusion.header=返回專案
readme.exit.options=要返回歡迎頁面，只需關閉專案視窗。或者，從主選單中選擇 `{0} | {1}`。您也可以使用 `{0}` 選單開啟或建立新項目。預設情況下，`{2}` 工具視窗處於隱藏狀態。從主選單中選擇 `{3} | {4}` 可將其開啟。
readme.experienced.users.remark=即使您熟悉某一課，也不妨學習一下\: 您可能會發現一些有用的範例和常用功能的未知快捷鍵\!
readme.feedback.request=歡迎提供您對此學習課程的反饋，我們將不勝感激\!
readme.ift.description=此互動課程將引導您完成許多 IDE 工作流和用例，附帶許多實用的動作快捷鍵。您不需要全部記住這些快捷鍵，只需嘗試並使用最實用的快捷鍵。在日常工作中，您可能會遇到新問題，請複習此課程並嘗試其他功能。敬請關注新課次，它們可以幫助您更高效地使用 {0}。
readme.indexing.description=在學習專案初始化期間，您可能會閱讀此 `README.md`。通常，“索引編制”是專案初始化期間最耗時的動作。IDE 需要收集與您的環境和專案{0,choice,1\#, 庫|2\#}有關的資訊，並建置內部表示。快速導覽和搜尋需要索引。
readme.navigation.hint=本課程中的 `{0}` 模組將顯示使用方法。
readme.shortcuts.header=管理快捷鍵
readme.shortcuts.problem.description=此課程中的某些快捷鍵可能與系統或其他套用程序快捷鍵衝突。在這種情況下，您可以在課次的文本中點擊有問題的快捷鍵。將開啟一個彈出視窗並向您顯示動作名稱和替代快捷鍵。您將能夠套用動作或分配新快捷鍵。
readme.start.header=開始
readme.toolwindow.description=`{0}` 工具視窗包含多個模組，其中包含相應的課次集合，您能夠以任意順序學習這些課次。完成一課的學習後，系統會將其標記為完成。您可以根據已完成的課次了解自己的學習進度，如果您希望回顧知識，可以重新學習。
readme.usage.header=如何使用課程
readme.welcome.header=認識互動功能培訓工具
recent.files.close.popup=現在，最近檔案的歷史記錄更乾淨了。點擊彈出視窗外部的某個位置將其關閉或使用 {0}。
recent.files.delete=此列表中包含很多我們不想再開啟的原始檔。我們來使用 {1} 從最近的檔案歷史記錄中刪除 {0} 個檔案。
recent.files.dialog.message=我們想模擬基本工作流\: 在檔案之間快速導覽。請等待至完成。
recent.files.dialog.title=工作流模擬
recent.files.first.transition=想知道 {0} 方法是如何實作的嗎? 讓我們使用 {1} 來檢視它的宣告。
recent.files.lesson.name=最近的檔案和位置
recent.files.locations.help.link=尋找最近的檔案
recent.files.locations.search.jump=現在，選擇醒目提示的片段，然後按 {0} 開啟包含的檔案。
recent.files.locations.search.typing=在此處，可以根據您記得的程式碼段進行搜尋。請鍵入 {0}
recent.files.progress.title=正在開啟檔案
recent.files.search.jump=僅剩一個檔案。現在，按 {0} 跳轉到所選檔案。
recent.files.search.typing=您可以按檔名搜尋檔案。鍵入 {0} (所需單詞的前綴)。
recent.files.show.recent.files=我們深入檢視了庫檔案。怎樣才能返回到我們的檔案?<ide/> 有一項功能可以幫助我們顯示最近開啟的檔案。按 {0}。
recent.files.show.recent.locations=通過另一項實用動作，您可以在最近存取的檔案中發現您的程式碼。按 {0}
recent.files.use.recent.files.again=我們已返回到檔案。我們來使用 {0} 再次檢視最近的檔案。
refactoring.menu.finish.refactoring=要完成重構，請為新參數選擇某個名稱，或保留預設名稱並按 {0}。
refactoring.menu.help.link=呼叫重構
refactoring.menu.introduce.parameter=假設您需要將所選表達式移動到呼叫點，並將其作為包含方法的參數進行傳遞。從列表中選擇“{0}”，然後按 {1}。
refactoring.menu.introduce.parameter.eng=假設您需要將所選表達式移動到呼叫點，並將其作為包含方法的參數進行傳遞。{0} 完全可以做到這一點。現在，只需輸入 <strong>pa</strong> (introduce <strong>pa</strong>rameter) 或 <strong>ip</strong> (<strong>i</strong>ntroduce <strong>p</strong>arameter) 以縮減建議的列表。
refactoring.menu.lesson.name=重構選單
refactoring.menu.show.refactoring.list=<ide/> 提供了各種重構。其中許多重構都有自己的快捷鍵，但您可以隨時按 {0} 來列出當前上下文中可用的所有重構。
refactoring.menu.start.refactoring=按 {0} 開始 {1} 重構。<strong>注意</strong>，您可以從重構選單中了解重構快捷鍵。
refactorings.change.settings.warning.message=要完成本課次，請在編輯器設定中更改重構選項。按 {0}，轉到“{1}”<strong>→</strong>“{2}”，然後選擇“{4}”下面的“{3}”。或<callback id\="{5}">點擊</callback>以更改設定。
refactorings.module.description=通過重新命名、提取和其他類型的重構保持程式碼整潔。
refactorings.module.name=重構
rename.help.link=“重新命名”重構
rename.lesson.name=重新命名
restore.settings.informer=在本課次中，您更改了一些 IDE 設定。如果要還原已修改的選項，請<callback id\="{0}">點擊</callback>。
run.configuration.close.settings=現在，關閉對話框以完成本課次。
run.configuration.edit.configuration=要編輯執行組態或新增新組態，請在按住 {0} 的同時點擊下拉選單或開啟下拉選單並點擊“{1}”。
run.configuration.help.link=執行/偵錯組態
run.configuration.hover.generated.configuration=在本課次中，我們新增了另一個帶參數的組態。將滑鼠懸停在此組態上可以檢視其“執行”或“偵錯”按鈕。
run.configuration.lesson.name=執行組態
run.configuration.no.run.configuration=如您所見，執行“{0}”不會建立任何執行組態。
run.configuration.open.additional.menu.balloon=顯示更多動作
run.configuration.open.run.configurations.popup=現在，我們來看看執行組態彈出視窗。點擊下拉選單。
run.configuration.run.current=我們通過點擊工具列上的“{0}”來執行此示範程序。
run.configuration.run.current.balloon=我們來執行此範例
run.configuration.run.generated.configuration=我們來執行它。
run.configuration.select.save.configuration=選擇 {0}。
run.configuration.settings.description=這是管理所有執行組態的位置。您可以在此處設定程序參數、JVM 實參、環境變數等。
run.configuration.temporary.to.permanent=現在，<ide/> 已經建立了一個臨時執行組態。當臨時組態的數量超過預設限值 5 時，將自動刪除臨時組態。讓我們將臨時組態轉換為永久組態。點擊“執行”和“偵錯”按鈕旁邊的“{0}”。
run.configuration.tip.about.save.configuration.into.file=提示\: 要使您的同事可以存取執行組態，請將其存儲為單獨的檔案並通過版本控制系統共享此檔案。
run.debug.module.description=使用 IDE 可視偵錯器執行程式碼並修正錯誤。
run.debug.module.name=執行並偵錯
search.everywhere.class.popup.closed.warning.message=按 {0} 可再次開啟搜尋視窗。
search.everywhere.close.documentation.popup=按 {0} 可關閉彈出視窗。
search.everywhere.finish=<strong>完成</strong>\! 同樣，您可以按 {0} 尋找方法或全域變數，按 {1} 尋找檔案。
search.everywhere.goto.class=太棒了\! 但是，有時您需要只尋找類別，或者只在某些特定目錄中進行搜尋。使用“{0}”搜尋類別。
search.everywhere.invoke.search.everywhere=按兩次 {1} 可以開啟“{0}”。
search.everywhere.lesson.name=隨處搜尋
search.everywhere.navigate.to.class=使用鍵盤箭頭鍵選擇“{0}”，然後按 {1} 可跳轉到找到的定義。
search.everywhere.navigation.promotion=您將在 {0} 模組中找到其他導覽動作和工作流用例。
search.everywhere.quick.documentation=按 {0} 可以預覽所選類別的文檔。
search.everywhere.type.class.name=假設您需要一些負責從輸入流進行緩衝讀取的庫類別。輸入 {0} (搜索詞的首字母)，但先不要導覽。
search.everywhere.type.prefixes=假設您正在尋找名稱中包含單詞 {0} 和 {1} 的程式碼定義。在搜尋欄位中輸入 {2} (這些單詞的首字母)。
search.everywhere.use.all.places=現在，您可以看到示範專案中有一個符合的類別。但是，我們需要在庫中找到一個類別。我們來將 {0} 篩選器切換到 {1}，以從可用庫中調出符合的類別。
selection.extend.selection=按 {0} 可將選區擴展到下一個程式碼塊。
selection.extend.until.whole.file=嘗試使用 {0} 增大選區，直至選擇整個檔案為止。
selection.help.select.code.constructs=選擇程式碼結構
selection.lesson.name=擴展和收縮程式碼選區
selection.select.word=將文字游標放在任何單詞前面。按 {0} 可將文字游標移至下一個單詞，然後選擇二者之間的所有內容。
selection.shrink.selection={0} 可以收縮選區。嘗試使用。
smart.completion.lesson.name=類型符合補全
surround.and.unwrap.choose.surround.item=選擇 {0} 條目。
surround.and.unwrap.choose.unwrap.item=選擇 {0} 條目。
surround.and.unwrap.help.surround.code.fragments=包圍程式碼段
surround.and.unwrap.help.unwrapping.and.removing.statements=解包和移除語句
surround.and.unwrap.invoke.surround=按 {0} 使用一些模板程式碼包圍所選程式碼段。
surround.and.unwrap.invoke.unwrap=讓我們通過“{0}”的解包動作返回到先前的狀態。
surround.and.unwrap.lesson.name=包圍和解包
surround.with.lesson.name=包圍方式
