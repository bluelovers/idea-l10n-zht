inspection.checked.exceptions=Kotlin 中的未檢查異常
inspection.checked.exceptions.message=未檢查的異常\: {0}
inspection.dispatchers.edt.display.name=考慮使用 'Dispatchers.UI'
inspection.dispatchers.edt.text='Dispatchers.EDT' 預設持有寫意圖鎖。這可能會導致 UI 凍結
inspection.dispatchers.edt.to.dispatchers.ui.fix.text=將 'Dispatchers.EDT' 取代為 'Dispatchers.UI'
inspection.extension.class.should.not.be.open.text=擴展類別不應開啟
inspection.light.service.must.not.be.open.message=輕量服務不能為開放
inspection.public.extension.function.in.test.display.name=intelij.driver.tests 中 Driver/Finder/IdeaFrameUI 上的 public 擴展函式
inspection.remote.dev.rpc.interface.does.not.extend.remote.api.name=@Rpc-annotated interface does not extend fleet.rpc.RemoteApi
inspection.remote.dev.rpc.non.serializable.property=Non-serializable property ''{0}.{1}\: {2}'' used in an RPC interface API.
inspection.remote.dev.rpc.non.serializable.property.with.chain=Non-serializable property ''{0}.{1}\: {2}'' used in an RPC interface API.\nType reference chain\: {3}
inspection.remote.dev.rpc.non.serializable.type=Non-serializable type ''{0}'' used in an RPC interface API
inspection.remote.dev.rpc.non.serializable.type.name=Non-serializable type used in RPC interface
inspection.remote.dev.rpc.non.serializable.type.with.chain=Non-serializable type ''{0}'' used in an RPC interface API.\nType reference chain\: {1}
inspection.use.platform.process.await.exit.display.name=使用 'com.intellij.util.io.ProcessKt.awaitExit()'
inspections.an.explicit.method.should.be.used.to.retrieve.an.application.service.message=提供顯式的 'getInstance()' 方法來訪問應用程式服務而不是屬性
inspections.application.service.as.static.immutable.property.with.backing.field.message=應用程式服務不得指定至具有支援欄位的 static 不可變屬性
inspections.companion.object.in.extension=擴展中的伴生物件
inspections.companion.object.in.extension.message=IDE 擴展實作中的伴生物件只能包含記錄器和常數
inspections.create.object.and.move.prohibited.declarations.fix.text=建立物件並移動禁止的宣告
inspections.empty.companion.object.in.extension.message=擴展不應包含伴生物件
inspections.forbidden.method.in.suspend.context=禁止在 suspend 上下文方法中使用
inspections.forbidden.method.in.suspend.context.check.canceled.fix.text=將 'ProgressManager.checkCanceled' 取代為協程友好的 'checkCancelled'
inspections.forbidden.method.in.suspend.context.check.canceled.text=不在 suspend 上下文中呼叫 'ProgressManager.checkCanceled'。使用頂層 'checkCancelled' 函式
inspections.forbidden.method.in.suspend.context.default.modality.state.text='defaultModalityState()' 在 suspend 上下文中不起作用。如果確實有必要，請使用 'contextModality()'
inspections.forbidden.method.in.suspend.context.invoke.and.wait.fix.text=將 'invokeAndWait' 呼叫取代為 'withContext(Dispatchers.EDT) {}'
inspections.forbidden.method.in.suspend.context.invoke.and.wait.text='invokeAndWait' 可能會阻塞當前協程。請改用 'Dispatchers.EDT'
inspections.forbidden.method.in.suspend.context.invoke.later.fix.launch.text=將 'invokeLater' 取代為 'launch(Dispatchers.EDT)'
inspections.forbidden.method.in.suspend.context.invoke.later.fix.with.context.text=(可能會改變語意)將 'invokeLater' 呼叫取代為 'withContext(Dispatchers.EDT) {}'
inspections.forbidden.method.in.suspend.context.invoke.later.text='invokeLater' 在 suspend 上下文中非慣用。請改用 'Dispatchers.EDT'
inspections.forbidden.method.in.suspend.context.navigate.to.suspend.context=導覽到 suspend 上下文
inspections.forbidden.method.in.suspend.context.text=使用 @RequiresBlockingContext 註解的方法 ''{0}''。它不是為在 suspend 函式中呼叫而設計的
inspections.move.prohibited.declarations.to.top.level.fix.text=將禁止的宣告移至頂層
inspections.plugin.extension.registers.kotlin.object=擴展類別為 Kotlin 物件
inspections.plugin.kotlin.object.registered.as.extension=註冊為擴展的 Kotlin 物件
inspections.remove.empty.companion.object.fix.text=移除空的伴生物件
intention.checked.exceptions.add.annotation=新增用於重新拋出已檢查異常的註解
intention.checked.exceptions.surround.with.try.catch=使用 try/catch 包圍
