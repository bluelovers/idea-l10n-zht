action.rbs.cli.ancestors.description=顯示給定類別或模組的上級。
action.rbs.cli.ancestors.text=執行 RBS Ancestors
action.rbs.cli.ast.description=列印所載入環境的 JSON AST。您可以指定使用檔名篩選宣告的模式
action.rbs.cli.ast.text=執行 RBS Ast
action.rbs.cli.constant.description=解析 RBS 內的給定常數
action.rbs.cli.constant.text=執行 RBS Constant
action.rbs.cli.list.description=列出所有類別、模組和接口與定義
action.rbs.cli.list.text=執行 RBS List
action.rbs.cli.method.description=顯示通過 `type_name` 和 `method_name` 指定的方法的定義
action.rbs.cli.method.text=執行 RBS Method
action.rbs.cli.methods.description=顯示在給定類別或模組中定義的所有方法
action.rbs.cli.methods.text=執行 RBS Methods
action.rbs.cli.parse.description=解析給定 RBS 檔案並列印任何語法錯誤
action.rbs.cli.parse.text=執行 RBS Parse
action.rbs.cli.paths.description=顯示用於載入 RBS 檔案的路徑
action.rbs.cli.paths.text=執行 RBS Paths
action.rbs.cli.prototype.description=生成原型 RBS 檔案。支援的產生器包括 rb、rbi 和 runtime
action.rbs.cli.prototype.text=執行 RBS Prototype
action.rbs.cli.test.description=使用給定選項執行測試
action.rbs.cli.test.text=執行 RBS Test
action.rbs.cli.validate.description=確保 RBS 檔案中存在類型名稱並且類型應用程式具有正確的實參數量
action.rbs.cli.validate.text=執行 RBS Validate
action.rbs.cli.vendor.description=專案目錄中的供應商簽名
action.rbs.cli.vendor.text=執行 RBS Vendor
action.rbs.create.new.class.file.description=建立新的 RBS 類別/檔案
action.rbs.create.new.class.file.text=RBS 類別/檔案
action.rbs.generate.from.ruby.description=生成 Ruby 檔案的 RBS 簽名
action.rbs.generate.from.ruby.popup.text=類型簽名
action.rbs.generate.from.ruby.text=生成類型簽名
action.steep.cli.annotations.description=檢查給定原始碼中的註解
action.steep.cli.annotations.text=執行 Steep Annotations
action.steep.cli.check.description=執行類型檢查
action.steep.cli.check.text=執行 Steep Check
action.steep.cli.init.description=生成 Steepfile
action.steep.cli.init.text=執行 Steep Init
action.steep.cli.langserver.text=執行 Steep Langserver
action.steep.cli.project.text=執行 Steep Project
action.steep.cli.stats.text=執行 Steep Stats
action.steep.cli.validate.description=驗證 Steep 組態
action.steep.cli.validate.text=執行 Steep Validate
action.steep.cli.watch.text=執行 Steep Watch
filetype.rbs.description=RBS
rbs.action.error.generating.rbs=生成 RBS 時出錯\: {0}
rbs.action.generate.title=正在生成類型簽名
rbs.action.non.zero.exit.code=RBS 的非零離開程式碼\: {0}
rbs.action.output.null=無法執行 RBS prototype 指令
rbs.action.tab.title=執行 {0}
rbs.actions.create.class.file.dialog.class=類別
rbs.actions.create.class.file.dialog.file=檔案
rbs.actions.create.class.file.dialog.interface=接口
rbs.actions.create.class.file.dialog.module=模組
rbs.actions.create.class.file.error.invalid.class.name=該名稱不是有效的類別名
rbs.actions.create.class.file.error.invalid.file.name=該名稱不是有效的檔名
rbs.actions.create.class.file.error.invalid.interface.name=該名稱不是有效的接口名稱
rbs.actions.create.class.file.error.invalid.module.name=該名稱不是有效的模組名稱
rbs.actions.create.class.file.name=建立 RBS 類別/檔案 {0}
rbs.actions.create.class.file.title=新增 RBS 類別/檔案
rbs.actions.run.anything.group.name=RBS
rbs.actions.run.anything.help.placeholder=rbs <command>
rbs.annotation.block.with.untyped.parameters=與非類型化參數一起使用的塊
rbs.annotation.block.with.untyped.parameters.quickfix.family.name=移除塊
rbs.annotation.block.with.untyped.parameters.quickfix.name=移除 ''{0}''
rbs.annotation.interface.prepended=接口無法預置
rbs.annotation.interface.prepended.remove.quickfix.family.name=移除預置接口
rbs.annotation.interface.prepended.remove.quickfix.name=移除 ''prepend {0}''
rbs.annotation.interface.prepended.replace.extend.quickfix.family.name=將預置接口更改為 'extend'
rbs.annotation.interface.prepended.replace.extend.quickfix.name=將 ''prepend {0}'' 更改為 ''extend {0}''
rbs.annotation.interface.prepended.replace.include.quickfix.family.name=將預置接口更改為 'include'
rbs.annotation.interface.prepended.replace.include.quickfix.name=將 ''prepend {0}'' 更改為 ''include {0}''
rbs.annotation.module.included.in.interface=接口中包含的類別/模組
rbs.annotation.remove.include.statement.quickfix.name=移除 'include' 語句
rbs.annotation.remove.statement.fix=移除語句
rbs.annotation.self.type.in.method=方法中使用了 self 類型綁定
rbs.annotation.self.type.in.method.remove.quickfix.family.name=移除自類型綁定
rbs.annotation.self.type.in.method.remove.quickfix.name=移除 ''{0}''
rbs.annotation.self.type.in.proc.with.untyped.parameters=與非類型化參數一起使用的 self 類型綁定
rbs.annotation.self.type.in.proc.with.untyped.parameters.remove.quickfix.family.name=移除 self 類型綁定
rbs.annotation.self.type.in.proc.with.untyped.parameters.remove.quickfix.name=移除 ''{0}''
rbs.annotation.singleton.alias.in.interface.quickfix.family.name=將單例別名轉換為實例別名
rbs.annotation.singleton.alias.in.interface.quickfix.name=轉換為實例別名
rbs.annotation.singleton.in.interface=接口內部的單例方法定義
rbs.annotation.singleton.in.interface.remove.alias.quickfix.name=移除單例別名
rbs.annotation.singleton.in.interface.remove.quickfix.name=移除單例方法
rbs.annotation.singleton.method.in.interface.quickfix.family.name=將單例方法轉換為實例方法
rbs.annotation.singleton.method.in.interface.quickfix.name=轉換為實例方法
rbs.annotation.type.alias.used.as.self.type=用作自類型的類型別名
rbs.annotation.type.alias.used.as.self.type.remove.intention.family.name=移除無效的自類型
rbs.annotation.type.alias.used.as.self.type.remove.intention.name=移除 ''{0}''
rbs.annotation.type.contexts.keyword.in.invalid.context=在無效上下文中使用了 ''{0}''
rbs.annotation.type.contexts.keyword.in.invalid.context.replace.quickfix.family.name=取代無效的類型用法
rbs.annotation.type.contexts.keyword.in.invalid.context.replace.quickfix.name=取代 ''{0}''
rbs.annotation.type.variable.after.optional.type.variable=必選類型變數位於可選類型變數之後
rbs.annotation.type.variable.after.optional.type.variable.quickfix.family.name=新增預設類型
rbs.annotation.type.variable.after.optional.type.variable.quickfix.name=新增預設類型
rbs.annotation.type.variable.depends.on.optional.type.variable=預設類型中參照的可選類型變數
rbs.annotation.type.variable.depends.on.optional.type.variable.quickfix.family.name=取代無效的類型變數參照
rbs.annotation.type.variable.depends.on.optional.type.variable.quickfix.name=取代 ''{0}''
rbs.annotation.use.alias.mismatched.case.interface=''{0}'' 不是有效的接口名稱
rbs.annotation.use.alias.mismatched.case.lowercase=''{0}'' 不是有效的類型別名
rbs.annotation.use.alias.mismatched.case.uppercase=''{0}'' 不是有效的類別/模組名稱
rbs.annotation.visibility.modifier.remove.quickfix.family.name=移除無效的可見性修飾符
rbs.annotation.visibility.modifier.remove.quickfix.name=移除 ''{0}''
rbs.annotation.visibility.modifier.used.in.interface=在接口內部使用的可見性修飾符
rbs.annotation.visibility.modifier.used.in.module.method=模組方法中使用的可見性修飾符
rbs.collection.banner=捆綁的簽名檔案(使用 RBS 集合下載)
rbs.collection.location=庫根
rbs.collection.name=rbs_collection [捆綁]
rbs.collection.name.with.module=rbs_collection ({0}) [捆綁]
rbs.collection.notification.installGem.body=允許通過安裝最新版本的 'rbs' gem 在後台下載 gem 的類型簽名(專案及其檔案不會被修改)
rbs.collection.notification.installGem.install.action.title=安裝
rbs.collection.notification.installGem.title=改進的類型支援
rbs.collection.notificationGroup=RBS 收集自動化
rbs.collection.runner.title=正在執行 ''{0}''…
rbs.expected.argument.type.group.rbs=RBS
rbs.expected.constant.type.group.rbs=RBS
rbs.expected.globalVariable.type.group.rbs=RBS
rbs.expected.method.signature.group.rbs=RBS
rbs.expected.parameter.type.group.rbs=RBS
rbs.expected.return.type.group.rbs=RBS
rbs.expected.variable.type.group.rbs=RBS
rbs.inlay.hints.choose.declaration.title=選擇宣告
rbs.inlay.hints.ruby.attribute.type.description=關聯的宣告旁邊的特性類型(來自 RBS)。顯示存取器、讀取器和寫入器的類型。<br/><br/>按住 Ctrl 並點擊提示可導覽到類型簽名。
rbs.inlay.hints.ruby.attribute.type.name=特性類型
rbs.inlay.hints.ruby.block.parameter.type.description=關聯宣告旁邊的塊參數類型(來自 RBS)。將同時顯示命名參數和編號參數的類型。<br/><br/>按住 Ctrl 並點擊提示可導覽到類型簽名。
rbs.inlay.hints.ruby.block.parameter.type.name=塊參數類型
rbs.inlay.hints.ruby.block.self.type.description=關聯宣告旁邊的塊 self 類型(來自 RBS)。<br/><br/>按住 Ctrl 並點擊提示可導覽到類型簽名。
rbs.inlay.hints.ruby.block.self.type.name=塊 self 類型
rbs.inlay.hints.ruby.constant.type.description=關聯的宣告旁邊的常數類型(來自 RBS)。<br/><br/>按住 Ctrl 並點擊提示可導覽到類型簽名。
rbs.inlay.hints.ruby.constant.type.name=常數類型
rbs.inlay.hints.ruby.container.type.description=類別/模組宣告旁邊的類型變數名稱(來自 RBS)。<br/><br/>按住 Ctrl 並點擊提示可導覽到類型簽名。
rbs.inlay.hints.ruby.container.type.name=類別/模組類型變數
rbs.inlay.hints.ruby.global.variable.type.description=關聯的宣告旁邊的全域變數類型(來自 RBS)。<br/><br/>按住 Ctrl 並點擊提示可導覽到類型簽名。
rbs.inlay.hints.ruby.global.variable.type.name=全域變數類型
rbs.inlay.hints.ruby.method.parameter.type.description=關聯的宣告旁邊的方法參數類型(來自 RBS)。<br/><br/>按住 Ctrl 並點擊提示可導覽到類型簽名。
rbs.inlay.hints.ruby.method.parameter.type.name=方法參數類型
rbs.inlay.hints.ruby.method.return.type.description=關聯的宣告旁邊的方法返回值類型(來自 RBS)。<br/><br/>按住 Ctrl 並點擊提示可導覽到類型簽名。
rbs.inlay.hints.ruby.method.return.type.name=方法返回值類型
rbs.inspection.bad.type.argument.type.description=''{0}'' 不是 ''{1}'' 的子類型
rbs.inspection.bad.type.argument.type.name=錯誤的類型實參類型
rbs.inspection.bad.type.argument.type.replace.quickfix.family.name=取代錯誤的類型實參
rbs.inspection.bad.type.argument.type.replace.quickfix.name=取代 ''{0}''
rbs.inspection.bad.type.variable.default.type.description=''{0}'' 不是 ''{1}'' 的子類型
rbs.inspection.bad.type.variable.default.type.name=錯誤的類型變數預設類型
rbs.inspection.bad.type.variable.default.type.replace.quickfix.family.name=取代錯誤的預設類型
rbs.inspection.bad.type.variable.default.type.replace.quickfix.name=取代 ''{0}''
rbs.inspection.conflicting.type.variable.count.add.quickfix.family.name=新增缺少的類型變數
rbs.inspection.conflicting.type.variable.count.add.quickfix.name=新增{0, choice, 1\#類型變數|2\# {0} 個類型變數}
rbs.inspection.conflicting.type.variable.count.description={0}{1, choice, 0\#沒有類型變數|1\#有 1 個類型變數|2\#有 {1} 個類型變數}，這與其他宣告衝突
rbs.inspection.conflicting.type.variable.count.goTo.quickfix.family.name=轉到衝突的宣告
rbs.inspection.conflicting.type.variable.count.goTo.quickfix.name.popup.title=選擇衝突的宣告
rbs.inspection.conflicting.type.variable.count.name=衝突的類型變數計數
rbs.inspection.conflicting.type.variable.count.remove.quickfix.family.name=移除多餘的類型變數
rbs.inspection.conflicting.type.variable.count.remove.quickfix.name=移除{0, choice, 1\#類型變數|2\# {0} 個類型變數}
rbs.inspection.conflicting.type.variable.variance.description={0} 有一個與{1, choice, 1\#其他宣告|2\#其他宣告}衝突的差異
rbs.inspection.conflicting.type.variable.variance.name=衝突的類型變數差異
rbs.inspection.cyclic.class.alias.name=迴圈類別名聲明
rbs.inspection.cyclic.class.module.alias.name=迴圈類別/模組別名聲明
rbs.inspection.cyclic.module.alias.name=迴圈模組別名宣告
rbs.inspection.duplicate=重複宣告
rbs.inspection.duplicate.class.alias=重複的類別名聲明
rbs.inspection.duplicate.class.alias.container=''{0}'' 已作為類別存在
rbs.inspection.duplicate.class.exists=''{0}'' 已作為類別存在
rbs.inspection.duplicate.constant=重複的常數宣告
rbs.inspection.duplicate.different.superclass={0} 已使用 ''{1}'' 進行宣告
rbs.inspection.duplicate.global.variable=重複的全域變數宣告
rbs.inspection.duplicate.go.to.alias.quickfix.name=轉到別名宣告
rbs.inspection.duplicate.go.to.class.quickfix.name=轉到類別宣告
rbs.inspection.duplicate.go.to.conflicting.declarations.quickfix.name=轉到衝突的宣告
rbs.inspection.duplicate.go.to.conflicting.declarations.title=選擇衝突的宣告
rbs.inspection.duplicate.go.to.duplicate.included.method.quickfix.name=轉到重複的包含方法
rbs.inspection.duplicate.go.to.duplicate.included.method.title=選擇重複的包含方法
rbs.inspection.duplicate.go.to.duplicate.quickfix.name=轉到重複的宣告
rbs.inspection.duplicate.go.to.duplicate.title=選擇重複的宣告
rbs.inspection.duplicate.go.to.module.quickfix.name=轉到模組宣告
rbs.inspection.duplicate.includes.method=包括方法 ''{0}'' 的重複定義
rbs.inspection.duplicate.inclusion.call.remove.quickfix.name=移除 ''{0}'' 呼叫
rbs.inspection.duplicate.interface=重複的接口宣告
rbs.inspection.duplicate.interface.include=已包含 {0}
rbs.inspection.duplicate.keyword.parameter=重複的關鍵字參數
rbs.inspection.duplicate.method=重複的方法定義
rbs.inspection.duplicate.module.alias=重複的模組別名宣告
rbs.inspection.duplicate.module.alias.container=''{0}'' 已作為模組存在
rbs.inspection.duplicate.module.exists=''{0}'' 已作為模組存在
rbs.inspection.duplicate.opened.class.alias=無法開啟類別名 ''{0}''
rbs.inspection.duplicate.opened.module.alias=無法開啟模組別名 ''{0}''
rbs.inspection.duplicate.remove.class.alias.quickfix.name=移除重複的類別名
rbs.inspection.duplicate.remove.conflicting.class.quickfix.name=移除衝突的類別
rbs.inspection.duplicate.remove.conflicting.module.quickfix.name=移除衝突的模組
rbs.inspection.duplicate.remove.constant.quickfix.name=移除重複的常數
rbs.inspection.duplicate.remove.global.variable.quickfix.name=移除重複的全域變數
rbs.inspection.duplicate.remove.interface.quickfix.name=移除重複的接口
rbs.inspection.duplicate.remove.method.quickfix.name=移除重複的方法
rbs.inspection.duplicate.remove.module.alias.quickfix.name=移除重複的模組別名
rbs.inspection.duplicate.remove.quickfix.family.name=移除重複的宣告
rbs.inspection.duplicate.remove.superclass.quickfix.name=移除衝突的超類別
rbs.inspection.duplicate.remove.type.alias.quickfix.name=移除重複的類型別名
rbs.inspection.duplicate.type.alias=重複的類型別名宣告
rbs.inspection.group.rbs=RBS
rbs.inspection.group.rbs.code.style.name=程式碼樣式問題
rbs.inspection.group.rbs.data.flow.name=數據流
rbs.inspection.group.rbs.inheritance.name=繼承問題
rbs.inspection.group.rbs.naming.conventions.name=命名約定
rbs.inspection.group.rbs.probable.bugs.name=可能的 bug
rbs.inspection.group.ruby=Ruby
rbs.inspection.group.ruby.rbs.name=RBS
rbs.inspection.inconsistent.class.alias.name=模組 ''{0}'' 用作類別名目標
rbs.inspection.inconsistent.class.module.alias.name=不一致的類別/模組別名
rbs.inspection.inconsistent.class.module.alias.quickfix.name=轉到衝突的宣告
rbs.inspection.inconsistent.module.alias.name=類別 ''{0}'' 用作模組別名目標
rbs.inspection.incorrect.inclusion.call=不正確的包含呼叫
rbs.inspection.incorrect.inclusion.call.extend.description=在 ''extend'' 呼叫中使用的{0}
rbs.inspection.incorrect.inclusion.call.extend.remove.quickfix.name=移除 ''extend {0}''
rbs.inspection.incorrect.inclusion.call.include.description=在 ''include'' 呼叫中使用的{0}
rbs.inspection.incorrect.inclusion.call.include.remove.quickfix.name=移除 ''include {0}''
rbs.inspection.incorrect.inclusion.call.prepend.description=在 ''prepend'' 呼叫中使用的{0}
rbs.inspection.incorrect.inclusion.call.prepend.remove.quickfix.name=移除 ''prepend {0}''
rbs.inspection.incorrect.inclusion.call.remove.quickfix.family.name=移除不正確的包含呼叫
rbs.inspection.incorrect.type.argument.count.add.description={0} 需要 {1, choice, 1\#1 個類型實參|2\#{1} 個類型實參}
rbs.inspection.incorrect.type.argument.count.add.quickfix.family.name=新增缺少的類型實參
rbs.inspection.incorrect.type.argument.count.add.quickfix.name=新增{0, choice, 1\#類型實參|2\# {0} 個類型實參}
rbs.inspection.incorrect.type.argument.count.name=類型實參計數不正確
rbs.inspection.incorrect.type.argument.count.remove.all.quickfix.name=移除{0, choice, 1\#類型實參|2\#類型實參}
rbs.inspection.incorrect.type.argument.count.remove.description=提供的類型實參過多
rbs.inspection.incorrect.type.argument.count.remove.quickfix.family.name=移除多餘的類型實參
rbs.inspection.incorrect.type.argument.count.remove.quickfix.name=移除多餘的{0, choice, 1\#類型實參|2\#類型實參}
rbs.inspection.incorrect.type.argument.variance.description=用作{2, choice, 0\#不變|1\#協變|2\#逆變}實參的{0} {1}
rbs.inspection.incorrect.type.argument.variance.name=不正確的類型實參差異
rbs.inspection.invalid.method.overload.description=找不到 {0} 的非多載宣告
rbs.inspection.invalid.method.overload.name=無效的方法多載
rbs.inspection.invalid.method.overload.remove.method.quickfix.family.name=移除方法
rbs.inspection.invalid.method.overload.remove.method.quickfix.name=移除 ''{0}''
rbs.inspection.invalid.method.overload.remove.quickfix.family.name=移除 '...'
rbs.inspection.invalid.method.overload.replace.quickfix.family.name=取代為 '-> untyped'
rbs.inspection.invalid.type.argument.usage.description={0} {1} 用於{2, choice, 0\#不變|1\#協變|2\#逆變}位置
rbs.inspection.invalid.type.argument.usage.name=類型實參用法無效
rbs.inspection.literal.class.referenced.description=參照的是 ''{0}''，而不是 ''{1}''
rbs.inspection.literal.class.referenced.name=參照的字面量類別
rbs.inspection.literal.class.referenced.replace.quickfix.family.name=取代為各自的字面量
rbs.inspection.literal.class.referenced.replace.quickfix.name=取代為 ''{0}''
rbs.inspection.mismatch.edit.typeSignature.family.name=編輯類型簽名
rbs.inspection.mismatch.goto.typeSignature.error=無類型簽名
rbs.inspection.mismatch.goto.typeSignature.family.name=轉到類型簽名
rbs.inspection.mismatch.goto.typeSignature.popup.title=選擇類型簽名
rbs.inspection.missing.type.signature.add.command.name=新增類型簽名
rbs.inspection.missing.type.signature.add.create.file.name=建立 RBS 檔案 {0}
rbs.inspection.missing.type.signature.add.create.file.title=新增 RBS 檔案
rbs.inspection.missing.type.signature.add.disambiguate.title=選擇類別/模組
rbs.inspection.missing.type.signature.add.family.name=新增類型簽名
rbs.inspection.missing.type.signature.declaration=缺少類型簽名
rbs.inspection.missing.type.signature.declaration.attr.description=缺少{0, choice, 1\#{1}“{2}”|2\#{1}“{2}”和{3}“{4}”}的類型簽名
rbs.inspection.missing.type.signature.declaration.description=缺少 ''{0}'' 的類型簽名
rbs.inspection.module.used.as.superclass.description=用作超類別的{0}
rbs.inspection.module.used.as.superclass.name=用作超類別的模組
rbs.inspection.module.used.as.superclass.remove.quickfix.family.name=移除無效的超類別
rbs.inspection.module.used.as.superclass.remove.quickfix.name=移除 ''< {0}''
rbs.inspection.simplifiable.boolean.union.description=可以簡化 ''{0} | {1}''
rbs.inspection.simplifiable.boolean.union.name=可簡化的布爾並集
rbs.inspection.simplifiable.boolean.union.replace.quickfix.family.name=簡化布爾並集
rbs.inspection.simplifiable.boolean.union.replace.quickfix.name=將 ''{0} | {1}'' 取代為 ''bool''
rbs.inspection.unconventional.interface.name.name=非常規接口名稱
rbs.inspection.unconventional.name.mismatched.description=''{0}'' 與 ''{1}'' 不符合
rbs.inspection.unconventional.name.too.long.description=''{0}'' 過長，應為 {1} 個{1, choice, 1\#字元|2\#或更少字元}
rbs.inspection.unconventional.name.too.short.description=''{0}'' 過短，至少應為 {1} 個{1, choice, 1\#字元|2\#字元}
rbs.inspection.unconventional.type.alias.name.name=非常規類型別名名稱
rbs.inspection.unconventional.type.variable.name.name=非常規類型變數名稱
rbs.inspection.unconventional.use.alias.name.name=非常規 use 別名名稱
rbs.inspection.unnecessary.parentheses.description=函式類型中不必要的圓括號
rbs.inspection.unnecessary.parentheses.name=不必要的圓括號
rbs.inspection.unnecessary.parentheses.remove.quickfix.name=移除不必要的圓括號
rbs.inspection.unnecessary.qualifier.description=''{0}'' 可以縮短
rbs.inspection.unnecessary.qualifier.name=不必要的限定符
rbs.inspection.unnecessary.qualifier.replace.quickfix.family.name=移除不必要的限定符
rbs.inspection.unnecessary.qualifier.replace.quickfix.name=取代為 ''{0}''
rbs.inspection.unresolved.reference.add.use.clause.quickfix.command=新增 use 子句
rbs.inspection.unresolved.reference.add.use.clause.quickfix.family.name=新增 use 子句
rbs.inspection.unresolved.reference.add.use.clause.quickfix.title=選擇目標
rbs.inspection.unresolved.reference.description=找不到 ''{0}''
rbs.inspection.unresolved.reference.name=未解析的參照
rbs.inspection.unused.interface.description={0} 未使用
rbs.inspection.unused.interface.name=未使用的接口
rbs.inspection.unused.interface.remove.quickfix.family.name=移除未使用的接口
rbs.inspection.unused.interface.remove.quickfix.name=移除 ''{0}''
rbs.inspection.unused.type.alias.description={0} 未使用
rbs.inspection.unused.type.alias.name=未使用的類型別名
rbs.inspection.unused.type.alias.remove.quickfix.family.name=移除未使用的類型別名
rbs.inspection.unused.type.alias.remove.quickfix.name=移除 ''{0}''
rbs.inspection.unused.type.variable.description={0} 未使用
rbs.inspection.unused.type.variable.name=未使用的類型變數
rbs.inspection.unused.type.variable.remove.quickfix.family.name=移除未使用的類型變數
rbs.inspection.unused.type.variable.remove.quickfix.name=移除 ''{0}''
rbs.inspection.unused.use.clause.name=未使用的 use 子句
rbs.inspection.unused.use.clause.optimize.quickfix.family.name=最佳化 use 子句
rbs.inspection.unused.use.clause.shadowed.description=隱藏的 use 子句
rbs.inspection.unused.use.clause.unnecessary.alias.description=不必要的 use 別名
rbs.inspection.unused.use.clause.unnecessary.description=不必要的 use 子句
rbs.inspection.unused.use.clause.unused.description=未使用的 use 子句
rbs.intention.ruby.category.rbs=Ruby/RBS
rbs.intention.ruby.edit.typeSignature.command.name=編輯類型簽名
rbs.intention.ruby.edit.typeSignature.disambiguate.title=選擇類型簽名
rbs.intention.ruby.edit.typeSignature.text=編輯類型簽名
rbs.language.configurable=RBS
rbs.language.configurable.collection.description=<a href\="https\://github.com/ruby/gem_rbs_collection">RBS 集合</a>是一個社區管理的類型簽名集合，適用於未帶任何簽名的 gem。類型簽名將在背景自動下載，從而改進專案中使用的所有 gem 的類型支援和程式碼洞察。此功能不會修改專案或其檔案。
rbs.language.configurable.collection.enable=通過 RBS 集合改進類型支援
rbs.language.configurable.name=RBS
rbs.lineMarker.overloaded.declarations=RBS 多載方法
rbs.lineMarker.overloaded.declarations.title=選擇多載宣告
rbs.lineMarker.overloaded.declarations.tooltip.few=在以下位置有多載宣告\:
rbs.lineMarker.overloaded.declarations.tooltip.many=在多個檔案中有多載宣告
rbs.lineMarker.overloaded.declarations.tooltip.one=在以下位置有多載宣告\:
rbs.lineMarker.partial.declarations=RBS 部分宣告
rbs.lineMarker.partial.declarations.title=選擇部分宣告
rbs.lineMarker.partial.declarations.tooltip.few=在以下位置有部分宣告\:
rbs.lineMarker.partial.declarations.tooltip.many=在多個檔案中有部分宣告
rbs.lineMarker.partial.declarations.tooltip.one=在以下位置有部分宣告\:
rbs.live.template.presentable.name=RBS
rbs.model.attribute.accessor.longDescription={1} 的特性存取器 ''{0}''
rbs.model.attribute.accessor.shortDescription=特性存取器 ''{0}''
rbs.model.attribute.reader.longDescription={1} 的特性讀取器 ''{0}''
rbs.model.attribute.reader.shortDescription=特性讀取器 ''{0}''
rbs.model.attribute.writer.longDescription={1} 的特性編寫器 ''{0}''
rbs.model.attribute.writer.shortDescription=特性編寫器 ''{0}''
rbs.model.class.longDescription=''{1}'' 中的類別 ''{0}''
rbs.model.class.shortDescription=類別 ''{0}''
rbs.model.class.variable.longDescription={1} 的類別變數 ''{0}''
rbs.model.class.variable.shortDescription=類別變數 ''{0}''
rbs.model.constant.longDescription=''{1}'' 中的常數 ''{0}''
rbs.model.constant.shortDescription=常數 ''{0}''
rbs.model.descriptions.contravariant=逆變
rbs.model.descriptions.covariant=協變
rbs.model.descriptions.invariant=不變
rbs.model.descriptions.private.prefix=Private
rbs.model.global.variable.shortDescription=全域變數 ''{0}''
rbs.model.instance.variable.longDescription={1} 的實例變數 ''{0}''
rbs.model.instance.variable.shortDescription=實例變數 ''{0}''
rbs.model.interface.longDescription=''{1}'' 中的接口 ''{0}''
rbs.model.interface.shortDescription=接口 ''{0}''
rbs.model.keyword.shortDescription=關鍵字 ''{0}''
rbs.model.method.alias.longDescription={1} 的方法別名 ''{0}''
rbs.model.method.alias.shortDescription=方法別名 ''{0}''
rbs.model.method.longDescription={1} 的方法 ''{0}''
rbs.model.method.shortDescription=方法 ''{0}''
rbs.model.module.longDescription=''{1}'' 中的模組 ''{0}''
rbs.model.module.method.longDescription={1} 的模組方法 ''{0}''
rbs.model.module.method.shortDescription=模組方法 ''{0}''
rbs.model.module.shortDescription=模組 ''{0}''
rbs.model.parameter.shortDescription=參數 ''{0}''
rbs.model.singleton.fullName=單例類別
rbs.model.singleton.longDescription=''{1}'' 中的單例 ''{0}''
rbs.model.singleton.name=單例類別
rbs.model.singleton.shortDescription=單例 ''{0}''
rbs.model.type.alias.longDescription=''{1}'' 中的類型別名 ''{0}''
rbs.model.type.alias.shortDescription=類型別名 ''{0}''
rbs.model.type.variable.longDescription={1} 的類型變數 ''{0}''
rbs.model.type.variable.shortDescription=類型變數 ''{0}''
rbs.model.use.clause.alias.shortDescription=Use 別名 ''{0}''
rbs.notificationGroup.fileGeneration=RBS 檔案生成
rbs.parameter.info.untyped.parameters=<非類型化參數>
rbs.ruby.model.class.longDescription=''{1}'' 中的類別 ''{0}''
rbs.ruby.model.class.shortDescription=類別 ''{0}''
rbs.ruby.model.module.longDescription=''{1}'' 中的模組 ''{0}''
rbs.ruby.model.module.shortDescription=模組 ''{0}''
rbs.ruby.model.singleton.longDescription=''{1}'' 中的單例 ''{0}''
rbs.ruby.model.singleton.shortDescription=單例 ''{0}''
rbs.rubysigs.banner=捆綁的簽名檔案
rbs.rubysigs.banner.with.versions=捆綁的簽名檔案(使用 RBS v{0} 和 Ruby v{1} 生成)
rbs.rubysigs.location=庫根
rbs.rubysigs.name=rbs [bundled]
rbs.rubysigs.name.with.version=rbs (v{0}) [bundled]
rbs.search.presentation.in.container=({0} 中)
rbs.search.presentation.of.container=/{0}
rbs.search.scope.display.name=集合檔案
rbs.search.usageType.alias.group=別名
rbs.search.usageType.declaration.group=宣告
rbs.search.usageType.extend.include.prepend.call.group=extend/include/prepend 呼叫中的用法
rbs.search.usageType.nested.constant.access.group=嵌套常數存取
rbs.search.usageType.self.type.clause.group=自類型子句
rbs.search.usageType.superclass.clause.group=超類別子句
rbs.search.usageType.type.signature.group=類型簽名
rbs.search.usageType.type.variable.default.group=類型變數預設值
rbs.search.usageType.type.variable.upper.bound.group=類型變數上限
rbs.search.usageType.use.clause.group=use 子句
rbs.structure.view.qualified.name={1}中的{0}
steep.actions.run.anything.group.name=Steep
steep.actions.run.anything.help.placeholder=steep <command>
