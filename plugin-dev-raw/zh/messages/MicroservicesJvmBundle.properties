action.CompactBeansListItemsAction.GoToAction.text=緊湊 Bean 列表條目
action.CompactBeansListItemsAction.text=緊湊列表條目
action.ShowBeansFromLibrariesAction.GoToAction.text=顯示庫中的 Bean
action.ShowBeansFromLibrariesAction.text=顯示庫中的內容
action.ShowBeansFromTestsAction.GoToAction.text=顯示測試中的 Bean
action.ShowBeansFromTestsAction.text=顯示測試中的內容
action.ShowBeansModulesAction.GoToAction.text=按模組對 Bean 分組
action.ShowBeansModulesAction.text=按模組分組
action.ShowBeansSidePanelAction.GoToAction.text=顯示 Bean 側面板
action.ShowBeansSidePanelAction.text=顯示側面板
beans.empty.text=找不到 Bean
beans.loading.text=正在載入 Bean…
beans.tab.documentation=文檔
beans.tab.documentation.empty.text=選擇 Bean 以檢視文檔
beans.tool.window.activate.action.description=啟用 Bean 工具視窗
beans.tool.window.title=Bean
group.BeansActions.FilterOptions.separator=篩選
group.BeansActions.LayoutOptions.separator=布局
group.BeansActions.OptionsMenu.text=選項
inject.bean.dependency.fix.modified=文檔已被修改。\n未新增相依項。
inject.bean.dependency.fix.no.beans.found=找不到與 ''{0}'' 匹配的 Bean
inject.http.method.reference=HTTP 方法參照
inject.http.url.reference=HTTP URL 參照
inject.http.ws.reference=WebSocket URL 參照
inject.mq.destination={0} 目標參照
inject.mq.destination.generic=訊息佇列參照
inject.mq.topic={0} 主題參照
injectionType.CONFIGURATION_METHOD.description=注入 Bean 作為組態方法參數
injectionType.CONFIGURATION_METHOD.name=組態方法
injectionType.CONFIGURATION_METHOD.settings=組態方法
injectionType.CONSTRUCTOR.description=通過建構函式方法注入 Bean 實例
injectionType.CONSTRUCTOR.name=建構函式相依項
injectionType.CONSTRUCTOR.settings=建構函式
injectionType.FIELD.description=使用 @Autowired 註解通過欄位注入 Bean 實例
injectionType.FIELD.name=@Autowired 相依項
injectionType.FIELD.settings=欄位
injectionType.LOOKUP_METHOD.description=建立將從 BeanFactory 返回 Bean 實例的 Lookup 方法。
injectionType.LOOKUP_METHOD.name=尋找方法相依項
injectionType.LOOKUP_METHOD.settings=尋找方法
injectionType.OBJECT_FACTORY_METHOD.description=定義一個工廠，它在被調用時可以返回一個 Bean 實例(可能是共享實例或獨立實例)
injectionType.OBJECT_FACTORY_METHOD.name=物件工廠相依項
injectionType.OBJECT_FACTORY_METHOD.settings=物件工廠
injectionType.SETTER.description=使用 @Autowired 註解通過 setter 方法注入 Bean 實例
injectionType.SETTER.name=Setter 相依項
injectionType.SETTER.settings=Setter
install.agent=安裝 @Scheduled 偵錯器代理
microservices.mq.AccessType.ADMINISTRATION=管理
microservices.mq.AccessType.RECEIVE=接收
microservices.mq.AccessType.SEND=發送
microservices.mq.AccessType.SEND_AND_RECEIVE=發送和接收
microservices.mq.AccessType.STREAM_FORWARDING=流轉发
microservices.mq.AccessType.UNKNOWN=未知
microservices.mq.destination={0} 目標
microservices.mq.direct={0} 直接
microservices.mq.exchange={0} 交換
microservices.mq.fanout={0} 扇出
microservices.mq.generic=訊息佇列目標
microservices.mq.headers={0} 標頭
microservices.mq.queue={0} 佇列
microservices.mq.queue.type=佇列
microservices.mq.topic={0} 主題
microservices.mq.topic.type=主題
scheduled.method.enable.debugger.cancel=取消
scheduled.method.enable.debugger.html=沒有為模組執行組態啟用 @Scheduled 偵錯器。
scheduled.method.enable.debugger.html.withRestart=模組執行組態未啟用 @Scheduled 偵錯器。<br>要啟用嗎? (需要重新啟動執行/偵錯)
scheduled.method.enable.debugger.ok=啟用
scheduled.target.process.not.started=此 @Scheduled 方法沒有正在執行的應用程式
scheduled.target.requires.restart=@Scheduled 偵錯器已啟用。請重新啟動執行組態
scheduled.target.requires.start=@Scheduled 偵錯器已啟用。您可以啟動應用程式
