plugin.category.numbers      = JavaScript/數值
plugin.category.boolean      = JavaScript/布爾
plugin.category.conditional  = JavaScript/條件運算符
plugin.category.shift        = JavaScript/移位運算
plugin.category.declaration  = JavaScript/宣告
plugin.category.comments     = JavaScript/註釋
plugin.category.control-flow = JavaScript/控制流
plugin.category.other        = JavaScript/其他
plugin.category.flowjs   = Flow JS
plugin.category.javascript.jsx   = JavaScript/JSX

number.flip-arithmetic-operation.display-name                               = 翻轉 {0}
number.flip-arithmetic-operation.family-name                                = 翻轉算術運算的操作數

bool.de-morgans-law.display-name.ANDAND                          = 將 '\\&\\&' 取代為 '||'
bool.de-morgans-law.display-name.OROR                            = 將 '||' 取代為 '\\&\\&'
bool.de-morgans-law.family-name                                  = 德摩根定律
bool.flip-comparison.display-name.equals                         = 翻轉 {0}
bool.flip-comparison.display-name.not-equals                     = 將 {0} 翻轉為 {1}
bool.flip-comparison.display-name.unknown                        = 翻轉比較
bool.flip-comparison.family-name                                 = 翻轉比較
bool.flip-conjunction.display-name                               = 翻轉 {0}
bool.flip-conjunction.family-name                                = 翻轉合取操作數
bool.negate-comparison.display-name.equals                       = 對 {0} 求反
bool.negate-comparison.display-name.not-equals                   = 將 {0} 求反為 {1}
bool.negate-comparison.family-name                               = 求反比較
bool.remove-boolean-equality.display-name                        = 簡化 {0}
bool.remove-boolean-equality.family-name                         = 移除布爾相等性
braces.add-braces.display-name                                   = 為 {0} 語句添加大括號
braces.add-braces.family-name                                    = 添加大括號
braces.remove-braces.display-name                                = 從 ''{0}'' 語句中移除大括號
braces.remove-braces.family-name                                 = 移除大括號
comment.change-to-cstyle-comment.display-name                    = 取代為多行註釋
comment.change-to-cstyle-comment.family-name                     = 取代為多行註釋
comment.change-to-end-of-line-comment.display-name               = 取代為單行註釋
comment.change-to-end-of-line-comment.family-name                = 取代為單行註釋
comment.move-comment-to-separate-line.display-name               = 將註釋移至單獨的行
comment.move-comment-to-separate-line.family-name                = 將註釋移至單獨的行
conditional.flip-conditional.display-name                        = 翻轉 '?:'
conditional.flip-conditional.family-name                         = 翻轉條件
conditional.flip-if.display-name                                 = 翻轉 'if-else'
conditional.flip-if.family-name                                  = 翻轉 'if'
conditional.replace-conditional-with-if.display-name             = 將 '?:' 取代為 'if-else'
conditional.replace-conditional-with-if.let.display-name         = 取代為 'let' 並將 '?:' 更改為 'if-else'
conditional.replace-conditional-with-if.family-name              = 將條件表達式取代為 'if...else'
constant.constant-expression.display-name                        = 計算常量值
constant.constant-expression.family-name                         = 計算常量值
constant.constant-subexpression.display-name                     = 計算 {0} {1} {2} 的常量值
constant.constant-subexpression.family-name                      = 計算子表達式的常量值
increment.extract-increment.display-name                         = 提取 {0}
increment.extract-increment.family-name                          = 提取增量
initialization.split-declaration-and-initialization.display-name = 拆分為宣告和初始化
initialization.split-declaration-and-initialization.let.display-name = 取代為 'let'，並拆分為宣告和初始化
initialization.split-declaration-and-initialization.family-name  = 拆分宣告和初始化
initialization.split-declaration-and-move-to-scope-start.display-name = 拆分為宣告和初始化，並移到範圍起始處
initialization.split-declaration-and-move-to-scope-start.family-name  = 拆分宣告並移到範圍起始處

initialization.flow-type-explicitly.family-name = 顯式指定變數類型
initialization.flow-type-explicitly.display-name  = 顯式指定變數類型

number.convert-integer-to-decimal.display-name                   = 轉換為十進制
number.convert-integer-to-decimal.family-name                    = 轉換為十進制
number.convert-integer-to-hex.display-name                       = 轉換為十六進制
number.convert-integer-to-hex.family-name                        = 轉換為十六進制
number.convert-integer-to-octal.display-name                     = 轉換為八進制
number.convert-integer-to-octal.family-name                      = 轉換為八進制
number.convert-integer-to-binary.family-name                      = 轉換為二進制
number.convert-integer-to-binary.display-name                     = 轉換為二進制
number.replace-multiply-with-shift.display-name                  = 將 {0} 取代為 {1}
number.replace-multiply-with-shift.family-name                   = 將乘法取代為移位
number.replace-shift-with-multiply.display-name                  = 將 {0} 取代為 {1}
number.replace-shift-with-multiply.family-name                   = 將移位取代為乘法
opassign.replace-with-operator-assignment.display-name           = 將 ''='' 取代為 ''{0}=''
opassign.replace-with-operator-assignment.family-name            = 轉換為運算符賦值
string.double-to-single-quoted-string.display-name               = 將帶雙引號的字串取代為帶單引號的字串
string.double-to-single-quoted-string.family-name                = 將帶雙引號的字串取代為帶單引號的字串
string.join-concatenated-string-literals.display-name            = 聯接串聯的字串文字
string.single-to-double-quoted-string.display-name               = 將帶單引號的字串取代為帶雙引號的字串
string.single-to-double-quoted-string.family-name                = 將帶單引號的字串取代為帶雙引號的字串
switchtoif.replace-if-with-switch.display-name                   = 將 'if' 取代為 'switch'
switchtoif.replace-if-with-switch.family-name                    = 將 'if' 取代為 'switch'
switchtoif.replace-switch-with-if.display-name                   = 將 'switch' 取代為 'if'
switchtoif.replace-switch-with-if.family-name                    = 將 'switch' 取代為 'if'
trivialif.merge-else-if.display-name                             = 合併 'else-if'
trivialif.merge-else-if.family-name                              = 合併 'else-if'
trivialif.merge-if-and.display-name                              = 合併 'if' 語句
trivialif.merge-if-and.family-name                               = 將嵌套的 'if' 語句合併為 '\\&\\&' 條件
trivialif.merge-if-or.display-name                               = 合併 'if' 語句
trivialif.merge-if-or.family-name                                = 將等效的 'if' 語句合併為 '||' 條件
trivialif.merge-parallel-ifs.display-name                        = 合併 'if' 語句
trivialif.merge-parallel-ifs.family-name                         = 合併平行的 'if' 語句
trivialif.remove-redundant-else.display-name                     = 解開 'else'
trivialif.remove-redundant-else.family-name                      = 解開 'else'
trivialif.replace-if-with-conditional.display-name               = 將 'if-else' 取代為 '?:'
trivialif.replace-if-with-conditional.family-name                = 將 'if...else' 取代為條件運算符
trivialif.split-else-if.display-name                             = 拆分 'else-if'
trivialif.split-else-if.family-name                              = 拆分 'else-if'
trivialif.split-if-and.display-name                              = 拆分 'if' 中的 '\\&\\&' 條件
trivialif.split-if-and.family-name                               = 將 '\\&\\&' 條件拆分為嵌套的 'if' 語句
trivialif.split-if-or.display-name                               = 拆分 'if' 中的 '||' 條件
trivialif.split-if-or.family-name                                = 將 '||' 條件拆分為等效的 'if' 語句
jsx.attribute.value.remove.braces.family-name                    = 解開特性值
jsx.attribute.value.remove.braces.display-name                   = 移除大括號
jsx.attribute.value.remove.braces.replace.display-name           = 取代為 ""
jsx.attribute.value.wrap.with.braces.family-name                 = 使用 {} 包裝特性值
jsx.attribute.value.wrap.with.braces.display-name                = 使用 {} 包裝
jsx.attribute.value.wrap.with.braces.replace.display-name        = 取代為 {}


comment.change-to-doc-comment.display-name                       = 取代為 JSDoc 註釋
comment.change-to-doc-comment.family-name                        = 取代為 JSDoc 註釋