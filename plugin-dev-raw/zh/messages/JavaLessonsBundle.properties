java.basic.completion.activate=要啟用“基本補全”，請按 {0}，您會再次看到尋找選單。
java.basic.completion.choose.first=您可以按 {0} 選擇尋找選單中的第一項。
java.basic.completion.choose.item=在尋找選單中選擇 {0}，然後按 {1}。
java.basic.completion.complete=按 {0} 補全此語句。
java.basic.completion.deeper.level=有時您需要檢視有關靜態常數或方法的建議。按兩下 {0} 以在尋找中獲取。
java.basic.completion.module.promotion=您將在 {0} 模組中找到有關重構的更多資訊。
java.debug.workflow.confirm.hot.swap=確認<strong>熱交換</strong>重新載入。
java.debug.workflow.drop.frame=雖然我們修補了方法，但仍在執行過時的 {0}，它將再次拋出異常。刪除此幀，然後返回到呼叫 {1} 之前的狀態。點擊堆疊幀頂層呼叫附近的 {2} 或按 {3}。
java.debug.workflow.hotswap.disabled.warning=<strong>熱交換</strong>功能在 IDE 設定中已停用。在“{0} | {1} | {2}”<strong>→</strong>“{3}”中啟用，或<callback id\="{4}">點擊以啟用</callback>。
java.debug.workflow.invalid.drop=您似乎執行了一個不在課次計劃之內的動作。請重啟課次。
java.debug.workflow.no.confirmation=<strong>熱交換</strong>在背景自動完成。您可能會在左下角可以看到相應的訊息。
java.debug.workflow.rebuild=我們可以在修正後重新執行我們的小程序，但是對於大程序，重新執行可能需要很長時間。如果修正只影響純方法(如本例)，我們可以重新建置專案並套用<strong>熱交換</strong>，而不是重新執行。按 {0} 建置專案。
java.editor.coding.assistance.press.to.fix=按 {0} 將實參取代為空陣列。
java.extract.method.edit.method.name=編輯新方法的名稱或保留 IDE 建議的方法。然後按 {0}。
java.inheritance.hierarchy.choose.any.implementation=選擇任何實作，然後按 {0} 或點擊它。
java.inheritance.hierarchy.goto.implementation=按 {0} 尋找 {1} 的實作。
java.inheritance.hierarchy.help.link=原始碼層次結構
java.inheritance.hierarchy.hide.find.tool.window=按 {0} 隱藏 {1} 工具視窗。
java.inheritance.hierarchy.hide.method.hierarchy=我們(也)隱藏 {0}。再次按 {1}。
java.inheritance.hierarchy.invoke.implementations.again=基方法的宣告具有自身的裝訂區域圖標 {0}。點擊它或再次按 {1}。
java.inheritance.hierarchy.last.note=<strong>注意\:</strong> 也可以對類別執行 {0} 和 {1} 動作。{2} 和 {3} 動作可能很少使用，但您始終可以使用 {5} 篩選器通過 {4} 找到它們。
java.inheritance.hierarchy.lesson.name=繼承層次結構
java.inheritance.hierarchy.navigate.to.base=您可以從派生導覽到 super 方法。按 {0} 或點擊編輯器裝訂區域中的 {1} 圖標。
java.inheritance.hierarchy.open.class.hierarchy=要檢視類別層次結構，請按 {0}。
java.inheritance.hierarchy.open.in.find.tool.window=對於大型層次結構，您可能想要在 {0} 工具視窗中尋找實作。點擊“{1}”。
java.inheritance.hierarchy.open.method.hierarchy=您可能想要探索這種方法的整個層次結構。按 {0}。
java.missed.sdk.click.setup=<ide/> 在您的計算機上找不到 JDK。IDE 需要 JDK 來執行 Java 程序並為您提供程式碼輔助。要組態 JDK，請點擊醒目提示的 {0} 鏈接。
java.missed.sdk.configure=使用其中一個建議的選項來組態 JDK。您可以下載選項，也可以指定指向計算機上現有 JDK 主目錄的路徑。
java.missed.sdk.read.more.tip=<strong>提示</strong>\: 您可以在<a href\=''{0}''>該文檔</a>中閱讀有關 JDK 的更多資訊。
java.missed.sdk.show.options=點擊以檢視可用的選項
java.missed.sdk.wait.installation=IDE 正在安裝 JDK，請稍候
java.onboarding.apply.action=選擇“{0}”動作，然後按 {1}。
java.onboarding.apply.intention=選擇 {0} 並按 {1}。
java.onboarding.balloon.about.debug.panel=“{0}”工具視窗為工具列提供了各種偵錯動作。您可以稍後在“{1}”課次中進行嘗試。
java.onboarding.balloon.click.here=點擊此處設定中斷點
java.onboarding.balloon.open.file=雙擊以開啟 {0}
java.onboarding.balloon.open.learn.toolbar=切換到“{0}”工具視窗繼續學習本課次
java.onboarding.balloon.project.view=點擊以開啟<strong>專案檢視</strong>
java.onboarding.balloon.source.directory=展開 {0} 目錄以檢視專案原始檔
java.onboarding.balloon.start.debugging=點擊該圖標以開始偵錯
java.onboarding.balloon.stop.debugging=點擊該圖標以停止偵錯
java.onboarding.case.changed=大小寫已更改。
java.onboarding.change.ui.settings=在本課次中，IDEA 會將某些 UI 設定更改為預設狀態。完成或退出課次後，將恢復您的偏好設定。
java.onboarding.choose.values.item=現在，您可以開始鍵入 {0} 以減少補全列表，或選擇此條目並按 {1}。
java.onboarding.epilog=恭喜\! 您已完成入門導覽。此時，您可以\:\n- <callback id\="{0}">關閉</callback>學習專案{1}\n- <callback id\="{2}">顯示</callback>更多課次
java.onboarding.feedback.system.current.jdk=當前 JDK\:
java.onboarding.feedback.system.found.jdks=已找到 JDK\:
java.onboarding.feedback.system.jdk.at.start=開始時的 JDK\:
java.onboarding.feedback.system.lang.level=語言級別\:
java.onboarding.finish.exit=關閉示範專案
java.onboarding.finish.modules=顯示更多課次
java.onboarding.finish.text=您剛剛完成了 IDEA 入門導覽。\n現在可以關閉學習專案{0}。\n您也可以繼續學習，嘗試其他課次。
java.onboarding.finish.title=恭喜
java.onboarding.indexing.description=第一次開啟專案時，<ide/> 會掃描 JDK 和專案本身，以收集編碼輔助所需的詳細資訊。要繼續，請等待索引完成。
java.onboarding.invoke.completion=現在，我們輸入一個點 {0} 來顯示所有可用的補全選項。
java.onboarding.invoke.completion.balloon=輸入一個點 {0} 來顯示所有可用的補全選項
java.onboarding.invoke.completion.tip=<strong>提示</strong>\: <ide/> 會在您鍵入時自動顯示補全選項。此外，您還可以按 {0} 在程式碼的任何位置顯示補全條目。
java.onboarding.invoke.intention.for.code=意圖也可以節省您的時間，讓編碼更輕鬆。我們來使用意圖重新設定字串串聯的格式。按 {0} 顯示可能的選項。
java.onboarding.invoke.intention.for.code.balloon=按 {0} 顯示可用的意圖
java.onboarding.invoke.intention.for.warning.1=您剛剛修正了一個錯誤，但還可以進一步改進這段程式碼。IDEA 將醒目提示可以改進的程式碼行，並為這些行新增黃色燈泡。
java.onboarding.invoke.intention.for.warning.2=按 {0} 預覽警告並套用快速修復。
java.onboarding.invoke.intention.for.warning.balloon=按 {0} 顯示可用的快速修復
java.onboarding.invoke.search.everywhere.1=在 <ide/> 中進行處理時，您可能想要搜尋專案中的檔案、符號、類別，乃至 IDE 動作。在本課次中，我們將搜尋 {0} 動作，以將 {1} 字串改為小寫。
java.onboarding.invoke.search.everywhere.2=按兩次 {0} 以開啟“{1}”對話框。
java.onboarding.lesson.name=熟悉 IDEA
java.onboarding.module.description={0} 中的主要功能概覽。
java.onboarding.module.name=入門導覽
java.onboarding.project.view.description=<strong>專案檢視</strong>是主要工具視窗之一。它包含專案目錄、SDK 特定的外部庫和臨時檔案。點擊帶條紋的按鈕可以預覽示範專案。您也可以按 {0} 開啟。
java.onboarding.run.options.community=其他動作，例如使用覆蓋率執行 {0}，可以通過點擊“{1}”來顯示。
java.onboarding.run.options.ultimate=其他動作，例如分析 {0} 和使用覆蓋率執行 {1}，可以通過點擊“{2}”來顯示。
java.onboarding.run.sample=現在，我們來執行當前檔案，點擊“{0}”或按 {1}。
java.onboarding.run.sample.balloon=我們來執行當前檔案，點擊“{0}”或按 {1}
java.onboarding.search.everywhere.description=可以看到，所選文本 {0} 已被自動複製到輸入字串中。我們不輸入 {0}，而是輸入 {1}。
java.onboarding.select.fix=套用第一個條目\: {0}。在這種情況下，<strong>for-each</strong> 迴圈將使程式碼更易於理解。
java.onboarding.start.debugging=點擊“{0}”圖標啟動偵錯過程。
java.onboarding.stop.debugging=停止偵錯。點擊“{0}”圖標。
java.onboarding.temporary.configuration.description=您已經開啟了示範範例。現在，我們來執行它\! 在醒目提示的{0}中，您可以看到所選組態的常用執行動作。例如，您可以執行程式碼 {1} 或對其進行偵錯 {2}。
java.onboarding.toggle.breakpoint.1=您可能會注意到 {1} 方法沒有返回預期值 {0}，而是返回 {2}。我們來檢視 return 語句，偵錯有問題的程式碼。
java.onboarding.toggle.breakpoint.2=點擊醒目提示區域內的裝訂區域以設定中斷點。
java.onboarding.type.division=發現程式碼中的問題後，我們來修正。將得到的和除以值的長度。課次腳本已插入 {0}。
java.onboarding.wait.indexing=IDE 正在為 JDK 檔案編制索引，請稍候
java.postfix.completion.complete=從列表中選擇 {0} 或在編輯器中鍵入相同的值。按 {1} 補全語句。
java.postfix.completion.type=在圓括號後面鍵入 {0}，以檢視後綴補全建議列表。
java.refactoring.menu.confirm.constant=在此對話框中，您可以選擇新常數的類型、名稱、父類別和可見性。您可以保留預設值，然後按 {0} 或點擊“{1}”。
java.refactoring.menu.inline.variable=現在，將 {0} 變數的單一用法取代為定義該變數的表達式。您可以按 {1} 並從列表中選擇 {2}，或按 {3} 直接呼叫此動作。
java.refactoring.menu.inline.variable.eng=現在，將 {0} 變數的單一用法取代為定義該變數的表達式。您可以按 {1} 並通過 <strong>iv</strong> (<strong>i</strong>nline <strong>v</strong>ariable) 篩選重構選單。選擇此項或按 {2}。
java.refactoring.menu.introduce.constant=最後，從檔名中提取副檔名。您可以再次按 {0} 並選擇 {1} 或按 {2}
java.refactoring.menu.introduce.constant.eng=最後，我們從檔名提取擴展。同樣，您可以按 {0}，然後通過 <strong>ic</strong> (<strong>i</strong>ntroduce <strong>c</strong>onstant) 進行篩選或按 {1}。
java.rename.confirm.accessors.rename=<ide/> 正在檢測相應的 getter/setter，並提出相應的重新命名建議。現在只需按 {0} 或點擊“{1}”
java.rename.press.rename=按 {0} 重新命名欄位 {1}。
java.rename.type.new.name=鍵入該欄位的新名稱(例如 {0})，然後按 {1}。
java.run.configuration.lets.run=執行程式碼的方式不止一種。我們通過點擊“{0}”並選擇“{1}”條目從裝訂區域執行它。或者，您可以按 {2}。
java.smart.type.completion.apply=智能類型補全可以篩選建議列表，使其僅包含當前上下文中適用的類型。按 {0} 檢視符合建議的列表。按 {1} 選擇第一項。
java.smart.type.completion.return=智能類型補全還可以為 return 語句提供程式碼建議。按 {0} 檢視 return 的尋找選單。按 {1} 選擇第一項
java.statement.completion.complete.condition=在括號 {0} 內新增一個條件，然後按 {1} 跳轉到 {2} 語句內。
java.statement.completion.complete.finish.body=鍵入一行程式碼\: {0}，然後按 {1} 補全語句並套用格式。
java.statement.completion.complete.for=按 {0} 補全 {1} 語句。
java.statement.completion.complete.if=鍵入 {0}，然後按 {1} 以生成語句。
java.statement.completion.help.link=語句補全
java.statement.completion.lesson.name=語句補全
toggle.case.part=大/小文字
