change.signature.dialog.title=更改簽名
clion.basic.editing.module.description=可以幫助您編輯程式碼的動作
clion.basic.editing.module.name=程式碼編輯
clion.change.signature.click.refactor=點擊“{0}”按鈕以執行重構。
clion.change.signature.conclusion=請注意，<ide/> 已相應調整所有呼叫點，現在正在將字串文字 {0} 作為第二個參數傳遞給 {1}。
clion.change.signature.extract.parameter=現在，按 {0} 以使用參數重構。
clion.change.signature.help.link=“更改簽名”重構
clion.change.signature.lesson.intro=“更改簽名”重構結合了可應用於函式簽名的多項不同修改。您可以使用此重構更改函式名稱和返回值類型，以及新增、移除參數，對參數重新排序。\n更改函式簽名時，CLion 會搜尋該函式的所有用法，並更新函式的可以安全修改以反映更改的所有呼叫、實作和覆寫取代。
clion.change.signature.lesson.name=更改簽名
clion.change.signature.move.parameter.down=點擊向下按鈕或按 {2}，將 {0} 參數移至 {1} 參數下方。
clion.change.signature.next.button=下一步
clion.change.signature.open.dialog=在此範例中，{0} 函式期望目標作為其第一個參數，源作為其第二個參數，一些使用者可能會覺得這不直觀。我們來將它們翻轉過來。
clion.change.signature.open.dialog.press=按 {0} 開啟“更改簽名”對話框。
clion.change.signature.refactor.button=重構
clion.change.signature.select.parameter.1=雖然“更改簽名”可用於在一個對話框中執行許多不同的更改，但修改函式簽名的一些特定重構也有其自己的專用動作。
clion.change.signature.select.parameter.2=<strong>參數</strong>重構可用於將區域變數或表達式轉換為函式參數。在此範例中，函式 {0} 列印以逗號分隔的範圍的元素。我們來將分隔符字串轉換成新參數。
clion.change.signature.select.parameter.3=按 {0} 選擇分隔符字串。
clion.change.signature.type.new.parameter.name=<ide/> 現在已將字串文字轉換為新的函式參數。我們只需要給它一個有意義的名稱。輸入 {0}。
clion.change.signature.type.new.parameter.refactor=按 {0} 執行重構。
clion.collapse.all.collapse=如果要摺疊檔案中的所有區域，請按 {0}。
clion.collapse.all.expand=同樣，按 {0} 可展開所有可用區域。
clion.collapse.help.link=展開或摺疊程式碼元素
clion.collapse.hit.expand=要展開程式碼區域，請按 {0}。
clion.collapse.lesson.name=摺疊
clion.collapse.region.collapse=您可以摺疊任何所選程式碼段並為其建立自訂折疊區域以使其“可折疊”。嘗試選擇第 6-8 行中的三個成員變數，並使用“{0}”折疊選區。
clion.collapse.try.collapse=有時您需要摺疊一段程式碼以提高可讀性。請嘗試使用 {0} 摺疊程式碼段。
clion.comments.comment.block=您可以註釋掉程式碼塊。例如，我們來註釋掉選定的塊，請按 {0}。
clion.comments.comment.one.line=使用 {0} 註釋掉任意行。
clion.comments.help.link=進階編輯
clion.comments.lesson.name=新增和移除註釋
clion.comments.uncomment.line=使用相同快捷鍵 {0} 對已註釋的行取消註釋。
clion.completion.complete.statement=按 {0} 可補全此語句。
clion.completion.module.description=讓 IDE 補全您的程式碼。請嘗試基本、智能和其他類型的補全。
clion.completion.module.name=程式碼補全
clion.debug.workflow.lesson.name=偵錯工作流
clion.extract.and.inline.lesson.name=提取並內聯
clion.extract.constant=按 {0} 將此處用於計算圓面積的 pi 文字值提取為常數。
clion.extract.constant.help.link=提取常數
clion.extract.constant.intro=<ide/> 為您的 C++ 程式碼提供了許多有用的就地重構。例如，<strong>提取常數</strong>重構可以幫助您消除硬編碼常數，使程式碼更易於閱讀和維護。
clion.extract.constant.replace.occurrences=由於相同的數字文字多次出現，<ide/> 為您提供了取代所有符合項或僅取代這一個符合項的選項。選擇“{0}”。
clion.extract.constant.replace.occurrences.item=取代全部 2 個匹配項
clion.extract.extend.selection=按三次 {1} 選擇表達式 {0}。
clion.extract.function=現在，按 {0} 將所選程式碼提取到函式中。
clion.extract.function.button.name=提取
clion.extract.function.click.extract=現在，點擊<strong>提取</strong>以執行重構。
clion.extract.function.click.inline=點擊<strong>內聯</strong>按鈕進行確認。
clion.extract.function.conclusion=您還可以使用內聯重構來內聯常數和預處理器巨集。
clion.extract.function.dialog=“提取函式”對話框可用於指定新函式的宣告位置、返回值類型和名稱。
clion.extract.function.inline.button.name=內聯
clion.extract.function.intro=程式碼現在好多了，但我們可以套用更多重構。<ide/> 允許您使用<strong>提取函式</strong>將任何表達式或程式碼段提取到單獨的函式中。對於下一行中的表達式，我們將其提取到一個單獨的函式而不是區域變數中。
clion.extract.function.new.function.name=將名稱設定為 {0}。
clion.extract.inline=點擊“{0}”，然後按 {1}。
clion.extract.inline.done=<ide/> 現在再次內聯了 {0}，撤消了我們之前進行的“提取函式”重構。
clion.extract.inline.intro=<ide/> 現在已將周長的計算重構為新函式。然而，有時您想進行相反的動作\: 去除函式並在呼叫點內聯其主體。為了實作這一點，<ide/> 具有<strong>內聯</strong>重構，這與“提取函式”重構相反。
clion.extract.lesson.name=提取變數
clion.extract.new.constant.name=輸入 {0} 作為新常數的名稱，然後按 {1}。
clion.extract.new.constant.type=指定新的變數類型或保留建議的類型。按 {0} 繼續重構。
clion.extract.new.variable.name=輸入 {0} 作為新區域變數的名稱，然後按 {1}。
clion.extract.variable=按 {0} 將表達式提取到變數中。
clion.extract.variable.declare.const=宣告 const
clion.extract.variable.expression=然後，選擇“{0}”
clion.extract.variable.expression.option=現在，您有一些其他選項來宣告新的區域變數。選擇“宣告 const”。
clion.extract.variable.help.link=提取/引入變數
clion.extract.variable.intro=現在，硬編碼值消失，但表達式仍然很長。我們來通過<strong>提取變數</strong>重構將圓的面積提取到區域變數中。
clion.inline.help.link=內聯
clion.intn.name.replace.if=將 'if else' 取代為 '?\:'
clion.multiple.selections.deselect.symbol=按 {0} 可取消選擇上一個符合項。
clion.multiple.selections.escape=按 {0} 可重設多個選擇並返回單文字游標模式。
clion.multiple.selections.help.multiple.carets=多個文字游標和選擇範圍
clion.multiple.selections.lesson.name=多選
clion.multiple.selections.replace=鍵入 {0}，將 {1} 的所有符合項取代為 {0}。
clion.multiple.selections.select.all=按 {0} 可選擇檔案中的所有符合項。
clion.multiple.selections.select.next.symbol=再次按 {0} 可選擇此符號的下一個符合項。
clion.multiple.selections.select.symbol=按 {0} 可選擇文字游標處的符號。
clion.navigation.module.description=跳轉到源，導覽到宣告、實作和檔案結構。
clion.navigation.module.name=導覽
clion.onboarding.apply.action=選擇“{0}”動作，然後按 {1}。
clion.onboarding.apply.intention=選擇使參數成為常數參照的動作，然後按 {0}。
clion.onboarding.balloon.about.debug.panel=“{0}”工具視窗為工具列提供了各種偵錯動作。您可以稍後在“{1}”課次中進行嘗試。
clion.onboarding.balloon.click.here=點擊此處設定中斷點
clion.onboarding.balloon.open.file=雙擊以開啟 {0}
clion.onboarding.balloon.open.learn.toolbar=切換到“{0}”工具視窗繼續學習本課次
clion.onboarding.balloon.project.directory=雙擊專案目錄可以將其展開並檢視專案檔案
clion.onboarding.balloon.project.view=點擊以開啟<strong>專案</strong>檢視
clion.onboarding.balloon.start.debugging=點擊圖標開始偵錯或按 {0}。
clion.onboarding.balloon.stop.debugging=點擊該圖標以停止偵錯
clion.onboarding.case.changed=大小寫已更改。
clion.onboarding.change.ui.settings=在本課次中，<ide/> 會將某些 UI 設定更改為預設狀態。完成或退出課次後，將恢復您的偏好設定。
clion.onboarding.epilogue=恭喜\! 您已完成入門導覽。此時，您可以\:\n- <callback id\="{0}">關閉</callback>學習專案{1}\n- <callback id\="{2}">顯示</callback>更多課次
clion.onboarding.feedback.system.found.toolchain=找到的工具鏈\:
clion.onboarding.feedback.system.no.toolchain=無
clion.onboarding.feedback.system.used.toolchain=使用的工具鏈\:
clion.onboarding.finish.exit=關閉示範專案
clion.onboarding.finish.modules=顯示更多課次
clion.onboarding.finish.text=您剛剛完成了 <ide/> 入門導覽。\n現在可以關閉學習專案{0}。\n您也可以繼續學習，嘗試其他課次。
clion.onboarding.finish.title=恭喜
clion.onboarding.indexing.description=第一次開啟專案時，<ide/> 會掃描標準模板庫和專案本身，以收集編碼輔助所需的詳細資訊。要繼續，請等待索引編制完成。
clion.onboarding.invoke.completion=現在，我們輸入一個 {0} 來顯示所有可用的補全選項。
clion.onboarding.invoke.completion.tip=<strong>提示</strong>\: 您可以按 {0} 在程式碼的任何位置顯示補全條目。
clion.onboarding.invoke.intention.for.code=意圖可以節省您的時間，讓編碼變得更容易，讓您的程式碼更安全、更高效。在這裡，{0} 按值傳入 {1}，這意味著每次呼叫 {1} 時都會複製它。這樣效率很低。讓我們用一個意圖來消除不必要的複製。按 {2}。
clion.onboarding.invoke.intention.for.warning.1=您剛剛修正了一個錯誤，但還可以進一步改進這段程式碼。<ide/> 會醒目提示可以改進的程式碼行，並為這些行新增黃色燈泡。
clion.onboarding.invoke.intention.for.warning.2=按 {0} 預覽警告並套用快速修復。
clion.onboarding.invoke.search.everywhere.1=在 <ide/> 中工作時，您可能需要搜尋專案中的檔案、符號、類別，乃至 IDE 動作。在本課次中，我們將搜尋“{0}”動作，以將 {1} 字串改為小寫。
clion.onboarding.invoke.search.everywhere.2=按兩次 {0} 以開啟 {1} 對話框。
clion.onboarding.lesson.name=熟悉 {0}
clion.onboarding.module.description={0} 中的主要功能概覽
clion.onboarding.module.name=入門導覽
clion.onboarding.no.toolchain=為了編譯並執行程式碼，您首先需要<callback id\="{0}">組態</callback> C/C++ 編譯器。
clion.onboarding.project.view.description=<strong>專案</strong>檢視是主要工具視窗之一。它包含專案目錄、外部庫和臨時檔案。點擊帶條紋的按鈕可以預覽示範專案內容。您也可以按 {0} 開啟。
clion.onboarding.return.to.welcome=並返回歡迎頁面
clion.onboarding.run.options=您已經開啟了示範專案。現在，我們來執行它吧\! 在工具列的醒目提示區域中，您可以看到所選組態的常用執行動作。例如，您可以建置程式碼 {0}、執行程式碼 {1}、偵錯程式碼 {2}、使用覆蓋率執行 {3}、分析程式碼 {4}，以及使用 Memcheck 執行 {5}。
clion.onboarding.run.sample=現在，我們來執行當前檔案，點擊“{0}”或按 {1}。
clion.onboarding.run.sample.balloon=我們來執行當前檔案，點擊“{0}”或按 {1}.
clion.onboarding.search.everywhere.description=可以看到，所選文本 {0} 已被自動複製到輸入字串中。我們不輸入 {0}，而是輸入 {1}。
clion.onboarding.select.fix=套用第一個條目\: {0}。執行此修正後，程式碼會看起來很整潔。
clion.onboarding.select.item=<ide/> 會在您輸入時自動顯示補全選項。使用鍵盤上的箭頭選擇“{0}”條目，然後按 {1}。
clion.onboarding.start.debugging=點擊“{0}”圖標啟動偵錯過程。
clion.onboarding.start.typing=現在，開始輸入 {0} 以縮減補全列表，或選擇此條目並按 {1}。
clion.onboarding.stop.debugging=我們來停止偵錯。點擊 {0} 圖標。
clion.onboarding.toggle.breakpoint.1=您可能會注意到 {1} 函式沒有返回預期值 {0}，而是返回 {2}。我們來檢視 return 語句，偵錯有問題的程式碼。
clion.onboarding.toggle.breakpoint.2=點擊醒目提示區域內的裝訂區域以設定中斷點。
clion.onboarding.toggle.case.part=大/小文字
clion.onboarding.toolchain.description=<ide/> 已經為此課程組態了預設的 C/C++ 工具鏈。您可以對其進行修改或為您的專案重新建立一個。為此，請轉到“偏好設定 -> 建置、執行、部署 -> 工具鏈”。
clion.onboarding.toolchain.tip=<strong>提示</strong>\: 您可以在 <ide/> 偏好設定中的“建置、執行、部署 -> 工具鏈”下組態 C/C++ 工具鏈。
clion.onboarding.type.division=發現程式碼中的問題後，我們來進行修正。將得到的和除以值的長度。課次腳本已插入 {0}。
clion.postfix.completion.complete=從列表中選擇 {0}，然後按 {1} 補全語句。
clion.postfix.completion.type=對於 C++，後綴補全對於使用 C++ 樣式的轉換、`make_shared`/`make_unique`、各種迴圈和 `begin`/`end` 習慣用法進行包裝的情況特別有用。在類別名後鍵輸入 {0} 以檢視後綴補全的選項。
clion.qfix.name.remove.parameter=移除參數 'redundant' 的宣告
clion.quick.fix.use.range.based.loop="改用基於範圍的 for 迴圈"
clion.rad.change.signature.move.parameter.down=通過點擊“下移”按鈕將 {0} 參數移至 {1} 參數下方。
clion.rad.intn.name.replace.if=將 'if' 語句轉換為 '?\:' 表達式
clion.rad.qfix.name.remove.parameter=移除未使用的參數
clion.rad.rename.again=您可能已經注意到，“重新命名”重構不會自動重新命名此註釋內 {0} 的匹配項。“重新命名”重構有一個允許我們執行此動作的附加選項。再次嘗試將 {0} 重命名為 {1}。點擊程式碼中類型名稱 {0} 的任何匹配項，然後按 {2}。
clion.refactorings.module.description=通過重新命名、提取和其他類型的重構保持程式碼整潔。
clion.refactorings.module.name=重構
clion.rename.again=您可能已經注意到，“重新命名”重構確實會自動重新命名此註釋內 {0} 的匹配項。“重新命名”重構有一些附加選項，其中之一允許我們執行此動作。再次嘗試將 {0} 重命名為 {1}。點擊程式碼中類型名稱 {0} 的任何匹配項，然後按 {2}。
clion.rename.applied=<ide/> 現在更改了宣告/定義以及所有用法中類別模板的名稱。這將應用於整個專案。
clion.rename.conclusion=<ide/> 現在再次更改了類別模板的名稱，但與以前不同的是，這不會影響註釋。
clion.rename.description=“重新命名”重構可用於全域重新命名符號、檔案和目錄，並自動更正程式碼中對它們的所有參照。
clion.rename.dialog.title=重新命名
clion.rename.disable.update.option=停用“同時在註釋和字串中重新命名”
clion.rename.enable.update.option=啟用“{0}”
clion.rename.help.link=“重新命名”重構
clion.rename.lesson.name=重新命名
clion.rename.option.text=在註釋和字串文字中搜尋
clion.rename.press.rename=按 {0} 可重新命名類別模板 {1}。
clion.rename.show.option.popup=點擊要重新命名的元素旁邊的圖標或按 {0} 以存取其他選項。
clion.rename.type.new.name=為此類別模板輸入一個新名稱(例如 {0})，然後按 {1}。
clion.rename.undo=與每次重構一樣，重新命名類型可以通過“撤消”輕鬆撤消。按 {0}。
clion.selection.select.string=再次按 {0} 可選擇整個字串。
clion.smart.completion.finish.completion=選擇 {0} 並按 {1}。
clion.smart.completion.help.link=類型符合補全
clion.smart.completion.introduction=智能類型補全會篩選建議列表，從而只包含當前上下文中適用的類型。
clion.smart.completion.use.smart.completion=在這種情況下，只有將枚舉 {0} 的值傳遞給函式 {1} 才有意義。按 {2} 檢視符合建議的列表。請注意，僅顯示不同的 {0} 枚舉值。
clion.statement.completion.complete.condition=在圓括號 {0} 內新增一個條件，然後按 {1} 跳轉到 {2} 語句內。
clion.statement.completion.complete.finish.body=鍵入一行程式碼\: {0}，然後按 {1} 補全語句並套用格式。
clion.statement.completion.complete.for=按 {0} 補全 {1} 語句。
clion.statement.completion.complete.if=鍵入 {0}，然後按 {1} 以生成語句。
clion.statement.completion.help.link=語句補全
clion.statement.completion.lesson.intro1=您可以使用語句補全建立語法正確的程式碼結構。該功能會插入必要的語法元素(圓括號、大括號和分號)，並使您處於可以開始輸入下一條語句的位置。
clion.statement.completion.lesson.intro2=補全語句適用於補全宣告(例如，類別、命名空間和枚舉)和語句(<code>if/else</code>、<code>while</code>、<code>do</code>、<code> >for</code>、<code>switch/case</code>、<code>try/catch</code>)。
clion.statement.completion.lesson.name=語句補全
clion.tab.completion.lesson.intro=使用 Tab (而不是回車鍵)補全不是簡單地插入所選建議，而是完全取代文字游標處的單詞。這對於快速修正程式碼非常有用，因為您不必手動選擇和移除單詞。
clion.tab.completion.lesson.name=Tab 補全
clion.tab.completion.select.item=使用鍵盤箭頭選擇 {0} 條目或者直接開始鍵入。
clion.tab.completion.start.completion=假設您想將此處的 {0} 取代為 {1} 類別成員。按 {2} 可檢視補全建議。
clion.tab.completion.use.tab.completion=如果按 {0}，將在 {2} 前面插入 {1}。改為按 {3} 將 {2} 取代為 {1}。
toolbar.settings.button=IDE 和專案設定
unwrap.try=解包 'if...'
