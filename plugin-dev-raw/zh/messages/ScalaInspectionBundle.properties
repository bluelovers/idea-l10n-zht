absolute.import.detected=匯入可以相對於基礎軟體套件
abstract.value.used.in.trait=特徵中使用的抽象值
abstract.variable.used.in.trait=特徵中使用了 abstract 變數
access.can.be.private=存取可以為 private
add.call.parentheses=新增呼叫圓括號
add.case=新增 ''case''
add.dot.to.method.call=將點新增到方法呼叫
add.modifier=新增 ''{0}'' 修飾符
add.override.modifier.quickfix=新增覆寫修飾符
add.prefix.to.reference=向參照新增前綴
add.return.keyword=新增 return 關鍵字
add.targetname.annotation=新增 @targetName 註解
add.type.annotation=新增類型註解
advanced.language.feature=高階語言功能\: {0}
all.but.last.targetname.annotation.ignored=除了最後一個 @targetName 註解外，其他都將被忽略，請考慮在每個定義中最多使用一個註解
all.text.from.header.closing.tag.to.end.of.line.will.be.lost=從標頭結束標記到行尾的所有文本都將丟失
annotate.declaration.with.unused=使用 @unused 註解宣告
applied.type.lambda.can.be.simplified=可以簡化套用類型 Lambda
argument.cannot.be.used.for.a.format.specifier=實參 {0} ({1})不能用於格式說明符 {2}
around.function.expr.parameter=函式表達式的參數周圍
around.function.type=函式類型周圍
around.function.type.parameter=函式類型的參數周圍
casting.a.to.b.is.redundant=''{0}'' 到 ''{1}'' 的轉換冗餘
casting.left.to.right.is.redundant=''{0}'' 到 ''{1}'' 的轉換冗餘
catch.all=指定異常類型
change.modifier=更改修飾符
clarifying.parentheses=澄清圓括號
comparing.unrelated.types.hint=正在比較不相關的類型\: {0} 和 {1}
condition.always.false=條件始終為 false
condition.always.true=條件始終為 true
config.description.for.arrays=對於陣列
config.description.for.iterators=對於迭代器
convert.expression.to.sam=將表達式轉換為單一 abstract 方法
convert.from.infix.expression=從中綴表達式轉換
convert.from.infix.pattern=從中綴模式轉換
convert.from.infix.type=從中綴類型轉換
convert.match.statement.to.pattern.matching.function=將 match 語句轉換為模式符合匿名函式
convert.to.anonymous.function=轉換為匿名函式
convert.to.floating.point=轉換為 {0}
convert.to.function.syntax=轉換為函式語法
convert.to.interpolated.string=轉換為插值字串
convert.to.stable.identifier.pattern=轉換為穩定關鍵字模式 `{0}`
convert.val.to.var=將 ''val'' 轉換為 ''var''
convert.var.to.val=將 ''var'' 轉換為 ''val''
convertible.to.method.value.anonymous.hint=轉換為方法值
convertible.to.method.value.eta.hint=移除冗餘佔位符
corresponds.unsorted=對未排序的集合使用 `corresponds` 時，結果不可預測
declaration.is.never.used=從未使用宣告
definition.with.operator.name.should.have.targetname.annotation=定義具有運算符名稱；它應該帶有 @targetName 註解
delete.redundant.default.argument=刪除冗餘的預設實參
display.name.absolute.import=絕對匯入
display.name.inlined.tag=內聯標記
display.name.missing.parameter.description=缺少參數描述
display.name.unclosed.tag=未閉合的標記
displayname.abstract.value.in.trait=特徵中的抽象值
displayname.access.can.be.weaker=宣告存取可以更弱
displayname.access.to.first.element.by.index=按索引存取第一個元素
displayname.access.to.last.element.by.index=按索引存取最後一個元素
displayname.advanced.language.features=高階語言功能
displayname.alphanumeric.definition.used.as.infix.operator.is.not.declared.infix=用作中綴運算符的字母數字定義未被宣告為 `infix`
displayname.anonymous.function.convertible.to.a.method.value=可轉換為方法值的匿名函式
displayname.applied.type.lambda.can.be.simplified=可以簡化套用類型 Lambda
displayname.argument.duplicates.corresponding.parameter.default.value=實參重複對應參數的預設值
displayname.auto.tupling=自動元組化
displayname.case.class.parameter=Case 類別參數
displayname.chained.package.clause.inspection=基礎軟體套件宣告
displayname.change.to.filter=更改為 filter
displayname.collect.and.headoption.to.collectfirst=collect 和 headOption 轉換為 collectFirst
displayname.comparing.length.to.lengthcompare=將比較 length 轉換為 lengthCompare
displayname.comparing.unrelated.types=正在比較不相關的類型
displayname.constructing.range.for.seq.indices=正在建置序列索引的範圍
displayname.conversion.to.set.and.back.to.distinct=轉換為 Set，並恢復為 distinct
displayname.convert.expression.to.single.abstract.method=將表達式轉換為單一 abstract 方法(SAM)
displayname.corresponds.sameelements.on.unsorted.collection=未排序集合中的 Corresponds/sameElements
displayname.dataflow.analysis.constant.conditions=恒定條件
displayname.dataflow.analysis.npe.on.invocation=調用時出現 NullPointerException
displayname.dataflow.analysis.nullable.to.notnull=Nullable 被傳遞給 NotNull 參數
displayname.dataflow.analysis.nullable.to.unannotated=Nullable 被傳遞給未註解的參數
displayname.definition.and.overridden.member.have.different.targetname.annotations=定義和被覆寫的成員具有不同的 @targetName 註解
displayname.definition.misses.targetname.annotation=定義缺少 @targetName 註解
displayname.deprecated.identifier=棄用的關鍵字
displayname.deprecated.kind.projector.syntax=棄用的 kind-projector 語法
displayname.deprecated.package.object=棄用的軟體套件物件
displayname.directive.dependency.version=庫相依項有較新的穩定版本
displayname.double.negation=雙重求反
displayname.double.negation.in.forall.and.exists=forall 和 exists 中的雙重求反
displayname.drop.and.take.to.slice=將 Drop 和 take 轉換為 slice
displayname.emptiness.check.on.get.to.contains=對 Get 到 Contains 執行空性檢查
displayname.empty.targetname=空的 @targetName 外部名稱
displayname.emulated.headoption.or.lastoption=模擬的 headOption 或 lastOption
displayname.emulated.option.x=仿真的 Option(x)
displayname.equals.on.arrays.and.iterators=陣列和迭代器上的 equals
displayname.equals.oncollections.of.different.kinds=不同種類集合上的 Equals
displayname.equals.some.x.to.contains.x=Some(x) 等同於 contains(x)
displayname.exists.simplifiable.to.contains=exists 可簡化為 contains
displayname.extracting.keys.manually=正在手動提取鍵
displayname.extracting.values.manually=正在手動提取值
displayname.field.from.delayedinit=來自於 DelayedInit 的欄位
displayname.filter.after.sort=在 sort 後使用 filter
displayname.filter.and.contains.to.intersect.or.diff=將 filter 和 contains 轉換為 intersect 或 diff
displayname.filter.and.emptiness.check.to.exists.forall=filter 和空性檢查轉換為 exists/forall
displayname.filter.and.headoption.to.find=將 Filter 和 headOption 轉換為 find
displayname.filter.and.size.to.count=filter 和 size 轉換為 count
displayname.find.and.emptiness.check.to.exists=find 和空性檢查轉換為 exists
displayname.find.and.map.to.get=find 和 map 轉換為 get
displayname.floating.point.literal.ending.with.dot=以 ''.'' 結束的浮點文字
displayname.fold.simplifiable.to.forall=可簡化為 forall 的 fold
displayname.get.and.getorelse.to.getorelse=將 Get 和 getOrElse 轉換為 getOrElse
displayname.getorelse.null.to.ornull=GetOrElse(null) 轉換為 orNull
displayname.header.tags.unbalanced=標頭標記不平衡
displayname.in.kind.projector.simplify.type=Kind Projector\: 簡化類型
displayname.in.kind.projector.use.correct.lambda.keyword=Kind Projector\: 使用正確的 lambda 關鍵字
displayname.index.bounds.check=索引邊界檢查
displayname.inlined.tag=內聯標記
displayname.isinstanceof=isInstanceOf
displayname.legacy.string.formatting=舊字串格式設定
displayname.lift.to.get=將 Lift 轉換為 Get
displayname.loop.variable.not.updated.inside.loop=迴圈變數未在迴圈內更新
displayname.make.array.to.string=將陣列轉換為字串
displayname.malformed.format.string=格式錯誤的字串
displayname.manually.zipping.with.indices=使用索引進行手動壓縮
displayname.map.and.contains.true.false.to.exists.or.forall=map 和 contains(true/false) 轉換為 exists 或 \!forall
displayname.map.and.flatten.to.flatmap=map 和 flatten 轉換為 flatMap
displayname.map.and.getorelse.false.to.exists=Map 和 getOrElse(false) 轉換為 exists
displayname.map.and.getorelse.to.fold=將 Map 和 getOrElse 轉換為 fold
displayname.match.statement.convertible.to.pattern.matching.anonymous.function=match 語句可轉換為模式符合匿名函式
displayname.member.has.targetname.when.overridden.does.not=成員具有 @targetName 註解，而被覆寫的成員沒有
displayname.missing.tag.parameter.description=缺少標記參數描述
displayname.missing.type.annotation=缺少類型註解
displayname.multiple.arg.lists.in.annotation.constructor=註解建構函式中的多個實參列表
displayname.multiple.targetname.annotations=多個 @targetName 註解
displayname.multiple.targets.targetname=@targetName 的多個目標
displayname.name.boolean.parameters=為布爾參數命名
displayname.nested.stateful.monads=嵌套的有狀態單體
displayname.no.targetname.annotation.for.operator.like.definition=具有運算符名稱的定義沒有 @targetName 註解
displayname.non.value.field.is.accessed.in.hashcode=在 ''hashCode()'' 中存取了非值欄位
displayname.nonlocal.return=非本地 return 語句
displayname.not.implemented.code=未實作程式碼
displayname.null.initializer.can.be.replaced.by.underscore=Null 初始設定式可被取代為 _
displayname.package.name.inspection=錯誤的 package 語句
displayname.postfix.unary.operation=後綴一元運算
displayname.redundant.block=冗餘塊
displayname.redundant.cast.inspection=冗餘轉換檢查
displayname.redundant.class.param.clause=冗餘的類別參數子句
displayname.redundant.collection.conversion=冗餘的集合轉換
displayname.redundant.contains.in.filter=filter 中的冗餘 contains
displayname.redundant.conversion.inspection=冗餘轉換檢查
displayname.redundant.get.when.getting.a.value.from.map=從 Map 獲取值時存在冗餘的 get
displayname.redundant.headoption.or.lastoption=冗餘的 headOption 或 lastOption
displayname.redundant.new.on.case.class=case 類別中冗餘的 new
displayname.redundant.return=冗餘 return
displayname.reference.must.be.prefixed=參照必須有前綴
displayname.relative.import=相對匯入
displayname.replace.to.with.until=將 to 取代為 until
displayname.replace.with.flatten=取代為 flatten
displayname.reverse.and.iterator.to.reverseiterator=reverse 和 iterator 轉換為 reverseIterator
displayname.reverse.find.to.findLast=反轉並尋找到 findLast
displayname.reverse.take.and.reverse.to.takeright=reverse、take 和 reverse 轉換為 takeRight
displayname.sameelements.oncollections.of.a.same.kind=相同種類的 SameElements onCollections
displayname.scala=Scala
displayname.scala.deprecation=Scala 棄用
displayname.scala.style.inspection=Scala 樣式檢查
displayname.scala.unnecessary.semicolon.inspection=Scala 非必要分號檢查
displayname.side.effects.in.a.monadic.transformation=單體轉換的副作用
displayname.simplifiable.empty.check=可簡化的空性檢查
displayname.simplifiable.fold.or.reduce.method=可簡化的 fold 或 reduce 方法
displayname.simplify.boolean.expression=簡化布爾表達式
displayname.size.to.length.on.arrays.and.strings=將陣列和字串中的 size 轉換為 length
displayname.some.to.option=Some 轉換為 Option
displayname.sorted.and.head.last.to.max.min=將 Sorted 和 head/last 轉換為 max/min
displayname.source3.scala2.syntax=包含 -Xsource\:3 的 Scala 2 語法
displayname.specs2.matchers=Specs2 匹配器
displayname.suspicious.forward.reference=可疑的前向參照
displayname.suspicious.shadowing.by.a.type.parameter=類型參數的可疑隱藏
displayname.suspicious.shadowing.by.a.variable.pattern=變數模式的可疑隱藏
displayname.syntactic.sugar=語法糖
displayname.tag.unclosed=標記未結束
displayname.trivial.match.can.be.simplified=可以簡化普通 match
displayname.type.annotation.required=需要類型註解
displayname.type.check.can.be.pattern.matching=類型檢查可以為模式符合
displayname.unit.return.type.in.the.argument.of.map=map 實參中的 Unit 返回值類型
displayname.unknown.parameter=未知參數
displayname.unknown.tag=未知標記
displayname.unmatched.tag=不符合的標記
displayname.unnecessary.braces.in.import.inspection=import 檢查中有不必要的大括號
displayname.unnecessary.parentheses=不必要的圓括號
displayname.unnecessary.partial.function=不必要的偏函式
displayname.unused.declaration=未使用的宣告
displayname.unzip.for.extracting.a.single.element=解壓縮以提取單個元素
displayname.use.of.postfix.method.call=使用後綴方法呼叫
displayname.var.could.be.a.val=''var'' 可以是 ''val''
displayname.view.bounds.are.deprecated=檢視邊界已棄用
displayname.wrong.platform.method.usage=錯誤的平台方法用法
displayname.wrong.scaladoc.element=錯誤的 scaladoc 元素
empty.parameter.clause.is.redundant=空參數子句冗餘
empty.parentheses=新增空圓括號
enable.in.scala.3=在 Scala 3 中啟用
exists.equals.hint=將 exists 取代為 contains
expression.always.null=表達式的求值結果始終為 null
expression.always.zero=表達式的求值結果始終為 0
expression.unit.return.in.map=map 實參中帶 unit 返回值類型的表達式
family.name.enable.full.qualified.imports=啟用完全限定 import
family.name.rename.package=重新命名軟體套件
family.name.scala.general=Scala\: 一般
family.name.scala.scaladoc=Scala\: Scaladoc
field.defined.in.delayedinit.is.likely.to.be.null=在 DelayedInit 中定義的欄位可能為 null
fileName.does.not.match=類別與檔名不相符
fileName.rename.class=重新命名類型定義
fileName.rename.file=重新命名檔案
fileName.rename.text={0} {1} 為 {2}
filter.empty.check.hint=將 filter 和空性檢查取代為 \!(...).exists
filter.headOption.hint=將 filter 和 headOption 取代為 find
filter.nonempty.check.hint=將 filter 和非空性檢查取代為 exists
filter.size.hint=將 filter 和 size 取代為 count
filterNot.empty.check.hint=將 filterNot 和空性檢查取代為 forall
filterNot.nonempty.check.hint=將 filterNot 和非空性檢查取代為 \!(...).forall
fimaly.name.move.file.to.package=移至軟體套件
final.modifier.is.redundant.for.toplevel.objects=''final'' 修飾符對於頂層物件冗餘
find.isDefined.hint=將 find 和非空性檢查取代為 exists
find.isEmpty.hint=將 find 和空性檢查取代為 \!(...).exists
fix.nonlocal.return.check.compiler.option=僅使用 -Xlint\:nonlocal-return
fix.private.shadow.compiler.option.label=僅使用 -Xlint\:private-shadow 顯示
fix.private.shadow.fatal.warnings.label=如果存在 -Xlint\:fatal-warnings present，則顯示為錯誤
fix.targetname.annotation=修正 @targetName 註解
fix.unused.declaration.report.public.declarations=停用對未使用的 public 宣告的報告
fold.product.hint=將 fold 取代為 product
fold.product.short=fold 轉換為 product
fold.sum.hint=將 fold 取代為 sum
fold.sum.short=fold 轉換為 sum
fold.true.and.hint=將 fold 取代為 forall
forall.notEquals.hint=將 forall 取代為 not contains
format.specifier.cannot.be.used.for.an.argument=格式說明符 {0} 不能用於實參 {1} ({2})
format.with.mkstring=使用 .mkString("Array(", ", ", ")") 格式化
get.get.hint=取代為 .(key)
get.getOrElse.hint=取代為 getOrElse(key, defaultValue)
getOrElse.null.hint=將 getOrElse(null) 取代為 orNull
group.code.style=程式碼樣式
group.collections=集合
group.comparing=比較
group.dataflow.analysis=數據流分析
group.directive=指令
group.general=一般
group.indices=索引
group.internal=內部
group.maps=映射
group.method.signature=方法簽名
group.options=選項
group.other=其他
group.resource.leaks=資源泄漏
group.scaladoc=Scaladoc
group.simplifications.filter.and.exists=簡化\: filter 和 exists
group.simplifications.find.and.map.to.apply=簡化\: 通過 find 和 map 套用
group.simplifications.forall.and.exists=簡化\: forall 和 exists
group.simplifications.other=簡化\: 其他
group.size=大小
group.specs2=Specs2
group.syntactic.clarification=語法說明
group.syntactic.simplification=語法簡化
grouppath.scala.collections=Scala，集合
hint.comparing.different.collection.kinds=正在比較不同的集合種類
hint.convert.left.hand.side.to.collection=將左側轉換為 {0}
hint.convert.right.hand.side.to.collection=將右側轉換為 {0}
hint.replace.with.indices=取代為 .indices
hint.replace.with.indices.with.preview=取代為 {0}.indices
hint.replace.with.option.expr=取代為 Option(x)
hint.replace.with.option.expr.with.preview=取代為 Option({0})
ifstmt.to.filteredOption=將 if 取代為篩選選項
ifstmt.to.headOption=If-else 轉換為 headOption
ifstmt.to.lastOption=If-else 轉換為 lastOption
ifstmt.to.lift=If-else 轉換為 lift
implement.quickfix.name=實作
implementation.limitation.multiple.argument.lists=實作限制\: 當前不支持註解中使用多個實參列表
import.feature.flag.for.language.feature=匯入 {0} 的功能標誌
inheriting.form.name.is.deprecated.message=繼承形式 {0} 已棄用。{1}
insert.missing.assignment=插入缺少的賦值
inspection.option.check.compiler.unnamed=已由編譯器選項啟用
inspection.option.disabled=已停用
inspection.option.enabled=已啟用
inspection.scaladoc.problem.duplicate.param=重複的參數''{0}'' @param 標記
inspection.scaladoc.problem.duplicate.tparam=類型參數 ''{0}'' 的 @tparam 標記重複
inspection.scaladoc.problem.param.not.allowed=此處不允許使用 @param 標記
inspection.scaladoc.problem.tparam.not.allowed=此處不允許使用 @tparam 標記
inspection.scaladoc.problem.tparam.not.supported.by.scaladoc.in.type.alias=Scaladoc 現在無法處理類型別名的 tparams
intention.category.scala.internal=Scala/內部
internal.api.status.of.symbols=符號的 api 狀態
internal.expression.without.nls.passed.to.nls=不帶 @Nls 的表達式傳遞到 @Nls
internal.getText.contains.shouldBe.textContains=.getText.contains 應為 .textContains
internal.getText.equals.shouldBe.textMatches=.getText.equals 應為 .textMatches
internal.instanceOf.shouldBe.is=instanceOf 應為 is
internal.only.pass.hardcoded.strings.as.property.keys=僅將硬編碼的字串作為屬性鍵傳遞
internal.replace.with.textContains=取代為 .textContains
internal.replace.with.textMatches=取代為 .textMatches
internal.string.should.be.in.bundle=字串應提取到捆綁包
introduce.implicit.incorrect.count=由於參數的用法計數不正確，不允許引入隱式參數
introduce.implicit.incorrect.order=由於參數順序錯誤，不允許引入隱式參數
introduce.implicit.not.allowed.here=不允許在此表達式中引入隱式參數
invocation.index.out.of.bounds=呼叫將產生 IndexOutOfBoundsException。索引始終越界
invocation.no.such.element=呼叫將產生 NoSuchElementException。集合始終為空
kind.projector.code.style.setting.use.lambda.char=Kind Projector\: 更改程式碼樣式設定\: 使用 Î»，而不是 Lambda
kind.projector.code.style.setting.use.lambda.word=Kind Projector\: 更改程式碼樣式設定\: 使用 Lambda，而不是 Î»
kind.projector.deprecated.tip=`?` 佔位符的使用即將棄用。考慮改用 `*`。
kind.projector.deprecated.tip.with.update=`?` 佔位符的使用即將棄用。考慮更新 kind-projector 延伸模組和改用 `*`。
kind.projector.replace.lambda.char.with.lambda=Kind Projector\: 將 Î» 取代為 Lambda
kind.projector.replace.lambda.with.lambda.char=Kind Projector\: 將 Lambda 取代為 Î»
language.feature.dynamic.member.selection=動態成員選擇
language.feature.existential.type=存在類型
language.feature.higher.kinded.type=較高種類的類型
language.feature.implicit.conversion=隱式轉換
language.feature.macro.definition=巨集定義
language.feature.postfix.operator.notation=後綴運算符表示法
language.feature.reflective.call=反射呼叫
legacy.string.formatting.use.interpolated.string=舊字串格式設定，可以改用插值字串
lift.to.headOption=將 .lift 轉換為 headOption
lift.to.lastOption=.lift 轉換為 lastOption
make.private=設為 ''private''
make.tuple.explicit=將元組設為顯式
malformed.format.specifier=格式錯誤的格式說明符
map.getOrElse.false.hint=將 map 和 getOrElse(false) 取代為 exists
map.getOrElse.hint=將 map 和 getOrElse 取代為 fold
map.getOrElse.true.hint=將 map 和 getOrElse(true) 取代為 forall
mark.import.as.always.used.in.this.project=將 import 標記為始終在此專案中使用
mark.inner.case.objects.as.final=將內部 case 物件標記為 final
method.signature.accessor.empty.parenthesis=類似於存取器的方法包含空參數子句
method.signature.accessor.unit.return.type=類似於存取器的方法包含 Unit 結果類型
method.signature.empty.paren.override.java.accessor=使用空實參子句覆寫的 Java 存取器方法
method.signature.empty.paren.override.parameterless=無形參 Scala 成員作為空括號覆寫
method.signature.java.accessor.empty.paren=使用空實參子句呼叫的 Java 存取器方法
method.signature.override.abstract.member=無 override 關鍵字的抽象方法實作
method.signature.parameterless.access.empty.paren=空括號方法作為無形參存取
method.signature.parameterless.access.java.mutator=Java 轉變器方法作為無形參存取
method.signature.parameterless.override.empty.paren=空括號 Scala 方法作為無形參覆寫
method.signature.parameterless.override.java.mutator=Java 轉變器方法作為無形參覆寫
method.signature.parameterless.override.mutator.like=類似於轉變器的命名方法無形參
method.signature.procedure.declaration=方法宣告中的過程語法
method.signature.procedure.definition=方法定義中的過程語法
method.signature.result.type.refinement=表觀結果類型細化；是否缺少賦值?
method.signature.unit.parameterless=Unit 結果類型的方法無形參
missing.explicit.type.in.isinstanceof.call=在沒有顯式類型的情況下呼叫了 isInstanceOf。行為特定於編譯器版本，因為它依賴於編譯器插入滿足類型限制的任何類型。
missing.tag.parameter=缺少標記參數
move.file.to.default.package=移至預設軟體套件
move.file.to.package.package.prefix.error=無法在源資料夾 ''{1}'' 中建立軟體套件前綴為 ''{2}'' 的軟體套件 ''{0}''
move.file.to.package.with.packagename=移至軟體套件 {0}
name.boolean.ignore.single.parameter.methods=忽略只有一個參數的方法
name.unused.declaration.report.local.declarations=報告區域宣告
name.unused.declaration.report.public.declarations=報告 public 宣告
no.argument.at.position={0} 位置處沒有實參
no.argument.for.a.format.specifier=格式說明符 {0} 沒有實參
no.format.specifier.for.an.argument=實參 {0} 沒有格式說明符
nonlocal.return.check.compiler.option=僅使用 -Xlint\:nonlocal-return 編譯器選項
nonlocal.return.statement=Return 語句用於提前從匿名函式跳出
not.implemented=未實作
operation.on.collection.id=OperationsOnCollection
operation.on.collection.like.collection.input.message=在檢查中這些類別會被視為集合
operation.on.collection.like.collection.input.title=新增類似集合的類別
operation.on.collection.like.collection.panel.title=類似集合的類別
operation.on.collection.like.option.input.message=在檢查中這些類別會被視為 scala.Option
operation.on.collection.like.option.input.title=新增類似選項的類別
operation.on.collection.like.option.panel.title=類似選項的類別
operation.on.collection.name=集合上可簡化的運算
override.definition.has.different.target.name=定義具有不同的目標名稱批注；它應該為 @targetName("{0}")
override.definition.misses.targetname.annotation=定義缺少目標名稱註解 @targetName("{0}")
override.definition.should.not.have.targetname.annotation=定義不應具有 @targetName 註解，因為被覆寫的成員也沒有該註解
overriding.is.deprecated=覆寫 {0} 已棄用。{1}
package.declaration.could.use.chained.package.clauses=基礎軟體套件 ''{0}'' 必須是單獨的軟體套件子句
package.names.does.not.correspond.to.directory.structure=軟體套件名稱 ''{0}'' 與檔案路徑 ''{1}'' 不對應
package.names.does.not.correspond.to.directory.structure.package.prefix=請注意，源資料夾 ''{0}'' 具有軟體套件前綴 ''{1}''
package.objects.are.deprecated=軟體套件物件在 Scala 3 中已棄用，建議改用頂層定義
packagesearch.newer.stable.version.available={0}\:{1} 有較新的穩定版本
parameter.name.is.deprecated=參數名稱\: {0} 已棄用。
private.shadow.compiler.option.label=僅使用 -Xlint\:private-shadow 編譯器選項
private.shadow.description=類別參數會隱藏超類別 var
private.shadow.fatal.warnings.label=<html>使用 <code>-Xfatal-warnings</code> (<code>-Werror</code>)編譯器選項時出錯</html>
private.shadow.rename.identifier=重新命名
quickfix.modify.code.style=修改程式碼樣式…
reduce.max.hint=將 reduce 取代為 max
reduce.max.short=reduce 轉換為 max
reduce.min.hint=將 reduce 取代為 min
reduce.min.short=reduce 轉換為 min
reduce.product.hint=將 reduce 取代為 product
reduce.product.short=reduce 轉換為 product
reduce.sum.hint=將 reduce 取代為 sum
reduce.sum.short=將 reduce 轉換為 sum
redundant.braces.in.case.clause=case 子句中冗餘的大括號
redundant.collection.conversion=移除冗餘集合轉換
redundant.parentheses=移除冗餘圓括號
relative.import.detected=檢測到相對匯入
remove.call.parentheses=移除呼叫圓括號
remove.double.negation=移除雙重求反
remove.expression=移除表達式
remove.modifier=移除 ''{0}'' 修飾符
remove.only.name.binding=僅移除 {0} 綁定
remove.package.statement=移除 package 語句
remove.redundant.braces=移除冗餘大括號
remove.redundant.cast=移除冗餘轉換
remove.redundant.contains=移除冗餘的 .contains
remove.redundant.conversion=移除冗餘轉換
remove.redundant.headOption=移除冗餘的 .headOption
remove.redundant.lastOption=移除冗餘的 .lastOption
remove.redundant.parameter.clause=移除冗餘的參數子句
remove.unnecessary.parentheses=移除不必要的圓括號
remove.unnecessary.parentheses.with.text=移除不必要的圓括號 {0}
remove.unnecessary.semicolon=移除不必要的分號
remove.unnecessary.val=移除不必要的 ''val''
remove.unreachable.code=移除不可到達的程式碼
remove.unused.element=移除未使用的元素
remove.val.from.definition=移除定義中的 ''val''
remove.whole.definition=移除整個定義
rename.package.quickfix.command.name=重新命名軟體套件
rename.package.to=將軟體套件名稱設定為 ''{0}''
rename.variable.pattern=重新命名變數模式
replace.collect.headOption.with.collectFirst=將 .collect 和 .headOption 取代為 .collectFirst
replace.corresponds.with.equals=將 corresponds 取代為 equals
replace.drop.take.with.slice=將 .drop 和 .take 取代為 .slice
replace.equals.with.sameElements=將 equals 取代為 sameElements
replace.filter.with.diff=將 filter 和 not contains 取代為 diff
replace.filter.with.intersect=將 filter 和 contains 取代為 intersect
replace.find.and.map.with.apply=將 find 和 map 取代為 apply
replace.get.isEmpty.with.not.contains=取代為 \!.contains(key)
replace.get.nonEmpty.with.contains=取代為 .contains(key)
replace.map.contains.false.with.not.forall=將 .map(...).contains(false) 取代為 \! .forall(...)
replace.map.contains.true.with.exists=將 .map(...).contains(true) 取代為 .exists(...)
replace.map.flatten.with.flatMap=將 .map 和 .flatten 取代為 .flatMap
replace.option.with.some=將 Option 取代為 Some
replace.reverse.iterator=將 .reverse.iterator 取代為 .reverseIterator
replace.reverse.take.reverse.with.takeRight=將 .reverse.take(...).reverse 取代為 .takeRight(...)
replace.sameElements.with.equals=將 sameElements 取代為 equals
replace.sortBy.head.with.minBy=取代為 .minBy
replace.sortBy.last.with.maxBy=取代為 .maxBy
replace.sorted.head.with.min=取代為 .min
replace.sorted.last.with.max=取代為 .max
replace.take.drop.with.slice=將 .take 和 .drop 取代為 .slice
replace.to.with.until=將 `to` 取代為 `until`
replace.toSet.and.back.with.distinct=將 Set 的轉換替換成 .distinct
replace.with.and.char=取代為 \\&
replace.with.as=取代為 ''as''
replace.with.contains=取代為 .contains
replace.with.exists=取代為 .exists
replace.with.findlast=取代為 `findLast`
replace.with.flatten=取代為 .flatten
replace.with.forall=取代為 .forall
replace.with.get=取代為 .get
replace.with.head=取代為 .head
replace.with.headOption=取代為 .headOption
replace.with.implicit.parameters=取代為隱式參數
replace.with.is=取代為 .is
replace.with.isDefined=取代為 .isDefined
replace.with.isEmpty=取代為 .isEmpty
replace.with.keySet=取代為 .keySet
replace.with.keys=取代為 .keys
replace.with.keysIterator=取代為 .keysIterator
replace.with.last=取代為 .last
replace.with.lastOption=取代為 .lastOption
replace.with.lengthCompare=取代為 .lengthCompare
replace.with.map=取代為 .map
replace.with.name.followed.by.star=取代為 ''{0}*''
replace.with.nonEmpty=取代為 .nonEmpty
replace.with.not.contains=取代為 \!.contains
replace.with.option=取代為 Option
replace.with.questionmark=取代為 ?
replace.with.sizeIs=取代為 .sizeIs
replace.with.some=取代為 Some
replace.with.star=取代為 *
replace.with.star.syntax=取代為 `*` 語法
replace.with.values=取代為 .values
replace.with.valuesIterator=取代為 .valuesIterator
replace.with.zipWithIndex=取代為 zipWithIndex
return.keyword.is.redundant=return 關鍵字冗餘
sameElements.unsorted=對未排序的集合使用 `sameElements` 時，結果不可預測
scala.compiler.will.replace.this.argument.list.with.tuple=Scala 編譯器將此實參列表取代為元組
scala3.alphanumeric.definition.is.not.declared.infix=字母數字定義 {0} 未被宣告為 `infix`；它不套用作中綴運算符
simplify.match.to.if.statement=將 match 簡化為 if 語句
simplify.type=簡化類型
simplify.with.text=簡化 {0}
single.import=移除僅包含一項匯入的 import 語句中的大括號
size.to.length=將陣列和字串中的 .size 取代為 .length
sort.filter.hint=更改 sort 和 filter 的順序
source.not.closed=原始碼未閉合
specs2.builtin.matcher.alternative.exists=存在可用的匹配器
specs2.use.builtin.matcher=取代為內建匹配器
suggest.adding.case.in.for.comprehensions=<html>建議在 <code>for</code> 推導式</html>中新增 <code>case</code>
suggest.converting.named.wildcard.patterns=<html>建議轉換命名萬用字元模式(<code>seq@_*</code> \\&rarr; <code>seq*</code>)</html>
suggest.converting.vararg.splices=<html>建議轉換 vararg 接合(<code>seq\: _*</code> \\&rarr; <code>seq*</code>)</html>
suggest.converting.wildcards=<html>建議轉換萬用字元(<code>Seq[_]</code> \\&rarr; <code>Seq[?]</code>)</html>
suggest.using.and.instead.of.with=<html>建議在複合類型中使用 <code>\\&</code> 而不是 <code>with</code></html>
suggest.using.as.instead.of.arrow=<html>建議在 import 中使用 <code>as</code> 而不是 <code>\=\\&gt;</code></html>
suggest.using.star.instead.of.underscore=<html>建議在 import 中使用 <code>*</code> 而不是 <code>_</code></html>
super.method.name.is.deprecated.with.message=Super 方法 {0} 已棄用。{1}
super.method.name.is.marked.as.status=Super 方法 {0} 已被標記為 {1}
suppress.inspection.function=對函式禁止
suppress.inspection.typeAlias=對類型別名禁止
suppress.inspection.variable=對變數定義禁止
surround.with.parenthesis=使用圓括號包圍
symbol.name.is.deprecated.with.message=符號 {0} 已棄用。{1}
symbol.name.is.marked.as.status=符號 {0} 已被標記為 {1}
syntactic.sugar.could.be.used=可以使用語法糖
targetname.cannot.be.empty=@targetName 的外部名稱不能為空
targetname.multiple.targets=@targetName 註解具有多個目標
the.enclosing.block.is.redundant=封閉塊冗餘
type.annotation.required.for={0} 必須有類型註解
type.check.can.be.replaced.by.pattern.matching=類型檢查可被取代為模式符合
typed.parameter.without.parenthesis.in.function.literal=函式文字中無圓括號的類型化參數
unary.operation.can.use.prefix.notation=對一元運算符使用前綴表示法
unknown.scaladoc.tag=未知 scaladoc 標記
unnecessary.parentheses.ignore=忽略
unnecessary.semicolon=不必要的分號
unreachable.code.name=不可到達的程式碼
unused.expression.name=未使用的表達式
unused.expression.no.side.effects=未使用的表達式，無副作用
unused.expression.throws=未使用的表達式，唯一可能的副作用是異常
unused.import.statement=未使用的 import 語句
unwrap.do.statement=解包 do 語句
unwrap.package.object.fix=將成員移至頂層
unwrap.the.expression=解包表達式
usage.of.deprecatedname.as.identifier.is.deprecated=已棄用 {0} 作為關鍵字的用法。它可以在日後的 scala 版本中用作關鍵字。
use.chained.package.clauses=使用單獨的基礎軟體套件子句
use.chained.package.clauses.like=提取軟體套件子句
use.foreach.instead.of.map=使用 foreach 而不是 map
use.option.type=使用 Option 類型
use.underscore.initializer=使用 _ 初始設定式
var.could.be.a.val=var 可以是 val
variable.with.null.initializer=帶有 null 初始設定式的變數
wrap.in.backticks=使用反引號包裝
