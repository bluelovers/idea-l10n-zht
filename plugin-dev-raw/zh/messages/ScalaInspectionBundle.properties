### META-INF/scala-plugin-common.xml
fileName.does.not.match=類與文件名不相符
method.signature.accessor.empty.parenthesis=類似於存取器的方法包含空參數子句
method.signature.accessor.unit.return.type=類似於存取器的方法包含 Unit 結果類型
method.signature.unit.parameterless=Unit 結果類型的方法無形參
method.signature.procedure.declaration=方法宣告中的過程語法
method.signature.procedure.definition=方法定義中的過程語法
method.signature.result.type.refinement=表觀結果類型細化；是否缺少賦值?
method.signature.parameterless.override.empty.paren=空括號 Scala 方法作為無形參覆寫
method.signature.parameterless.override.java.mutator=Java 轉變器方法作為無形參覆寫
method.signature.parameterless.override.mutator.like=類似於轉變器的命名方法無形參
method.signature.override.abstract.member=無 override 關鍵字的抽象方法實作
method.signature.empty.paren.override.java.accessor=使用空實參子句覆寫的 Java 存取器方法
method.signature.empty.paren.override.parameterless=無形參 Scala 成員作為空括號覆寫
method.signature.parameterless.access.java.mutator=Java 轉變器方法作為無形參存取
method.signature.parameterless.access.empty.paren=空括號方法作為無形參存取
method.signature.java.accessor.empty.paren=使用空實參子句調用的 Java 存取器方法
typed.parameter.without.parenthesis.in.function.literal=函數文字中無圓括號的類型化參數
unused.expression.name=未使用的表達式
unreachable.code.name=不可到達的程式碼
internal.getText.contains.shouldBe.textContains=.getText.contains 應為 .textContains
internal.getText.equals.shouldBe.textMatches=.getText.equals 應為 .textMatches
internal.api.status.of.symbols=符號的 api 狀態
internal.instanceOf.shouldBe.is=instanceOf 應為 is
displayname.scala=Scala
displayname.scala.compile.server=Scala 編譯伺服器
displayname.scala.compiler=Scala 編譯器
displayname.loop.variable.not.updated.inside.loop=迴圈變數未在迴圈內更新
displayname.package.name.inspection=錯誤的 package 語句
displayname.scala.deprecation=Scala 棄用
displayname.deprecated.identifier=棄用的關鍵字
displayname.deprecated.kind.projector.syntax=棄用的 kind-projector 語法
displayname.case.class.parameter=Case 類參數
displayname.var.could.be.a.val=''var'' 可以是 ''val''
displayname.unused.declaration=未使用的宣告
displayname.in.kind.projector.use.correct.lambda.keyword=Kind Projector\: 使用正確的 lambda 關鍵字
displayname.in.kind.projector.simplify.type=Kind Projector\: 簡化類型
displayname.use.of.postfix.method.call=使用後綴方法調用
displayname.advanced.language.features=高階語言功能
displayname.reference.must.be.prefixed=引用必須有前綴
displayname.floating.point.literal.ending.with.dot=以 ''.'' 結束的浮點文字
displayname.chained.package.clause.inspection=基礎軟體套件宣告
displayname.relative.import=相對匯入
displayname.suspicious.shadowing.by.a.variable.pattern=變數模式的可疑隱藏
displayname.suspicious.shadowing.by.a.type.parameter=類型參數的可疑隱藏
displayname.abstract.value.in.trait=特徵中的抽象值
displayname.unmatched.tag=不符合的標記
displayname.unnecessary.braces.in.import.inspection=import 檢查中有不必要的大括號
displayname.name.boolean.parameters=為布爾參數命名
displayname.redundant.cast.inspection=冗餘轉換檢查
displayname.redundant.conversion.inspection=冗餘轉換檢查
displayname.missing.type.annotation=缺少類型註解
displayname.malformed.format.string=格式錯誤的字串
displayname.legacy.string.formatting=傳統字串格式化
displayname.not.implemented.code=未實作程式碼
displayname.redundant.block=冗餘塊
displayname.suspicious.forward.reference=可疑的前向引用
displayname.type.annotation.required=需要類型註解
displayname.double.negation=雙重求反
displayname.simplify.boolean.expression=簡化布爾表達式
displayname.trivial.match.can.be.simplified=可以簡化普通 match
displayname.unnecessary.parentheses=不必要的圓括號
displayname.type.check.can.be.pattern.matching=類型檢查可以為模式符合
displayname.comparing.unrelated.types=正在比較不相關的類型
displayname.isinstanceof=isInstanceOf
displayname.pattern.may.never.match=模式可能從不符合
displayname.match.statement.convertible.to.pattern.matching.anonymous.function=match 語句可轉換為模式符合匿名函數
displayname.view.bounds.are.deprecated=檢視邊界已棄用
displayname.convert.expression.to.single.abstract.method=將表達式轉換為單一 abstract 方法(SAM)
displayname.nested.stateful.monads=嵌套的有狀態單體
displayname.field.from.delayedinit=來自於 DelayedInit 的欄位
displayname.non.value.field.is.accessed.in.hashcode=在 ''hashCode()'' 中存取了非值欄位
displayname.unnecessary.partial.function=不必要的偏函數
displayname.annotator.based.error.inspection=基於註解器的錯誤檢查
displayname.wrong.platform.method.usage=錯誤的平台方法用法
displayname.syntactic.sugar=語法糖
displayname.scala.unnecessary.semicolon.inspection=Scala 非必要分號檢查
displayname.redundant.return=冗餘 return
displayname.postfix.unary.operation=後綴一元運算
displayname.anonymous.function.convertible.to.a.method.value=可轉換為方法值的匿名函數
displayname.applied.type.lambda.can.be.simplified=可以簡化套用類型 Lambda
displayname.redundant.new.on.case.class=case 類中冗餘的 new
displayname.argument.duplicates.corresponding.parameter.default.value=實參重複對應參數的預設值
displayname.auto.tupling=自動元組化
displayname.null.initializer.can.be.replaced.by.underscore=Null 初始設定式可被取代為 _
displayname.scala.style.inspection=Scala 樣式檢查
displayname.simplifiable.empty.check=可簡化的空性檢查
displayname.size.to.length.on.arrays.and.strings=將陣列和字串中的 size 轉換為 length
displayname.equals.on.arrays.and.iterators=陣列和迭代器上的 equals
displayname.sameelements.oncollections.of.a.same.kind=相同種類的 SameElements onCollections
displayname.corresponds.sameelements.on.unsorted.collection=未排序集合中的 Corresponds/sameElements
displayname.equals.oncollections.of.different.kinds=不同種類集合上的 Equals
displayname.comparing.length.to.lengthcompare=將比較 length 轉換為 lengthCompare
displayname.manually.zipping.with.indices=使用索引進行手動壓縮
displayname.access.to.first.element.by.index=按索引存取第一個元素
displayname.access.to.last.element.by.index=按索引存取最後一個元素
displayname.constructing.range.for.seq.indices=正在建置序列索引的範圍
displayname.filter.and.headoption.to.find=將 Filter 和 headOption 轉換為 find
displayname.find.and.emptiness.check.to.exists=find 和空性檢查轉換為 exists
displayname.filter.and.emptiness.check.to.exists.forall=filter 和空性檢查轉換為 exists/forall
displayname.filter.and.size.to.count=filter 和 size 轉換為 count
displayname.find.and.map.to.get=find 和 map 轉換為 get
displayname.exists.simplifiable.to.contains=exists 可簡化為 contains
displayname.map.and.contains.true.false.to.exists.or.forall=map 和 contains(true/false) 轉換為 exists 或 \!forall
displayname.filter.and.contains.to.intersect.or.diff=將 filter 和 contains 轉換為 intersect 或 diff
displayname.redundant.contains.in.filter=filter 中的冗餘 contains
displayname.double.negation.in.forall.and.exists=forall 和 exists 中的雙重求反
displayname.simplifiable.fold.or.reduce.method=可簡化的 fold 或 reduce 方法
displayname.fold.simplifiable.to.forall=可簡化為 forall 的 fold
displayname.reverse.and.iterator.to.reverseiterator=reverse 和 iterator 轉換為 reverseIterator
displayname.reverse.find.to.findLast=反轉並尋找到 findLast
displayname.conversion.to.set.and.back.to.distinct=轉換為 Set，並恢復為 distinct
displayname.drop.and.take.to.slice=將 Drop 和 take 轉換為 slice
displayname.reverse.take.and.reverse.to.takeright=reverse、take 和 reverse 轉換為 takeRight
displayname.map.and.flatten.to.flatmap=map 和 flatten 轉換為 flatMap
displayname.emulated.headoption.or.lastoption=模擬的 headOption 或 lastOption
displayname.replace.to.with.until=將 to 取代為 until
displayname.replace.with.flatten=取代為 flatten
displayname.sorted.and.head.last.to.max.min=將 Sorted 和 head/last 轉換為 max/min
displayname.collect.and.headoption.to.collectfirst=collect 和 headOption 轉換為 collectFirst
displayname.index.bounds.check=索引邊界檢查
displayname.make.array.to.string=將陣列轉換為字串
displayname.get.and.getorelse.to.getorelse=將 Get 和 getOrElse 轉換為 getOrElse
displayname.extracting.keys.manually=正在手動提取鍵
displayname.extracting.values.manually=正在手動提取值
displayname.redundant.get.when.getting.a.value.from.map=從 Map 獲取值時存在冗餘的 get
displayname.lift.to.get=將 Lift 轉換為 Get
displayname.emptiness.check.on.get.to.contains=對 Get 到 Contains 執行空性檢查
displayname.redundant.headoption.or.lastoption=冗餘的 headOption 或 lastOption
displayname.equals.some.x.to.contains.x=Some(x) 等同於 contains(x)
displayname.map.and.getorelse.to.fold=將 Map 和 getOrElse 轉換為 fold
displayname.map.and.getorelse.false.to.exists=Map 和 getOrElse(false) 轉換為 exists
displayname.getorelse.null.to.ornull=GetOrElse(null) 轉換為 orNull
displayname.emulated.option.x=仿真的 Option(x)
displayname.change.to.filter=更改為 filter
displayname.some.to.option=Some 轉換為 Option
displayname.filter.after.sort=在 sort 後使用 filter
displayname.redundant.collection.conversion=冗餘的集合轉換
displayname.side.effects.in.a.monadic.transformation=單體轉換的副作用
displayname.unit.return.type.in.the.argument.of.map=map 實參中的 Unit 返回類型
displayname.multiple.arg.lists.in.annotation.constructor=註解構造函數中的多個實參列表
displayname.unzip.for.extracting.a.single.element=解壓縮以提取單個元素
displayname.tag.unclosed=標記未結束
displayname.inlined.tag=內聯標記
displayname.header.tags.unbalanced=標頭標記不平衡
displayname.unknown.tag=未知標記
displayname.unknown.parameter=未知參數
displayname.missing.tag.parameter.description=缺少標記參數描述
displayname.wrong.scaladoc.element=錯誤的 scaladoc 元素
displayname.specs2.matchers=Specs2 匹配器
displayname.source3.scala2.syntax=包含 -Xsource\:3 的 Scala 2 語法
displayname.dataflow.analysis.constant.conditions=恒定條件
final.modifier.is.redundant.for.toplevel.objects=''final'' 修飾符對於頂層物件冗餘
mark.inner.case.objects.as.final=將內部 case 物件標記為 final
group.general=一般
group.internal=內部
group.syntactic.simplification=語法簡化
group.syntactic.clarification=語法說明
group.method.signature=方法簽名
group.code.style=程式碼樣式
group.dataflow.analysis=數據流分析
group.size=大小
group.comparing=比較
group.indices=索引
group.simplifications.filter.and.exists=簡化\: filter 和 exists
group.simplifications.find.and.map.to.apply=簡化\: 通過 find 和 map 套用
group.simplifications.forall.and.exists=簡化\: forall 和 exists
group.simplifications.other=簡化\: 其他
group.maps=映射
group.options=選項
group.other=其他
group.collections=集合
group.scaladoc=Scaladoc
group.resource.leaks=資源泄漏
group.specs2=Specs2
displayname.deprecated.package.object=棄用的軟體套件物件
displayname.empty.targetname=空的 @targetName 外部名稱
displayname.multiple.targetname.annotations=多個 @targetName 註解
displayname.multiple.targets.targetname=@targetName 的多個目標
displayname.no.targetname.annotation.for.operator.like.definition=具有運算符名稱的定義沒有 @targetName 註解
displayname.member.has.targetname.when.overridden.does.not=成員具有 @targetName 註解，而被覆寫的成員沒有
displayname.definition.misses.targetname.annotation=定義缺少 @targetName 註解
displayname.definition.and.overridden.member.have.different.targetname.annotations=定義和被覆寫的成員具有不同的 @targetName 註解
displayname.alphanumeric.definition.used.as.infix.operator.is.not.declared.infix=用作中綴運算符的字母數字定義未宣告為 `infix`

### org/jetbrains/plugins/scala/codeInsight/intention/expression/ConvertParameterToUnderscoreIntention.scala
introduce.implicit.incorrect.order=由於參數順序錯誤，不允許引入隱式參數
introduce.implicit.incorrect.count=由於參數的用法計數不正確，不允許引入隱式參數
introduce.implicit.not.allowed.here=不允許在此表達式中引入隱式參數

### org/jetbrains/plugins/scala/codeInsight/intention/expression/OptionWithLiteralToSomeIntention.scala
replace.with.some=取代為 Some
replace.option.with.some=將 Option 取代為 Some

### org/jetbrains/plugins/scala/codeInspection/SAM/ConvertExpressionToSAMInspection.scala
convert.expression.to.sam=將表達式轉換為單一 abstract 方法

### org/jetbrains/plugins/scala/codeInspection/ScalaFileNameInspection.scala
fileName.rename.text={0} {1} 為 {2}
fileName.rename.class=重命名類型定義
fileName.rename.file=重命名檔案

### org/jetbrains/plugins/scala/codeInspection/annotations/MultipleArgLists.scala
implementation.limitation.multiple.argument.lists=實作限制\: 當前不支持註解中使用多個實參列表

### org/jetbrains/plugins/scala/codeInspection/booleans/DoubleNegationInspection.scala
display.name.double.negation=雙重求反
remove.double.negation=移除雙重求反

### org/jetbrains/plugins/scala/codeInspection/booleans/SimplifyBooleanInspection.scala
simplify.boolean.expression=簡化布爾表達式
simplify.with.text=簡化 {0}

### org/jetbrains/plugins/scala/codeInspection/booleans/SimplifyBooleanMatchInspection.scala
simplify.match.to.if.statement=將 match 簡化為 if 語句

### org/jetbrains/plugins/scala/codeInspection/caseClassParamInspection/CaseClassParamInspection.scala
display.name.case.class.parameter=case 類參數

### org/jetbrains/plugins/scala/codeInspection/caseClassParamInspection/RemoveValQuickFix.scala
remove.unnecessary.val=移除不必要的 ''val''
remove.val.from.definition=移除定義中的 ''val''

### org/jetbrains/plugins/scala/codeInspection/cast/ScalaRedundantCastInspection.scala
display.name.redundant.cast=冗餘轉換
remove.redundant.cast=移除冗餘轉換
casting.left.to.right.is.redundant=''{0}'' 到 ''{1}'' 的轉換冗餘

### org/jetbrains/plugins/scala/codeInspection/cast/ScalaRedundantConversionInspection.scala
display.name.redundant.conversion=冗餘轉換
remove.redundant.conversion=移除冗餘轉換
casting.a.to.b.is.redundant=''{0}'' 到 ''{1}'' 的轉換冗餘

### org/jetbrains/plugins/scala/codeInspection/catchAll/DangerousCatchAllInspection.scala
catch.all=指定異常類型

### org/jetbrains/plugins/scala/codeInspection/collections/CollectHeadOptionInspection.scala
replace.collect.headOption.with.collectFirst=將 .collect 和 .headOption 取代為 .collectFirst

### org/jetbrains/plugins/scala/codeInspection/collections/ComparingDiffCollectionKindsInspection.scala
hint.comparing.different.collection.kinds=正在比較不同的集合種類
hint.convert.left.hand.side.to.collection=左側轉換為 {0}
hint.convert.right.hand.side.to.collection=右側轉換為 {0}

### org/jetbrains/plugins/scala/codeInspection/collections/ComparingLengthInspection.scala
replace.with.lengthCompare=取代為 .lengthCompare
replace.with.sizeIs=取代為 .sizeIs

### org/jetbrains/plugins/scala/codeInspection/collections/CorrespondsUnsortedInspection.scala
sameElements.unsorted=對未排序的集合使用 `sameElements` 時，結果不可預測
corresponds.unsorted=對未排序的集合使用 `corresponds` 時，結果不可預測

### org/jetbrains/plugins/scala/codeInspection/collections/DropTakeToSliceInspection.scala
replace.drop.take.with.slice=將 .drop 和 .take 取代為 .slice
replace.take.drop.with.slice=將 .take 和 .drop 取代為 .slice

### org/jetbrains/plugins/scala/codeInspection/collections/EmptyCheckInspection.scala
replace.with.isEmpty=取代為 .isEmpty
replace.with.isDefined=取代為 .isDefined
replace.with.nonEmpty=取代為 .nonEmpty

### org/jetbrains/plugins/scala/codeInspection/collections/EmulateFlattenInspection.scala
replace.with.flatten=取代為 .flatten

### org/jetbrains/plugins/scala/codeInspection/collections/EqualityToSameElementsInspection.scala
replace.equals.with.sameElements=將 equals 取代為 sameElements
config.description.for.arrays=對於陣列
config.description.for.iterators=對於迭代器

### org/jetbrains/plugins/scala/codeInspection/collections/ExistsEqualsInspection.scala
exists.equals.hint=將 exists 取代為 contains
forall.notEquals.hint=將 forall 取代為 not contains

### org/jetbrains/plugins/scala/codeInspection/collections/ExistsForallReplaceInspection.scala
replace.with.forall=取代為 .forall
replace.with.exists=取代為 .exists

### org/jetbrains/plugins/scala/codeInspection/collections/FilterEmptyCheckInspection.scala
filter.nonempty.check.hint=將 filter 和非空性檢查取代為 exists
filter.empty.check.hint=將 filter 和空性檢查取代為 \!(...).exists
filterNot.empty.check.hint=將 filterNot 和空性檢查取代為 forall
filterNot.nonempty.check.hint=將 filterNot 和非空性檢查取代為 \!(...).forall

### org/jetbrains/plugins/scala/codeInspection/collections/FilterHeadOptionInspection.scala
filter.headOption.hint=將 filter 和 headOption 取代為 find

### org/jetbrains/plugins/scala/codeInspection/collections/FilterOtherContainsInspection.scala
replace.filter.with.intersect=將 filter 和 contains 取代為 intersect
replace.filter.with.diff=將 filter 和 not contains 取代為 diff

### org/jetbrains/plugins/scala/codeInspection/collections/FilterSetContainsInspection.scala
remove.redundant.contains=移除冗餘的 .contains

### org/jetbrains/plugins/scala/codeInspection/collections/FilterSizeInspection.scala
filter.size.hint=將 filter 和 size 取代為 count

### org/jetbrains/plugins/scala/codeInspection/collections/FindAndMapToGetInspection.scala
replace.find.and.map.with.apply=將 find 和 map 取代為 apply

### org/jetbrains/plugins/scala/codeInspection/collections/FindEmptyCheckInspection.scala
find.isDefined.hint=將 find 和非空性檢查取代為 exists
find.isEmpty.hint=將 find 和空性檢查取代為 \!(...).exists

### org/jetbrains/plugins/scala/codeInspection/collections/FoldTrueAndInspection.scala
fold.true.and.hint=將 fold 取代為 forall

### org/jetbrains/plugins/scala/codeInspection/collections/GetGetOrElseInspection.scala
get.getOrElse.hint=取代為 getOrElse(key, defaultValue)

### org/jetbrains/plugins/scala/codeInspection/collections/GetOrElseNullInspection.scala
getOrElse.null.hint=將 getOrElse(null) 取代為 orNull

### org/jetbrains/plugins/scala/codeInspection/collections/HeadOrLastOptionInspection.scala
replace.with.headOption=取代為 .headOption
replace.with.lastOption=取代為 .lastOption
ifstmt.to.headOption=If-else 轉換為 headOption
ifstmt.to.lastOption=If-else 轉換為 lastOption
lift.to.headOption=將 .lift 轉換為 headOption
lift.to.lastOption=.lift 轉換為 lastOption

### org/jetbrains/plugins/scala/codeInspection/collections/IfElseToFilteredOptionInspection.scala
ifstmt.to.filteredOption=將 if 取代為篩選選項

### org/jetbrains/plugins/scala/codeInspection/collections/IfElseToOptionInspection.scala
hint.replace.with.option.expr=取代為 Option(x)
hint.replace.with.option.expr.with.preview=取代為 Option({0})

### org/jetbrains/plugins/scala/codeInspection/collections/IndexBoundsCheckInspection.scala
ifstmt.to.lift=If-else 轉換為 lift

### org/jetbrains/plugins/scala/codeInspection/collections/LastIndexToLastInspection.scala
replace.with.last=取代為 .last

### org/jetbrains/plugins/scala/codeInspection/collections/MakeArrayToStringInspection.scala
format.with.mkstring=使用 .mkString("Array(", ", ", ")") 格式化

### org/jetbrains/plugins/scala/codeInspection/collections/MapFlattenInspection.scala
replace.map.flatten.with.flatMap=將 .map 和 .flatten 取代為 .flatMap

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetEmptinessCheckInspection.scala
replace.get.nonEmpty.with.contains=取代為 .contains(key)
replace.get.isEmpty.with.not.contains=取代為 \!.contains(key)

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetGetInspection.scala
get.get.hint=取代為 .(key)

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetOrElseBooleanInspection.scala
map.getOrElse.false.hint=將 map 和 getOrElse(false) 取代為 exists
map.getOrElse.true.hint=將 map 和 getOrElse(true) 取代為 forall

### org/jetbrains/plugins/scala/codeInspection/collections/MapGetOrElseInspection.scala
map.getOrElse.hint=將 map 和 getOrElse 取代為 fold

### org/jetbrains/plugins/scala/codeInspection/collections/MapKeysInspection.scala
replace.with.keys=取代為 .keys
replace.with.keySet=取代為 .keySet
replace.with.keysIterator=取代為 .keysIterator

### org/jetbrains/plugins/scala/codeInspection/collections/MapLiftInspection.scala
replace.with.get=取代為 .get

### org/jetbrains/plugins/scala/codeInspection/collections/MapToBooleanContainsInspection.scala
replace.map.contains.true.with.exists=將 .map(...).contains(true) 取代為 .exists(...)
replace.map.contains.false.with.not.forall=將 .map(...).contains(false) 取代為 \! .forall(...)

### org/jetbrains/plugins/scala/codeInspection/collections/MapValuesInspection.scala
replace.with.values=取代為 .values
replace.with.valuesIterator=取代為 .valuesIterator

### org/jetbrains/plugins/scala/codeInspection/collections/OperationOnCollectionInspectionBase.scala
operation.on.collection.id=OperationsOnCollection
operation.on.collection.name=集合上可簡化的運算
operation.on.collection.like.option.input.message=在檢查中這些類會被視為 scala.Option
operation.on.collection.like.option.input.title=添加類似選項的類
operation.on.collection.like.option.panel.title=類似選項的類
operation.on.collection.like.collection.input.message=在檢查中這些類會被視為集合
operation.on.collection.like.collection.input.title=添加類似集合的類
operation.on.collection.like.collection.panel.title=類似集合的類

### org/jetbrains/plugins/scala/codeInspection/collections/OptionEqualsSomeToContainsInspection.scala
replace.with.contains=取代為 .contains
replace.with.not.contains=取代為 \!.contains

### org/jetbrains/plugins/scala/codeInspection/collections/RangeToIndicesInspection.scala
hint.replace.with.indices=取代為 .indices
hint.replace.with.indices.with.preview=取代為 {0}.indices

### org/jetbrains/plugins/scala/codeInspection/collections/RedundantCollectionConversionInspection.scala
redundant.collection.conversion=移除冗餘集合轉換

### org/jetbrains/plugins/scala/codeInspection/collections/RedundantHeadOrLastOptionInspection.scala
remove.redundant.headOption=移除冗餘的 .headOption
remove.redundant.lastOption=移除冗餘的 .lastOption

### org/jetbrains/plugins/scala/codeInspection/collections/ReplaceToWithUntilInspection.scala
replace.to.with.until=將 `to` 取代為 `until`

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseFindInspection.scala
replace.with.findlast=取代為 `findLast`

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseIteratorInspection.scala
replace.reverse.iterator=將 .reverse.iterator 取代為 .reverseIterator

### org/jetbrains/plugins/scala/codeInspection/collections/ReverseTakeReverseInspection.scala
replace.reverse.take.reverse.with.takeRight=將 .reverse.take(...).reverse 取代為 .takeRight(...)

### org/jetbrains/plugins/scala/codeInspection/collections/SameElementsToEqualsInspection.scala
replace.sameElements.with.equals=將 sameElements 取代為 equals
replace.corresponds.with.equals=將 corresponds 取代為 equals

### org/jetbrains/plugins/scala/codeInspection/collections/SideEffectsInMonadicTransformationInspection.scala
side.effects.in.monadic=單體轉換的副作用

### org/jetbrains/plugins/scala/codeInspection/collections/SimplifiableFoldOrReduceInspection.scala
fold.sum.hint=將 fold 取代為 sum
fold.product.hint=將 fold 取代為 product
fold.sum.short=fold 轉換為 sum
fold.product.short=fold 轉換為 product
reduce.sum.hint=將 reduce 取代為 sum
reduce.product.hint=將 reduce 取代為 product
reduce.min.hint=將 reduce 取代為 min
reduce.max.hint=將 reduce 取代為 max
reduce.sum.short=將 reduce 轉換為 sum
reduce.product.short=reduce 轉換為 product
reduce.min.short=reduce 轉換為 min
reduce.max.short=reduce 轉換為 max

### org/jetbrains/plugins/scala/codeInspection/collections/SizeToLengthInspection.scala
size.to.length=將陣列和字串中的 .size 取代為 .length

### org/jetbrains/plugins/scala/codeInspection/collections/SomeToOptionInspection.scala
replace.with.option=取代為 Option

### org/jetbrains/plugins/scala/codeInspection/collections/SortFilterInspection.scala
sort.filter.hint=更改 sort 和 filter 的順序

### org/jetbrains/plugins/scala/codeInspection/collections/SortedMaxMinInspection.scala
replace.sorted.head.with.min=取代為 .min
replace.sorted.last.with.max=取代為 .max
replace.sortBy.head.with.minBy=取代為 .minBy
replace.sortBy.last.with.maxBy=取代為 .maxBy

### org/jetbrains/plugins/scala/codeInspection/collections/ToSetAndBackInspection.scala
replace.toSet.and.back.with.distinct=將 Set 的轉換替換成 .distinct

### org/jetbrains/plugins/scala/codeInspection/collections/UnitInMapInspection.scala
expression.unit.return.in.map=map 實參中帶 unit 返回類型的表達式
use.foreach.instead.of.map=使用 foreach 而不是 map

### org/jetbrains/plugins/scala/codeInspection/collections/UnzipSingleElementInspection.scala
replace.with.map=取代為 .map

### org/jetbrains/plugins/scala/codeInspection/collections/ZeroIndexToHeadInspection.scala
replace.with.head=取代為 .head

### org/jetbrains/plugins/scala/codeInspection/collections/ZipWithIndexInspection.scala
replace.with.zipWithIndex=取代為 zipWithIndex

### org/jetbrains/plugins/scala/codeInspection/controlFlow/ScalaUnreachableCodeInspection.scala
remove.unreachable.code=移除不可到達的程式碼
unwrap.do.statement=解開 do 語句

### org/jetbrains/plugins/scala/codeInspection/controlFlow/ScalaUnusedExpressionInspection.scala
unused.expression.throws=未使用的表達式，唯一可能的副作用是異常
unused.expression.no.side.effects=未使用的表達式，無副作用
add.return.keyword=添加 return 關鍵字
remove.expression=移除表達式

### org/jetbrains/plugins/scala/codeInspection/delayedInit/FieldFromDelayedInitInspection.scala
display.name.field.from.delayedinit=來自於 DelayedInit 的欄位
field.defined.in.delayedinit.is.likely.to.be.null=在 DelayedInit 中定義的欄位可能為 null

### org/jetbrains/plugins/scala/codeInspection/deprecation/Scala3DeprecatedAlphanumericInfixCallInspection.scala
scala3.alphanumeric.definition.is.not.declared.infix=字母數字定義 {0} 未宣告為 `infix`；它不應用作中綴運算符

### org/jetbrains/plugins/scala/codeInspection/deprecation/Scala3DeprecatedPackageObjectInspection.scala
package.objects.are.deprecated=軟體套件物件在 Scala 3 中已棄用，建議改用頂層定義
unwrap.package.object.fix=將成員移至頂層

### org/jetbrains/plugins/scala/codeInspection/deprecation/ScalaDeprecatedIdentifierInspection.scala
usage.of.deprecatedname.as.identifier.is.deprecated=已棄用 {0} 作為關鍵字的用法。它可以在日後的 scala 版本中用作關鍵字。

### org/jetbrains/plugins/scala/codeInspection/deprecation/ScalaDeprecationInspection.scala
parameter.name.is.deprecated=參數名稱\: {0} 已棄用。
symbol.name.is.deprecated.with.message=符號 {0} 已棄用。{1}
super.method.name.is.deprecated.with.message=Super 方法 {0} 已棄用。{1}
overriding.is.deprecated=覆寫 {0} 已棄用。{1}
inheriting.form.name.is.deprecated.message=繼承形式 {0} 已棄用。{1}

### org/jetbrains/plugins/scala/codeInspection/feature/LanguageFeatureInspection.scala
advanced.language.feature=高階語言功能\: {0}
display.name.advanced.language.features=高階語言功能
import.feature.flag.for.language.feature=匯入 {0} 的功能標誌
language.feature.postfix.operator.notation=後綴運算符表示法
language.feature.reflective.call=反射調用
language.feature.dynamic.member.selection=動態成員選擇
language.feature.implicit.conversion=隱式轉換
language.feature.higher.kinded.type=較高種類的類型
language.feature.existential.type=存在類型
language.feature.macro.definition=巨集定義

### org/jetbrains/plugins/scala/codeInspection/format/LegacyStringFormattingInspection.scala
legacy.string.formatting.use.interpolated.string=傳統字串格式化，可以改用插值字串
convert.to.interpolated.string=轉換為插值字串

### org/jetbrains/plugins/scala/codeInspection/format/ScalaMalformedFormatStringInspection.scala
format.specifier.cannot.be.used.for.an.argument=格式說明符 {0} 不能用於實參 {1} ({2})
argument.cannot.be.used.for.a.format.specifier=實參 {0} ({1})不能用於格式說明符 {2}
malformed.format.specifier=格式錯誤的格式說明符
no.argument.for.a.format.specifier=格式說明符 {0} 沒有實參
no.argument.at.position={0} 位置處沒有實參
no.format.specifer.for.an.argument=實參 {0} 沒有格式說明符

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/MatchToPartialFunctionInspection.scala
convert.match.statement.to.pattern.matching.function=將 match 語句轉換為模式符合匿名函數

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/UnnecessaryPartialFunctionInspection.scala
unnecessary.partial.function=不必要的偏函數

### org/jetbrains/plugins/scala/codeInspection/functionExpressions/UnnecessaryPartialFunctionQuickFix.scala
convert.to.anonymous.function=轉換為匿名函數

### org/jetbrains/plugins/scala/codeInspection/hashCodeUsesVar/HashCodeUsesVarInspection.scala
non.value.field.is.accessed.in.hashcode=在 ''hashCode()'' 中存取了非值欄位

### org/jetbrains/plugins/scala/codeInspection/implicits/DeprecatedViewBoundInspection.scala
view.bounds.are.deprecated=檢視邊界已棄用
replace.with.implicit.parameters=取代為隱式參數

### org/jetbrains/plugins/scala/codeInspection/imports/SingleImportInspection.scala
single.import=移除僅包含一項匯入的 import 語句中的大括號

### org/jetbrains/plugins/scala/codeInspection/infiniteCycle/LoopVariableNotUpdatedInspection.scala
display.name.loop.variable.not.updated.inside.loop=迴圈變數未在迴圈內更新

### org/jetbrains/plugins/scala/codeInspection/internal/AnnotatorBasedErrorInspection.scala
error.detected=檢測到錯誤

### org/jetbrains/plugins/scala/codeInspection/internal/ApiStatusInspection.scala
super.method.name.is.marked.as.status=Super 方法 {0} 已被標記為 {1}
symbol.name.is.marked.as.status=符號 {0} 已被標記為 {1}

### org/jetbrains/plugins/scala/codeInspection/internal/InstanceOfInspection.scala
replace.with.is=取代為 .is

### org/jetbrains/plugins/scala/codeInspection/internal/ScalaShouldBeTextContainsInspection.scala
internal.replace.with.textContains=取代為 .textContains

### org/jetbrains/plugins/scala/codeInspection/internal/ScalaShouldBeTextMatchesInspection.scala
internal.replace.with.textMatches=取代為 .textMatches

### org/jetbrains/plugins/scala/codeInspection/literal/FloatLiteralEndingWithDecimalPointInspection.scala
display.name.floating.point.literal.ending.with.dot=以 ''.'' 結束的浮點文字
convert.to.floating.point=轉換為 {0}

### org/jetbrains/plugins/scala/codeInspection/methodSignature/ApparentResultTypeRefinementInspection.scala
insert.missing.assignment=插入缺少的賦值

### org/jetbrains/plugins/scala/codeInspection/methodSignature/JavaAccessorEmptyParenCallInspection.scala
remove.call.parentheses=移除調用圓括號

### org/jetbrains/plugins/scala/codeInspection/methodSignature/OverrideAbstractMemberInspection.scala
add.override.modifier.quickfix=添加覆寫修飾符

### org/jetbrains/plugins/scala/codeInspection/methodSignature/ParameterlessAccessInspection.scala
add.call.parentheses=添加調用圓括號

### org/jetbrains/plugins/scala/codeInspection/methodSignature/UnitMethodInspection.scala
convert.to.function.syntax=轉換為函數語法

### org/jetbrains/plugins/scala/codeInspection/methodSignature/quickfix/AddEmptyParentheses.scala
empty.parentheses=添加空圓括號

### org/jetbrains/plugins/scala/codeInspection/methodSignature/quickfix/RemoveParentheses.scala
redundant.parentheses=移除冗餘圓括號

### org/jetbrains/plugins/scala/codeInspection/modifiers/SetModifierQuickfix.scala
add.modifier=添加 ''{0}'' 修飾符
remove.modifier=移除 ''{0}'' 修飾符

### org/jetbrains/plugins/scala/codeInspection/monads/NestedStatefulMonadsInspection.scala
nested.stateful.monads=嵌套的有狀態單體

### org/jetbrains/plugins/scala/codeInspection/notImplementedCode/NotImplementedCodeInspection.scala
not.implemented=未實作
implement.quickfix.name=實作

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ChainedPackageInspection.scala
package.declaration.could.use.chained.package.clauses=基礎軟體套件 ''{0}'' 必須是單獨的軟體套件子句
use.chained.package.clauses.like=提取軟體套件子句
use.chained.package.clauses=使用單獨的基礎軟體套件子句

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaMoveToPackageQuickFix.scala
fimaly.name.move.file.to.package=移動到軟體套件
move.file.to.default.package=移動到預設軟體套件
move.file.to.package.with.packagename=移動到軟體套件 {0}
move.file.to.package.package.prefix.error=無法在源資料夾 ''{1}'' 中創建軟體套件前綴為 ''{2}'' 的軟體套件 ''{0}''

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaPackageNameInspection.scala
package.names.does.not.correspond.to.directory.structure=軟體套件名稱 ''{0}'' 與檔案路徑 ''{1}'' 不對應
package.names.does.not.correspond.to.directory.structure.package.prefix=請注意，源資料夾 ''{0}'' 具有軟體套件前綴 ''{1}''

### org/jetbrains/plugins/scala/codeInspection/packageNameInspection/ScalaRenamePackageQuickFix.scala
rename.package.quickfix.command.name=重命名軟體套件
family.name.rename.package=重命名軟體套件
remove.package.statement=移除 package 語句
rename.package.to=將軟體套件名稱設定為 ''{0}''

### org/jetbrains/plugins/scala/codeInspection/parameters/NameBooleanParametersInspection.java
name.boolean.ignore.single.parameter.methods=忽略只有一個參數的方法

### org/jetbrains/plugins/scala/codeInspection/parameters/NameBooleanParametersInspectionBase.scala
name.boolean.params=為布爾參數命名

### org/jetbrains/plugins/scala/codeInspection/parameters/RedundantDefaultArgumentInspection.scala
argument.duplicates.corresponding.parameter.default.value=實參重複對應參數的預設值
delete.redundant.default.argument=刪除冗餘的預設實參

### org/jetbrains/plugins/scala/codeInspection/parameters/TypedParameterWithoutParenthesisInspection.scala
surround.with.parenthesis=用圓括號括起來

### org/jetbrains/plugins/scala/codeInspection/parentheses/ScalaUnnecessaryParenthesesInspection.java
clarifying.parentheses=澄清圓括號
around.function.type=環繞函數類型
around.function.type.parameter=環繞函數類型的參數
around.function.expr.parameter=環繞函數表達式的參數
unnecessary.parentheses.ignore=忽略

### org/jetbrains/plugins/scala/codeInspection/parentheses/ScalaUnnecessaryParenthesesInspectionBase.scala
remove.unnecessary.parentheses.with.text=移除不必要的圓括號 {0}
unnecessary.parentheses=不必要的圓括號
remove.unnecessary.parentheses=移除不必要的圓括號

### org/jetbrains/plugins/scala/codeInspection/postfix/PostfixMethodCallInspection.scala
use.of.postfix.method.call=使用後綴方法調用
add.dot.to.method.call=將點添加到方法調用

### org/jetbrains/plugins/scala/codeInspection/prefixMutableCollections/ReferenceMustBePrefixedInspection.scala
reference.must.be.prefixed=引用必須有前綴
add.prefix.to.reference=向引用添加前綴

### org/jetbrains/plugins/scala/codeInspection/quickfix/ConvertFromInfixExpressionQuickFix.scala
convert.from.infix.expression=從中綴表達式轉換

### org/jetbrains/plugins/scala/codeInspection/quickfix/ConvertFromInfixPatternQuickFix.scala
convert.from.infix.pattern=從中綴模式轉換

### org/jetbrains/plugins/scala/codeInspection/quickfix/ConvertFromInfixTypeQuickFix.scala
convert.from.infix.type=從中綴類型轉換

### org/jetbrains/plugins/scala/codeInspection/quickfix/WrapInBackticksQuickFix.scala
wrap.in.backticks=用反引號包裝

### org/jetbrains/plugins/scala/codeInspection/redundantBlock/RedundantBlockInspection.scala
remove.redundant.braces=移除冗餘大括號
unwrap.the.expression=解開表達式
the.enclosing.block.is.redundant=封閉塊冗餘
redundant.braces.in.case.clause=case 子句中冗餘的大括號

### org/jetbrains/plugins/scala/codeInspection/relativeImports/AbsoluteImportInspection.scala
absolute.import.detected=匯入可以相對於基礎軟體套件
display.name.absolute.import=絕對匯入

### org/jetbrains/plugins/scala/codeInspection/relativeImports/RelativeImportInspection.scala
relative.import.detected=檢測到相對匯入
display.name.relative.import=相對匯入
family.name.enable.full.qualified.imports=啟用完全限定 import

### org/jetbrains/plugins/scala/codeInspection/resourceLeaks/SourceNotClosedInspection.scala
source.not.closed=原始碼未閉合

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocInlinedTagInspection.scala
display.name.inlined.tag=內聯標記

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocMissingParameterDescriptionInspection.scala
display.name.missing.parameter.description=缺少參數描述

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnbalancedHeaderInspection.scala
all.text.from.header.closing.tag.to.end.of.line.will.be.lost=從標頭結束標記到行尾的所有文本都將丟失

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnclosedTagWithoutParserInspection.scala
display.name.unclosed.tag=未閉合的標記

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnknownParameterInspection.scala
unknown.tag.parameter=未知標記參數
unknown.tag.type.parameter=未知標記類型參數
one.param.or.tparam.tag.for.one.param.or.type.param.allowed=一個參數/類型參數允許使用一個 param/tparam 標記
scaladoc.cant.process.tparams.for.type.alias.now=Scaladoc 現在無法處理類型別名的 tparams
param.and.tparams.tags.arnt.allowed.there=此處不允許使用 @param 和 @tparams 標籤

### org/jetbrains/plugins/scala/codeInspection/scaladoc/ScalaDocUnknownTagInspection.scala
missing.tag.parameter=缺少標記參數
unknown.scaladoc.tag=未知 scaladoc 標記

### org/jetbrains/plugins/scala/codeInspection/scaladoc/package.scala
family.name.scala.scaladoc=Scala\: Scaladoc

### org/jetbrains/plugins/scala/codeInspection/shadow/TypeParameterShadowInspection.scala
display.name.suspicious.shadowing.by.a.type.parameter=類型參數的可疑隱藏

### org/jetbrains/plugins/scala/codeInspection/shadow/VariablePatternShadowInspection.scala
suspicious.shadowing.by.a.variable.pattern=變數模式的可疑隱藏
rename.variable.pattern=重命名變數模式
convert.to.stable.identifier.pattern=轉換為穩定關鍵字模式 `{0}`

### org/jetbrains/plugins/scala/codeInspection/source3/Source3Inspection.scala
replace.with.questionmark=取代為 ?
add.case=添加 ''case''
replace.with.star=取代為 *
replace.with.as=取代為 ''as''
replace.with.name.followed.by.star=取代為 ''{0}*''
replace.with.and.char=取代為 \\&
suggest.converting.wildcards=<html>建議轉換萬用字元(<code>Seq[_]</code> \\&rarr; <code>Seq[?]</code>)</html>
suggest.adding.case.in.for.comprehensions=<html>建議在 <code>for</code> 推導式</html>中添加 <code>case</code>
suggest.using.star.instead.of.underscore=<html>建議在 import 中使用 <code>*</code> 而不是 <code>_</code></html>
suggest.using.as.instead.of.arrow=<html>建議在 import 中使用 <code>as</code> 而不是 <code>\=\\&gt;</code></html>
suggest.converting.vararg.splices=<html>建議轉換 vararg 接合(<code>seq\: _*</code> \\&rarr; <code>seq*</code>)</html>
suggest.converting.named.wildcard.patterns=<html>建議轉換命名萬用字元模式(<code>seq@_*</code> \\&rarr; <code>seq*</code>)</html>
suggest.using.and.instead.of.with=<html>建議在複合類型中使用 <code>\\&</code> 而不是 <code>with</code></html>

### org/jetbrains/plugins/scala/codeInspection/specs2/BuiltinMatcherExistsInspection.scala
specs2.builtin.matcher.alternative.exists=存在可用的匹配器
specs2.use.builtin.matcher=取代為內建匹配器

### org/jetbrains/plugins/scala/codeInspection/suppression/ScalaSuppressForStatementFix.scala
suppress.inspection.function=對函數禁止
suppress.inspection.typeAlias=對類型別名禁止
suppress.inspection.variable=對變數定義禁止

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/AutoTuplingInspection.scala
scala.compiler.will.replace.this.argument.list.with.tuple=Scala 編譯器將此實參列表取代為元組
display.name.auto.tupling=自動元組化
make.tuple.explicit=將元組設為顯式

### org/jetbrains/plugins/scala/codeInspection/syntacticClarification/VariableNullInitializerInspection.scala
use.option.type=使用 Option 類型
use.underscore.initializer=使用 _ 初始設定式
variable.with.null.initializer=帶有 null 初始設定式的變數

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/ConvertibleToMethodValueInspection.scala
convertible.to.method.value.name=可轉換為方法值的匿名函數
convertible.to.method.value.anonymous.hint=轉換為方法值
convertible.to.method.value.eta.hint=移除冗餘佔位符

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/FunctionTupleSyntacticSugarInspection.scala
syntactic.sugar.could.be.used=可以使用語法糖

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/PostfixUnaryOperationInspection.scala
unary.operation.can.use.prefix.notation=對一元運算符使用前綴表示法

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/RedundantNewCaseClassInspection.scala
display.name.redundant.new.on.case.class=case 類中冗餘的 new

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/RemoveRedundantReturnInspection.scala
return.keyword.is.redundant=return 關鍵字冗餘
display.name.redundant.return=冗餘 Return

### org/jetbrains/plugins/scala/codeInspection/syntacticSimplification/ScalaUnnecessarySemicolonInspection.scala
remove.unnecessary.semicolon=移除不必要的分號
unnecessary.semicolon=不必要的分號

### org/jetbrains/plugins/scala/codeInspection/targetNameAnnotation/EmptyTargetNameInspection.scala
targetname.cannot.be.empty=@targetName 的外部名稱不能為空

### org/jetbrains/plugins/scala/codeInspection/targetNameAnnotation/MultipleTargetNameAnnotationsInspection.scala
all.but.last.targetname.annotation.ignored=除了最後一個 @targetName 註解外，其他都將被忽略，請考慮在每個定義中最多使用一個註解

### org/jetbrains/plugins/scala/codeInspection/targetNameAnnotation/MultipleTargetsTargetNameInspection.scala
targetname.multiple.targets=@targetName 註解具有多個目標

### org/jetbrains/plugins/scala/codeInspection/targetNameAnnotation/NoTargetNameAnnotationForOperatorLikeDefinitionInspection.scala
definition.with.operator.name.should.have.targetname.annotation=定義具有運算符名稱；它應該帶有 @targetName 註解

### org/jetbrains/plugins/scala/codeInspection/targetNameAnnotation/OverridingTargetNameInspection.scala
override.definition.should.not.have.targetname.annotation=定義不應具有 @targetName 註解，因為被覆寫的成員也沒有該註解
override.definition.misses.targetname.annotation=定義缺少目標名稱註解 @targetName("{0}")
override.definition.has.different.target.name=定義具有不同的目標名稱批注；它應該為 @targetName("{0}")
fix.targetname.annotation=修正 @targetName 註解

### org/jetbrains/plugins/scala/codeInspection/targetNameAnnotation/package.scala
add.targetname.annotation=添加 @targetName 註解

### org/jetbrains/plugins/scala/codeInspection/typeAnnotation/AddTypeAnnotationQuickFix.scala
add.type.annotation=添加類型註解

### org/jetbrains/plugins/scala/codeInspection/typeAnnotation/TypeAnnotationInspection.scala
learn.why=了解原因…
quickfix.modify.code.style=修改程式碼樣式…
quickfix.make.private=設為 private
type.annotation.required.for={0} 必須有類型註解

### org/jetbrains/plugins/scala/codeInspection/typeChecking/ComparingUnrelatedTypesInspection.scala
comparing.unrelated.types.name=正在比較不相關的類型
comparing.unrelated.types.hint=正在比較不相關的類型\: {0} 和 {1}

### org/jetbrains/plugins/scala/codeInspection/typeChecking/IsInstanceOfInspection.scala
missing.explicit.type.in.isinstanceof.call=在沒有顯式類型的情況下調用了 isInstanceOf。行為特定於編譯器版本，因為它依賴於編譯器插入滿足類型限制的任何類型。

### org/jetbrains/plugins/scala/codeInspection/typeChecking/PatternMayNeverMatchInspection.scala
pattern.may.never.match=模式可能從不符合

### org/jetbrains/plugins/scala/codeInspection/typeChecking/TypeCheckCanBeMatchInspection.scala
type.check.can.be.replaced.by.pattern.matching=類型檢查可被取代為模式符合

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/AddScalaAnnotationUnusedQuickFix.scala
annotate.declaration.with.unused=使用 @unused 註解宣告

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/DeleteUnusedElementFix.scala
remove.unused.element=移除未使用的元素
remove.whole.definition=移除整個定義
remove.only.name.binding=僅移除 {0} 綁定

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/DontReportPublicDeclarationsQuickFix.scala
fix.unused.declaration.report.public.declarations=禁用對未使用的 public 宣告的報告

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaOptimizeImportsFix.scala
mark.import.as.always.used.in.this.project=將 import 標記為始終在此專案中使用

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaUnusedDeclarationInspection.java
name.unused.declaration.report.public.declarations=報告 public 宣告

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaUnusedDeclarationInspectionBase.scala
display.name.unused.declaration=未使用的宣告
declaration.is.never.used=從未使用宣告

### org/jetbrains/plugins/scala/codeInspection/unusedInspections/ScalaUnusedImportPassBase.scala
unused.import.statement=未使用的 import 語句

### org/jetbrains/plugins/scala/codeInspection/valInTraitInspection/AbstractValueInTraitInspection.scala
display.name.abstract.value.in.trait=特徵中的抽象值
abstract.value.used.in.trait=特徵中使用的抽象值
abstract.variable.used.in.trait=特徵中使用了 abstract 變數

### org/jetbrains/plugins/scala/codeInspection/varCouldBeValInspection/ValToVarQuickFix.scala
convert.val.to.var=將 ''val'' 轉換為 ''var''

### org/jetbrains/plugins/scala/codeInspection/varCouldBeValInspection/VarCouldBeValInspection.scala
var.could.be.a.val=var 可以是 val
convert.var.to.val=將 ''var'' 轉換為 ''val''

### org/jetbrains/plugins/scala/codeInspection/xml/package.scala
family.name.scala.general=Scala\: 一般

### org/jetbrains/plugins/scala/externalLibraries/kindProjector/inspections/AppliedTypeLambdaCanBeSimplifiedInspection.scala
applied.type.lambda.can.be.simplified=可以簡化套用類型 Lambda
simplify.type=簡化類型

### org/jetbrains/plugins/scala/externalLibraries/kindProjector/inspections/DeprecatedKindProjectorSyntaxInspection.scala
replace.with.star.syntax=取代為 `*` 語法
kind.projector.deprecated.tip=`?` 佔位符的使用即將棄用。考慮改用 `*`。
kind.projector.deprecated.tip.with.update=`?` 佔位符的使用即將棄用。考慮更新 kind-projector 延伸模組和改用 `*`。

### org/jetbrains/plugins/scala/externalLibraries/kindProjector/inspections/KindProjectorSimplifyTypeProjectionInspection.scala
kind.projector.simplify.type=Kind Projector\: 簡化類型

### org/jetbrains/plugins/scala/externalLibraries/kindProjector/inspections/KindProjectorUseCorrectLambdaKeywordInspection.scala
kind.projector.replace.lambda.with.lamda.char=Kind Projector\: 將 Lambda 取代為 λ
kind.projector.replace.lambda.char.with.lambda=Kind Projector\: 將 λ 取代為 Lambda
kind.projector.use.correct.lambda.keyword=Kind Projector\: 使用正確的 lambda 關鍵字
kind.projector.code.style.setting.use.lamda.char=Kind Projector\: 更改程式碼樣式設定\: 使用 λ，而不是 Lambda
kind.projector.code.style.setting.use.lamda.word=Kind Projector\: 更改程式碼樣式設定\: 使用 Lambda，而不是 λ

### org/jetbrains/plugins/scala/lang/dfa/utils/ScalaDfaTypeUtils.scala
invocation.index.out.of.bounds=調用將產生 IndexOutOfBoundsException。索引始終越界
invocation.no.such.element=調用將產生 NoSuchElementException。集合始終為空
condition.always.true=條件始終為 true
condition.always.false=條件始終為 false
expression.always.zero=表達式始終評估為 0
expression.always.null=表達式始終評估為 null

### <unused>
warning.with.message=警告\: {0}
error.detected.with.message=檢測到錯誤\: {0}
grouppath.scala.collections=Scala，集合
method.signature.unit.explicit.type=冗餘 Unit 結果類型註解
method.signature.unit.functional.definition=Unit 結果類型的方法具有函數定義
method.signature.unit.explicit.assignment=冗餘賦值
displayname.default.file.template.inspection=預設檔案模板檢查
remove.redundant.type.annotation=移除冗餘的類型註解
remove.redundant.type.annotation.and.equals.sign=移除冗餘的類型註解和等號
remove.redundant.equals.sign=移除冗餘的等號
make.apply.call.explicit=將 "apply" 調用設為顯式
drop.one.hint=將 drop(1) 取代為 tail
replace.equals.with.arrays.equals=使用 java.util.Arrays.equals，而不是陣列相等性
suppress.inspection.argument=對實參禁止
internal.string.should.be.in.bundle=字串應提取到捆綁包
internal.only.pass.hardcoded.strings.as.property.keys=僅將硬編碼的字串作為屬性鍵傳遞
internal.expression.without.nls.passed.to.nls=不帶 @Nls 的表達式傳遞到 @Nls
intention.category.scala.internal=Scala/內部
