jvm.inspections.group.name=JVM 語言

jvm.inspections.unstable.api.usage.display.name=不穩定的 API 用法
jvm.inspections.unstable.api.usage.annotations.list=不穩定的 API 註解:
jvm.inspections.unstable.api.usage.ignore.inside.imports=在匯入內忽略
jvm.inspections.unstable.api.usage.ignore.declared.inside.this.project=忽略此專案中宣告的 API
jvm.inspections.unstable.api.usage.api.is.marked.unstable.itself=''{0}'' 使用 @{1} 標記為不穩定
jvm.inspections.unstable.api.usage.api.is.declared.in.unstable.api=''{0}'' 在標記為 @{3} 的不穩定{1} ''{2}'' 中宣告
jvm.inspections.unstable.api.usage.overridden.method.is.marked.unstable.itself=覆寫方法 ''{0}'' 使用 @{1} 標記為不穩定
jvm.inspections.unstable.api.usage.overridden.method.is.declared.in.unstable.api=覆寫方法 ''{0}'' 在標記為 @{3} 的不穩定{1} ''{2}'' 中宣告
jvm.inspections.unstable.api.usage.unstable.type.is.used.in.signature.of.referenced.api=''{0}'' 不穩定，因為其簽名引用了標記為 @{3} 的不穩定{1} ''{2}''

jvm.inspections.scheduled.for.removal.future.version=未來版本
jvm.inspections.scheduled.for.removal.predefined.version=版本 {0}
jvm.inspections.scheduled.for.removal.api.is.marked.itself=''{0}'' 已計劃從 {1} 中移除
jvm.inspections.scheduled.for.removal.api.is.declared.in.marked.api=''{0}'' 在已計劃從 {3} 中移除的{1} ''{2}'' 中宣告
jvm.inspections.scheduled.for.removal.method.overridden.marked.itself=覆寫方法 ''{0}'' 已計劃從 {1} 中移除
jvm.inspections.scheduled.for.removal.method.overridden.declared.in.marked.api=覆寫方法 ''{0}'' 在已計劃從 {3} 中移除的{1} ''{2}'' 中宣告
jvm.inspections.scheduled.for.removal.scheduled.for.removal.type.is.used.in.signature.of.referenced.api=''{0}'' 已計劃移除，因為其簽名引用了已計劃從 {3} 中移除的{1} ''{2}''

jvm.inspections.unstable.type.used.in.signature.display.name=簽名中使用了不穩定的類型
jvm.inspections.unstable.type.used.in.class.signature.description=類必須使用 ''@{0}'' 註解標記，因為其宣告引用了不穩定的類型 ''{1}''
jvm.inspections.unstable.type.used.in.method.signature.description=方法必須使用 ''@{0}'' 註解標記，因為其簽名引用了不穩定的類型 ''{1}''
jvm.inspections.unstable.type.used.in.field.signature.description=欄位必須使用 ''@{0}'' 註解標記，因為其類型引用了不穩定的類型 ''{1}''

jvm.inspections.missing.deprecated.annotation.on.scheduled.for.removal.api.display.name=已計劃移除的 API 上缺少 '@Deprecated' 註解
jvm.inspections.missing.deprecated.annotation.on.scheduled.for.removal.api.description=已計劃移除的 API 也必須使用 '@Deprecated' 註解標記
jvm.inspections.must.already.be.removed.api.display.name=API 必須已移除
jvm.inspections.must.already.be.removed.api.earlier.version.description=API 必須已在版本 {0} 中移除，但當前版本為 {1}
jvm.inspections.must.already.be.removed.api.current.version.description=API 必須在當前版本 {0} 中移除
jvm.inspections.blocking.method.problem.descriptor=在非阻塞上下文中使用阻塞調用可能會導致執行緒匱乏
jvm.inspections.blocking.method.display.name=可能在非阻塞上下文中使用阻塞調用
jvm.inspections.blocking.method.annotation.blocking=阻塞註解
jvm.inspections.blocking.method.annotation.non-blocking=非阻塞註解
jvm.inspections.blocking.method.annotation.configure.add.blocking.title=添加阻塞註解
jvm.inspections.blocking.method.annotation.configure.add.non-blocking.title=添加非阻塞註解
jvm.inspections.blocking.method.annotation.configure.empty.text=未添加註解。

jvm.inspections.api.no.extension.display.name=不應擴展類、接口或方法
jvm.inspections.api.no.extension.class.description=不得擴展類 ''{0}''
jvm.inspections.api.no.extension.interface.implement.description=不得實作接口 ''{0}''
jvm.inspections.api.no.extension.interface.extend.description=不得擴展接口 ''{0}''
jvm.inspections.api.no.extension.method.overriding.description=不得覆寫方法 ''{0}''
jvm.inspections.api.override.only.display.name=方法只能覆寫
jvm.inspections.api.override.only.description=方法 ''{0}'' 只能覆寫

jvm.inspections.dependency.display.name=非法的軟體套件依賴項
jvm.inspections.dependency.edit.rules.text=編輯依賴關係規則 "{0} "
jvm.inspections.dependency.edit.rules.family=編輯依賴關係規則
jvm.inspections.dependency.configure.button.text=設定依賴關係規則
jvm.inspections.dependency.violator.problem.descriptor=違反依賴關係規則 ''{0}.''

jvm.inspections.junit.rule.display.name=@Rule/@ClassRule 欄位的格式錯誤
jvm.inspections.junit.rule.problem.descriptor=使用 ''@{0}'' 註解的欄位應當為 {1}
jvm.inspections.junit.rule.type.problem.descriptor=欄位類型應當為 'org.junit.rules.TestRule' 的子類型

jvm.inspections.testonly.display.name=生產程式碼中的純測試用法
jvm.inspections.testonly.class.reference=在生產程式碼中引用純測試類
jvm.inspections.testonly.field.reference=在生產程式碼中引用純測試欄位
jvm.inspections.testonly.method.call=在生產程式碼中調用純測試方法
jvm.inspections.testonly.visiblefortesting=@VisibleForTesting 對 @TestOnly 程式碼意義不大

jvm.inspections.string.touppercase.tolowercase.without.locale.description=在未使用國際化字串指定區域設定的情況下調用 <code>String.{0}()</code> #loc
can.t.build.uast.tree.for.file=無法為檔案建置 UAST 樹
title.uast=UAST
current.version=當前版本:
dialog.title.choose.annotation=選擇 {0}
jvm.inspection.test.failed.line.display.name=測試中失敗的行
jvm.inspections.source.to.sink.flow.display.name=不安全字串被傳遞至安全方法
jvm.inspections.junit5.assertions.converter.display.name=JUnit 5 測試中的已廢棄斷言
jvm.inspections.junit5.assertions.converter.problem.descriptor=對來自 ''{0}'' 的 <code>#ref()</code> 的調用應取代為對來自 ''{1}'' 的方法的調用 #loc
jvm.inspections.junit5.assertions.converter.quickfix=取代為 ''{0}'' 方法調用
jvm.inspections.junit5.assertions.converter.familyName=取代為 JUnit 5 相容調用
jvm.inspections.junit5.converter.display.name=JUnit 4 測試可以為 JUnit 5
jvm.inspections.junit5.converter.problem.descriptor=#ref 可以為 JUnit 5 測試
jvm.inspections.junit5.converter.quickfix=遷移到 JUnit 5
jvm.inspections.junit5.converter.quickfix.presentation.text=轉換斷言
jvm.inspections.junit5.converter.quickfix.conflict.inheritor=由於存在不相容的繼承者，類 {0} 無法轉換為 JUnit 5: {1}
jvm.inspections.thread.run.display.name=調用 'Thread.run()'
jvm.inspections.serializable.class.without.serialversionuid.display.name=不帶 'serialVersionUID' 的可序列化類
jvm.inspections.serializable.class.without.serialversionuid.problem.descriptor=<code>#ref</code> 未定義 'serialVersionUID' 欄位 #loc
jvm.inspections.source.to.sink.flow.passed.unsafe=不安全的字串傳遞給安全的方法
jvm.inspections.source.to.sink.flow.passed.unknown=未知字串被傳遞給安全方法
jvm.inspections.source.to.sink.flow.returned.unsafe=不安全字串返回自安全方法
jvm.inspections.source.to.sink.flow.returned.unknown=未知字串返回自安全方法
jvm.inspections.source.unsafe.to.sink.flow.mark.as.safe.family=標記為需要驗證
jvm.inspections.source.unsafe.to.sink.flow.mark.as.safe.text=將 ''{0}'' 標記為需要驗證
jvm.inspections.blocking.method.consider.unknown.context.blocking=考慮未知上下文阻塞
jvm.inspections.blocking.method.problem.wildcard.descriptor=在{0}中使用阻塞調用可能會導致執行緒匱乏