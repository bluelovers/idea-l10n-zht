inspection.javafx.color.component.out.of.range.problem=顏色分量必須是介於 0.0 和 1.0 (包含)之間的數值
inspection.javafx.default.tag.could.be.removed=可以移除預設屬性標記
inspection.javafx.default.tag.unwrap.tag.fix.family.name=解開標記
inspection.javafx.default.tag.unwrap.tag.fix.name=解開 ''{0}''
inspection.javafx.event.handler.ambiguous.problem=事件處理程序名稱不明確: 找到多個符合的方法
inspection.javafx.event.handler.change.parameter.type=更改事件處理程序方法的參數類型
inspection.javafx.event.handler.create.options.panel=檢測具有非 void 返回類型的事件處理程序方法
inspection.javafx.event.handler.incompatible.generic.parameter.problem=事件處理程序實參的泛型參數不相容: {0} 無法從 {1} 分配
inspection.javafx.event.handler.incompatible.handler.argument=事件處理程序實參不相容: {0} 無法從 {1} 分配
inspection.javafx.event.handler.return.type.problem=事件處理程序的返回類型應為 void
inspection.javafx.redundant.property.values.problem=特性冗餘，因為它包含預設值
inspection.javafx.redundant.property.values.redundant.tag.problem=標記冗餘，因為它包含預設值
inspection.javafx.unresolved.fx.id.reference.problem=未解析的 fx:id 引用
inspection.javafx.unused.imports.problem=未使用的 import

javafx.annotator.duplicate.child.added=添加了重複子項
javafx.annotator.page.language.not.specified=未指定頁面語言。
javafx.annotator.property.is.read.only=屬性 ''{0}'' 為唯讀
javafx.annotator.should.be.public=應為 public
javafx.annotator.should.be.public.or.fxml.annotated=應為 public 或用 @FXML 註解
javafx.annotator.value.not.found=找不到 {0}

javafx.app.dialog.linux.icon=Linux 圖標(&L)
javafx.app.dialog.mac.icon=Mac 圖標(&M)
javafx.app.dialog.windows.icon=Windows 圖標(&W)

javafx.application.icons.choose.icons=選擇套用程序圖標
javafx.application.icons.file.should.be.inside.project.content={0} 圖標檔案應位於專案內容內
javafx.application.icons.icon.file.should.exist={0} 圖標檔案應存在
javafx.application.icons.select.icon.file.description=選擇生成的應用程式的圖標檔案(*.{0})
javafx.application.icons.select.icon.file.title=選擇圖標檔案

javafx.artifact.properties.editor.application.class=應用程式類(&P):
javafx.artifact.properties.editor.application.icon=套用程序圖標
javafx.artifact.properties.editor.application.parameters=套用程序參數(&R):
javafx.artifact.properties.editor.build.output.level=建置輸出級別:
javafx.artifact.properties.editor.choose.file.run.in.browser.description=要在瀏覽器中執行的所生成套用程序的參數。
javafx.artifact.properties.editor.choose.file.run.in.browser.title=選擇屬性檔案
javafx.artifact.properties.editor.choose.file.standalone.description=要獨立執行的所生成套用程序的參數。
javafx.artifact.properties.editor.choose.file.standalone.title=選擇屬性檔案
javafx.artifact.properties.editor.choose.html.file.description=在瀏覽器中執行的應用程式入口點的 HTML 模板
javafx.artifact.properties.editor.choose.html.file.title=選擇 HTML 檔案
javafx.artifact.properties.editor.convert.css.to.bin.option=將 css 轉換為 bin
javafx.artifact.properties.editor.custom.manifest.attributes=自訂清單特性
javafx.artifact.properties.editor.description=描述(&D):
javafx.artifact.properties.editor.edit.attributes.button=編輯特性(&A)
javafx.artifact.properties.editor.edit.certificates.button=編輯憑證(&C)
javafx.artifact.properties.editor.edit.custom.manifest.attributes=編輯自定義清單特性
javafx.artifact.properties.editor.edit.icons.button=編輯圖標(&N)
javafx.artifact.properties.editor.height=高度(&H):
javafx.artifact.properties.editor.html.parameters=HTML 參數(&L):
javafx.artifact.properties.editor.html.placeholder.id=HTML 佔位符 ID(&O):
javafx.artifact.properties.editor.html.template=HTML 模板(&M):
javafx.artifact.properties.editor.native.bundle=原生捆綁包(&I):
javafx.artifact.properties.editor.signing.option=啟用簽名(&S)
javafx.artifact.properties.editor.title=標題(&T):
javafx.artifact.properties.editor.update.in.background.option=在背景更新(&B)
javafx.artifact.properties.editor.vendor=供應商(&V):
javafx.artifact.properties.editor.version=版本(&E):
javafx.artifact.properties.editor.width=寬度(&W):

javafx.certificates.dialog.alias.should.be.non.empty.error=別名應非空
javafx.certificates.dialog.choose.certificate.title=選擇憑證
javafx.certificates.dialog.keystore.file.should.exist.error=密鑰存儲檔案應存在
javafx.certificates.dialog.passwords.should.be.set.error=應設定密碼
javafx.certificates.dialog.path.to.keystore.file.error=應設定密鑰存儲檔案的路徑
javafx.certificates.dialog.select.file.with.generated.keys=選擇包含生成的密鑰的檔案

javafx.collapse.subtag.to.attribute.intention=將標記 ''{0}'' 摺疊到特性
javafx.collapse.subtag.to.attribute.intention.family.name=將標記摺疊到特性
javafx.create.new.fxml.file.description=創建新的 FXML 檔案
javafx.create.new.fxml.file.title=FXML 檔案
javafx.edit.certificates.dialog.alias=別名(&A):
javafx.edit.certificates.dialog.keypass=Keypass(&E):
javafx.edit.certificates.dialog.keystore=Keystore(&Y):
javafx.edit.certificates.dialog.self.signed.radio=自簽名(&S)
javafx.edit.certificates.dialog.signed.by.key.radio=通過密鑰簽名(&K)
javafx.edit.certificates.dialog.signed.storepass=Storepass(&P):
javafx.entry.point.javafx.app=JavaFX 套用程序
javafx.expand.attribute.to.tag.intention=將 ''{0}'' 展開到標記
javafx.expand.attribute.to.tag.intention.family.name=將特性展開到標記
javafx.failed.to.start.scene.builder.error=無法啟動 SceneBuilder: {0}
javafx.field.to.property.intention.search.for.usages=正在搜尋 ''{0}'' 的用法
javafx.inject.page.language.intention.family.name=指定頁面語言
javafx.preloader.artifact.properties.editor.preloader.class=預載入程序類(&P):
javafx.project.sdk.setup.validator.runtime.not.configured.error=未設定 JavaFX 執行時。使用內建 JavaFX 的 JDK，或者將 JavaFX 庫添加到類路徑
javafx.property.rename.handler.error.message=無法重命名內建屬性
javafx.property.rename.handler.error.title=無法重命名
javafx.refactoring.property.element.type.name=屬性
javafx.root.tag.descriptor.cannot.resolve.class=無法解析類 {0}

javafx.scene.builder.editor.download.scene.builder.kit=下載 Scene Builder Kit
javafx.scene.builder.editor.download.javafx=下載 JavaFX
javafx.scene.builder.editor.failed.to.download.kit.error=下載 Scene Builder Kit 失敗
javafx.scene.builder.editor.failed.to.open.file.error=無法開啟 Scene Builder 中的檔案。
javafx.scene.builder.editor.scene.builder.edit.operation=JavaFX Scene Builder 編輯操作

javafx.settings.configurable.path.to.scenebuilder=SceneBuilder 的路徑(&P):
javafx.settings.configurable.scene.builder.configuration.description=選擇 SceneBuilder 可執行檔案的路徑
javafx.settings.configurable.scene.builder.configuration.title=SceneBuilder 設定

javafx.wrap.id.with.fx.define.intention=使用 fx:define 包裝“{0}”
javafx.wrap.with.fx.define.intention.family.name=使用 fx:define 包裝
inspection.java.fx.event.handler.display.name=事件處理程序方法簽名問題
inspection.java.fx.color.rgb.display.name=顏色分量超出範圍
inspection.java.fx.redundant.property.value.display.name=JavaFX 冗餘屬性值
inspection.java.fx.unused.imports.display.name=JavaFX 未使用的 import
inspection.java.fx.unresolved.fx.id.reference.display.name=未解析的 fx:id 特性引用
inspection.java.fx.default.tag.display.name=不必要的預設標記
action.OpenInSceneBuilder.text=在 SceneBuilder 中開啟
javafx.application.title=JavaFx 套用程序
javafx.preloader.title=JavaFx 預載入程序
intention.family.name.convert.to.javafx.property=轉換為 JavaFX 屬性
command.name.convert.to.javafx.property=將 ''{0}'' 轉換為 JavaFX 屬性
popup.title.choose.component.with.fx.id=<html>選擇具有 fx:id <b>{0}<b> 的組件 </html>
intention.name.change.parameter.type.to=將 ''{0}'' 的參數類型更改為 {1}
conversion.between.unrelated.types.error=不相關類型之間的轉換，{0} 轉換為 {1}
unable.to.coerce.error=無法將 {0} 強制轉換為 {1}
inspection.message.copy.constructor.not.found=找不到 ''{0}'' 的複製構造函數
inspection.message.fx.controller.can.only.be.applied.to.root.element='fx:controller' 只能用於根元素
unable.to.instantiate=無法實例化
spaces.not.allowed.before.property.or.expression=屬性或表達式前面不允許使用空格
invalid.value.unable.to.coerce=無效值: 無法強制轉換為 {0}
no.controller.specified.for.top.level.element=沒有為頂層元素指定控制器
incorrect.expression.syntax=錯誤的表達式語法
unable.to.coerce=無法強制轉換為 {0}
invalid.enumerated.value=無效的枚舉值
inspection.message.fx.root.valid.only.as.root.node.fxml.document='<fx:root>' 只能作為 FXML 文檔的根節點
label.selected.module.output.would.to.be.included.in.artifact=所選模組輸出將被包含在工件中
dialog.title.select.module.for.artifact=選擇模組
action.from.module.artifact.text=從模組…
action.from.modules.artifact.text=從模組 ''{0}''
dialog.title.choose.preloader.class=選擇預載入程序類
dialog.title.choose.application.class=選擇應用程式類
column.name.artifact.manifest.property.name=名稱
column.name.artifact.manifest.property.value=值
java.fx.artifacts.tab.name=JavaFX
javafx.preloader.tab.name=JavaFX 預載入程序
scene.builder.editor.tab.name=Scene Builder
constant.not.found=找不到常數 ''{0}''
cannot.class.name.to.field.name=無法將 {0} 設定為欄位 ''{1}''
enum.constant.not.found={1} 中沒有枚舉常數 ''{0}''
group.name.javafx=JavaFX
inspection.java.fx.resource.property.value.display.name=屬性檔案中的值與特性類型不相容
java.version.7.or.higher.is.required.to.build.javafx.package=需要 Java 版本 7 或更高版本才能建置 JavaFX 軟體套件
javafx.migration.description=根據 JEP 253 修正 JavaFX API 類的 import。注意，有一些類不再是 public 類。
javafx.module.builder.description=包含 <b>JavaFX</b> 工具包的桌面套用程序。
library.controlsfx.description=用於補充核心 JavaFX 分發版的優質 UI 控件和其他工具。
library.formsfx.description=幫助開發者輕鬆創建表單，並在預設情況下創建設計精良、使用者友好的表單。
library.validatorfx.description=力求克服其缺點且受 ControlsFX 啟發的 JavaFX 驗證庫。
library.ikonli.description=可以在 Java 應用程式中使用的圖標包。
library.bootstrapfx.description=提供與 Twitter Bootstrap 高度相似，同時為 JavaFX 獨特的 CSS 風格量身訂製的 CSS 樣式表。
library.tilesfx.description=包含儀表板磁貼的 JavaFX 庫。
javafx.create.new.application.title=JavaFX 套用程序
javafx.create.new.application.description=創建 JavaFX 應用程式類
needs.at.least.jdk.14.containing.the.jpackage.tool=至少需要包含 jpackage 工具的 JDK 14
platform.specific.package=平台特定的軟體套件
label.description=描述
label.vendor=供應商
label.copyright=版權
label.version=版本
label.main.class=主類
show.verbose.output.when.building.the.platform.specific.package=建置平台特定的軟體套件時顯示詳細輸出
packaging.artifact.tab.name=打包
library.fxgl.description=JavaFX 遊戲開發框架。
javafx.module.additional.libraries=其他庫: