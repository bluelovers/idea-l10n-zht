coverage.cleaning.directory=正在清理覆蓋率輸出目錄…
coverage.processing.progress=正在處理覆蓋率資料…
coverage.reading.output.data=正在解析覆蓋率資料…
coverage.processing.failed=無法處理覆蓋率資料:\n{0}
coverage.download.progress=正在下載覆蓋率資料…
coverage.tool.not.found=找不到 {0} 工具
coverage.tool.version.mismatch={0}的版本({1})與編譯器的版本({2})不符合:\n這可能會導致覆蓋率結果不完整或為空
coverage.not.available=程式碼覆蓋率不適用於給定的執行設定
coverage.message.with.configure={0}\n<a href="">設定</a>
coverage.not.found=找不到程式碼覆蓋率資料\n確保使用所需的編譯器選項編譯目標套用程序
coverage.not.found.auto.fix=找不到程式碼覆蓋率資料\n確保使用所需的編譯器選項編譯目標套用程序\n要自動添加嗎?\n<a href="">修正並重新執行</a>
coverage.auto.fix.failed=無法添加所需編譯器選項
coverage.auto.fix.manual.execution=所需編譯器選項已添加\n請手動重新執行程式碼覆蓋率
coverage.process.execution.failed=覆蓋率資料可能不完整:\n行程以非零退出程式碼完成
coverage.profile.name.suffix=覆蓋率
llvm.name=LLVM
llvm.tools.missing=找不到 LLVM 覆蓋率工具
llvm.profdata.merge.failed=llvm-profdata 合併工具因錯誤而失敗:\n{0}
llvm.cov.export.failed=llvm-cov 匯出工具因錯誤而失敗:\n{0}
gcov.llvm.name=gcov/llvm
gcov.name=gcov/llvm-cov
gcov.tools.missing=找不到 gcov/llvm-cov 覆蓋率工具
gcov.tools.failed=無法生成覆蓋率資料\n{0}
tool.executable.path={0} 可執行檔案路徑
specify.tool.path.placeholder=指定可執行檔案路徑，或將其留空以讓 CLion 自動檢測
gcov.binary.row.title=gcov:
llvm.cov.binary.row.title=llvm-cov:
llvm.profdata.binary.row.title=llvm-profdata:
show.branch.coverage.checkbox=顯示分支覆蓋率
show.branch.coverage.hint=支援 GCC/LLVM (12.0.0 或更高版本)
branch.coverage.table.column.name=分支覆蓋率(%)
line.coverage.table.column.name=行覆蓋率(%)
coverage.view.branches.covered=覆蓋 {0}% 的分支
coverage.not.found.ctest.fix=對於 CTest 執行，<a href="">切換到 --coverage 編譯器標誌</a>