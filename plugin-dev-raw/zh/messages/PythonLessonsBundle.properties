#Need to translate in pair with action.EditorToggleCase.text key!
toggle.case.part=大小寫

python.onboarding.module.name=入門導覽
python.onboarding.module.description={0} 中的主要功能概覽。

python.onboarding.lesson.name=熟悉 PyCharm
python.onboarding.project.view.description=<strong>專案檢視</strong>是主要工具視窗之一。它包含專案目錄、SDK 特定的外部庫和臨時檔案。點擊帶條紋的按鈕可以預覽示範專案。您也可以按 {0} 開啟。
python.onboarding.balloon.project.view=點擊以開啟<strong>專案檢視</strong>
python.onboarding.balloon.project.directory=展開專案目錄以查看專案檔案
python.onboarding.balloon.open.file=雙擊以開啟 {0}
python.onboarding.balloon.open.learn.toolbar=切換到“{0}”工具視窗繼續學習本課
python.onboarding.context.menu=您已經開啟了示範，現在來執行該示範。右鍵點擊編輯器以調用右鍵選單。
python.onboarding.run.sample=選擇 {0} 或嘗試 {1}。
python.onboarding.temporary.configuration.description=<ide/> 剛剛創建了一個臨時執行設定。您可以在“執行”工具欄中找到此設定。使用此工具欄，您可以為所選設定執行常用的執行操作，例如執行 {0}、偵錯 {1}、分析程式碼 {2} 以及執行程式碼覆蓋率 {3}。
python.onboarding.balloon.click.here=點擊此處設定中斷點
python.onboarding.toggle.breakpoint.1=您可能會注意到 {1} 方法沒有返回預期值 {0}，而是返回 {2}。我們來查看 return 語句，偵錯有問題的程式碼。
python.onboarding.toggle.breakpoint.2=點擊高亮顯示區域內的間距以設定中斷點。
python.onboarding.balloon.start.debugging=點擊該圖標以開始偵錯
python.onboarding.start.debugging=點擊 {0} 圖標啟動偵錯過程。
python.onboarding.balloon.about.debug.panel={0} 工具視窗為{1,choice,0#工具欄|1#工具欄}提供了各種偵錯操作。您可以稍後在 {2} 課程中進行嘗試。
python.onboarding.balloon.stop.debugging=點擊該圖標以停止偵錯
python.onboarding.stop.debugging=停止偵錯。點擊 {0} 圖標。
python.onboarding.type.division=發現程式碼中的問題後，我們來進行修正。將得到的和除以值的長度。課程腳本已插入 {0}。
python.onboarding.invoke.completion=接下來，我們開始在括號 {1} 內輸入 {0}。<ide/> 會在您輸入時自動顯示補全選項。或者，您也可以按 {2} 並繼續輸入以縮短列表。
python.onboarding.choose.values.item=選擇 {0} 並按 {1}。
python.onboarding.invoke.intention.for.warning.1=您剛剛修正了一個錯誤，但還可以進一步改進這段程式碼。PyCharm 將高亮顯示可以改進的程式碼行，並為這些行添加黃色燈泡。
python.onboarding.invoke.intention.for.warning.2=按 {0} 預覽警告並套用快速修復。
python.onboarding.select.fix=套用第一個條目: {0}。執行此修正後，程式碼會看起來很整潔。
python.onboarding.invoke.intention.for.code=意圖也可以節省您的時間，讓編碼更輕鬆。我們來使用意圖快速添加 {0} 的返回類型。按 {1}。
python.onboarding.apply.intention=選擇 {0} 並按 {1}。
python.onboarding.complete.template=鍵入 {0}，然後按 {1}。
python.onboarding.invoke.search.everywhere.1=在 <ide/> 中進行處理時，您可能想要搜尋專案中的檔案、符號、類，乃至 IDE 操作。在本課中，我們將搜尋 {0} 操作，以將 {1} 字串改為小寫。
python.onboarding.invoke.search.everywhere.2=按兩次 {0} 以開啟“{1}”對話框。
python.onboarding.search.everywhere.description=可以看到，所選文本 {0} 已被自動複製到輸入字串中。我們不鍵入 {0}，而是鍵入 {1}。
python.onboarding.apply.action=選擇“{0}”操作，然後按 {1}。
python.onboarding.case.changed=大小寫已更改。
python.onboarding.epilog=恭喜! 您已完成入門導覽。此時，您可以:\n\
  - <callback id="{0}">關閉</callback>學習專案{1}\n\
  - <callback id="{2}">顯示</callback>更多教程

python.onboarding.finish.title=恭喜
python.onboarding.finish.text=您剛剛完成了 PyCharm 入門導覽。\n\
現在可以關閉學習專案{0}。\n\
您也可以繼續學習，嘗試其他課程。
python.onboarding.finish.exit=關閉示範專案
python.onboarding.finish.modules=顯示更多課目

python.3.required.warning.message=要完成本課，請根據 Python 3 <callback id="{0}">設定解釋器</callback>。

python.f.string.completion.lesson.name=F-string 補全
python.f.string.completion.type.prefix=<ide/> 支援 f-string 自動轉換。只需開始鍵入 {0}。
python.f.string.completion.invoke.manually=您可以使用 {0} 手動調用補全。
python.f.string.completion.complete.it=用 {0} 補全語句。只需按 {1} 即可套用第一個條目。
python.f.string.completion.result.message=您可能會看到，在補全後，簡單的 Python 字串已取代為 f-string。

python.postfix.completion.type=在圓括號後面鍵入 {0}，以查看建議列表。
python.postfix.completion.complete=從列表中選擇 {0}，然後按 {1} 補全語句。

python.smart.completion.try.basic.completion=按 {0} 嘗試使用基本補全。
python.smart.completion.use.smart.completion=很遺憾，<ide/> 沒有直接關於 {0} 類型的資訊。但有時它可以通過上下文提供補全建議! 使用 {1} 調用智能補全。
python.smart.completion.finish.completion=現在選擇 {0} 條目即可完成本課。

python.tab.completion.lesson.name=頁籤補全
python.tab.completion.start.completion=假設您要將 {0} 取代為 {1}。按 {2} 調用補全。
python.tab.completion.select.item=使用鍵盤箭頭選擇 {0} 條目或者開始鍵入。
python.tab.completion.use.tab.completion=如果按 {0}，將在 {2} 前面插入 {1}。改為按 {3} 將 {2} 取代為 {1}。

python.in.place.refactoring.lesson.name=就地重構
python.in.place.refactoring.start.type.new.name=考慮一種執行重構的替代方法。假設我們想將局部變數 {0} 重命名為 {1}。您只需開始鍵入新名稱。
python.in.place.refactoring.invoke.intentions=<ide/> 猜測您將要重命名此變數。從間距中的 {0} 圖標可以看到它。鍵入新名稱後，通過 {1} 調用意圖。
python.in.place.refactoring.finish.rename=按 {0} 結束重命名。
python.in.place.refactoring.add.parameter=為該方法添加一個實參。我們將編輯器文字游標放在第一個參數後面。現在輸入逗號和參數名稱: {0}。
python.in.place.refactoring.invoke.intention.for.parameter=<ide/> 預計您將更改此方法的簽名。在間距中可以看到相同的圖標 {0}。鍵入新參數的名稱後，按 {1} 調用意圖。
python.in.place.refactoring.update.callers=按 {0} 更新調用方。
python.in.place.refactoring.signature.preview=<ide/> 向您顯示簡短的簽名預覽。按 {0} 繼續。
python.in.place.refactoring.set.default.value=現在需要鍵入作為參數插入到每個調用的值。對於此例，您可以選擇 {0}。然後按 {1} 繼續。
python.in.place.refactoring.remark.about.application.scope=注意: 就地重構只能在定義點套用，而直接調用重命名或變更-簽名重構可以從定義和用法中調用。

python.quick.fix.refactoring.lesson.name=快速修復重構
python.quick.fix.refactoring.type.new.argument=有些重構可以作為快速修復來執行。假設我們要向方法 {0} 添加一個參數並將變數 {1} 傳遞給它。在第一個參數後面鍵入 {2}。
python.quick.fix.refactoring.close.completion.list=我們暫時不想套用任何補全。關閉列表 ({0})。
python.quick.fix.refactoring.invoke.intentions=您可能會注意到，<ide/> 在此處顯示警告。按 {0} 調用意圖。
python.quick.fix.refactoring.choose.change.signature=選擇 {0} 快速修復。
python.quick.fix.refactoring.select.new.parameter=為新參數設定預設值。點擊新參數行。您也可以先按 {0} 後按 {1}，將焦點切換到該參數。
python.quick.fix.refactoring.set.default.value=您可以使用 {0} 導航欄位和複選框。在選中該複選框的情況下，<ide/> 會將預設值內聯到其他調用方，或將其設定為新參數的預設值。簽名預覽有助於您了解區別。現在，將預設值設定為 0。
python.quick.fix.refactoring.finish.refactoring=按 {0} (或點擊 {1}) 以補全重構。

python.rename.press.rename=按 {0} 並重命名 {1} 欄位 (例如重命名為 {2})。
python.rename.expand.dynamic.references=在簡單的情況下，{0} 未經確認就執行重命名重構。但在此例中，<ide/> 檢測到類型未知的物件兩次調用 {0} 方法。展開 {1} 條目。
python.rename.find.window.closed.warning=按 {0} 再次開啟尋找工具視窗。
python.rename.exclude.item=似乎應從重命名重構中排除 {0}。將其選定，然後按 {1}。
python.rename.finish.refactoring=使用 {0} 按鈕完成重命名重構。

python.editor.coding.assistance.fix.error=我們來修正此錯誤。按 {0} 並選擇 {1} 或 {2} <strong>→ math</strong>
python.editor.coding.assistance.press.to.fix=按 {0} 移除意外參數。

python.run.configuration.lets.run=我們來用 {0} 執行一個簡單範例。

python.debug.workflow.rerun=重新執行程序。只需再次點擊 {0} 或使用 {1}。

python.onboarding.interpreter.description=PyCharm 已經為本課程設定了一個 Python 解釋器。您可以對它進行修改或為您的專案創建另一個解釋器。最簡單的方式是使用狀態欄中的 Python 解釋器選擇器。
choose.python.sdk.to.start.learning.header=需要 Python 解釋器
python.onboarding.change.ui.settings=在本課中，PyCharm 會將某些 UI 設定更改為預設狀態。完成或退出課目後，將恢復您的偏好設定。
python.onboarding.indexing.description=第一次開啟專案時，<ide/> 會掃描 Python SDK 和專案本身，以收集編碼輔助所需的詳細資訊。要繼續，請等待索引完成。
python.f.string.completion.help.link=F-string 補全
python.smart.completion.help.link=類型符合補全
python.in.place.refactoring.help.rename.link=就地重命名程式碼
python.in.place.refactoring.help.signature.link=就地更改簽名
python.quick.fix.refactoring.help.link=更改簽名
python.run.configuration.help.link=程式碼執行輔助
python.debug.workflow.help.link=第 1 部分. 偵錯 Python 程式碼
python.onboarding.feedback.system.found.interpreters=找到的解釋器:
python.onboarding.feedback.system.no.interpreters=無
python.onboarding.feedback.system.used.interpreter=使用的解釋器:
python.onboarding.interpreter.tip=<strong>提示：</strong>您可以在此了解您的 Python 解釋器設定
python.onboarding.feedback.system.start.interpreter=啟動解釋器：
no.interpreter.in.learning.project=無法設定解釋器，請嘗試<callback id="{0}">手動</callback>設定。
no.interpreter.in.user.project=找不到 Python解釋器，請<callback id="{0}">開啟</callback>示範 Python 專案以自動設定解釋器，或者點擊<callback id="{1}">這裡</callback>手動設定。