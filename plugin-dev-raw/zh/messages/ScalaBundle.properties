1.occurrence=(1 個匹配項)
abstract.member.not.have.private.modifier=abstract 成員可能沒有 private 修飾符
abstract.modifier.is.not.allowed=''abstract'' 修飾符僅允許用於類別或包含 ''override'' 修飾符的定義
abstract.modifier.redundant.fot.traits=''abstract'' 修飾符對於特徵是冗餘的
abstract.override.modifier.is.not.allowed=''abstract override'' 修飾符僅允許用於特徵的成員
access.modifier.is.not.allowed.here=此處不允許使用 ''{0}'' 修飾符
action.implement.method=實作方法
action.import.member=匯入成員
action.override.method=覆寫方法
add.braces.around.single.line.expression=在單行表達式周圍新增大括號
add.collection.breakout.argument=新增 `collection.breakOut` 實參
add.import.action=新增匯入動作
add.modifier.fix.without.name=新增 ''{0}'' 修飾符
add.override.modifier=插入 "override"(&O)
add.return.type=新增返回值類型
add.to.definition=新增到定義
additional.compiler.options=其他編譯器選項(&O):
additional.support.has.been.found.popup=<p>已為您的某些庫找到了其他支援。</p><p>是否要啟用該支援? <a href="Yes">是</a> / <a href="No">否</a></p>
align.list.items.content=對齊列表項內容
ambiguous.artifact.resolved=解析了模糊的工件: {0}
annotation.ascriptions.in.pattern.definitions.require.scala3=模式定義中的註解歸屬需要使用 Scala 3.0
annotation.or.type.expected=應為註解或類型
annotator.error.annotation.type.expected=應為註解類型
annotator.error.bean.property.should.not.be.private=Bean 屬性不應為私有
annotator.error.cannot.apply.constructor=無法套用建構函式 {0}
annotator.error.cannot.find.constructor.for.this.call=找不到此呼叫的建構函式
annotator.error.cannot.resolve.overloaded.constructor=無法解析多載的建構函式 `{0}`
annotator.error.cannot.resolve.overloaded.method=無法解析多載方法
annotator.error.class.type.required.but.found=需要類別類型，但找到的是({0})
annotator.error.constructor.has.malformed.definition=建構函式的定義格式錯誤
annotator.error.enum.case.must.extend.parent=枚舉 case 必須擴展其枚舉類別 {0}
annotator.error.enum.nonvariant.type.param,in.enum=無法確定枚舉類別父級 {0} 的類型實參，類型參數 {1} 不變
annotator.error.enum.two.type.parameter.clauses=需要顯式 extends 子句，因為枚舉 case 和枚舉類別都有類型參數
annotator.error.expansion.for.non.repeated.parameter=非重複參數擴展
annotator.error.missing.argument.list.for.constructor=建構函式 {0} 缺少實參列表
annotator.error.missing.arguments.for.method=方法 {0} 缺少實參
annotator.error.missing.parameter.type=缺少參數類型
annotator.error.missing.type.annotation.for.parameter=參數缺少類型註解: {0}
annotator.error.name.has.malformed.definition=''{0}'' 的定義格式錯誤
annotator.error.no.constructor.accessible=從此處無法存取建構函式
annotator.error.parameter.specified.multiple.times=多次指定了參數
annotator.error.parameter.without.an.owner.name=沒有所有者的參數: {0}
annotator.error.positional.after.named.argument=位於命名實參後
annotator.error.reassignment.to.val=重新賦值給 val
annotator.error.repeated.or.default=帶 *-參數的參數部分不允許有預設實參
annotator.error.repeated.parameter.must.be.last=*-參數必須位於最後
annotator.error.target.does.not.take.parameters={0} 不接受參數
annotator.error.too.many.arguments=實參過多
annotator.error.too.many.arguments.for.constructor=建構函式 {0} 的實參過多
annotator.error.too.many.arguments.method=方法 {0} 的實參過多
annotator.error.too.many.parameters=參數過多
annotator.error.trait.has.no.constructor={0} 是特徵；不接受建構函式實參
annotator.error.unspecified.value.parameters=未指定的值參數: {0}
annotator.error.wrong.right.assignment.side=賦值右側錯誤
assign.expected=應為 ''=''
assignment.missing.right.side=右側缺少賦值
auto.import.add.unambiguous.imports.on.the.fly.for=動態新增明確的 import:
auto.import.find.more.configuration.options=在<a>程式碼樣式</a>中尋找更多組態選項
auto.import.optimize.imports.on.the.fly=動態最佳化 import
auto.import.show.import.popup.for=為下列物件顯示 import 彈出視窗:
auto.import.show.popup.classes=類別
auto.import.show.popup.conversions=隱式轉換
auto.import.show.popup.extension.methods=擴展方法
auto.import.show.popup.implicits=隱式定義
auto.import.show.popup.methods=static 成員
auxiliary.constructor.definition.expected=應為輔助建構函式定義
auxiliary.constructor.may.not.have.a.type.annotation=輔助建構函式不能有類型註解
bad.interpolated.string.injection=插值字串注入錯誤
balance.header=平衡標頭
base.package.help=<html>如果基礎軟體套件為 <code>org.example.application</code>，軟體套件 <code>org.example.application.NAME</code> 應定義為<br><code>package org.example.application</code><br><code>package NAME</code></html>
better.monadic.for.invalid.pattern=實參必須有顯式類型註解
blank.lines.panel.around.class.in.inner.scopes=內部作用域中的類別周圍
blank.lines.panel.around.field.in.inner.scopes=內部作用域中的欄位周圍
blank.lines.panel.around.method.in.inner.scopes=內部作用域中的方法周圍
bold.surrounder.template.description=粗體: '''' ''''
both.stub.and.name.identifier.node.are.null={0} 的存根和名稱關鍵字節點均為 null \n{1}
brew.packages=Brew 軟體套件
bundled.distribution.info.name=已捆綁
by.name.parameters.cannot.be.used=此方法有 Java 覆寫器，無法使用值類別的傳名參數。
bytecode.indices.target.for.comprehension.method=for-comprehension 方法
bytecode.indices.target.implicit.definition=隱式定義
bytecode.indices.target.sam.type=SAM 類型
bytecode.indices.target.unapply.method=apply/unapply 方法
call.is.recursive=遞迴呼叫
called.constructor.definition.must.precede=被呼叫的建構函式的定義必須在呼叫建構函式的定義前面
can.not.override.final={0} ''{1}'' 無法覆寫 final 成員
can.t.find.implicit.argument.for.this.definition=找不到此定義的隱式實參
can.t.infer.proper.types.for.type.parameters=無法推斷類型參數的正確類型
can.t.resolve.type=無法解析類型
cannot.be.a.top.level.definition.in.scala.2=不能是 Scala 2 中的頂層定義
cannot.create.expression=無法建立表達式
cannot.create.field.from.this.expression=無法根據此表達式建立欄位
cannot.define.expected.type=無法定義預期類型
cannot.desugarize.typename=無法對 {0} 脫糖
cannot.determine.expected.type=無法確定預期類型
cannot.extract.empty.message=重構選擇錯誤。應為完整表達式或語句的數量。
cannot.extract.self.invocation=無法提取自我呼叫。
cannot.extract.used.function.definition=不支持重構: 選區內的函式定義在所選程式碼段之外使用
cannot.extract.used.type.definition=不支持重構: 選區內的類型定義在所選程式碼段外部使用
cannot.find.directory.for.package=找不到軟體套件的目錄: {0}
cannot.find.enclosing.container=找不到封閉的容器
cannot.find.method.of.stringcontext=找不到 StringContext 的方法 {0}
cannot.find.package.with.name=找不到具有此名稱的軟體套件: {0}
cannot.find.partialfunction.class=找不到 PartialFunction 類別
cannot.find.place.for.the.new.field=找不到新字段的位置
cannot.find.template.for.this.reference=找不到此參照的模板
cannot.find.throwable.class=找不到 Throwable 類別
cannot.handle.compatibility.for=無法處理 {0} 的兼容性
cannot.have.infix.type.directly.in.typed.pattern.try.to...=不能直接在類型化模式中使用中綴類型。嘗試使用圓括號將其括起。
cannot.infer.type=無法推斷類型
cannot.infer.type.of.super.expression=無法推斷 `super'' 表達式的類型
cannot.infer.type.without.an.expression=沒有表達式，無法推斷類型
cannot.infer.type.without.expected.type=沒有預期類型，無法推斷類型
cannot.infer.type.without.function.expected.type=沒有 scala.FunctionN 或 scala.PartialFunction 的預期類型，無法推斷類型
cannot.inline.different.files=成員在另一個檔案中宣告。不支持內聯。
cannot.inline.function.functional.parameters=不支持函式與函式參數內聯
cannot.inline.function.implicit.parameters=具有隱式參數的函式不支持內聯
cannot.inline.function.multiple.clauses=具有多個參數子句的函式不支持內聯
cannot.inline.function.varargs=具有 vararg 參數的函式不支持內聯
cannot.inline.generic.function=泛型函式不支持內聯
cannot.inline.implicit.element=隱式元素不支持內聯
cannot.inline.never.used=定義從未使用
cannot.inline.not.method.call=僅一般方法呼叫支援內聯
cannot.inline.not.simple.definition=僅簡單的 {0} 定義支援內聯
cannot.inline.notsimple.typealias=僅簡單的類型別名支援內聯
cannot.inline.read.only=無法內聯唯讀元素
cannot.inline.recursive.function=遞迴函式不支持內聯
cannot.inline.special.function=特殊函式不支持內聯
cannot.inline.stable.reference=值用於穩定的參照，不能內聯
cannot.inline.used.outside.class=成員在包含的類別外部使用。不支持內聯。
cannot.inline.value.functional.type=不支持值與函式類型內聯
cannot.refactor.arg.in.self.invocation.of.constructor=建構函式主體中的自呼叫實參不支持重構
cannot.refactor.class.parameter.top.level=頂層類別的參數不支持重構
cannot.refactor.constr.expression=所選塊不應顯示為建構函式表達式
cannot.refactor.interpolated.string.prefix=插值字串前綴不支持重構
cannot.refactor.literal.pattern=文字模式不支持重構
cannot.refactor.named.arg=命名實參不支持重構
cannot.refactor.no.function=找不到用於引入參數的函式
cannot.refactor.not.expression=所選字串無法提取為表達式
cannot.refactor.not.expression.nor.type=應選擇表達式或類型元素
cannot.refactor.not.valid.type=應選擇類型元素
cannot.refactor.scope.not.found=找不到適合的類別或軟體套件
cannot.refactor.self.invocation=輔助建構函式中的建構函式呼叫不支持重構
cannot.refactor.under.generic.call=泛型呼叫中不支持重構
cannot.resolve=無法解析符號 {0}
cannot.resolve.apply.method=無法解析方法 {0}.apply
cannot.resolve.expression=無法解析表達式
cannot.resolve.in.StringContext=值 ''{0}'' 不是 StringContext 的成員
cannot.resolve.overloaded=無法解析多載方法 ''{0}''
cannot.resolve.parent.class=無法解析父類別
cannot.resolve.ref=無法解析參照{0}
cannot.resolve.reference=無法解析參照
cannot.resolve.unapply.method=無法解析方法 {0}.unapply
cannot.resolve.unknown.symbol=無法解析符號
cannot.shape.resolve.self.invocation=無法解析自我呼叫
cannot.upcast.type.to.other.type=無法將 {0} 向上轉換為 {1}
case.class.has.no.primary.constructor=case 類別沒有主建構函式
case.classes.without.parameter.list.deprecated=已棄用沒有參數列表的 case 類別
case.classes.without.parameter.list.not.allowed=不允許使用沒有參數列表的 case 類別
case.clause=case 子句
case.clauses.expected=應為 case 子句
change.signature.add.parameter.clause=新增參數子句
change.signature.not.supported.extractors=提取程序不支持更改簽名
change.signature.not.supported.implicit.functions=隱式函式不支持更改簽名
change.signature.not.supported.implicit.parameters=具有隱式參數的函式不支持更改簽名
change.signature.parameters.same.name.{0}=參數的名稱相同: {0}
change.signature.remove.parameter.clause=移除參數子句
change.signature.specify.type.for.parameter=指定參數 ''{0}'' 的類型
change.signature.vararg.should.be.last.in.clause=Vararg 參數應當為參數子句中的最後一個參數
change.type.to=將 ''{0}'' 類型更改為 ''{1}''
changes.in.scalatest.highlighting.will.be.processed...=只有在新醒目提示的檔案上，ScalaTest 中醒目提示的更改才會正確處理。為了獲得最佳體驗，請重啟 Intellij IDEA
channel.early.access.program=搶先體驗
channel.nightly.builds=Nightly 版本
channel.stable.releases=穩定版本
choose.class.for.introduce.field=選擇用於引入欄位的類別
choose.either.a.scala.sdk.directory.or.scala.jar.files=選擇 Scala SDK 目錄或 Scala jar 檔案(允許: 二進制、原始碼、文檔)
choose.expected=產生器語句中應有 ''<-''
choose.expression.for=選擇 {0} 的表達式
choose.function.for.refactoring=選擇 {0} 的函式
choose.level.for.extract.method=選擇提取方法的級別
choose.level.popup.title=選擇級別
choose.scope.for=選擇 {0} 的作用域
choose.type.element.for=選擇 {0} 的類型元素
class.already.exists.in.package=軟體套件 {1} 中已存在名稱為 {0} 的類別
class.has.several.subclasses=由 {0} 個子類別擴展
class.has.subclasses=由以下物件擴展
class.is.abstract.it.cannot.be.instantiated=''{0}'' 為 abstract；無法實例化
class.to.pull.up.members.to.class=要將成員向上拉取到 {0} 的類別
click.or.press.shortcut.to.change=(點擊或按 {0} 進行更改)
click.to.change=(點擊以更改)
code.block=程式碼塊
codegeneration.panel.title=程式碼生成
colon.expected=應為 '':''
column.enabled=已啟用
column.transformation=轉換
command.introduce.type.alias=引入類型別名
companion.class=類別
companion.enum=枚舉
companion.object=物件
companion.trait=特徵
compile.order=編譯順序(&O):
compile.order.java.then.scala=先 Java，後 Scala
compile.order.mixed=混合
compile.order.scala.then.java=先 Scala，後 Java
compiler.plugins=編譯器延伸模組
compound.type.expected=應為複合類型
condition.expected=應為布爾條件
configure.updates=組態更新…
constructor=建構函式
constructor.cannot.be.instantiated.to.expected.type=建構函式無法實例化為預期類型，實際為 {0}，要求 {1}
constructor.invocation.expected=輔助建構函式必須以呼叫 ''this'' 開頭
context.bounds.not.allowed=此處不允許上下文邊界
contravariant.type.covariant.position.of.method=逆變類型 {0} 出現在方法 {2} 的類型 {1} 中的協變位置
contravariant.type.covariant.position.of.value=逆變類型 {0} 出現在值 {2} 的類型 {1} 中的協變位置
contravariant.type.invariant.position.of.method=逆變類型 {0} 出現在方法 {2} 的類型 {1} 中的不變位置
contravariant.type.invariant.position.of.value=逆變類型 {0} 出現在值 {2} 的類型 {1} 中的不變位置
control.curly.braces.based.on.line.indents=根據縮排控制大括號:
convert.java.to.scala.collection.hint=使用 asScala 轉換為 Scala 集合?
convert.java.to.scala.collection.name=轉換為 Scala 集合
convert.scala.to.java.collection.hint=使用 asJava 轉換為 Java 集合?
convert.scala.to.java.collection.name=轉換為 Java 集合
convert.to.explicit.symbol=轉換為 Symbol("{0}")
convert.to.explicit.symbol.family=轉換為顯式符號
convert.to.hex.fix=將八進制文字轉換為十六進制
convert.to.long.fix=轉換為 long 文字
convert.to.typed.pattern=轉換為類型化模式
convert.view.and.context.bounds.to.implicit.parameters=將上下文邊界轉換為隱式參數
copy.link.to.clipboard=將鏈接複製到剪貼簿
copy.scaladoc=複製 ScalaDoc(&S)
could.not.decompile.file.comment=//無法反編譯 {0}
could.not.find.type.for.selection=找不到選擇的類型
could.not.infer.type.of.underscore.section=無法推斷下劃線部分的類型
could.not.perform.inplace.rename=無法執行就地重新命名:\n要重新命名的元素: {0} {1}\n替代: {2}\n文字游標周圍: {3}
could.not.understand.type=無法理解類型 {0}
coursier.v1.cache=Coursier v1 快取
covariant.type.contravariant.position.of.method=協變類型 {0} 出現在方法 {2} 的類型 {1} 中的逆變位置
covariant.type.contravariant.position.of.value=協變類型 {0} 出現在值 {2} 的類型 {1} 中的逆變位置
covariant.type.invariant.position.of.method=協變類型 {0} 出現在方法 {2} 的類型 {1} 中的不變位置
covariant.type.invariant.position.of.value=協變類型 {0} 出現在值 {2} 的類型 {1} 中的不變位置
create.annotation.class.named=建立註解類別 ''{0}''
create.apply.method.in=在 {0} 中建立 ''apply'' 方法
create.case.class.named=建立案例類別 ''{0}''
create.class.named=建立類別 ''{0}''
create.companion.object.for.class=為類別建立伴生物件
create.extractor.object.named=建立提取程序物件 ''{0}''
create.method.named=建立方法 ''{0}''
create.new.scala.class=建立新的 Scala 類別
create.new.scala.class.or.file=新增 Scala 類別/檔案
create.object.named=建立物件 ''{0}''
create.parameter.named=建立參數 {0}
create.parameterless.method.named=建立無形參方法 ''{0}''
create.trait.named=建立特徵 ''{0}''
create.unapply.method.in=在 {0} 中建立 ''unapply'' 方法
create.value.named=建立值 ''{0}''
create.variable.named=建立變數 ''{0}''
debug.info.level.complete.no.tail.call.optimization=完整，無尾呼叫最佳化
debug.info.level.none=無
debug.info.level.source=原始碼檔案特性
debug.info.level.source.and.line.number=原始碼和行號資訊
debug.info.level.source.line.number.and.local.variable=原始碼、行號和區域變數資訊
debugging.info.level=偵錯資訊級別(&L):
def.dcl.expected=應為定義或宣告
def.name=def {0}
default.init.prohibited.literal.types=文字型變數禁止預設初始化
default.ta.settings=設定
default.ta.tooltip=組態類型註解設定
default.value.is.missing.default.arguments=缺少預設值。預設實參將包含空值，而不是新的參數值。
default.value.is.missing.method.calls=缺少預設值。方法呼叫將包含空值，而不是新的參數值。
default.values=預設值:
delete.closing.brace=刪除 '{' 後刪除右大括號
delete.inlined.tag=刪除內聯標記
delete.unknown.tag=刪除未知標記
dependent.function.types.are.not.yet.supported=尚不支持相依函式類型
deprecation.warnings=棄用警告(&D)
deprecation.warnings.tooltip=發出棄用 API 用法的警告和位置。
derives.cannot.be.unified=無法將 {0} 與 {1} 的類型實參統一
derives.no.member.named.derived=派生值不是物件 {0} 的成員
derives.not.a.class.type={0} 不是類別類型，無法派生
derives.scala.class.expected=應為 Scala class/trait
derives.type.has.no.companion.object=無法派生 {0} ，其不含伴生物件
derives.type.has.no.type.parameters=無法派生 {0} ，其不含類型參數
descriptive.name.anonymous=匿名
desugar.add.explicit.override.modifier=新增顯式“override”修飾符
desugar.append.semicolon=附加分號
desugar.canonize.arity.0.call=規范化 arity-0 呼叫
desugar.canonize.block.argument=規范化塊實參
desugar.canonize.infix.call=規范化 infix 呼叫
desugar.canonize.postfix.call=規范化後綴呼叫
desugar.convert.implicit.class.to.class.and.function=將隱式類別轉換為類別和函式
desugar.convert.parentheses.to.braces.in.for.comprehensions=為推導式將括號轉換為大括號
desugar.enforce.parentheses.in.constructor.invocation=在建構函式呼叫中強制括號
desugar.expand.apply.call=展開“apply”呼叫
desugar.expand.assignment.call=展開賦值呼叫
desugar.expand.auto.tupling=展開自動編制元組
desugar.expand.context.bound=展開上下文邊界
desugar.expand.dynamic.call=展開動態呼叫
desugar.expand.eta.expansion=展開 eta 擴展
desugar.expand.for.comprehensions=展開 for 推導式
desugar.expand.function.instantiation=展開函式實例化
desugar.expand.function.type=展開函式類型
desugar.expand.implicit.conversion=展開隱式轉換
desugar.expand.macro=展開巨集
desugar.expand.placeholder.syntax=展開佔位符語法
desugar.expand.procedure.syntax=展開過程語法
desugar.expand.property.declaration=展開屬性宣告
desugar.expand.property.definition=展開屬性定義
desugar.expand.property.setter.call=展開屬性 setter 呼叫
desugar.expand.single.abstract.methods=擴展單一抽象方法
desugar.expand.string.interpolation=展開字串內插
desugar.expand.to.equals.call=將“==”展開為“equals”呼叫
desugar.expand.tuple.instantiation=展開元組實例化
desugar.expand.tuple.type=展開元組類型
desugar.expand.type.alias=展開類型別名
desugar.expand.unary.call=展開一元呼叫
desugar.expand.update.call=展開“update”呼叫
desugar.expand.vararg.argument=展開 vararg 實參
desugar.expand.view.bound=展開檢視邊界
desugar.expand.wildcard.import=展開萬用字元匯入
desugar.for.comprehension=for 推導脫糖
desugar.fully.qualify.import.expression=完全限定匯入表達式
desugar.fully.qualify.reference=完全限定參照
desugar.function.parameter=函式參數
desugar.group.declarations=宣告
desugar.group.expressions=表達式
desugar.group.functions=函式
desugar.group.general=一般
desugar.group.implicits=隱式
desugar.group.method.invocations=方法呼叫
desugar.group.references=參照
desugar.group.type.annotations=類型註解
desugar.group.types=類型
desugar.inscribe.default.arguments=寫入預設實參
desugar.inscribe.explicit.braces=記錄顯式大括號
desugar.inscribe.implicit.parameters=寫入隱式參數
desugar.make.eta.expansion.explicit=使 eta 擴展為顯式
desugar.make.method.return.expressions.explicit=使方法 return 表達式為顯式
desugar.method.definition=方法定義
desugar.partially.qualify.simple.reference=部分限定簡單參照
desugar.reference.pattern=參照模式
desugar.replace.underscore.section.with.default.value=將下劃線部分取代為預設值
desugar.scala.code.action.description=Scala 程式碼脫糖(所選部分/整個檔案)
desugar.scala.code.action.text=Scala 程式碼脫糖…
desugar.scala.code.in.scope=Scala程式碼脫糖({0})
desugar.substitute.anyref=取代 AnyRef
desugar.type.parameters=類型參數
desugar.underscore.parameter=為參數加下劃線
desugar.value.definition=值定義
desugar.variable.definition=變數定義
disabled.word=已停用
displayname.scala.compiler=Scala 編譯器
do.statement=do 語句
documentation.for.project={0} 文檔
does.not.take.parameter.default.target=應用程式
dot.expected=應為 ''.''
dot.or.cq.expected=應為 ''.'' 或類別限定符
downloading.scala.version=正在下載 Scala {0}
downloading.url=正在下載 {0}
edit.package.prefix=編輯軟體套件前綴…
else.expected=應為 ''else''
empty.new.expression=空 new 表達式
enable.continuations=啟用繼續(&C)
enable.loading.external.extensions=啟用載入外部擴展
enable.specialization=啟用專用化(&S)
enable.specialization.tooltip=遵循 @specialize 註解
enable.warnings=啟用警告(&W)
enable.warnings.tooltip=生成警告
enabled.word=已啟用
end.of.string.expected=應為字串結尾
enumerators.binding.case.keyword.found=應為模式，但找到的是 ''case''
enumerators.binding.val.keyword.deprecated=枚舉器中的 ''val'' 關鍵字已棄用
enumerators.expected=''for'' 語句中應有枚舉器
enumerators.generator.val.keyword.found=應為模式，但找到的是 ''val''
erasure.warning=(但仍可能符合其擦除)
error.downloading.scala.version=下載 Scala {0} 時出錯
error.message.title.create.entity.quickfix=建立實體快速修復
error.wrong.caret.position.method.name=文字游標應置於要重構的方法的名稱處。
except.for.base.package=對基礎軟體套件例外
exclude.value.from.auto.import=從自動匯入中排除 ''{0}''
existential.block.expected=應為存在子句
expand.macro=展開巨集
expand.to.new.pattern=擴展到: {0}
expected.another.pattern=應為另一種模式
expected.at.least.one.extension.method=應至少為一種擴展方法
expected.case.on.a.new.line=應為新行中的 case
expected.do=應為 ''do''
expected.do.or.yield=應為 ''do'' 或 ''yield''
expected.more.types=預期更多類型
expected.new.line.after.colon=冒號後應為新行
expected.then=應為 ''then''
expected.type.boolean=預期布林型態作為方法 {0} 返回值類型
expected.type.constructor=應為類型建構函式 {0}
explain.type.errors=解釋類型錯誤(&E)
explain.type.errors.tooltip=更詳細地解釋類型錯誤
expr.type.does.not.conform.expected.type=類型 {0} 的表達式不符合預期類型 {1}
expression.expected=應為表達式
extension.method.expected=應為擴展方法
extension.method.overrides.regular=方法 {0} 是一個擴展方法，無法覆寫普通方法
extensions.in.selected.library=所選庫中的擴展
extract.abstracts=提取 abstract 項
extract.file.method=提取檔案方法
extract.local.method=提取 {0} 中的區域方法
extract.local.method.in.else.block=提取 else 塊中的區域方法
extract.method.cannot.find.possible.scope=找不到所提取方法的可能作用域
extract.method.title=提取方法
extract.method.to.anonymous.class=將方法提取到匿名類別
extract.method.to.class.name=將方法提取到類別 {0}
extract.method.to.object.name=將方法提取到物件 {0}
extract.method.to.package.name=將方法提取到軟體套件 {0}
extract.method.to.trait.name=將方法提取到特徵 {0}
extract.trait.action.description=從所選類別提取特徵
extract.trait.action.text=提取特徵…
extract.trait.name=特徵名稱:
extract.trait.package.label=新特徵的軟體套件:
extract.trait.title=提取特徵
extract.trait.top.label.text=從中提取特徵:
extraction.of.anonymous.class.with.vars.refs.unsupported=目前不支持提取參照超出作用域的變數的匿名類別
failed.to.found.corresponding.underscore.section=找不到相應的下劃線部分
family.name.add.braces=新增大括號
family.name.add.collection.breakout=新增 `collection.breakOut`
family.name.add.empty.parentheses=新增空圓括號
family.name.adjust.types=調整類型
family.name.change.type=更改類型
family.name.comparing.length=取代為 .sizeIs
family.name.convert.from.infix.expression=從中綴表達式轉換
family.name.convert.implicit.bounds=轉換隱式綁定
family.name.convert.parameter.to.underscore.section=將參數轉換為下劃線部分
family.name.convert.to.curly.braces=轉換為大括號
family.name.convert.to.desugared.expression=轉換為脫糖表達式
family.name.convert.to.infix.expression=轉換為中綴表達式
family.name.convert.to.object=轉換為物件
family.name.convert.underscore.section.to.parameter=將下劃線部分轉換為參數
family.name.create.annotation.class=建立註解類別
family.name.create.apply.method=建立 ''apply'' 方法
family.name.create.case.class=建立案例類別
family.name.create.class=建立類別
family.name.create.companion.object=建立伴生物件
family.name.create.extractor.object=建立提取程序物件
family.name.create.method=建立方法
family.name.create.object=建立物件
family.name.create.parameter=建立參數
family.name.create.parameterless.method=建立無形參方法
family.name.create.trait=建立特徵
family.name.create.unapply.method=建立 ''unapply'' 方法
family.name.create.value=建立值
family.name.create.variable=建立變數
family.name.enable.type.mismatch.hints=啟用類型不符合提示
family.name.expand.to.constructor.pattern=擴展到建構函式模式
family.name.filter.set.contains=移除篩選器中的冗餘 ''contains''
family.name.give.a.name.to.anonymous.abstract.given=為給定的匿名 abstract 命名
family.name.implement.anonymous.abstract.given=實施給定的匿名 abstract
family.name.import.additional.identifiers=匯入附加關鍵字
family.name.import.all.members=匯入所有成員
family.name.import.member.with.stable.path=通過穩定路徑匯入成員
family.name.make.implicit.conversion.explicit=將隱式轉換設為顯式
family.name.remove.braces=移除大括號
family.name.remove.case.from.enumerator=從枚舉器中移除 ''case''
family.name.remove.tailrec.annotation=移除 @tailrec 註解
family.name.remove.unnecessary.apply=移除不必要的 apply
family.name.replace.type.check.with.pattern.matching=將類型檢查取代為模式符合
family.name.replace.type.with.type.in.vararg.pattern=將 '':'' 取代為 vararg 模式中的 ''@''
family.name.replace.with.scala3.vararg.pattern=將 '':'' 語法取代為 Scala 3.0 vararg 模式
family.name.some.to.option=Some 轉換為 Option
family.name.use.infix.type.syntax=使用中綴類型語法
family.name.use.prefix.type.syntax=使用前綴類型語法
feature.dynamics=動態(&D)
feature.existential.types=存在類型(&E)
feature.experimental.features=實驗性功能(&X)
feature.higher.kinded.types=高階類型(&H)
feature.implicit.conversions=隱式轉換(&I)
feature.macros=巨集(&M)
feature.postfix.notation=後綴運算符表示法(&P)
feature.reflective.calls=反射呼叫(&R)
feature.warnings=功能警告(&F)
feature.warnings.tooltip=發出語言功能警告。
features=功能
field.occurrences={0} 個匹配項
file.is.not.writable=檔案沒有寫入權限
file.type.scala.outlines=Scala 概述
final.modifier.is.not.allowed.here=此處不允許使用 ''final'' 修飾符
final.modifier.is.redundant.with.final.parents=''final'' 修飾符對於物件或 final 類別成員是冗餘的
final.modifier.not.with.declarations=''final'' 修飾符不能用於不完整的成員
final.modifier.not.with.trait=不允許對特徵使用 ''final'' 修飾符
find.what.companion.module.checkbox=伴生模組的用法(&C)
find.what.implementing.type.definitions.checkbox=實作類型定義(&D)
find.what.members.usages.checkbox=成員的用法(&M)
find.what.new.instances.usages=僅建立實例(&I)
for.pattern.bindings.require.scala3=''for'' 模式綁定中的 ''case'' 語法需要 Scala 3.0
for.statement=for 語句
forward.reference.detected=錯誤的前向參照
fruitless.type.test=fruitless type test: 類型 {0} 的值不能同時也為 {1}
fun.sign.expected=應為 ''=>''
function.expression=函式表達式
function.must.define.type.explicitly=方法 {0} 包含 return 語句；需要結果類型
function.recursive.need.result.type=遞迴方法 {0} 需要結果類型
generate.scaladoc=生成 Scaladoc
generate.scaladoc.action.description=生成 scaladoc
generate.scaladoc.action.text=生成 Scaladoc
given.alias.declaration.must.be.named=給定的匿名不能為 abstract
go.to.companion=轉到伴生 {0}
go.to.implementation=轉到實作
go.to.super.method=轉到 super 成員
goto.super.class.chooser.title=選擇超類別
goto.super.class.or.member.chooser.title=選擇超類別/super 成員
goto.super.member.chooser.title=選擇 super 成員
gutter.companion=伴生
gutter.implemented=被實作成員
gutter.implementing=實作成員
gutter.overridden=被覆寫成員
gutter.overriding=覆寫成員
gutter.recursion=遞迴類型
gutter.sam=實作 SAM
has.companion=具有伴生 {0}
has.implementations=成員有多個實作
has.no.reference=無參照
hint.label.expected=預期
hint.label.non.singleton=非單例
hint.label.original=原始
hint.label.simplified=簡化
how.to.add.custom.macro.support.help.link.title=如何新增自訂 Scala 巨集支援
html.unable.to.launch.web.browser=無法啟動 web 瀏覽器，請手動開啟: {0}
id.is.already.defined=此作用域中已定義 {0}
idea.based.scala.project=基於 IDEA 的 Scala 專案
idea.is.outdated.please.update=您的 IDEA 已過時，無法對 Scala 延伸模組 {0} 分支使用。<br/>請至少將 IDEA 更新到 {1}，以使用最新的 Scala 延伸模組。
idea.will.try.to.search.for.extra.support.for.particular.libraries=IDEA 將嘗試搜尋對您專案中特定庫的額外支援
identifier.expected=應為關鍵字
identifier.expected.but.0.found=應為關鍵字，但實際是{0}
identifier.expected.comma.found=應為關鍵字，但找到的是 '',''
identifier.or.opening.brace.expected=應為關鍵字或左括號
identifier.or.wild.sign.expected=應為關鍵字或 ''_''
if.block=if 塊
illegal.assignment.target=非法賦值目標
illegal.inheritance.extends.enum=禁止擴展枚舉
illegal.inheritance.from.final.kind=從 final {0} ''{1}'' 的非法繼承
illegal.inheritance.from.sealed.kind=從密封的 {0} ''{1}'' 非法繼承
illegal.inheritance.from.value.class=從值類別 {0} 非法繼承
illegal.inheritance.multiple={0} ''{1}'' 繼承了多次
illegal.inheritance.self.type=非法繼承，自類型 {0} 不符合 {1}
illegal.instantiation={0} ''{1}'' 為 abstract；無法實例化
illegal.mixin={0} ''{1}'' 必須是特徵才可以混入
illegal.modifiers.combination=非法的修飾符組合: {0} 和 {1}
illegal.secondary.constructors.value.class=值類別中不允許使用輔助建構函式
illegal.undefined.member=僅類別可以具有已宣告但未定義的成員
illegal.underscore.separator=下劃線分隔符需要使用 Scala 2.13
implement.members.fix=實作成員
implements.member.from.prefix=成員實作自
implements.member.from.several.classes=實作 {0} 類別中的成員
implements.member.prefix=實作成員
implicit.argument.is.applicable=隱式實參適用
implicit.arguments=隱式實參:
implicit.arguments.for.implicit.conversion=適用於隱式轉換的隱式實參:
implicit.class.must.have.a.primary.constructor.with.one.argument=隱式類別必須具有主建構函式，並且該建構函式恰好包含第一個參數列表中的一個實參
implicit.conversions.action.description=顯示隱式轉換
implicit.conversions.action.text=顯示隱式轉換
implicit.is.diverged=implicit 已分叉
implicit.modifier.can.be.used.only.for=''implicit'' 修飾符只能用於值、變數、方法和類別
implicit.modifier.cannot.be.used.for.top.level.objects=''implicit'' 修飾符無法用於頂層物件
implicit.params.excepted=隱式參數子句必須至少有一個參數
import.additional.identifiers.from.qualifier=從限定符匯入其他關鍵字
import.all.members.of.reference=匯入 {0} 的所有成員
import.as=作為 ''{0}'' 匯入
import.class=匯入類別
import.class.chooser.title=要匯入的類別
import.conversion.chooser.title=要匯入的轉換
import.expr.should.be.qualified=必須限定 import 表達式
import.extension.method=匯入擴展方法…
import.extension.method.chooser.title=要匯入的擴展方法
import.global.member=匯入全域成員
import.hint.text={0}? {1} Alt+Enter
import.implicit=匯入隱式…
import.implicit.chooser.title=要匯入的隱式定義
import.implicit.conversion=匯入轉換…
import.multiple.choices=(多重選擇…)
import.package=匯入軟體套件
import.package.chooser.title=要匯入的軟體套件
import.selector.expected=應為 import 選擇器
import.something=匯入…
import.something.chooser.title=要匯入的名稱
import.stable.member=匯入 {0}
import.with=匯入 ''{0}''
import.with.prefix=通過前綴匯入
import.with.prefix.ellipsis=通過前綴匯入…
imports.panel.add.fully.qualified.imports=新增完全限定 import
imports.panel.add.import.statement.in.closest.block=新增最接近的塊中的 import 語句
imports.panel.add.import.to.always.mark.it.as.used=新增 import 以始終將其標記為已使用
imports.panel.add.package.name=新增軟體套件名
imports.panel.add.pattern.to.use.appropriate.classes.only.with.prefix=新增模式以使用僅帶有前綴的適當的類別
imports.panel.always.mark.as.used=始終標記為已使用
imports.panel.base.package.help=如果基礎軟體套件為 <code>org.example.application</code>，類別 <code>org.example.application.NAME</code> 應匯入為 <code>import NAME</code>
imports.panel.class.count.to.use.import.with=將 import 與 ''_'' 搭配使用的類別計數:
imports.panel.classes.to.use.only.with.prefix=僅使用指定前綴的類別
imports.panel.do.not.change.path.during.optimize.imports.for.local.imports=在針對本地 import 最佳化 import 期間不更改路徑
imports.panel.force.scala2.in.source3=使用 -Xsource:3 時匯入語法:
imports.panel.honestly.mark.imports.as.unused=如實將 import 標記為未使用
imports.panel.import.layout=匯入布局
imports.panel.import.layout.manager=匯入布局管理器
imports.panel.imports.always.marked.as.used=import 始終標記為已使用
imports.panel.lexicographically=字典順序
imports.panel.merge.imports.with.the.same.prefix.into.one.statement=將具有相同前綴的 import 合併到一條語句中
imports.panel.no.imports.with.prefix=沒有帶前綴的 import
imports.panel.scalastyle.consistent=scalastyle 一致
imports.panel.sort.imports.for.optimize.imports=import 排序(用於最佳化 import):
imports.panel.title=Import
imports.panel.use.references.with.prefix=使用帶前綴的參照:
imports.panel.use.the.shortest.path.when.trying.to.import.reference.with.already.imported.name=在嘗試匯入具有已匯入名稱的參照時，請使用最短路徑
incompatible.plugin.detected=檢測到不相容的延伸模組
incrementality.type=遞增類型(&I):
indent.pasted.lines.at.caret=在文字游標處縮排貼上的行
indented.definitions.expected=應為縮排定義
inline.local.method.elements.header=要內聯的區域方法
inline.local.method.label=是否內聯區域方法 {0}?
inline.local.type.alias.elements.header=要內聯的區域類型別名
inline.local.type.alias.label=是否內聯區域類型別名 {0}?
inline.local.variable.elements.header=要內聯的區域變數
inline.local.variable.label=是否內聯區域變數 {0}?
inline.method.elements.header=方法內聯
inline.method.label=是否內聯方法 {0}?
inline.method.title=內聯方法
inline.occurrences.label=({0} 個{0, choice, 1#匹配項|2#匹配項})
inline.type.alias.elements.header=要內聯的類型別名
inline.type.alias.label=是否內聯類型別名 {0}?
inline.type.alias.title=內聯類型別名
inline.variable.elements.header=要內聯的變數
inline.variable.label=是否內聯變數 {0}?
inline.variable.title=內聯變數
insert.block.braces.automatically.based.on.indentation=自動新增大括號
insert.block.braces.automatically.based.on.indentation.tooltip=在編輯程式碼時，當單行塊變為多行塊時新增大括號
insert.pair.multiline.quotes=為多行字串插入成對引號
integer.literal.is.out.of.range=整數文字超出 Int 類型的範圍
intention.add.explicit.unit.type.annotation=新增顯式 Unit 類型註解
intention.family.put.on.one.line=將{0}放在同一行中
intention.family.put.on.separate.lines=將{0}放在單獨的行中
intention.for.comprehension.convert.to.parentheses=轉換為圓括號
intention.type.annotation.function.add.text=將類型註解新增到函式定義
intention.type.annotation.function.regenerate.text=重新生成函式定義的類型註解
intention.type.annotation.function.remove.text=從函式定義中移除類型註解
intention.type.annotation.parameter.add.text=將類型註解新增到參數
intention.type.annotation.parameter.remove.text=從參數中移除類型註解
intention.type.annotation.pattern.add.text=將類型註解新增到模式定義
intention.type.annotation.pattern.remove.text=從模式定義中移除類型註解
intention.type.annotation.regen.family=重新生成類型註解
intention.type.annotation.toggle.family=切換類型註解
intention.type.annotation.underscore.add.text=將類型註解新增到下劃線參數
intention.type.annotation.underscore.remove.text=從下劃線參數中移除類型註解
intention.type.annotation.value.add.text=將類型註解新增到值定義
intention.type.annotation.value.regenerate.text=重新生成值定義的類型註解
intention.type.annotation.value.remove.text=從值定義中移除類型註解
intention.type.annotation.variable.add.text=將類型註解新增到變數定義
intention.type.annotation.variable.regenerate.text=重新生成變數定義的類型註解
intention.type.annotation.variable.remove.text=從變數定義中移除類型註解
introduce.field.title=提取欄位
introduce.parameter.title=引入參數
introduce.type.alias.title=引入類型別名
introduce.variable.declare.as.var=變數(&V)
introduce.variable.identifier.is.not.valid=關鍵字無效
introduce.variable.specify.type.explicitly=指定類型
introduce.variable.title=引入值/變數
introduced.typeAlias.will.conflict.with.class.name=引入的類型別名與類別名衝突: {0}
introduced.typeAlias.will.conflict.with.type.name=引入的類型別名與類型名稱衝突: {0}
introduced.variable.will.conflict.with.class.parameter=引入的變數與類別參數衝突(或可能被其隱藏): {0}
introduced.variable.will.conflict.with.field=引入的變數將與沒有參數的欄位或方法衝突(或可能被其隱藏): {0}
introduced.variable.will.conflict.with.local=引入的變數與區域變數衝突(或可能被其隱藏): {0}
introduced.variable.will.conflict.with.parameter=引入的變數與參數衝突(或可能被其隱藏): {0}
invalid.scala.version.format=無效的 Scala 版本格式: {0}
invalid.update.channel=更新通道無效
is.overridden.by=成員有多個覆寫
italic.surrounder.template.description=斜體: '' ''
ivy2.cache=Ivy2 快取
ivy2.indexing.mode.classes=類別
ivy2.indexing.mode.disabled=已停用
ivy2.indexing.mode.metadata=元資料
java.collection=Java 集合
java.constructors.only.have.one.parameter.section=Java 建構函式只有一個參數部分
known.extension.libraries=已知擴展庫
lazy.modifier.is.not.allowed.here=''lazy'' 修飾符僅允許用於值定義
lazy.modifier.is.not.allowed.with.param=此處不允許使用 ''lazy'' 修飾符，請改用傳名呼叫參數
lazy.values.may.not.be.abstract=lazy 值可能不為 abstract
lbrace.expected=應為 '{'
library.type.scala.sdk=Scala SDK
line.is.indented.too.far.to.the.left=行向左縮排過多
local.project.libraries=本地專案庫
local.variables.must.be.initialized=區域變數必須初始化
location.description.anonymous.class=匿名類別
location.description.body.of.name={0} 的正文
location.description.containing.block=包含塊
location.description.parameter.of.getclassnametext={0} 的參數
location.description.parameter.of.name={0} 的參數
long.literal.is.out.of.range=整數甚至超出 Long 類型的範圍
lower.bound.conform.to.upper=下界與上界不符
lowercase.long.marker=小寫的 long 文字標記
lowercase.long.marker.fix=將 long 文字標記轉換為大寫
macro.defs.must.have.explicit.return.type=巨集定義必須有顯式指定的返回值類型
main.method.parameters.table.column.title.name=名稱
main.method.parameters.table.column.title.type=類型
main.method.parameters.table.column.title.value=值
make.explicit=設為顯式
make.explicit.and.import.method=設為顯式(匯入方法)
make.implicit.conversion.explicit.action.description=將隱式轉換設為顯式
make.implicit.conversion.explicit.action.text=將隱式轉換設為顯式
make.import.fully.qualified=將 import 設為完全限定
make.non.private.title=將屬性設為非私有屬性
make.protected.fix=將屬性設為 protected
make.public.fix=將屬性設為公共屬性
make.type.more.specific=使宣告類型更具體
make.type.more.specific.fun=使返回值類型更具體
match.type.cases.expected=應為 match 類型 case 子句
maven.local.repo=Maven 本地儲存庫
member.cannot.override.val=方法 {0} 必須為不可變的穩定值
member.implementation.required={0} ''{1}'' 必須宣告為 abstract，或者必須在 ''{3}'' 中實作 abstract 成員 ''{2}''
member.is.not.defined={1} 中的成員 {0} 未定義
member.needs.override.modifier={0} ''{1}'' 需要覆寫修飾符
member.of.anonymous.class.cannot.be.used.in.extracted.member=匿名類別的成員 {0} 無法在提取的成員 {1} 中使用
member.overrides.nothing={0} ''{1}'' 不覆寫任何內容
members.to.extract=要提取的成員
method.annotated.with.tailrec.contains.no.recursive.calls=使用 @tailrec 註解的方法不包含任何遞迴呼叫
method.annotated.with.tailrec.is.neither.private.nor.final=使用 @tailrec 註解的方法既不為 private 也不為 final (因此可以覆寫)
method.invocation.might.produce.nullpointerexception=方法呼叫可能會產生 NullPointerException
method.invocation.will.produce.nullpointerexception=方法呼叫將產生 NullPointerException
method.is.not.member=方法 {0} 不是類型 {1} 的成員
method.is.overridden.by.class.parameter.of.class=方法被 {0} 的傳類別參數覆寫。不支持將其轉換為函式定義。
method.is.overridden.in.a.composite.pattern.definition=方法在 {0} 的複合模式定義中被覆寫。不支持將其轉換為函式定義。
method.is.overridden.in.a.composite.variable.definition=方法在 {0} 的複合變數定義中被覆寫。不支持將其轉換為函式定義。
method.is.recursive=方法 ''{0}'' 為遞迴方法
method.is.tail.recursive=方法 ''{0}'' 為尾遞迴方法
method.of.containingclass={0}/{1}
missing.argument.list.for.method=方法 {0} 缺少實參列表
missing.argument.list.for.method.with.explicit.list=方法 {1} 缺少實參列表 {0}
missing.char.value=缺少字元值
missing.getter.implementation=缺少 getter 的實作: {0}
missing.parameter.type.name=缺少參數類型: {0}
missing.setter.implementation=缺少 setter 的實作: {0}
missing.statement.for.annotation=註解的語句缺失
mixin.required={0} ''{1}'' 需要為 mixin，因為 ''{3}'' 中的成員 ''{2}'' 被標記為 ''abstract'' 和 ''override''，但在基類別中找不到具體的實作
modifier.is.redundant.for.this.definition=''{0}'' 修飾符對於此定義冗餘
modify.method.calls=修改方法呼叫
module.with.a.scala.sdk=包含 Scala SDK 的模組
monospace.surrounder.template.description=等寬: ` `
move.anonymousToInner.dialog.title=將匿名轉換成內部
move.anonymousToInner.name=將匿名轉換成內部…
move.members=移動成員
move.members.cannot.find.object=找不到具有此名稱的物件
move.members.not.supported.implicits=隱式定義不支持移動重構
move.members.not.supported.overridden=被覆寫的定義不支持移動重構
move.members.object.name.or.qualified.name.expected=應為 Scala 物件的名稱或限定名稱
move.members.source.title=移動此物件中的成員:
move.members.supported.only.stable.objects=僅穩定的物件成員支援移動重構
move.members.target.title=到物件:
move.text.after.header.to.new.line=將文本移至靠近新行的標頭後面
move.to.inner.is.not.supported=Scala 不支持將類別移至內部
move.to.inner.is.not.supported.title=不支持重構
move.with.companion=與伴生物件一起移動
multi.line.string.panel.align.dangling.closing.quotes=對齊懸空的右引號(&A)
multi.line.string.panel.insert.margin.char.on.enter=在新行中按 enter 鍵時插入邊距字元(&I)
multi.line.string.panel.margin.char.indent=邊距字元縮排:
multi.line.string.panel.margin.char.value=邊距字元:
multi.line.string.panel.opening.quotes.on.new.line=在新行中放置左引號(&O)
multi.line.string.panel.place.closing.quotes.on.new.line.on.enter.press=在新行中按 enter 鍵時放置右引號(&C)
multi.line.string.panel.process.margin.on.copy.paste=在複製/貼上時去除/插入邊距(&S)
multi.line.string.panel.title=多行字串
multi.occurrences=({0} 個匹配項)
multiple.overriden.tooltip=多個被覆寫成員
multiple.overriding.tooltip=多個覆寫成員
name.does.not.take.type.arguments={0} 不接受類型實參
name.implements.member.of.qualname={0} 實作 {1} 的成員
name.overrides.member.of.qualname={0} 覆寫 {1} 的成員
navigate=導覽
navigation.findUsages.title.implementing.member={0} 的實作成員
navigation.findUsages.title.inheritors.class={0} 的子類別
navigation.findUsages.title.inheritors.trait={0} 的實作
navigation.findUsages.title.overriding.member={0} 的覆寫成員
navigation.findUsages.title.super.members={0} 的 super 成員
navigation.findUsages.title.super.types={0} 的父類型成員
navigation.title.implementing.member=<html>選擇 <b>{0}</b> 的實作成員(找到 {1} 個成員)</html>
navigation.title.inheritors.class=<html>選擇 <b>{0}</b> 的子類別(找到 {1} 個類別)</html>
navigation.title.inheritors.trait=<html>選擇 <b>{0}</b> 的實作(找到 {1} 個類別)</html>
navigation.title.overriding.member=<html>選擇 <b>{0}</b> 的覆寫成員(找到 {1} 個成員)</html>
navigation.title.super.members=選擇 {0} 的 super 成員
navigation.title.super.types=選擇 {0} 的父類型成員
new.class.location.inner.in.class={0} 中的內部
new.class.location.local.scope=區域作用域
new.class.location.new.file=新檔案
new.class.location.top.level.in.this.file=此檔案的頂層
new.on.case.class.instantiation.redundant=移除 ''new'' 修飾符
new.packageobject.menu.action.description=建立新的 Scala 軟體套件物件
new.packageobject.menu.action.text=軟體套件物件
newclass.menu.action.description=建立新的 Scala 類別
newclass.menu.action.text=Scala 類別
newclassorfile.menu.action.description=建立新的 Scala 類別或檔案
newclassorfile.menu.action.text=Scala 類別/檔案
no.alias.type=無別名類型
no.clazz.type.found=找不到類別類型
no.containing.file=未包含檔案
no.declared.type.found=找不到宣告的類型
no.defined.return.type=沒有定義的返回值類型
no.element.found=找不到元素
no.expected.type.for.wildcard.naming=萬用字元命名沒有預期的類型
no.expression.in.parentheses=圓括號中無表達式
no.implicit.arguments=無隱式實參
no.implicit.arguments.of.type=無類型的隱式實參: {0}
no.implicits.applicable.by.type=沒有按類型適用的隱式定義
no.known.extension.libraries=無已知的擴展庫
no.program.arguments=無程式引數
no.response.status.from.connection.to.url=與 {0} 的連線無響應狀態
no.type.element.for.typed.pattern=類型化模式沒有類型元素
no.type.element.found=在 ''{0}'' 中找不到類型元素
no.type.inferred=沒有為表達式 ''{0}'' 推斷出類型
no.type.inferred.for.unknown.expression=沒有為此表達式推斷出類型
no.type.pattern=無類型模式
no.versions.available.for.download=沒有可供下載的版本
not.a.polymorphic.lambda=非多態 lambda。
not.enough.parameter.sections=參數部分不足
not.found.scala.xml.node=找不到 scala.xml.Node
nothing.to.type=沒有可以計算的類型
notification.navigation.to.overriding.members=在索引更新期間無法導覽到覆寫成員
nullable.to.notnull.param.always.message=Null 被傳遞給使用 @NotNull 註解的參數
nullable.to.notnull.param.sometimes.message=可能為 null 的實參被傳遞給使用 @NotNull 註解的參數
nullable.to.unannotated.param.always.message=Null 被傳遞給可能無法處理 null 值的參數。考慮使用 @Nullable 對其進行註解。
nullable.to.unannotated.param.sometimes.message=可能為 null 的實參被傳遞給可能無法處理 null 值的參數。考慮使用 @Nullable 對其進行註解。
numeric.literal.family=數字文字
object.creation.impossible.since=由於{0}，無法建立物件
octal.literals.removed=自 Scala 2.11 起已停用八進制文字語法
only.classes.can.be.open=只有類別可以開啟
only.for.scala=這僅適用於 scala 檔案
only.inline.methods.may.have.inline.args=`inline` 修飾符只能用於內聯方法的實參
opaque.modifier.allowed.only.for.type.aliases=''opaque'' 修飾符僅允許用於類型別名
optimise.bytecode=最佳化位元組碼(慎用*)(&O)
optimise.bytecode.tooltip=通過對程序套用最佳化來更快地生成位元組碼。可能會觸發各種編譯問題。慎用。
options=選項
options.scala.display.name=Scala
other.panel.alternate.indentation.for.constructor.args.and.parameter.declarations=建構函式實參和參數宣告的備選縮排:
other.panel.enforce.functional.syntax.for.methods.with.unit.return.type=對具有 Unit 返回值類型的方法強制執行函式語法
other.panel.implicit.class.prefix.suffix=隱式類別前綴/後綴
other.panel.kind.projector.replace.lambda.with.unicode.symbol=Kind Projector: 將 ''Lambda'' 取代為 unicode 符號
other.panel.reformat.on.compile=編譯時重新格式化
other.panel.replace.in.for.generator.with.unicode.symbol=將 "for" 產生器中的 ''<-'' 取代為 unicode 符號
other.panel.replace.with.unicode.symbol=將 ''=>'' 取代為 unicode 符號
other.panel.replace.with.unicode.symbol1=將 ''->'' 取代為 unicode 符號
other.panel.spaces=Space
other.panel.title=其他
out.of.compilation.unit=超出編譯單元
output.dir=輸出目錄
override.modifier.is.not.allowed=此處不允許使用 ''override'' 修飾符
override.modifier.is.not.allowed.for.classes=''override'' 修飾符僅允許用於類型定義成員
override.types.not.conforming=覆寫類型 {0} 與基本類型 {1} 不符
overrides.member.from.prefix=覆寫成員自
overrides.member.from.several.classes=覆寫 {0} 類別中的成員
overrides.type.from.super.several.classes=覆寫 {0} 類別中的類型
overrides.type.prefix=覆寫類型
package.prefix.example=例如 ''org.example.application''
package.prefix.help=如果軟體套件前綴為 <code>org.example.application</code>，源目錄中的 <code>PATH</code> 意味著 <code>org/example/application/PATH</code>，所以不必建立顯式 <code>org</code>、<code>example</code> 和 <code>application</code> 子目錄。
package.prefix.label=軟體套件前綴:
package.qualID.expected=應為軟體套件限定關鍵字
param.clause.expected=應為參數子句
parameter.could.not.be.repeated.and.by.name=參數不能同時為重複參數和傳名參數
parameter.expected=應為參數
parameter.info.not.matchable=<非可符合>
parameter.label.default.value=預設值:
parameter.label.name=名稱:
parameter.label.type=類型:
parameter.type.expected=應為參數類型
parameterised.trait.is.implemented.indirectly=參數化特徵 {0} 為間接實作，需要直接實作，以便可以傳遞實參
passed.as.by.name.parameter=作為傳名參數傳遞
pattern.expected=應為模式
pattern.on.refinement.unchecked=細化類型中的模式符合未檢查
pattern.type.incompatible.with.expected=模式類型與預期類型不相容，實際為 {0}，要求 {1}
please.select.scala.plugin.update.channel=請選擇 Scala 延伸模組更新通道:
poly.function.without.parameters=多態函式 {0} 必須有一個值參數
presentable.definition.unnamed=未命名
presentable.type.unnamed=未命名類型
press.alt.enter=按 Alt+Enter
press.escape.to.remove.the.highlighting=按 esc 移除醒目提示
press.hotkey.to.show.more.options=按 ctrl + alt + v 顯示帶有更多選項的對話框
private.member.cannot.be.used.in.extracted.member=私有成員 {0} 無法在提取的成員 {1} 中使用
problem.prefix.ambiguous=(模糊)
problem.prefix.not.found=(未找到)
process.duplicates=處理重複項
processing.imports.modified.during.refactoring=正在處理重構期間修改的 import
provide.program.arguments=提供程序實參
pull.method.to=將方法 ''{0}'' 拉取到…
pull.up.members.from=向上拉取成員自
pull.value.to=將值 ''{0}'' 拉取到…
pull.variable.to=將變數 ''{0}'' 拉取到…
rbrace.expected=應為 '}'
rearranger.panel.keep.java.style.getters.and.setters.together=java 樣式的 getter 和 setter 保持在一起
rearranger.panel.keep.scala.style.getters.and.setters.together=scala 樣式的 getter 和 setter 保持在一起
rearranger.panel.split.into.unarrangeable.blocks.by.expressions=通過表達式拆分為不可排列的塊
rearranger.panel.split.into.unarrangeable.blocks.by.implicits=通過隱式拆分為不可排列的塊
reason.prefix.applicable=適用: 
reason.prefix.candidate=候選: 
reason.prefix.cannot.infer.type=無法推斷類型: 
reason.prefix.diverged=分叉: 
recursive.call.not.in.tail.position=遞迴呼叫不在尾部位置(在 @tailrec 註解的方法中)
recursive.non.value.type.of.type.element=類型元素的遞迴非值類型
recursive.type.of.type.element=類型元素的遞迴類型
refactoring.is.not.supported.contains.return=不支持重構: 選區包含 return 語句
refactoring.is.not.supported.in.guard=臨界中不支持重構，它很可能破壞程式碼結構
refresh.roots.synchronizing.output.directories=正在同步輸出目錄…
regular.method.overrides.extension=方法 {0} 是一個普通方法，無法覆寫擴展方法
remove.all.erroneous.semicolons.from.forexpression=從 for 表達式中移除所有錯誤的分號
remove.block.braces.automatically.based.on.indentation=自動移除大括號
remove.block.braces.automatically.based.on.indentation.tooltip=在編輯程式碼時，當多行塊變為單行塊時移除大括號
remove.braces.from.import=移除 import 語句中的大括號
remove.case=移除 ''case''
remove.case.clause=移除 case 子句
remove.catch=移除 catch 塊
remove.finally=移除 finally 塊
remove.generic=移除 {0}
remove.named.modifier.fix=移除 ''{0}'' 修飾符
remove.return.keyword=移除 return 關鍵字
remove.unnecessary.parentheses=移除不必要的圓括號
remove.val=移除 ''val''
rename=重新命名
rename.aliased.rename.actual=重新命名實際元素
rename.aliased.title=不支持重新命名 import 別名
rename.all.base.members=重新命名所有基本成員
rename.base.member=重新命名基本成員
rename.cancel=取消
rename.companion.module=重新命名伴生 {0}
rename.getters.and.setters.title=函式有同名的 getter 或 setter。是否也對它們進行重新命名?
rename.has.multiple.base.members={0} 有多個基本成員
rename.only.current.member=僅重新命名當前成員
rename.only.in=僅在 {0} {1} 中重新命名
rename.special.method.rename.class=重新命名包含{0}
rename.special.method.title=此方法無法重新命名
repeated.param.non.method=僅方法簽名中允許重複的參數。改用 `Seq`
replace.all.occurrences=取代所有符合項
replace.all.x.occurrences=取代全部 {0} 個匹配項
replace.fun.type=將 FunctionN[A1, A1, ...,  AN, R] 取代為 (A1, A1, ...,  AN) => R
replace.occurrences.available.from.companion.class=取代伴生類別 {0} 中可用的符合項
replace.tag.with.esc.seq=將標記取代為轉義序列
replace.tuple.type=將 TupleN[A1, A1, ...,  AN] 取代為 (A1, A1, ...,  AN)
replace.with.type=取代為 ''{0}''
replace.with.wiki.syntax=將內聯標記取代為等寬的 wiki 語法
report.highlighting.error.fix=報告醒目提示錯誤…
resolving.compiler.bridge.progress.message=正在解析編譯器橋
response.to.connection.to.url.was.code=與 {0} 連線的響應為 ''{1}''
return.expression.is.redundant=從 Unit 結果類型的方法返回 {0}
return.outside.method.definition=return 語句在方法定義外部
right.brace.expected=應為 '}'
rparenthesis.expected=應為 '')''
rsqbracket.expected=應為 '']''
scala.3.support.is.experimental=Scala 3 支援正在積極開發中。<br>請使用 Nightly 版本來獲取新的改進。
scala.collection.highlighting.type.all=所有
scala.collection.highlighting.type.none=無
scala.collection.highlighting.type.only.non.qualified=僅非限定
scala.compiler.profiles.panel.create.new.profile=建立新的組態檔案
scala.compiler.profiles.panel.move.to=移至
scala.compiler.profiles.panel.profile.already.exists=組態檔案 {0} 已存在
scala.compiler.profiles.panel.profile.name=組態檔名
scala.compiler.profiles.panel.profile.should.not.be.empty=組態檔名不應為空
scala.immutable.collection=不可變集合
scala.library.editor.form.compiler.bridge.jar=編譯器橋:
scala.library.editor.form.compiler.classpath=編譯器類別路徑:
scala.library.editor.form.scala.version=Scala 版本:
scala.library.editor.form.standard.library=標準庫:
scala.line.markers=Scala 行標記
scala.meta.mode.disabled=已停用
scala.meta.mode.enabled=已啟用
scala.meta.mode.manual=手動
scala.mutable.collection=可變集合
scala.notification.group.id.features.advertiser=Scala 功能廣播程序
scala.notification.group.id.general=Scala (一般)
scala.notification.group.id.java.to.scala.converter=Java 到 Scala 轉換器
scala.notification.group.id.plugin.updater=Scala 延伸模組更新程序
scala.notification.group.id.plugin.verifier=Scala 延伸模組驗證程序
scala.notification.group.id.sbt.project.import=SBT 專案匯入
scala.notification.group.id.sbt.shell=SBT shell
scala.notification.group.id.scala3.disclaimer=Scala 3 免責宣告
scala.notification.group.id.scalafmt=Scalafmt
scala.notification.group.id.scalafmt.fatal.errors=Scalafmt 致命錯誤
scala.notification.group.id.scalafmt.format.errors=Scalafmt 格式設定錯誤
scala.plugin.chanel.eap=搶先體驗計劃
scala.plugin.chanel.nightly=Nightly 版本
scala.plugin.chanel.release=穩定版本
scala.plugin.update=Scala 延伸模組更新
scala.project.data.service.scalaLibraryNotFound=無法為模組 ''{0}'' 組態 Scala SDK (找不到模組 ''{0}'' 的專案 Scala 庫 {1})
scala.project.settings=Scala 專案設定
scala.project.settings.form.add.override.keyword.to.method.implementation=向方法實作中新增覆寫關鍵字
scala.project.settings.form.ahead.of.time.completion=提前補全(參數和變數名稱)
scala.project.settings.form.alias.definition=定義
scala.project.settings.form.alias.export=匯出
scala.project.settings.form.alias.export.semantics=scala 和 scala.Predef 中的別名為:
scala.project.settings.form.autocomplete=自動補全
scala.project.settings.form.automatically.convert.to.scala.code.without.dialog=貼上時不顯示對話框，並自動轉換為 Scala 程式碼
scala.project.settings.form.base.package.custom=使用自訂:
scala.project.settings.form.base.package.inherit=繼承自源資料夾的軟體套件前綴
scala.project.settings.form.check.for.updates=立即檢查
scala.project.settings.form.code.conversion=程式碼轉換
scala.project.settings.form.collapse.long.output.by.default=預設摺疊長輸出
scala.project.settings.form.collection.type.highlighting.option=集合類型醒目提示:
scala.project.settings.form.convert.java.code.to.scala.on.copy.paste=複製貼上時將 Java 程式碼轉換為 Scala
scala.project.settings.form.custom.scalatest.keywords.highlighting=自訂 scalaTest 關鍵字醒目提示顯示
scala.project.settings.form.delay.before.auto.run=自動執行前延遲:
scala.project.settings.form.delay.before.auto.run.units=毫秒
scala.project.settings.form.disable.language.injection.in.scala.files=<html>停用 Scala 檔案中的語言注入。<br>(注入的語言可能會對自動彈出視窗補全凍結鍵入)</html>
scala.project.settings.form.disable.parsing.of.documentation.comments=<html>停用文檔註釋解析。<br>對於極大的檔案，可以提高編輯器性能。</html>
scala.project.settings.form.dont.cache.compound.types=不快取複合類型(在 GC 中出現嚴重停頓的情況下使用)
scala.project.settings.form.error.highlighting=錯誤醒目提示顯示
scala.project.settings.form.error.highlighting.use.compiler.ranges=使用 Scala 編譯器報告的文本範圍
scala.project.settings.form.group.package.object.with.package=使用軟體套件對軟體套件物件分組(&G)
scala.project.settings.form.highlight.arguments.to.by.name.parameters=醒目提示傳名參數的實參
scala.project.settings.form.highlight.implicit.conversions=醒目提示隱式轉換
scala.project.settings.form.highlight.nodes.with.errors=醒目提示有錯誤的節點(&H)
scala.project.settings.form.highlighting=醒目提示顯示
scala.project.settings.form.implicit.parameters.search.depth=隱式參數搜尋深度(若為無，則搜尋深度為 -1):
scala.project.settings.form.include.block.expressions=包含塊表達式
scala.project.settings.form.include.literals=包含文字
scala.project.settings.form.info=您可以始終選擇“穩定版本”或“搶先體驗計劃”以還原為更穩定的版本。
scala.project.settings.form.output.cutoff.limit=輸出截止限制:
scala.project.settings.form.output.cutoff.limit.units=行
scala.project.settings.form.plugin.update.channel=更新通道:
scala.project.settings.form.run.worksheet.in.the.compiler.process=在編譯器過程中執行工作表(僅限普通模式)
scala.project.settings.form.sbt.index.ivy2.mode=本地 ivy2 快取索引模式
scala.project.settings.form.sbt.index.ivy2.mode.hint=停用 - 完全無索引\n元資料 - 僅索引庫名稱和版本，用於 SBT 檔案相依項補全\n類別 - 也索引快取中的類別名，由“新增 sbt 相依項”快速修復使用
scala.project.settings.form.scala.meta.settings.annot212=執行 scala.meta 程序
scala.project.settings.form.scala.meta.settings.annot212.tooltip=由於二進制檔案不相容，2.12 模組中的註解必須使用基於字串的非常緩慢的序列化和重新解析。這可能會嚴重影響整體性能。
scala.project.settings.form.scala.meta.settings.modeOptions.tooltip=已啟用 - 在類型推斷期間執行所有元程序\n已停用 - 在類型推斷期間跳過元程序\n手動 - 僅在手動擴展時執行元程序
scala.project.settings.form.scala.meta.settings.trimBodies.caption=修剪方法體由 scala.meta 擴展
scala.project.settings.form.scala.meta.settings.trimBodies.tooltip=相依所生成方法的顯式返回值類型(主體取代為 ???)。通過跳過方法體類型檢查可加快類型推斷。
scala.project.settings.form.scalatest.default.super.class=ScalaTest 預設超類別:
scala.project.settings.form.search.all.symbols=搜尋所有符號(包括區域符號)
scala.project.settings.form.show.hints.if.ambiguous.implicit.arguments.found=找到模糊的隱式實參時顯示提示
scala.project.settings.form.show.hints.if.no.implicit.arguments.found=找不到隱式實參時顯示提示
scala.project.settings.form.show.type.mismatch.hints=顯示類型不符合的提示
scala.project.settings.form.tabs.base.package=基礎軟體套件
scala.project.settings.form.tabs.base.packages=基礎軟體套件
scala.project.settings.form.tabs.editor=編輯器
scala.project.settings.form.tabs.extensions=擴展
scala.project.settings.form.tabs.misc=雜項
scala.project.settings.form.tabs.performance=性能
scala.project.settings.form.tabs.project.view=專案檢視
scala.project.settings.form.tabs.updates=更新
scala.project.settings.form.tabs.worksheet=工作表
scala.project.settings.form.tabs.xray.mode=X-Ray 模式
scala.project.settings.form.trailing.commas=尾隨逗號:
scala.project.settings.form.treat.sc.files.as=將 .sc 檔案視為:
scala.project.settings.form.treat.scala.scratch.files.as.worksheet.files=將 Scala 臨時檔案視為工作表檔案
scala.project.settings.form.use.eclipse.compatibility.mode=使用“eclipse 相容”模式
scala.project.settings.form.use.scala.classes.priority.over.java=Scala 類別的使用優先級高於 Java 類別
scala.project.settings.form.xray.activate=啟用條件:
scala.project.settings.form.xray.by-name.argument.hints=按名稱實參提示
scala.project.settings.form.xray.double.press.and.hold=按兩次 Ctrl 並按住
scala.project.settings.form.xray.implicit.hints=隱式提示
scala.project.settings.form.xray.indent.guides=縮排參考線
scala.project.settings.form.xray.lambda.parameters=Lambda 參數
scala.project.settings.form.xray.lambda.placeholders=Lambda 佔位符
scala.project.settings.form.xray.local.variables=區域變數
scala.project.settings.form.xray.member.variables=成員變數
scala.project.settings.form.xray.method.chain.hints=方法鏈提示
scala.project.settings.form.xray.method.results=方法結果
scala.project.settings.form.xray.method.separators=方法分隔符
scala.project.settings.form.xray.parameter.name.hints=參數名稱提示
scala.project.settings.form.xray.press.and.hold=按 Ctrl 並按住
scala.project.settings.form.xray.show=顯示:
scala.project.settings.form.xray.type.hints=類型提示:
scala.project.settings.form.xray.variable.patterns=變數模式
scala.project.settings.form.xray.widget=小工具:
scala.project.settings.form.xray.widget.display=顯示:
scala.root.code.style.panel.formatter=格式化程序:
scala.sdk.component.name.compiler.classpath=編譯器類別路徑
scala.sdk.component.name.library=庫
scala.sdk.component.name.library.scaladoc=庫 scaladoc
scala.sdk.component.name.library.source=庫原始碼
scala.sdk.descriptor.contains.duplicated.files=Scala SDK 檔案描述子包含重複的 {0} 檔案:
scala.sdk.selection.button.browse=瀏覽…
scala.sdk.selection.button.download=下載…
scala.type.aware.highlighting.indicator=Scala 類型感知醒目提示指示器
scala3.panel.title=Scala 3
scala3.panel.use.indentation.based.syntax=使用基於縮排的語法
scaladoc.noon=Scaladoc
scaladoc.panel.add.additional.space.for.leading.asterisk=為前導星號新增額外空格
scaladoc.panel.after.parameter.comments=在參數描述後
scaladoc.panel.after.tags=return 之後
scaladoc.panel.align.other.tags.descriptions=對齊其他標記描述
scaladoc.panel.align.parameter.descriptions=對齊參數描述
scaladoc.panel.align.return.value.description=對齊返回值描述
scaladoc.panel.align.throws.exception.descriptions=對齊拋出異常描述
scaladoc.panel.before.parameter.descriptions=在參數描述前面
scaladoc.panel.before.tags=標記之前
scaladoc.panel.between.parameter.descriptions=在參數描述之間
scaladoc.panel.blank.lines.keep=保留(不移除標記之間的空白行)
scaladoc.panel.enable.scaladoc.formatting=啟用 scaladoc 格式化
scaladoc.panel.groups.alignment=對齊
scaladoc.panel.groups.blank.lines=空行
scaladoc.panel.groups.other=其他
scaladoc.panel.preserve.spaces.in.tags=保留標記中的空格
scaladoc.panel.title=ScalaDoc
scaladoc.parsing.closing.code.tag.before.opening=結束程式碼標記在起始程式碼標記前面
scaladoc.parsing.closing.link.tag.before.opening=結束鏈接標記在起始鏈接標記前面
scaladoc.parsing.cross.tags=交叉標記
scaladoc.parsing.error.bad.token=錯誤: 錯誤令牌: {0}
scaladoc.parsing.header.closed.by.opening.new.one=標頭由起始新標頭結束
scaladoc.parsing.inline.tag=內聯標記
scaladoc.parsing.missing.tag.param=缺少標記參數
scaladoc.parsing.no.closing.element=無結束元素
scaladoc.parsing.open.syntax.element=開啟語法元素
scaladoc.parsing.unclosed.code.tag=未結束的程式碼標記
scaladoc.parsing.unexpected.end.of.tag.body=標記主體意外結束
scaladoc.parsing.unknown.tag=未知標記: {0}
scaladoc.parsing.wiki.syntax.closed.by.inner.code.tag=內部程式碼標記
scaladoc.parsing.wiki.syntax.closed.by.new.paragraph=新段落
scaladoc.parsing.wiki.syntax.closed.by.tag=標記
scaladoc.parsing.wiki.syntax.element.closed.by.message=Wiki 語法元素由 {0} 結束
scalafmt.can.not.create.config.file=無法建立組態檔案
scalafmt.can.not.find.config.file=找不到組態檔案: {0}
scalafmt.can.not.find.config.file.create.new=建立新檔案
scalafmt.can.not.find.config.file.go.to.settings=設定…
scalafmt.config.load.actions.open.config.file=開啟組態檔案
scalafmt.config.load.errors.cyclic.includes.detected=檢測到迴圈 include
scalafmt.config.load.errors.failed.to.load.config=無法載入 scalafmt 組態
scalafmt.config.load.errors.parse.error=解析錯誤: {0}
scalafmt.default=預設
scalafmt.default.path=預設: {0}
scalafmt.download=下載
scalafmt.format.errors.failed.to.find.correct.surrounding.code=Scalafmt 錯誤({0}): <br>找不到要為 scalafmt 傳遞的正確的包圍程式碼，不會執行格式化
scalafmt.format.errors.scala.file.parse.error=Scalafmt 解析錯誤({0}):<br>{1}
scalafmt.picked.new.config=Scalafmt 選擇了新樣式組態(v{0})
scalafmt.progress.downloading.scalafmt.version=正在下載 scalafmt 版本 {0}
scalafmt.progress.downloading.scalafmt.version.cancel=停止下載
scalafmt.progress.resolving.scalafmt.version=正在解析 scalafmt 版本 {0}
scalafmt.progress.resolving.scalafmt.version.cancel=停止解析
scalafmt.progress.version.was.downloaded=已下載 Scalafmt 版本 {0}
scalafmt.resolve.again=再次解析
scalafmt.resolve.errors.cant.resolve.scalafmt.version=無法解析 scalafmt 版本 {0}
scalafmt.resolve.errors.classpath.is.corrupted=類別路徑損壞
scalafmt.resolve.errors.download.is.in.progress=正在下載
scalafmt.resolve.errors.downloading.error.occurred=下載時出錯
scalafmt.resolve.errors.unknown.error=未知錯誤
scalafmt.resolve.errors.version.is.not.downloaded.yet=尚未下載 Scalafmt 版本 `{0}`。<br>要下載嗎?
scalafmt.settings.panel.configuration.label=組態
scalafmt.settings.panel.errors.cant.find.config.file=找不到具有以下路徑的 scalafmt 組態檔案:<br> {0}
scalafmt.settings.panel.errors.cant.resolve.version=無法解析 scalafmt 版本 {0}
scalafmt.settings.panel.errors.failed.to.parse.config=無法解析組態:<br> {0}
scalafmt.settings.panel.fallback.to.default.settings=回退到預設 IntelliJ 設定
scalafmt.settings.panel.no.config.found.under.path.using.default=未在指定路徑下找到組態檔案
scalafmt.settings.panel.reformat.on.file.save=儲存時重新格式化({0})
scalafmt.settings.panel.reformat.on.file.save.tooltip=提示: 使用“重新設定程式碼格式”({0})
scalafmt.settings.panel.scalafmt.version.label=Scalafmt 版本
scalafmt.settings.panel.select.custom.scalafmt.configuration.file=選擇自訂 scalafmt 組態檔案
scalafmt.settings.panel.show.warnings.when.formatting.invalid.code=在嘗試格式化無效程式碼時顯示警告
scalafmt.settings.panel.use.intellij.formatter.for.code.range.formatting=使用 IntelliJ 格式化程序進行程式碼範圍格式化
scalafmt.settings.panel.use.intellij.formatter.for.code.range.formatting.warning.tooltip=使用 Scalafmt 設定程式碼範圍格式可能導致程式碼不一致。<br>Scalafmt 設計為僅格式化包含 scala 程式碼的整個檔案
scalafmt.suggester.detected.in.project=在此專案中檢測到了 Scalafmt 組態，是否啟用 scalafmt 格式化程序?
scalafmt.suggester.dont.show=不顯示
scalafmt.suggester.enable=啟用
scope.file=檔案
scope.selection=選區
script.file.mode.always.ammonite=始終選擇 Ammonite
script.file.mode.always.worksheet=始終為工作表
script.file.mode.ammonite.in.test.sources.otherwise.worksheet=測試原始碼中的 Ammonite，否則為工作表
scrutinee.incompatible.pattern.type=Scrutinee 與模式類型不相容，實際為 {0}，要求 {1}
sdk.create.select.files=選擇適用於新 Scala SDK 的 JAR
sdk.notification.provider.no.scala.sdk.in.module=模組中沒有 Scala SDK
sdk.notification.provider.setup.scala.sdk=設定 Scala SDK
sdk.scan.title=正在定位 Scala SDK: {0}
sdk.table.model.docs=文檔
sdk.table.model.location=位置
sdk.table.model.sources=原始碼
sdk.table.model.version=版本
sdkman=SDKMAN!
sealed.modifier.is.not.allowed.here=此處不允許使用 ''sealed'' 修飾符
searching.for.overriding.members=正在搜尋覆寫成員
select.library.from.the.list.above=從以上列表中選擇庫
select.method.implement=選擇要實作的成員
select.method.override=選擇要覆寫的成員
selected.file.is.not.a.valid.jar.file=所選檔案不是有效的 jar 檔案
semi.expected=應為 '';'' 或換行符
semicolon.not.allowed.here=此處不允許使用分號
show.implicit.arguments.action.description=顯示隱式實參
show.implicit.arguments.action.text=顯示隱式實參
simple.pattern.expected=簡單模式的起始非法
spaces.panel.after.colon.before.declarations.type=冒號後面，宣告的類型前面
spaces.panel.around.at.in.pattern.bindings=模式綁定中的 ''@'' 周圍
spaces.panel.before.colon.after.declarations.name=冒號前面，宣告的名稱後面
spaces.panel.before.context.bound.colon.leading=在上下文邊界冒號前面(前導)
spaces.panel.before.context.bound.colon.leading.higher.kinded=在上下文邊界冒號前面(前導高階)
spaces.panel.before.context.bound.colon.rest=在上下文邊界冒號前面(剩餘)
spaces.panel.before.opening.square.bracket=在左中括號前面
spaces.panel.constructor.parameters.with.modifiers=帶修飾符的建構函式參數
spaces.panel.import.braces=匯入大括號
spaces.panel.infix.method.call.parentheses=中綴方法呼叫圓括號
spaces.panel.infix.method.parentheses=中綴方法圓括號
spaces.panel.infix.operator.like.method.call.parentheses=類似於中綴運算符的方法呼叫圓括號
spaces.panel.inside.closure.braces=右大括號內
spaces.panel.keep.one.line.comments.on.same.line=在同一行中保留一行註釋
spaces.panel.method.call.left.brace=方法呼叫左大括號
spaces.panel.newline.after.annotations=在註解後面換行
spaces.panel.preserve.space.before.method.parentheses=保留方法圓括號前面的空格
spaces.panel.self.type.braces=自類型大括號
spaces.panel.simple.one.line.block.braces=簡單的單行塊大括號
specify.result.type=指定結果類型
specify.return.type.explicitly=指定類型(&T)
specify.type.of.exception=指定異常類型
stable.identifier.required=需要穩定的關鍵字，但找到的是 {0}
string.literal.invalid.escape.character=無效的轉義字元
string.literal.invalid.unicode.escape=無效的 unicode 轉義
string.literal.is.too.long=字串文字大小超出編譯器限制
subscript.surrounder.template.description=下標: ,, ,,
suitable.method.not.found=找不到適合的方法
super.reference.used.in.extracted.member=提取的成員 {0} 參照了 super 成員，但提取的特徵不會有基類別
superscript.surrounder.template.description=上標: ^ ^
support.back.references.in.shared.sources=支援共享資源中的反向參照(實驗性)(&S)
support.back.references.in.shared.sources.tooltip=啟用此設定後，IntelliJ 將能夠處理從共享源模組<br>對相依模組中的宣告的參照
suspicious.forward.reference.template.body=類別中的可疑前向參照
symbol.is.inaccessible.from.this.place=無法從此處存取符號 {0}
symbolliterals.are.deprecated=Scala 2.13 中已棄用符號文字。請改用 Symbol("{0}")。
system.wide.scala=系統範圍 Scala
target.0.already.contains.definition.of.1=<b>{0}</b> 已包含成員 <b>{1}</b> 的定義
this.is.not.a.valid.scala.qualified.name=這不是有效的 Scala 限定名稱
title.choose.implicit.conversion.method=選擇隱式轉換方法:
title.download=下載
title.error.downloading.scala.libraries=下載 Scala 庫時出錯
title.expressions=表達式
title.extensions.available=可用的擴展
title.failed.to.load.extension.jar=無法載入擴展 JAR
title.fetching.available.this.versions=正在提取可用的 {0} 版本
title.problem.opening.web.page=開啟網頁時出現問題
title.scala.sdk.files=Scala SDK 檔案
title.searching.for.library.extensions=正在搜尋庫表達式
to.import.method.statically.press.hotkey=要靜態匯入方法，請按 {0}
toggle.type.aware.highlighting.menu.action.description=切換類型感知醒目提示顯示
toggle.type.aware.highlighting.menu.action.text=切換類型感知醒目提示顯示
too.many.type.arguments.for.typeparamowner={0}的類型實參過多，應為 {1} 個，實際為 {2} 個
topic.parameters.may.not.be.call.by.name={0} 參數可能不是傳名呼叫
trailing.comma.panel.add.when.multiline=多行時新增
trailing.comma.panel.keep=保留
trailing.comma.panel.remove.when.multiline=多行時移除
trailing.comma.panel.scope.arguments.list=實參列表
trailing.comma.panel.scope.import.selector=import 選擇器
trailing.comma.panel.scope.parameters.list=參數列表
trailing.comma.panel.scope.pattern.arguments.list=模式實參列表
trailing.comma.panel.scope.tuple=元組
trailing.comma.panel.scope.tuple.type=元組類型
trailing.comma.panel.scope.type.parameters.list=類型參數列表
trailing.comma.panel.title=尾隨逗號
trailing.commas.mode.auto=自動
trailing.commas.mode.disabled=已停用
trailing.commas.mode.enabled=已啟用
trailing.underscore.separator=不允許使用尾隨的下劃線分隔符
trait.has.implementations=混合到
trait.has.several.implementations=混合到 {0} 類別中
trait.is.already.implemented.by.superclass=特徵 {0} 已由超類別 {1} 實作，不能再次呼叫其建構函式
trait.may.not.call.constructor=特徵 {0} 不能呼叫 {1} 的建構函式
trait.parameter.require.scala3=特徵參數需要使用 Scala 3.0
traits.cannot.have.type.parameters.with.context.bounds=特徵不能具有包含上下文邊界的類型參數
traits.cannot.have.type.parameters.with.view.bounds=特徵不能具有包含檢視邊界的類型參數
transparent.method.must.be.inline=關鍵字 `transparent` 只能用於內聯方法
tree.mismatch.tooltip=<html><body>{0}<table><tr><td>要求 </td>{1}</tr><tr><td>實際: </td>{2}</tr></table></body></html>
try.block=try 塊
type.annotations.panel.accidental.structural.type=意外結構類型
type.annotations.panel.accidental.structural.type.tooltip=<html>強制對值執行類型註解，它們具有推斷的結構類型，例如<br>\n<pre><code>\nval foo = Runnable {\n  override def run(): Unit = ()\n  def helper(): Unit = ()\n} // foo 具有推斷類型 Runnable { def helper(): Unit } \n</code></pre></html>
type.annotations.panel.annotated.with=註解方式:
type.annotations.panel.annotations=註解
type.annotations.panel.classes=類別
type.annotations.panel.constant.final.val=常數(final val)
type.annotations.panel.enforce.for=對以下物件實施
type.annotations.panel.except.when=以下情況除外
type.annotations.panel.function.literal.parameter=函式文字參數
type.annotations.panel.implicit.definition=隱式定義
type.annotations.panel.in.scala.dialect.sources=在 Scala 方言原始碼中
type.annotations.panel.in.scala.dialect.sources.tooltip=*.sbt、*.sc 等
type.annotations.panel.in.test.sources=測試原始碼中
type.annotations.panel.local.definition=本地定義
type.annotations.panel.member.of=成員上級:
type.annotations.panel.member.of.anonymous.class=匿名類別的成員
type.annotations.panel.member.of.private.class=私有類別的成員
type.annotations.panel.private.member=private 成員
type.annotations.panel.protected.member=protected 成員
type.annotations.panel.public.member=public 成員
type.annotations.panel.title=類型註解
type.annotations.panel.type.is.stable=類型穩定
type.annotations.panel.type.is.stable.tooltip=<html><body>當右側為:<br> 文字: <code>123</code>、<code>"string"</code> 等( <code>null</code> 除外)<br> Unit 表達式: <code>()</code><br> 物件建立: <code>new Foo(...)</code> (包含細化的除外: <code>new Foo() {}</code>)<br> 工廠方法呼叫: <code>Foo(...)</code> (遇到伴生物件時呼叫 <code>apply(...)</code>)<br> 空集合: <code>Seq.empty[Int]</code>、<code>Map.empty[Int, String]</code> 等。<br> Java 枚舉常數: <code>Enum.VALUE</code><br> 異常: <code>throw Exception()</code> </body></html>
type.annotations.panel.type.matches=類型符合:
type.annotations.panel.type.patterns=類型模式
type.annotations.panel.underscore.parameter=為參數加下劃線
type.annotations.panel.unit.type=Unit 類型
type.annotations.panel.use.for=用於
type.arg.does.not.conform.to.lower.bound=類型 {0} 不符合類型參數 {2} 的下界 {1}
type.arg.does.not.conform.to.upper.bound=類型 {0} 不符合類型參數 {2} 的上界 {1}
type.aware.highlighting.title=Scala 類型感知醒目提示顯示
type.cannot.be.used.in.type.pattern=類型 {0} 不能在類型模式或 isInstanceOf 測試中使用
type.checker.built.in=內建
type.checker.compiler=編譯器
type.checker.help=<html><strong>內建</strong>: 更多功能，更快的反饋，輕量化。發現複雜程式碼中可能的虛假錯誤。<br><br><strong>編譯器</strong>: 更精確。更慢，使用更多資源，但不支持類型差異、快速修復、檢查等功能。<br><br>除非特定程式碼庫中有許多虛假錯誤，否則建議使用內建類型檢查器。</html>
type.checker.label.scala2=Scala 2:
type.checker.label.scala3=Scala 3:
type.constructor.does.not.conform=類型建構函式 {0} 不符合 {1}
type.constructor.mismatch=類型建構函式不符合。
type.expected=應為類型
type.info.description=顯示類型資訊
type.info.text=類型資訊
type.is.not.a.valid.result.type.of.an.unapply.method={0} 不是 unapply 方法的有效結果類型
type.is.not.a.valid.result.type.of.an.unapplyseq.method={0} 不是 unapplySeq 方法的有效結果類型
type.lambda.expected=應為 ''=>>''
type.mismatch.default.args.expected.actual=類型不符合涉及預設實參，應為: {0}，實際為: {1}
type.mismatch.dot=類型不符合。
type.mismatch.expected=類型不符合，應為 {0}，實際為 {1}
type.mismatch.expected.actual=類型不符合，應為 {0}，實際為 {1}
type.mismatch.found.required=類型不符合，實際為 {0}，要求 {1}
type.mismatch.hint.context.menu.configure=組態類型不符合提示…
type.mismatch.message=類型不符合。要求 {0}， 實際為 {1}
type.parameter.value.class.may.not.be.specialized=值類別的類型參數可能沒有專用化
type.parameters.for.self.type.not.supported=提取的特徵將以 {0} 作為自類型，但不支持識別其類型參數
type.takes.type.parameters=類型 {0} 接受類型參數
typed.statement.is.not.complete.for.underscore.section=下劃線部分的類型化語句不完整
unbound.placeholder.parameter=未綁定的佔位符參數
unchecked.warnings=未檢查的警告(&U)
unchecked.warnings.tooltip=生成的程式碼取決於假設時，啟用其他警告。
underline.surrounder.template.description=下劃線: __ __
unknown.exception=未知異常: {0}
unknown.extraction=未知提取
unknown.macro.in.type.position=類型位置中的巨集未知
unknown.resolve.issues=未知的解析問題: {0}
unknown.type=<未知>
unreachable.error=發現意外錯誤
unresolved.artifact=未解析的工件: {0}
unspecified.type.parameters=未指定的類型參數: {0}
unwrap.case.clause=解包 case 子句
unwrap.finally=解包 finally
unwrap.interpolated.string.injection=解包插值字串注入
unwrap.try.with.finally=解包 try / finally
updating.of.usages.of.generated.unapply=不支持對生成的 `unapply` 方法的用法進行更新
upgrade.to.interpolated=鍵入 '${' 後，將簡單字串升級為插值字串
usage.access.modifier=存取修飾符
usage.extractor=提取程序
usage.function.expression=函式表達式
usage.implicit.conversion.parameter=隱式轉換/參數
usage.interpolated.string.prefix=插值字串前綴
usage.method.apply=`apply` 方法
usage.named.parameter=命名參數
usage.package.clause=軟體套件子句
usage.parameter.in.pattern=模式中的參數
usage.sam.interface.implementation=SAM 接口實作
usage.secondary.constructor=輔助建構函式
usage.self.type=自類型
usage.this.reference=This 參照
usage.type.alias=類型別名
usage.type.bound=類型綁定
usage.typed.pattern=類型化模式
usage.typed.statement=類型化語句
usage.unresolved.implicit.conversion.parameter=未解析的隱式轉換/參數
use.compiler.ranges.help=<html><strong>適用於當錯誤醒目提示設定為“編譯器”時。</strong><br><br>選中後，會將 Scala 編譯器報告的文本範圍用於醒目提示編輯器中的程式碼。這可能會導致針對給定的編譯錯誤醒目提示較大的文本範圍。<br><br>取消選中後，會在編輯器中針對給定的編譯錯誤醒目提示較小的文本範圍。</html>
using.parameter.clause.expected=應為 ''using'' 參數子句
val.name=val {0}
val.on.case.class.param.redundant=對於 case 類別主建構函式的參數而言，''val'' 修飾符冗餘
val.or.var.can.only.be.used.in.class.parameters=''{0}'' 僅可在類別參數中使用
val.var.expected=應為 val 或 var 關鍵字
value.class.can.have.only.one.parameter=值類別只能有一個參數
value.class.can.have.only.val.parameter=值類別只能有一個非私有 val 參數
value.classes.can.have.only.defs=值類別中不允許欄位定義
value.classes.cannot.have.nested.objects=值類別不能有嵌套的類別、物件或特徵
value.classes.cannot.redefine.equals.hashcode=值類別無法重新定義 equals 和 hashCode
value.classes.may.not.be.member.of.another.class=值類別不得為另一個類別的成員
var.cannot.be.overridden=不能覆寫可變變數
var.cannot.override.val=變數 {0} 無法覆寫不可變值
var.name=var {0}
vararg.pattern.must.be.last.pattern=_* 僅可用於最後一個實參
vararg.pattern.with.at.deprecated.since.scala3=vararg 模式中的 ''@'' 語法自 Scala 3.0 起已棄用
vararg.pattern.with.colon.requires.scala3=vararg 模式中的 '':'' 語法需要使用 Scala 3.0
variable.names=變數名稱: {0}
variance.annotation.not.allowed=此處不允許差異註解
variance.bivariant=雙變
variance.contravariant=逆變
variance.covariant=協變
variance.invariant=不變
view.bounds.not.allowed=此處不允許檢視邊界
while.expected=''do'' 語句中應有 while 關鍵字
while.statement=while 語句
wrap.in.option.hint=使用 Option(...) 包裝表達式?
wrap.in.option.name=使用 Option 包裝
wrap.single.expression.body=鍵入 '{' 後，使用右大括號包裝單個表達式主體
wrapping.and.braces.panel.align.if.else.statements=對齊 if-else 語句
wrapping.and.braces.panel.align.in.columns.case.branches=對齊列 ''case'' 分支
wrapping.and.braces.panel.align.multiline.pattern.alternatives=對齊多行模式替代項
wrapping.and.braces.panel.align.parameter.types.in.multiline.declarations=多行時對齊參數類型
wrapping.and.braces.panel.align.tuple.elements=對齊元組元素
wrapping.and.braces.panel.do.not.align.block.expression.parameters=不對齊塊表達式參數
wrapping.and.braces.panel.do.not.indent.case.clause.body=不縮排 case 子句體
wrapping.and.braces.panel.do.not.indent.tuples.closing.parenthesis=不縮排元組右圓括號
wrapping.and.braces.panel.extends.align.to.extends=對齊 ''extends''
wrapping.and.braces.panel.extends.do.not.align=不對齊
wrapping.and.braces.panel.extends.on.first.token=在第一個令牌上
wrapping.and.braces.panel.for.indent.yield.after.one.line.enumerators=縮排單行枚舉器後面的 yield
wrapping.and.braces.panel.force.braces=強制使用大括號
wrapping.and.braces.panel.force.case.branch.braces=強制使用 ''case'' 分支大括號
wrapping.and.braces.panel.force.finally.braces=強制 ''finally'' 大括號
wrapping.and.braces.panel.force.try.braces=強制使用 ''try'' 大括號
wrapping.and.braces.panel.groups.anonymous.method.definition=匿名方法定義
wrapping.and.braces.panel.groups.class.definition=類別定義
wrapping.and.braces.panel.groups.method.definition=方法定義
wrapping.and.braces.panel.groups.tuple=元組
wrapping.and.braces.panel.groups.type.arguments=類型實參
wrapping.and.braces.panel.groups.type.parameters=類型參數
wrapping.and.braces.panel.groups.xml.formatting=XML 格式化
wrapping.and.braces.panel.indent=縮排
wrapping.and.braces.panel.indent.braced.arguments=縮排帶大括號的實參
wrapping.and.braces.panel.indent.first.parameter.clause.if.on.new.line=遇到新行時縮排第一個參數子句
wrapping.and.braces.panel.indent.first.parameter.if.on.new.line=遇到新行時縮排第一個參數
wrapping.and.braces.panel.keep.xml.formatting=保持 xml 格式化
wrapping.and.braces.panel.match.statement=''match'' 語句
wrapping.and.braces.panel.new.line.options.new.line.always=始終換行
wrapping.and.braces.panel.new.line.options.new.line.for.multiple.arguments=對多行實參換行
wrapping.and.braces.panel.new.line.options.no.new.line=不換行
wrapping.and.braces.panel.parameters.on.new.line=新行中的參數
wrapping.and.braces.panel.place.self.type.on.new.line=將自類型置於新行中
wrapping.and.braces.panel.renamed.extends.keyword=extends 關鍵字
wrapping.and.braces.panel.renamed.extends.with.list=extends/with 列表
wrapping.and.braces.panel.renamed.force.yield.braces=強制使用 yield 大括號
wrapping.and.braces.panel.renamed.infix.expressions=中綴表達式
wrapping.and.braces.panel.simple.one.line.lambdas.in.arg.list=實參列表中簡單的單行 lambda
wrapping.and.braces.panel.use.normal.indent.for.parameters=對參數使用標準縮排
wrapping.and.braces.panel.wrap.before.with.keyword=在 ''with'' 關鍵字前換行
wrong.annotation.expression=錯誤的註解表達式
wrong.binding=錯誤參數
wrong.case.modifier=錯誤的 case 修飾符。將它用於類別或物件
wrong.constr.expression=錯誤的建構函式表達式
wrong.declaration.in.block=塊不能包含宣告
wrong.existential.declaration=錯誤的存在宣告。它必須是類型宣告或值宣告
wrong.expression=錯誤的表達式
wrong.number.arguments.extractor=提取程序的實參數量錯誤，實際為 {0} 個，應為 {1} 個
wrong.number.arguments.extractor.unapplySeq=提取程序的實參數量錯誤，實際為 {0} 個，應為 {1} 個或更多
wrong.parameter=錯誤參數
wrong.pattern=錯誤模式
wrong.postfix.expression=錯誤的後綴表達式
wrong.psi.for.literal.type="用於獲取文字類型的元素錯誤"
wrong.qual.identifier=錯誤的限定關鍵字
wrong.string.literal=字串文字錯誤
wrong.stub.problem=錯誤的存根問題
wrong.top.statement.declaration=錯誤的頂部語句宣告
wrong.type=錯誤類型
wrong.type.associativity=錯誤的關聯性。所有運算符應有相同的關聯性
wrong.type.element=錯誤的類型元素
wrong.type.no.literal.types=錯誤的類型 `{0}`，使用 Scala 2.13 或帶有 `-Yliteral-types` 編譯器標誌的 Typelevel Scala 來支援文字類型
wrong.val.declaration=錯誤的值宣告
wrong.var.declaration=錯誤的變數宣告
xml.PI.end.expected=應為 xml 處理指令結尾
xml.attribute.end.expected=應為 xml 特性值結束分隔符
xml.attribute.value.expected=應為特性值
xml.cdata.end.expected=應為 xml CData 結尾
xml.comment.end.expected=應為 xml 註釋結束 (''-->'')
xml.delete.unmatched.tag=刪除不符合的標記
xml.end.tag.expected=應為 xml 結束標記(''</'' name '>')
xml.eq.expected=應為 ''=''
xml.name.expected=應為 xml 標記名稱
xml.no.closing.tag=無結束標記
xml.no.opening.tag=無起始標記
xml.rename.closing.tag=重新命名結束標記
xml.rename.opening.tag=重新命名起始標記
xml.scala.expression.expected=xml 注入中應有 Scala 表達式
xml.scala.injection.end.expected=應為 xml 中的 Scala 注入結尾('}')
xml.scala.patterns.expected=xml 注入中應有 Scala 模式
xml.tag.end.expected=應為 xml 標記結尾
xml.wrong.character=xml 註釋中的錯誤字元