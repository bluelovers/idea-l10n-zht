
git.module.name=Git
git.module.description=學習如何在 IDE 中使用 Git 整合
git.window.closed.warning=按 {0} 再次開啟{1}工具視窗。
git.project.history.lesson.name=專案歷史記錄
git.project.history.open.git.window=按 {0} 開啟<strong>專案歷史記錄</strong>並在一個可視化時間線中預覽執行的所有提交。
git.project.history.commits.tree.explanation=提交樹位於工具視窗的中心。您可以看到您的有效分支的最後提交被高亮顯示。請注意，高亮顯示的提交下方的所有提交也來自此分支，它們使用不同的顏色標識。剩餘提交位於其他分支。
git.project.history.apply.branch.filter=您的儲存庫的所有分支都列出在工具視窗的左側窗格中。{0,choice,0#單擊|1#雙擊} <strong>HEAD</strong> 分支僅顯示來自有效分支的提交。
git.project.history.apply.user.filter=您可以使用多個篩選器來幫助您發現提交。例如，您可以預覽特定作者的提交。點擊高亮顯示的篩選器以開啟使用者列表。
git.project.history.select.me=從列表中選擇 {0} 以僅顯示您的提交。
git.project.history.apply.message.filter=高亮顯示的搜尋欄位可以幫助您通過訊息或哈希尋找提交。假設您希望通過訊息的一部分尋找提交。例如，在高亮顯示的欄位中鍵入 {0} 並按 {1}。
git.project.history.select.commit=選擇高亮顯示的提交以獲取它的相關資訊。
git.project.history.commit.details.explanation=工具視窗的右側窗格顯示所選提交的相關資訊: 一些元資料以及包含此提交的分支。
git.project.history.click.changed.file=還有一個包含此提交中更改的所有檔案的樹。雙擊高亮顯示的檔案以預覽其變更。
git.project.history.invitation.to.commit.lesson=太棒了! 我們將在下一課中探索如何創建提交。
git.commit.lesson.name=提交
git.commit.open.commit.window=假設您修改了專案中的某些檔案，並希望將其提交到當前分支。
git.commit.choose.files={0}工具視窗提供了廣泛的提交自訂。假設您不希望 {1} 成為提交的一部分。清除複選框可以將其排除。
git.commit.choose.files.balloon=取消選擇高亮顯示的檔案可以將其從提交中排除
git.commit.open.before.commit.options=現在，編輯提交選項。按 {0} 開啟“Git 選項”彈出視窗。
git.commit.analyze.code.explanation=使用 {0} 獲得在要提交的檔案中發現的警告和錯誤的通知。在本課中，您可以保持此選項不變。
git.commit.enable.reformat.code=選擇 {0} 以根據程式碼樣式自動編輯檔案。
git.commit.close.commit.options=選擇必要選項後，關閉提交選項彈出視窗。按 {0}。
git.commit.perform.commit=現在，編輯提交訊息或者按建議保持不變。然後，點擊“{0}”按鈕執行提交。
git.commit.open.git.window=太棒了! 按 {0} 開啟 <strong>Git</strong>工具視窗並在樹中找到您的提交。
git.commit.select.top.commit=選擇樹中的頂層提交以查看它的更多詳細資訊。
git.commit.committed.file.explanation=<strong>Git</strong> 工具視窗的右側窗格顯示上次提交更改的檔案。
git.commit.select.amend.checkbox=如果您忘記將一些變更添加到最後執行的提交，該怎麼辦? 最好的方式是使用{0}功能編輯最後的提交。按 {1} 或選擇{2}工具視窗中的“{0}”復選框。
git.commit.select.file=選擇高亮顯示的檔案可以將其添加到提交中。
git.commit.amend.commit=點擊“{0}”按鈕編輯最後的提交。
git.commit.select.top.commit.again=再次選擇 <strong>Git</strong> 工具視窗中的頂層提交可以查看修改的提交的相關資訊。
git.commit.two.committed.files.explanation=現在，您可以看到目標提交包含兩個更改的檔案。
git.feature.branch.lesson.name=功能分支工作流
git.feature.branch.introduction.1=假設您已完成 {0} 分支上的工作，並將變更推送到遠端以稍後將其與 {1} 分支合併。按 {2} 開啟 <strong>Git</strong> 工具視窗並預覽專案歷史記錄。
git.feature.branch.introduction.2=但是，在您處理功能時，您的同事也可能將其變更推送到 {0} 分支。我們來檢查 {0} 中的可能變更不會與您的變更衝突。
git.feature.branch.open.branches.popup.1=首先，簽出 {0} 分支。按 {1} 或點擊高亮顯示的當前分支以開啟分支列表。
git.feature.branch.open.branches.popup.balloon=您的有效分支將顯示在這裡
git.feature.branch.checkout.branch=選擇 {0} 分支並從選單中選擇“{1}”。
git.feature.branch.open.update.dialog=現在，更新 {0} 分支以納入遠端儲存庫中的潛在變更。
git.feature.branch.confirm.update=點擊“{0}”確認更新。
git.feature.branch.new.commits.explanation=您可以注意到 {0} 分支中的一些變更。
git.feature.branch.open.branches.popup.2=因此，您應該將提交放在來自 {0} 分支的新提交之後。您可以使用 {1} 功能執行此操作。按 {2} 或點擊高亮顯示的當前分支可再次開啟分支列表。
git.feature.branch.checkout.and.rebase=選擇 {0} 分支並選擇 {1}。
git.feature.branch.open.push.dialog=當 {0} 分支更新後，您也應當在遠端儲存庫中進行更新。
git.feature.branch.choose.force.push=您不能只推送變更，因為遠端 {0} 分支與更新的本地分支衝突。使用 {1}。按“{2}”按鈕附近高亮顯示的箭頭以開啟列表並選擇 {1}。
git.feature.branch.confirm.force.push=再次按 {0} 以確認操作。
git.interactive.rebase.lesson.name=互動式變基
git.interactive.rebase.open.git.window=假設您已對您的專案進行一些修正。按 {0} 開啟 <strong>Git</strong> 工具視窗並預覽專案歷史記錄。
git.interactive.rebase.introduction=查看高亮顯示的提交序列，一般很難確定已經發生變化的內容。如果您可以對一些提交進行重新排序或壓縮，就會更容易。
git.interactive.rebase.open.context.menu=使用<strong>互動式變基</strong>可以解決此任務。右鍵點擊高亮顯示的提交以開啟右鍵選單。
git.interactive.rebase.choose.interactive.rebase=選擇列表中的 {0}。
git.interactive.rebase.select.one.commit=似乎高亮顯示的提交修正了列表中最頂端提交中的一些內容。如果將兩個提交組合，那就太棒了。請選擇高亮顯示的提交。
git.interactive.rebase.move.commit=現在，將此提交向上移至高亮顯示的區域。使用滑鼠或按三次 {0}。
git.interactive.rebase.invoke.fixup=按 {0} 或點擊高亮顯示的按鈕，從列表中選擇 {1}，將此提交中的變更添加到最頂端的提交中。
git.interactive.rebase.select.three.commits=太棒了! 三個高亮顯示的提交看起來大致相同了，您可以將其組合成一個並編輯生成的訊息。點擊提交並按 {0}，選擇高亮顯示的提交。
git.interactive.rebase.invoke.squash=按 {0} 或點擊“{1}”按鈕以組合提交。
git.interactive.rebase.apply.reword=預設情況下，所有被壓縮提交的訊息都已包含到生成的訊息中。不過，在本課中，將訊息取代為類似於 <code>Fix style</code> 的內容。如果需要，可以編輯訊息並按 {0} 以套用改寫。
git.interactive.rebase.start.rebasing=最後，點擊“{0}”。
git.interactive.rebase.congratulations=恭喜! 您已清理專案的歷史記錄!
git.changelists.shelf.lesson.name=變更列表和擱置
git.changelists.shelf.introduction=假設由於僅在本地需要，您不希望將添加的註釋提交到儲存庫。通常，它可以呈現一些個人設定。您可以將註釋提取到新的變更列表中，以免意外地與其他變更一起提交。點擊高亮顯示的行標記以開啟右鍵選單。
git.changelists.shelf.choose.new.changelist=點擊“{0}”並選擇“{1}”選單項。
git.changelists.shelf.create.changelist=為新的變更列表 <code>Comments</code> 命名。按 {0} 或點擊“{1}”以創建一個新的變更列表。
git.changelists.shelf.open.commit.window=現在，我們來檢查創建的變更列表。
git.changelists.shelf.explanation=此外，您還可以使用{0}功能將這些變更儲存到您的計算機上的檔案中。{0} 中存儲的變更可以稍後套用到任何分支。這樣可以幫助您避免丟失這些變更。
git.changelists.shelf.open.context.menu=我們來擱置變更! 右鍵點擊高亮顯示的變更列表以開啟右鍵選單。
git.changelists.shelf.open.shelf.dialog=選擇 {0} 以開啟“{1}”對話框。
git.changelists.shelf.shelve.changelist=現在，您可以編輯訊息或保持不變。點擊 {0} 以將變更存儲在 {1} 中。
git.changelists.shelf.remove.changelist=您不再需要此變更列表，因此請點擊“{0}”按鈕。
git.changelists.shelf.performed.explanation=您可以注意到變更列表已成功儲存到 {0} 中，並且註釋已消失。
git.changelists.shelf.open.unshelve.dialog=您的變更存儲到 {0} 中後，您可以重新套用它們。選擇高亮顯示的變更列表並按 {1} 以開啟<strong>取消擱置</strong>對話框。
git.changelists.shelf.unshelve.changelist=現在，您可以編輯變更列表的名稱以納入取消擱置的變更或保持不變。點擊“{0}”以套用變更。
git.annotate.lesson.name=使用 Git 追溯註解
git.annotate.introduction=查看高亮顯示的屬性。屬性值暗示一隻貓有四個耳朵。此變更的原因耐人尋味。我們可以使用{0}功能調查檔案的歷史記錄。
git.annotate.invoke.shortcut.1=按 {0} 顯示此檔案的歷史記錄。
git.annotate.open.context.menu=右鍵點擊高亮顯示的左側間距以開啟右鍵選單。
git.annotate.choose.annotate=選擇“{0}”選項以顯示此檔案的歷史記錄。
git.annotate.add.shortcut.tip=<strong>提示</strong>: 您可以為{0}操作分配快捷鍵。點擊此鏈接 {1} 並選擇 {2}。
git.annotate.feature.explanation={0}操作讓您可以輕鬆存取修改檔案中特定行的最後提交。您可以看到 {1} 是最後修改此行的人。右鍵點擊高亮顯示的註解以開啟右鍵選單。
git.annotate.choose.show.diff=選擇“{0}”選項以顯示此提交中的更改內容。
git.annotate.go.deeper=您可以注意到 {0} 的值顯示在此提交之前。因此，我們來更深入地查看歷史記錄!
git.annotate.invoke.shortcut.2=將文字游標移至左側編輯器並再次按 {0}。
git.annotate.invoke.manually=右鍵點擊高亮顯示的區域並從開啟的選單中選擇“{0}”選項。
git.annotate.show.diff=右鍵點擊高亮顯示的註解以開啟右鍵選單並選擇“{0}”。
git.annotate.found.needed.commit=太棒了! 我們找到了 {0} 值發生變化的地方。讓我們最後對它進行註解以調查此變更的原因。
git.annotate.invoke.shortcut.3=將文字游標移至右側編輯器並按 {0}。
git.annotate.click.annotation=點擊高亮顯示的註解以預覽此提交的相關資訊。
git.annotate.close.all.windows=接下來關閉{0,choice,0#所有開啟的視窗|1#所有開啟的編輯器頁籤}以返回編輯器。按兩次 {1}。
git.annotate.close.annotations=現在，您可以關閉註解。
git.annotate.close.by.shortcut=按 {0}。
git.quick.start.lesson.name=快速入門
git.quick.start.find.action=您可以使用{0}操作克隆現有的 Git 儲存庫。按兩次 {1} 開啟“{2}”彈出視窗。
git.quick.start.type.clone=在搜尋欄位中鍵入 {0} 並選擇高亮顯示的選項。
git.quick.start.clone.dialog.got.it.1=您可以使用儲存庫 URL 將儲存庫克隆到指定目錄
git.quick.start.clone.dialog.got.it.2=您也可以連接到其他熱門版本控制系統並克隆這些系統中存儲的儲存庫
git.quick.start.close.clone.dialog=但是，我們已經為本課準備了一個沙盒儲存庫。您可以關閉此對話框。
git.quick.start.open.branches=很好! 接下來，我們將使用 IDE 的整合來研究一下如何執行一些基本的 Git 工作流。例如，可以是: <strong>簽出新分支 → 進行更改並提交 → 推送</strong>。首先，按 {0} 或者點擊高亮顯示的當前分支以開啟分支列表。
git.quick.start.choose.new.branch.item=從列表中選擇 {0}。
git.quick.start.name.new.branch=輸入新分支的任意名稱。然後按 {0} 或點擊“{1}”。
git.quick.start.modify.file=在新分支中，您可以對檔案進行更改，IDE 將檢測這些變更。例如，我們在開啟的檔案中修改貓眼的顏色。將 {0} 取代為其他顏色。
git.quick.start.open.commit.window=現在，您可以提交更改的檔案。
git.quick.start.commit.window.got.it=在這裡，您可以選擇要提交的檔案
git.quick.start.perform.commit=在高亮顯示的區域中鍵入提交訊息。例如，可以是 <code>Edit eyes color of puss in boots</code>。然後，點擊“{0}”。
git.quick.start.open.push.dialog=執行提交後，您可以將其推送到遠端儲存庫。
git.quick.start.perform.push=現在，點擊“{0}”。您的提交將被推送到在您計算機上創建的儲存庫用作教程。
git.annotate.invoke.manually.2=右鍵點擊高亮顯示的區域並從選單中選擇“{0}”選項。
git.use.non.modal.commit.ui.warning=您需要啟用非強制回應提交介面才能完成本課。按 {0}，轉到“{1} <strong>→</strong> {2}”，然後選擇“{3}”。
git.project.history.close.diff=預覽變更後關閉差異視窗。按 {0}。
git.open.dialog={0,choice,0#按 {1} 或點擊“{2}”|1#按 {1} }以開啟“{3}”對話框。
git.open.tool.window={0,choice,0#按 {1} 或點擊“{2}”|1#按 {1} }以開啟“{3}”工具視窗。
git.feature.branch.force.push.tip=<strong>提示</strong>: 如果您不是該分支的唯一使用者，請勿使用 {0}。否則，您同事的提交可能會丟失。
git.project.history.click.head.tooltip={0,choice,0#單擊|1#雙擊} <strong>HEAD</strong> 以僅顯示有效分支中的提交
git.project.history.click.filter.tooltip=點擊以開啟使用者列表
git.commit.open.options.tooltip=點擊以開啟“{0}”選項
git.interactive.rebase.click.commit.tooltip=右鍵點擊高亮顯示的提交
git.changelists.shelf.click.changelist.tooltip=右鍵點擊 {0} 變更列表
git.annotate.click.annotation.tooltip=右鍵點擊註解
git.click.balloon=點擊 {0}
git.changelists.shelf.click.line.marker.balloon=點擊行標記
git.changelists.shelf.congratulations=恭喜! 現在，您已經知道如何管理變更列表和擱置變更了。
git.annotate.click.gutter.balloon=右鍵點擊間距
git.quick.start.introduction=在本課中，您將學習如何克隆現有專案並使用 Git 整合的 IDE 功能執行基本的版本控制工作流。
git.annotate.close.changes=就我們看到的高亮顯示的提交訊息而言，這個奇怪的值 {0} 並非錯誤。因此，在瀏覽了此檔案的諸多歷史記錄之後，您可以關閉開啟的工具視窗。按 {1}。
git.quick.start.help.link=設定 Git 儲存庫
git.commit.help.link=提交變更並將其推送到 Git 儲存庫
git.feature.branch.help.link=管理 Git 分支
git.interactive.rebase.help.link=通過執行交互式變基來編輯專案歷史記錄
git.changelists.shelf.help.link=使用 Git 可以同時處理多個功能
git.annotate.help.link=定位程式碼作者(使用 Git 追溯註解)
git.not.use.staging.area.warning=您需要禁用<strong>暫存區域</strong>才能完成本課。按 {0}，轉到“{1} <strong>→</strong> {2}”，然後取消選擇“{3}”。
git.click.to.change.settings=或者，<callback id="{0}">點擊</callback>以更改設定。