change.class.parameter.incorrect.type.error.hint=錯誤類型
change.class.type.parameter.family.name=更改類類型參數
checkbox.statically.import.matcher.methods=靜態匯入符合程序的方法
convert.to.atomic.family.name=轉換為原子
convert.to.longadder.family.name=轉換為 LongAdder
convert.to.threadlocal.family.name=轉換為 ThreadLocal
guava.functional.primitives.can.be.replaced.by.java.api.problem.description=Guava 的函數基元可以取代為 Java API
inspection.guava.erase.option=從轉換後的函數中擦除 @javax.annotations.Nullable
inspection.guava.method.chains.option=報告方法鏈
inspection.guava.return.types.option=報告返回類型
inspection.guava.variables.option=報告變數
inspection.migrate.assert.to.matcher.description=斷言表達式 <code>#ref</code> 可以取代為 ''{0}'' 調用 #loc
migrate.fix.text=<html>將 {0} 類型遷移到 ''{1}''</html>
migrate.guava.to.java.family.name=將 Guava 類型遷移到 Java
migrate.method.chain.fix.text=將方法鏈類型遷移到 ''{0}''
inspection.guava.name=Guava 的函數基元可以取代為 Java
inspection.assertion.name=JUnit 斷言可以是 'assertThat()' 調用