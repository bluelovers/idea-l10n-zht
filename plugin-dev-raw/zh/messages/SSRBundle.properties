
#replacement dialog preview
structural.replace.preview.dialog.title=結構取代預覽
replace.preview.oktext=取代(&R)
replacement.code=取代程式碼

# Search Dialog specific titles/options
structural.search.title=結構搜尋
search.template=搜尋模板:
template.name.button=模板名稱

save.template.description.button=儲存當前模板
save.inspection.action.text=將模板另存為檢查…
create.inspection.from.template.action.text=從模板創建檢查…
new.template.defaultname=未命名

search.in.injected.checkbox=注入的程式碼(&J)
reformat.checkbox=重新格式化(&R)
use.static.import.checkbox=使用靜態匯入(&I)
search.target.label=目標(&T):


open.in.new.tab.checkbox=在新標籤開啟 (&B)
search.dialog.file.type.label=語言(&L):

import.template.action=從剪貼簿匯入模板
export.template.action=將模板匯出到剪貼簿
no.template.found.warning=剪貼簿上未找到模板
import.template.script.warning.title=警告: 模板包含腳本
import.template.script.corrupted=剪貼簿上未找到損壞的模板
import.template.script.warning=請注意，匯入的模板包含 {1,choice,1#1 個 Groovy 腳本修飾符|1<{1} 個 Groovy 腳本修飾符}，並且任何腳本都可以存取完整的 {0} 內部項。請確保腳本不會造成損壞，然後再使用此模板。
switch.to.search.action=切換到搜尋
switch.to.replace.action=切換到取代

#search usage view specific
looking.in.progress.message=正在 {0} 中尋找
found.progress.message=找到 {0} 個匹配項
occurrences.of=與模板 ''{0}'' 符合的片段
occurrences.of.0.in.1={1}中的模板 ''{0}''
replace.occurrences.of.0.with.1.in.2=將{2}中的 ''{0}'' 取代為 ''{1}''
found.occurrences=在{0}中找到符合項
targets.node.text=結構搜尋模板

# search dialog messages
this.pattern.is.malformed.message=指定模板的格式錯誤
incorrect.pattern.message=錯誤模板


# filters
count.filter.name=計數
reference.filter.name=引用
script.filter.name=腳本
text.filter.name=文本
type.filter.name=類型
context.filter.name=上下文
add.filter.title=添加修飾符
add.filter.label=添加修飾符
add.script.label=添加腳本
count.label=計數={0}
default.label= 預設值
max.label=最大值=
min.label=最小值=
reference.label=引用=
reference.0.label=Reference={0}
script.label=腳本=
script.0.label=Script={0}
text.label=文本=
text.0.label=Text={0}
type.label=類型=
type.0.label=Type={0}
context.label=上下文=
context.0.label=上下文={0}
within.hierarchy.label=, 在層次結構內
whole.words.label=, 整個詞
within.type.hierarchy.check.box=在類型層次結構內
regex.check.box=正則表達式
no.filters.whole.template.label=沒有為整個模板添加修飾符。
no.filters.for.0.label=沒有為 ${0}$ 添加修飾符。
no.script.for.0.label=沒有為 ${0}$ 添加腳本。
filters.for.whole.template.title=整個模板的修飾符:
filters.for.0.title=${0}$ 的修飾符:

type.filter.help.text=<p>根據提供的“|”分隔的模式檢查符合表達式的類型。<p>使用“!”反轉模式。
text.filter.help.text=<p>根據提供的模式檢查符合的文本。<p>使用“!”反轉模式。<p>支援正則表達式。
script.filter.match.variable.help.text=<p>使用 GroovyScript IntelliJ API 修飾搜尋結果。當指定的腳本返回 <code>false</code> 時，找到的元素將不在搜尋結果中。非布爾腳本結果將轉換為布林值。<p>可用變數: {0}
script.filter.replacement.variable.help.text=<p>使用 GroovyScript Intellij API 創建自訂取代，以實作進階重命名、覆寫或重構。取代時，取代模板中的變數將取代為指定腳本的字串結果。<p>可用變數: {0}
reference.filter.help.text=<p>對照提供的模板檢查引用的元素。
invert.filter=反轉修飾符

# Replace Dialog specific titles/options
structural.replace.title=結構取代
shorten.fully.qualified.names.checkbox=縮短完全限定名稱(&Q)
replacement.template.label=取代模板:

#replacement usage view specific
preview.replacement.button=預覽取代(&P)
do.replace.all.button=全部取代(&A)
replace.selected.button=取代所選項(&R)

# predefined configuration categories
expressions.category=Java/表達式
user.defined.category=已儲存的模板
xml_html.category=XML/HTML
generics.category=Java/泛型
misc.category=Java/雜項
metadata.category=Java/註釋、Javadoc 和元資料
class.category=Java/基於類
operators.category=Java/運算符
j2ee.category=Java/Java EE
interesting.category=Java/有趣

# predefined configuration names

predefined.configuration.method.calls=方法調用
predefined.configuration.struts.1.1.actions=Struts 1.1 操作
predefined.configuration.ejb.interface=EJB 接口
predefined.configuration.servlets=Servlet
predefined.configuration.unboxing.in.method.calls=方法調用中的拆箱
predefined.configuration.boxing.in.method.calls=方法調用中的裝箱
predefined.configuration.unboxing.in.declarations=宣告中的拆箱
predefined.configuration.boxing.in.declarations=宣告中的裝箱
predefined.configuration.any.unboxing=拆箱的表達式
predefined.configuration.any.boxing=裝箱的表達式
predefined.configuration.filters=修飾符
predefined.configuration.session.ejb=會話 EJB
predefined.configuration.fields.variables.read=欄位/變數讀取
predefined.configuration.symbol=符號
predefined.configuration.inner.classes=內部類
predefined.configuration.ifs=If
predefined.configuration.anonymous.classes=匿名類
predefined.configuration.javadoc.tags=Javadoc 標記
predefined.configuration.all.methods.of.the.class.within.hierarchy=類所有的方法 (結構層次中)
predefined.configuration.similar.methods.structure=類似的方法結構
predefined.configuration.class.implements.two.interfaces=實作兩個接口的類
predefined.configuration.bean.info.classes=Bean 資訊類
predefined.configuration.all.expressions.of.some.type=一些類型的所有表達式
predefined.configuration.variables.of.generic.types=泛型類型變數
predefined.configuration.diamond.operators=Diamond 運算符
predefined.configuration.method.returns.bounded.wildcard=方法返回綁定的萬用字元
predefined.configuration.generic.constructors=泛型構造函數
predefined.configuration.comments=註釋
predefined.configuration.fields_variables.with.given.name.pattern.updated=已更新給名稱模式的欄位/變數
predefined.configuration.trys=Try
predefined.configuration.try.without.resources=沒有資源和 catch 塊的 try 語句
predefined.configuration.switch.with.branches=分支較少的 switch 語句和表達式
predefined.configuration.labeled.break=帶標籤的 break 語句
predefined.configuration.double.checked.locking=雙重檢查鎖定
predefined.configuration.block.dcls=塊宣告
predefined.configuration.pattern.matching.instanceof=模式符合 instanceof
predefined.configuration.methods.of.the.class=構造函數和方法
predefined.configuration.deprecated.methods=棄用的方法
predefined.configuration.instanceof=Instanceof
predefined.configuration.implementors.of.interface.within.hierarchy=接口的實作 (結構層次中)
predefined.configuration.generic.casts=泛型轉換
predefined.configuration.field.selections=欄位選擇
predefined.configuration.fields.of.the.class=類的欄位
predefined.configuration.array.access=陣列存取
predefined.configuration.usage.of.derived.type.in.cast=轉換中派生類型的用法
predefined.configuration.annotated.methods=註解方法
predefined.configuration.not.annotated.methods=未註解的方法
predefined.configuration.annotation.declarations=註解宣告
predefined.configuration.annotations=註解
predefined.configuration.annotated.class=註解的類、接口和枚舉
predefined.configuration.entity.ejb=實體 EJB
predefined.configuration.generic.methods=泛型方法
predefined.configuration.cloneable.implementations=可克隆的實作
predefined.configuration.xdoclet.metadata=XDoclet 元資料
predefined.configuration.type.var.substitutions.in.instanceof.with.generic.types=使用泛型類型取代 instanceof 中的類型變數
predefined.configuration.singletons=單例
predefined.configuration.switches=開關
predefined.configuration.foreaches=Foreach 迴圈
predefined.configuration.interfaces=接口
predefined.configuration.string.literals=字串文字
predefined.configuration.all.inner.classes.within.hierarchy=所有內部類 (層次結構中)
predefined.configuration.direct.subclasses=直接子類
predefined.configuration.javadoc.annotated.methods=Javadoc 註解方法和構造函數
predefined.configuration.javadoc.annotated.fields=Javadoc 註解欄位
predefined.configuration.assignments=賦值
predefined.configuration.casts=轉換
predefined.configuration.serializable.classes.and.their.serialization.implementation=可序列化的類及其序列化實作
predefined.configuration.annotated.fields=註解欄位
predefined.configuration.generic.classes=泛型類
predefined.configuration.javadoc.annotated.class=Javadoc 註解類
predefined.configuration.constructors.of.the.class=類構造函數
predefined.configuration.typed.symbol=鍵入的符號
predefined.configuration.all.fields.of.the.class=該類的所有欄位
predefined.configuration.instance.fields.of.the.class=該類的實例欄位
predefined.configuration.packagelocal.fields.of.the.class=Package-private 欄位
predefined.configuration.classes=類
predefined.configuration.classes.interfaces.enums=類、接口和枚舉
predefined.configuration.new.expressions=新表達式
predefined.configuration.lambdas=Lambdas
predefined.configuration.method.references=方法引用
predefined.configuration.string.concatenations=具有許多操作數的字串串聯
predefined.configuration.deprecated.method.calls=對已棄用方法的方法調用
predefined.configuration.methods.with.final.parameters=具有 final 參數的方法和構造函數
predefined.configuration.class.static.blocks=Static 初始設定式
predefined.configuration.class.instance.initialization.blocks=實例初始設定式
predefined.configuration.class.any.initialization.blocks=任何初始設定式
predefined.configuration.logging.without.if=在沒有 if 的情況下記錄日誌
predefined.configuration.assert.without.description=沒有描述的 assert 語句
predefined.configuration.class.with.parameterless.constructors=具有無參數構造函數的類
predefined.configuration.static.fields.without.final=不為 final 的 static 欄位
predefined.configuration.sample.method.invokation.with.constant.argument=具有常數參數的範例方法調用
predefined.configuration.interfaces.having.no.descendants=未實作或擴展的接口
predefined.configuration.enums=枚舉
predefined.configuration.records=記錄
predefined.configuration.comments.containing.word=包含給定詞的註釋
predefined.configuration.xml.attribute.referencing.java.class=引用 Java 類的 XML 特性
predefined.configuration.statement.in.if=if 中的語句
predefined.configuration.type.text={0} 搜尋模板
predefined.configuration.type.text.user.defined={0} 搜尋模板，使用者定義

# edit variable constraint dialog options
invalid.regular.expression=無效的正則表達式: {0}
unlimited.placeholder=無限制

# tooltip message fragment on ss variables
min.occurs.tooltip.message=[{0},{1}]
text.tooltip.message=文本 {0,choice,0#=|1#≠}{1}{2,choice,0#|1#, 全文}{3,choice,0#|1#, 在層次結構中}
hierarchy.tooltip.message=在層次結構內
exprtype.tooltip.message=類型{0,choice,0#=|1#≠}{1}{2,choice,0#|1#, 在層次結構中}
script.tooltip.message=腳本
reference.target.tooltip.message=引用{0,choice,0#=|1#≠}{1}
replacement.variable.is.not.defined.message=未知搜尋變數 ''{0}'' 或取代變數 ''{0}'' 沒有腳本
replacement.variable.is.not.valid=取代變數 ''{0}'' 有腳本程式碼問題: {1}
replacement.template.is.not.expression.error.message=表達式無法取代為非表達式
replacement.not.supported.for.filetype={0} 檔案類型不支持取代
search.template.is.not.expression.error.message=非表達式無法取代為表達式

modify.editor.content.command.name=修改編輯器內容
option.is.not.recognized.error.message=未識別約束 ''{0}''

error.only.one.target.allowed=僅允許一個目標
error.condition.only.on.first.variable.reference=只有變量的第一個引用上允許約束
error.two.different.type.constraints=兩種不同的類型約束
error.incorrect.regexp.constraint=不正確的正則表達式約束: {0}，{1}
error.expected.character=單引號後應為字符
error.overflow=值溢出
error.expected.digit=應為數字
error.expected.brace1=應為數字、'}' 或 ','
error.expected.brace2=應為數字或 '}'
error.empty.quantifier=空量詞
error.expected.condition=''{0}'' 之後應為約束
error.expected.condition.name=缺少約束名稱
error.expected.value=應為 ''{0}''
error.unexpected.value=意外的 ''{0}''
invalid.modifier.type=無效的修飾符類型 {0}
error.argument.expected=''{0}'' 約束上應為實參
error.cannot.invert=無法反轉 ''{0}'' 約束
error.only.applicable.to.complete.match=約束 ''{0}'' 僅適用於完全符合
error.bad.character.literal=錯誤字符文字
error.bad.literal=不良文字
error.pattern.recursively.references.itself=模板以遞歸方式引用自身
error.configuration.0.not.found=找不到模板 ''{0}''
error.script.constraint.for.0.has.problem.1={0} 的腳本約束存在問題 {1}
error.in.groovy.parser=Groovy 解析器錯誤

SSRInspection.replace.with=取代為 ''{0}''
SSRInspection.family.name=結構取代
SSRInspection.display.name=結構搜尋檢查
SSRInspection.add.search.template.button=添加搜尋模板…
SSRInspection.add.replace.template.button=添加取代模板…
overwrite.message=具有相同名稱的模板已存在。取代它將覆蓋其當前內容。
overwrite.title=“{0}”已存在，是否取代?
template.in.use.message=模板 ''{0}'' 從模板 ''{1}'' 使用。確定要將其移除嗎?
ssr.will.not.find.anything=指定模板與範圍 ''{0}'' 中的任何內容都不符合
inspection.script.problem={0}\n在結構搜尋檢查模板 ''{1}'' 中
search.template.problem=結構搜尋: {0}
search.script.problem=結構檢索腳本拋出異常: {0}
complete.match.variable.name=完全符合
template.in.use.title=模板 ''{0}'' 正在使用中

structural.search.group.name=結構搜尋
edit.metadata.button=編輯元資料…
add.pattern.action=添加模板
templates.title=模板:
add.inspection.button=添加結構搜尋 \\&\\& 取代檢查
remove.inspection.button=移除結構搜尋 \\&\\& 取代檢查

meta.data.dialog.title=結構檢索檢查
inspection.name.label=檢查名稱:
problem.descriptor.label=問題工具提示(使用巨集 #ref 插入高亮顯示的程式碼):
description.label=描述:
suppress.id.label=禁止 ID:
no.description.message=未提供描述

name.must.not.be.empty.warning=名稱不得為空
inspection.with.name.exists.warning=名稱為 ''{0}'' 的檢查已存在
suppress.id.must.match.regex.warning=禁止 ID 必須符合正則表達式 [a-zA-Z_0-9.-]+
suppress.id.in.use.warning=禁止 ID ''{0}'' 已由另一個檢查使用
button.replace=取代
popup.content.directory=不是一個目錄
command.name.adjust.line.indent=調整行縮排
command.name.live.search.template.builder=活動搜尋模板建置器
tooltip.preconfigured.search.patterns=<p>可以使用 {0} 自動完成預設定的搜尋模板。<p>提供的模板用於約束目標模板上下文
status.bar.text.results.found.in.current.file=在當前檔案中找到 {0} 個結果
predefined.template.xml.tag=XML 標籤
predefined.template.xml.attribute=XML 特性
predefined.template.html.attribute=HTML 特性
predefined.template.xml.attribute.value=XML 特性值
predefined.template.html.attribute.value=HTML 特性值
predefined.template.xml.html.tag.value=XML/HTML 標記值
predefined.template.ul.or.ol=<ul> 或 <ol>
predefined.template.li.not.contained.in.ul.or.ol=<li> 未包含在 <ul> 或 <ol> 中
pattern.context.class.member=類成員
pattern.context.default=預設

# file type combo box in structural search dialog
file.type.pattern.context={0} - {1}

#history drop down and inspection templates box
replace.configuration.display.text={0} ⇨ {1}
predefined.configuration.junit.test.cases=JUnit 測試用例
predefined.configuration.local.classes=局部類
inspection.tree.create.inspection.search.template=正在使用結構搜尋模板…
inspection.tree.create.inspection.replace.template=正在使用結構取代模板…
pin.button=搜尋後保持對話框開啟
pin.button.description=搜尋後保持對話框開啟
filter.button=切換修飾符面板
filter.button.description=切換變數修飾符面板
recent.category=最近
templates.button=切換現有模板面板
templates.button.description=切換現有模板面板
save.template=儲存模板(&A)…
save.template.action.text=添加到已儲存的模板…
remove.template=移除已儲存的模板
draft.template.node=草稿模板