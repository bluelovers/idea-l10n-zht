js.debugger.module.name={0} 偵錯器 101
js.debugger.module.description=了解如何逐步執行程序並在不離開 IDE 的情況下找出其中的問題。

js.debugger.before.title=偵錯前: 執行/偵錯設定
js.debugger.before.intro.1=使用 <ide/> 可以在程式碼編寫位置執行和偵錯各種 JavaScript 套用。
js.debugger.before.intro.2=我們將在本模組中介紹一些步驟，無論您偵錯何種程式碼，這些步驟都很有用。我們將以一個非常基本的 <a href=''{0}''>Node.js</a> 套用為例，該套用應比較兩個數字，並返回 {1} 或 {2}。在繼續之前，請確保您的計算機上<a href=''{3}''>已安裝</a> Node.js (對於全新安裝，您需要重啟 <ide/>)。如果您準備好繼續，請按 {4}。
js.debugger.before.describe.tool.window=在按下 {0} 時發生了兩個動作。首先是使用 Node.js 執行檔案並開啟 {1} 工具視窗，其中顯示執行程式碼的結果。其次，<ide/> 創建了一項臨時執行/偵錯設定，供我們以這樣的方式執行檔案。現在使用 {2} 隱藏工具視窗，更好地了解執行/偵錯設定。
js.debugger.before.save.1=因此，這些設定充當執行/偵錯應用程式的入口點。它們可以是臨時的，也可以是永久的。主要區別在於，如果達到 5 個設定的預設限制，則會自動刪除臨時設定。
js.debugger.before.save.2=來看看如何將臨時設定轉換為永久設定。開啟右上角的 {0} 下拉選單，然後選擇 {1}。
js.debugger.before.edit=現在，如果要調整這項新執行/偵錯設定的設定或使用其他設定，該怎麼辦? 再次開啟 {0} 選單，然後點擊 {1}。
js.debugger.before.manage.1=這是管理執行/偵錯設定的地方。花點時間了解一下這裡能找到什麼，準備好繼續操作後，請關閉視窗。
js.debugger.before.manage.2=花點時間了解一下這裡能找到什麼，準備好繼續操作後，請關閉視窗。
js.debugger.before.next=本課程到此為止。要開始下一個課程，請點擊下面的按鈕或使用 {0}。

js.debugger.part.1.title=偵錯程式碼。第 I 部分
js.debugger.part.1.start.1=現在已經有了執行/偵錯設定，來看看如何使用內建偵錯器。
js.debugger.part.1.start.2=首先再執行一​​次程式碼以檢查返回的內容，因為上一課中並未重點介紹。點擊含有設定的下拉列表旁邊的 {0} 按鈕，以執行當前所選設定。
js.debugger.part.1.gutter=所比較的數字 {0} 和 {1} 不相等，因此執行程式碼時應得到 {2}。我們來找出得到 {3} 的原因。在第 1 行，點擊 #1 和程式碼之間的間距(空白)以放置中斷點。
js.debugger.part.1.set.breakpoint=我們可以使用中斷點來暫停執行應用程式。在間距中看到的紅色圓圈就是 <ide/> 中的中斷點。如果再次點擊，就會將其移除。您也可以點擊滑鼠右鍵來自定義其行為，例如為它設定條件。點擊右上角的 {0} 按鈕(或按 {1})以繼續。
js.debugger.part.1.tool.window.1=了解一下“{0}”工具視窗。左側為停止/重新執行設定和管理中斷點的圖標。頂部有幾個頁籤和一組用於逐步執行程式碼的圖標。
js.debugger.part.1.tool.window.2=我們所在的“{0}”頁籤是完成大部分工作的位置。右側為按範圍分組的所有{1} 及其值。“{2}”檢視顯示調用堆疊。如果仔細查看，您會看到執行路徑每個點處的應用程式狀態。現在，切換到“{3}”頁籤。
js.debugger.part.1.scripts.tab={0} 頁籤顯示應用程式記錄的錯誤等訊息。在偵錯 Node.js 套用程序時，<ide/> 還顯示 {1} 頁籤，從中可以執行 JavaScript 程式碼段並查看主控台訊息。切換到 {2} 頁籤以繼續。
js.debugger.part.1.next={0} 頁籤列出載入到當前正在執行的行程中的所有檔案。雙擊即可查看任何檔案的內容。要轉到本課程的第二部分，請點擊下方按鈕或使用 {1}。

js.debugger.part.2.title=偵錯程式碼。第 II 部分
js.debugger.part.2.step.into.1=<strong>重要提示</strong>: 請確保第 1 行有一個中斷點，並且偵錯器已啟動({0})並在 {1} 頁籤上開啟，然後再向前移動。
js.debugger.part.2.step.into.2=我們來繼續尋找程式碼中的錯誤，並了解在 <ide/> 中進行偵錯時的一些其他實用資訊。為了更好地了解程式碼執行方式，我們可以在其中添加更多中斷點，然後使用 {0} 按鈕({1})從一個中斷點切換到另一個中斷點，不過還有一種速度更快的方法。我們來按 {2} 並使用 {3} ({4})進入執行的下一行。
js.debugger.part.2.buttons.1=要了解有關逐步執行該程序的詳細資訊，請查看<a href="{0}">我們的在線幫助</a>。
js.debugger.part.2.buttons.2=現在，如果我們要檢查一個表達式的值該怎麼辦呢? <ide/> 讓您能夠使用 {0} 功能快速執行此操作。按 {1} 繼續。
js.debugger.part.2.evaluate.1=添加 {0} 作為表達式，然後按 {1}。看一下結果: 它等於 {2}。這就是問題所在。為了讓函數捕獲不同的數字，需要略微更改表達式，以使其結果等於 {3}。
js.debugger.part.2.evaluate.2=現在關閉彈出視窗，並修正我們在程式碼中發現的問題。在 {0} 中的第 2 行，將 {1} 取代為 {2}。
js.debugger.part.2.stop=最後來了解不再需要偵錯器時如何將其停止。首先點擊添加的中斷點以將其移除。然後使用 {0}({1})停止偵錯器，並按 {2} 關閉其工具視窗。
js.debugger.part.2.end=恭喜! 您已經完成了 {0}，並了解了偵錯各種套用的一些基本方法。如果需要，您可以再執行一次程式碼，以確認現在一切正常。要深入了解特定類型套用的偵錯，請查看我們的 <a href=''{1}''>Web 幫助</a>和<a href=''{2}''>網誌</a>。
