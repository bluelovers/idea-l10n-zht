gradle.script.configurations.importing.feature=在 Gradle 專案匯入期間載入 Gradle Kotlin DSL 腳本設定
notification.gradle.legacy.firstLoad=禁用程式碼洞察以避免 Gradle 建置設定。
notification.gradle.legacy.firstLoad.info=<div width=400><p>需要執行 Gradle 設定階段才可獲取腳本設定。腳本設定載入預設禁用，因為其對於大型 Gradle 專案可能會佔用大量資源。</p><p>點擊“載入設定”評估 Gradle Kotlin DSL 腳本。</p><p>或者，要在腳本首次開啟時自動載入設定，並在每次更改建置腳本設定塊時重新載入設定，可以為所有腳本啟用“自動重新載入”。對於設定時間較長的大型 Gradle 專案，不推薦此選項。</p></div>
notification.gradle.legacy.outsideProject=程式碼洞察不可用(相關 Gradle 專案未鏈接)。
notification.gradle.legacy.outsideProject.addToStandaloneHelp=<div width=400><p>需要匯入評估此腳本的 Gradle 專案，使 IDE 能夠進行分析。嘗試重新匯入鏈接的 Gradle 專案或鏈接評估該腳本的新 Gradle 專案。</p><p>或者，您可以將其添加到獨立腳本中，其設定將自動載入。</p><p><b>注意: </b>每個獨立腳本都需要在更新時執行單獨的 Gradle 設定階段。對於大型 Gradle 專案，這可能會佔用大量資源。</p></div>
notification.gradle.legacy.standalone.info=<div width=400><p>評估此腳本的 Gradle 專案未在 IDE 中匯入。<br/><p><b>注意: </b>每個獨立腳本都需要在更新時執行單獨的 Gradle 設定階段。對於大型 Gradle 專案，這可能會佔用大量資源。</p></div>
notification.outsideAnything.text=程式碼洞察不可用(相關 Gradle 專案未鏈接)。
notification.outsideAnything.linkAction=鏈接 Gradle 專案
notification.wasNotImportedAfterCreation.193.text=程式碼洞察不可用(Gradle 專案未匯入)。
notification.wasNotImportedAfterCreation.text=程式碼洞察不可用(未載入腳本設定)。
notification.wasNotImportedAfterCreation.help=<div width=400><p>Gradle Kotlin DSL 腳本設定丟失。匯入外部 Gradle 專案或載入設定以獲取腳本程式碼洞察。</p></div>
action.label.import.project=匯入專案
action.text.load.script.configurations=載入腳本設定
action.description.load.script.configurations=Gradle Kotlin DSL 腳本設定已更改。載入變更以獲取程式碼洞察，無需匯入外部 Gradle 專案。
action.label.enable.auto.import=啟用自動匯入
notification.notEvaluatedInLastImport.193.text=程式碼洞察不可用(上一個 Gradle 專案匯入期間未收到腳本設定)。
notification.notEvaluatedInLastImport.text=程式碼洞察不可用(未收到腳本設定)。
notification.notEvaluatedInLastImport.addAsStandaloneAction=添加到獨立腳本
notification.notEvaluatedInLastImport.info=<div width=400><p>需要匯入評估此腳本的 Gradle 專案，使 IDE 能夠進行分析。嘗試重新匯入鏈接的 Gradle 專案或鏈接評估該腳本的新 Gradle 專案。</p><p>或者，您可以將其添加到獨立腳本中，其設定將單獨載入。</p><p><b>注意: </b>每個獨立腳本都需要在更新時執行單獨的 Gradle 設定階段。對於大型 Gradle 專案，這可能會佔用大量資源。</p></div>
notification.standalone.text=獨立腳本
notification.standalone.disableScriptAction=從獨立腳本移除
notification.standalone.info=<div width=400><p>此腳本的設定將與 Gradle 專案同步分別載入。<br/><p><b>注意:</b> 每個獨立腳本都需要在更新時執行單獨的 Gradle 設定階段。對於大型 Gradle 專案，這可能會佔用大量資源。</p></div>
notification.invalid.gradle.jvm.configuration.title=找到無效的 Gradle JVM 設定
notification.jdk.0.points.to.invalid.jdk=修正 SDK ''{0}'': Gradle JVM 指向無效的 JDK
notification.gradle.jvm.undefined=設定 Gradle JVM 選項
notification.gradle.jvm.0.incorrect=Gradle JVM 選項不正確:\n路徑: {0}

action.text.install=安裝
action.text.dontShowAgain=不再顯示
action.text.show.kotlin.gradle.dsl.logs.in=在 {0} 中顯示 Kotlin Gradle DSL 日誌
build.0.project=構建版本 {0}
change.build.gradle.configuration=更改 build.gradle 設定
standalone.scripts.settings.title=管理獨立腳本
standalone.scripts.settings.column.name=路徑
gradle.scripts.settings.title=Gradle Kotlin DSL 腳本
description.text.a.single.platform.kotlin.library.or.application.targeting.javascript=面向 JavaScript 的單平台 Kotlin 庫或套用程序
description.text.a.single.platform.kotlin.library.or.application.targeting.js.for.browser=面向 JavaScript 或瀏覽器的單平台 Kotlin 庫或套用程序
description.text.a.single.platform.kotlin.library.or.application.targeting.js.for.node.js=面向 JavaScript 或 Node.js 的單平台 Kotlin 庫或套用程序
description.text.a.single.platform.kotlin.library.or.application.targeting.the.jvm=面向 JVM 的單平台 Kotlin 庫或套用程序
description.text.adds.support.for.building.kotlin.projects=添加對建置 Kotlin 專案的支援
description.text.multi.targeted.jvm.js.ios.etc.project.with.shared.code.in.common.modules=具有通用模組中共享程式碼的多目標 (JVM、JS、iOS 等) 專案。可以在專案的建置腳本中設定這些目標。
description.text.multiplatform.gradle.project.allowing.reuse.of.the.same.kotlin.code.between.android.and.ios.mobile.platforms=多平台 Gradle 專案允許在 Android 與 iOS 移動平台之間重用相同的 Kotlin 程式碼
description.text.multiplatform.gradle.project.allowing.reuse.of.the.same.kotlin.code.between.js.client.and.jvm.server=多平台 Gradle 專案允許在 JS 客戶端與 JVM 伺服器之間重用相同的 Kotlin 程式碼
description.text.multiplatform.gradle.project.allowing.reuse.of.the.same.kotlin.code.between.two.mobile.platforms.jvm.android.and.native=多平台 Gradle 專案允許在兩個移動平台 (JVM/Android 和 Native) 之間重用相同的 Kotlin 程式碼
description.text.multiplatform.jvm.js.native=多平台 Gradle 專案允許在全部三個主要平台 (JVM、JS 和 Native) 之間重用相同的 Kotlin 程式碼
error.text.cannot.find.build.gradle.file.for.module=找不到模組 {0} 的 build.gradle 檔案
error.text.coroutines.support.requires.version.1.1.or.later.of.the.kotlin.runtime.library=協同程序支援需要 1.1 或更高版本的 Kotlin 執行時庫。請更新建置腳本中的版本。
error.text.different.kotlin.gradle.version=用於通過 Gradle 建置的 Kotlin 版本 ({0}) 與 IDE 延伸模組中捆綁的版本 ({1}) 不相同
error.text.different.kotlin.library.version=延伸模組版本 ({0}) 與庫版本 ({1}) 不相同
error.text.failed.to.load.script.definitions.by=無法通過 {0} 載入腳本定義
error.text.highlighting.is.impossible.during.gradle.import=在 Gradle 匯入期間，無法突出顯示
error.text.invalid.gradle.libraries.directory=Gradle 庫目錄 {0} 無效
error.text.missing.jars.in.gradle.directory=Gradle 目錄中缺少 jar
error.text.project.isn.t.linked.with.gradle=專案 ''{0}'' 未與 Gradle 鏈接
error.text.support.requires.version={0}支援需要 {1} 或更高版本的 Kotlin 執行時庫。請更新建置腳本中的版本。
error.text.this.language.feature.requires.version=此語言功能需要 {0} 或更高版本的 Kotlin 執行時庫。請更新建置腳本中的版本。
error.text.unable.to.get.gradle.home.directory=無法獲取 Gradle 主目錄
notification.title.plugin.suggestion=延伸模組建議
notification.text.native.debug.provides.debugger.for.kotlin.native=Native Debug 為 Kotlin/Native 提供了偵錯器
presentable.text.java.with.gradle=Java 與 Gradle
presentable.text.javascript.with.gradle=JavaScript 與 Gradle
presentable.text.js.client.and.jvm.server.gradle=JS 客戶端和 JVM 伺服器 | Gradle
presentable.text.mobile.android.ios.gradle=移動 Android/iOS | Gradle
presentable.text.mobile.shared.library.gradle=移動共享庫 | Gradle
presentable.text.multiplatform.library.gradle=多平台庫 | Gradle
text.couldn.t.configure.kotlin.gradle.plugin.automatically=無法自動設定 kotlin-gradle 延伸模組。
text.default.kotlin.gradle.script=預設 Kotlin Gradle 腳本
text.gradle.dsl.logs.cannot.be.found.automatically.see.how.to.find.logs=無法自動找到 Gradle DSL 日誌。<br/>可以在<a href="{0}">此處</a>了解如何尋找日誌。
text.see.manual.installation.instructions=要查看手動安裝說明，請點擊<a href="https://kotlinlang.org/docs/reference/using-gradle.html">此處</a>。
text.was.modified={0} 已被修改
title.configure.kotlin.gradle.plugin=設定 Kotlin-Gradle 延伸模組
title.kotlin.build.script=Gradle Kotlin DSL 腳本錯誤
title.update.language.version=更新語言版本
display.name.kotlin.multiplatform=Kotlin/Multiplatform
display.name.kotlin.jvm=Kotlin/JVM
display.name.kotlin.js.for.node.js=Kotlin/JS (適用於 Node.js)
display.name.kotlin.js.for.browser=Kotlin/JS (適用於瀏覽器)
comman.name.configure.kotlin=設定 Kotlin
command.name.configure.0=設定 {0}
notification.title.script.configuration.has.been.changed=腳本設定已更改。
notification.text.script.configuration.has.been.changed=需要匯入 Gradle Project 以載入變更。
