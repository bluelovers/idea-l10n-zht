plugin.settings.title=Lombok
config.warn.dependency.outdated.title=Lombok 依賴項可能已過時
config.warn.dependency.outdated.message=<br>專案 "{0}" 似乎具有過時的 Lombok 依賴項。<br>已設定版本 "{1}"，但至少版本 "{2}" 已經發佈<br><a href="https://projectlombok.org/download">也許您想進行更新?</a> <br>
replace.with.annotations.lombok=取代為註解(Lombok)
replace.0.with.explicit.type.lombok=將 ''{0}'' 取代為顯式類型(Lombok)
replace.explicit.type.with.0.lombok=將顯式類型取代為 ''{0}'' (Lombok)
dialog.message.logger.field.s.not.private.sfinal.field.named.s.refactor.anyway=記錄程序欄位: "{0}" 不是名稱為 "{2}" 的 private {1, choice, 0#|1#static} final 欄位。是否仍然重構?
dialog.title.attention=注意!
dialog.message.this.element.cannot.be.renamed=此元素不能被重命名。
inspection.message.lombok.annotation.deprecated.not.supported=Lombok 註解 ''{0}'' 已棄用，lombok-plugin 不再提供支援。請改用 ''{1}''。
inspection.message.default.constructor.doesn.t.exist=預設構造函數不存在
inspection.message.slf4j.logger.defined.explicitly=Slf4j 記錄程序為顯式定義。請改用 Lombok @Slf4j 註解。
intention.name.replace.with.lombok=取代為 Lombok
attribute.descriptor.key=鍵
attribute.descriptor.separator=分隔符
attribute.descriptor.value=值
configurable.name.lombok.config=Lombok 設定
filetype.lombok.config.description=Lombok 設定檔案
inspection.message.annotation.not.lombok.copyable=Lombok 不會將註解 ''{0}'' 複製到構造函數中
inspection.message.val.works.only.on.local.variables='val' 僅適用於局部變數和 foreach 迴圈
inspection.message.var.works.only.on.local.variables.on.for.foreach.loops='val' 僅適用於局部變數和 for/foreach 迴圈
inspection.message.on.local.variable.requires.initializer.expression=局部變數上的 ''{0}'' 需要初始設定式表達式
inspection.message.not.compatible.with.array.initializer.expressions=''{0}'' 與陣列初始設定式表達式不相容。使用完整形式 (新的 int[] '{' ... '}'，而不只是 '{' ... '}')
inspection.message.not.allowed.with.lambda.expressions=Lambda 表達式不允許使用 ''{0}''。
inspection.message.not.allowed.in.old.style.for.loops=舊式 for 迴圈中不允許使用 ''{0}''
intention.name.create.new.field.s=創建新字段 ''{0}''
inspection.message.utility.class.already.marks.class.final=@UtilityClass 已將類標記為 final。
inspection.message.utility.class.already.marks.fields.static=@UtilityClass 已將欄位標記為 static。
inspection.message.utility.class.already.marks.methods.static=@UtilityClass 已將方法標記為 static。
inspection.message.utility.class.already.marks.inner.classes.static=@UtilityClass 已將內部類標記為 static。
inspection.message.val.already.marks.variables.final='val' 已將變數標記為 final。
inspection.message.value.already.marks.class.final=@Value 已將類標記為 final。
inspection.message.value.already.marks.non.static.fields.final=@Value 已將非 static 欄位標記為 final。
inspection.message.value.already.marks.non.static.package.local.fields.private=@Value 已將非 static 的 package-local 欄位標記為 private。
inspection.message.cleanup.method.s.not.found.on.target.class='@Cleanup': 在目標類中找不到方法 '%s()'
inspection.message.cleanup.legal.only.on.local.variable.declaration.inside.block='@Cleanup': 僅在塊內的局部變數宣告上合法
inspection.message.cleanup.variable.declarations.need.to.be.initialized='@Cleanup' 變數宣告需要初始化。
inspection.message.cleanup.value.cannot.be.empty.string='@Cleanup': 值不能為空字串
inspection.message.cleanup.legal.only.on.local.variable.declarations='@Cleanup' 僅在局部變數宣告上合法
inspection.message.synchronized.legal.only.on.concrete.methods='@Synchronized' 僅在具體方法上合法。
inspection.message.synchronization.on.non.final.field.s=在非 final 欄位 %s 上同步。
inspection.message.field.s.does.not.exist=欄位 %s 不存在。
inspection.message.synchronized.legal.only.on.methods='@Synchronized' 僅在方法上合法。
inspection.message.field.s.does.not.exist.exclude=欄位 ''{0}'' 不存在
inspection.message.field.s.would.have.been.excluded.anyway=欄位 ''{0}'' 本應被排除在外
inspection.message.field.s.does.not.exist.field=欄位 ''{0}'' 不存在
inspection.message.data.only.supported.on.class.type=僅類類型支援 '@Data'
inspection.message.exclude.are.mutually.exclusive.exclude.parameter.will.be.ignored=exclude 和 of 互斥；'exclude' 參數將被忽略
inspection.message.equals.and.hashcode.only.supported.on.class.type=僅類類型支援 @EqualsAndHashCode
inspection.message.not.generating.equals.hashcode=未生成 equals 和 hashCode: 已存在採用其中一個名稱的方法。(或者生成這兩種方法，或者都不生成)。
inspection.message.generating.equals.hashcode.with.super.call=使用對 java.lang.Object 的超級調用生成 equals/hashCode 沒有意義。
inspection.message.generating.equals.hashcode.implementation=生成 equals/hashCode 實作，但即使此類未擴展 java.lang.Object，也不調用超類。如果這是有意為之，請在您的類型中添加 '(callSuper=false)'。
inspection.message.lazy.not.supported.for.getter.on.type=類型上的 @Getter 不支持 'lazy'
inspection.message.getter.only.supported.on.class.enum.or.field.type=僅類、枚舉或欄位類型上支援 '@Getter'
inspection.message.s.only.supported.on.class.or.field.type=僅類或欄位類型上支援 '@%s'
inspection.message.to.string.only.supported.on.class.or.enum.type=僅類或枚舉類型上支援 @ToString
inspection.message.not.generated.s.method.with.same.name.already.exists=未生成 '%s'(): 已存在具有相同名稱的方法
inspection.message.utility.classes.cannot.have.declared.constructors=@UtilityClasses 不能具有宣告的構造函數。
inspection.message.utility.class.only.supported.on.class=僅類上支援 @UtilityClass (不能為接口、枚舉或註解)。
inspection.message.utility.class.automatically.makes.class.static=@UtilityClass 自動將此類設為 static，但此類不能為 static。
inspection.message.utility.class.cannot.be.placed=@UtilityClass 不能置於方法的局部類或匿名內部類上，也不能置於此類中嵌套的任何類。
inspection.message.value.only.supported.on.class.type=僅類類型上支援 '@Value'
inspection.message.wither.only.supported.on.class.or.field=僅類或欄位上支援 @Wither。
inspection.message.annotation.only.supported.on.class.or.enum.type=僅類或枚舉類型上支援註解
inspection.message.lombok.needs.default.constructor.in.base.class=Lombok 要求基類中有預設構造函數
inspection.message.constructor.without.parameters.already.defined=已定義不帶參數的構造函數
inspection.message.constructor.with.d.parameters.already.defined=已定義帶有 ''{0}'' 參數的構造函數
inspection.message.method.s.matched.static.constructor.name.already.defined=已定義與 staticConstructorName 符合的方法 ''{0}''
inspection.message.method.s.with.d.parameters.matched.static.constructor.name.already.defined=已定義與 staticConstructorName 符合的帶有 ''{1}'' 參數的方法 ''{0}''
inspection.message.field.name.constants.only.supported.on.class.or.enum=僅類或枚舉上支援 '@FieldNameConstants'
inspection.message.field.name.constants.only.supported.on.class.enum.or.field.type=僅類、枚舉或欄位類型上支援 '@FieldNameConstants'
inspection.message.field.name.constants.inner.type=@FieldNameConstants 內部類型已存在，但 asEnum = {0} 與現有類型不符合
inspection.message.s.legal.only.on.classes.enums=@%s 僅在類和枚舉上合法
inspection.message.not.generating.field.s.field.with.same.name.already.exists=不生成欄位 %s: 已存在具有相同名稱的欄位
inspection.message.custom.log.not.configured.correctly=@CustomLog 未正確設定；請在 lombok.config 中設定 log.custom.declaration。
inspection.message.custom.log.does.not.allow.topic=@CustomLog 不允許主題。
inspection.message.custom.log.requires.topic=@CustomLog 要求主題。
inspection.message.not.generating.constant=不為此欄位生成常數: 否則常數名稱將等於此欄位的名稱。
inspection.message.lazy.does.not.work.with.access.level.none='lazy' 不適用於 AccessLevel.NONE。
inspection.message.lazy.requires.field.to.be.private.final='lazy' 要求該欄位為 private 和 final
inspection.message.lazy.requires.field.initialization='lazy' 要求欄位初始化。
inspection.message.annotation.copy.duplicate=欄位上已有註解 ''{0}''，將被 onX 設定複製
inspection.message.not.generating.getter.for.this.field=沒有為此欄位生成 getter: 它不適合您的 @Accessors 前綴列表。
inspection.message.not.generated.s.method.with.similar.name.s.already.exists=未生成 '%s'(): 已存在具有類似名稱 '%s' 的方法
inspection.message.not.generating.setter.for.this.field.it=沒有為此欄位生成 setter: 它不適合您的 @Accessors 前綴列表。
inspection.message.not.generating.setter.for.this.field.setters=沒有為此欄位生成 setter: 無法為 final 欄位生成 setter。
inspection.message.wither.needs.constructor.for.all.fields.d.parameters=@Wither 需要所有欄位的構造函數(%d 個參數)
inspection.message.not.generating.s.method.with.that.name.already.exists=未生成 %s(): 已存在使用該名稱的方法
inspection.message.not.generating.wither.for.this.field.withers=不為此欄位生成 wither: 無法為以 $ 開頭的欄位生成 wither。
inspection.message.not.generating.wither=不為此欄位生成 wither: 無法為 static 欄位生成 wither。
inspection.message.not.generating.wither.for.this.field.withers.cannot.be.generated=不為此欄位生成 wither: 無法為初始化的 final 欄位生成 wither。
inspection.message.s.can.be.used.on.classes.only=@%s 僅可在類上使用
inspection.message.syntax.either.obtain.via.field=語法為 @ObtainVia(field = "fieldName") 或 @ObtainVia(method = "methodName")。
inspection.message.lombok.annotations.are.not.allowed.on.builder.class=在 builder 類中不允許使用 Lombok 註解。
inspection.message.s.not.valid.identifier=%s 不是有效的關鍵字
inspection.message.can.t.singularize.this.name=不能單一化此名稱: "%s"；請顯式指定單數(即 @Singular("sheep"))
inspection.message.lombok.does.not.know=Lombok 不知道如何為類型 '%s' 創建單數形式的 builder 方法；將不會生成它們。
inspection.message.builder.default.requires.initializing.expression=@Builder.Default 要求初始化表達式('= something;')。
inspection.message.builder.default.singular.cannot.be.mixed=@Builder.Default 和 @Singular 不能混用。
inspection.message.obtain.via.is.static.true.not.valid.unless.method.has.been.set=除非已設定 'method'，否則 @ObtainVia(isStatic = true) 無效。
inspection.message.delegate.does.not.support.recursion.delegating=@Delegate 不支持遞歸(委託給本身具有 @Delegate 成員的類型)。成員 "%s" 是類型為 "%s" 的 @Delegate
inspection.message.delegate.legal.only.on.instance.fields=@Delegate 僅對實例欄位或無實參實例方法合法。
inspection.message.delegate.can.only.use.concrete.class.types=@Delegate 僅可使用具體的類類型，不能使用萬用字元、陣列、類型變數或基元。'%s' 是錯誤的類類型
inspection.message.existing.builder.must.be.abstract.static.inner.class=現有 Builder 必須是抽象的 static 內部類。
inspection.message.delegate.legal.only.on.no.argument.methods=@Delegate 僅對於無實參方法合法。
action.defaultLombokData.text=預設 @Data
action.defaultLombokData.description=將 getter/setter/equals/hashcode/toString 方法取代為 lombok @Data 註解的操作
action.defaultLombokSetter.text=預設 @Setter
action.defaultLombokSetter.description=將所有 setter 方法取代為 lombok @Setter 註解的操作
action.defaultLombokEqualsAndHashcode.text=預設 @EqualsAndHashcode
action.defaultLombokEqualsAndHashcode.description=將 equals 和 hashcode 方法取代為 lombok @EqualsAndHashcode 註解的操作
action.defaultLombokToString.text=預設 @ToString
action.defaultLombokToString.description=將 toString 方法取代為 lombok @ToString 註解的操作
action.defaultLombokLogger.text=@Log (和朋友)
action.defaultLombokLogger.description=將記錄程序取代為 lombok @Log 註解的操作
group.DelombokActionGroup.text=Delombok
group.DelombokActionGroup.description=重構移除 lombok 註解的程式碼
action.delombokAny.text=所有 lombok 註解
action.delombokAny.description=將所有 lombok 註解取代為純 java 方法的操作
action.delombokData.text=@Data
action.delombokData.description=將 lombok @Data 註解取代為純 java 方法的操作
action.delombokValue.text=@Value
action.delombokValue.description=將 lombok @Value 註解取代為純 java 方法的操作
action.delombokWither.text=@Wither
action.delombokWither.description=將 lombok @Wither 註解取代為純 java 方法的操作
action.delombokDelegate.text=@Delegate
action.delombokDelegate.description=將 lombok @Delegate 註解取代為純 java 方法的操作
action.delombokBuilder.text=@Builder
action.delombokBuilder.description=將 lombok @Builder 註解取代為純 java 方法的操作
action.delombokSuperBuilder.text=@SuperBuilder
action.delombokSuperBuilder.description=將 lombok @SuperBuilder 註解取代為純 java 方法的操作
action.delombokConstructor.text=@Constructors
action.delombokConstructor.description=將 lombok @NoArgsConstructor、@RequiredArgsConstructor 和 @AllArgsConstructor 註解取代為純 java 方法的操作
action.delombokGetter.text=@Getter
action.delombokGetter.description=將 lombok @Getter 註解取代為純 getter 方法的操作
action.delombokSetter.text=@Setter
action.delombokSetter.description=將 lombok @Setter 註解取代為純 setter 方法的操作
action.delombokEqualsAndHashCode.text=@EqualsAndHashCode
action.delombokEqualsAndHashCode.description=將 lombok @EqualsAndHashCode 註解取代為純 java 方法的操作
action.delombokToString.text=@ToString
action.delombokToString.description=將 lombok @ToString 註解取代為純 java 方法的操作
action.delombokLogger.text=@Log (和朋友)
action.delombokLogger.description=將 lombok @Log (及其他)註解取代為純日誌欄位的操作
action.delombokFieldNameCostants.text=@FieldNameConstants
action.delombokFieldNameCostants.description=將 lombok @FieldNameConstants 註解取代為純 java 欄位的操作
action.delombokUtilityClass.text=@UtilityClass
action.delombokUtilityClass.description=將 lombok @UtilityClass 註解取代為純 java 欄位的操作
action.defaultLombokGetter.text=預設 @Getter
action.defaultLombokGetter.description=將所有 getter 方法取代為 lombok @Getter 註解的操作
group.LombokActionGroup.text=Lombok
group.LombokActionGroup.description=使用 lombok 註解重構程式碼
inspection.redundant.modifiers.val.lombok.display.name='val' 前的不必要 final
inspection.redundant.slf.4.j.definition.display.name=@Slf4j
inspection.redundant.modifiers.utility.class.lombok.display.name=@UtilityClass 修飾符
inspection.redundant.modifiers.value.lombok.display.name=@Value 修飾符
inspection.springqualifiercopyable.lombok.display.name=@Qualifier 不可通過 lombok 複製
inspection.deprecated.lombok.display.name=已棄用的 Lombok 註解
inspection.lombok.display.name=Lombok 註解
checkbox.settings.version.warning=啟用舊 Lombok 版本的 Lombok 版本警告
inspection.lombok.group.name.lombok=Lombok
inspection.lombok.group.name.redundant.modifiers=冗餘修飾符
inspection.lombok.group.name.redundant.definitions=冗餘定義

intention.category.lombok=Java/Lombok
inspection.message.lombok.builder.needs.proper.constructor.for.this.class=Lombok @Builder 需要為此類的適當構造函數
checkbox.settings.jps.fix=為舊(<1.18.16) Lombok 版本自動添加 '-Djps.track.ap.dependencies=false' 編譯選項
config.warn.annotation-processing.disabled.title=Lombok 要求已啟用的註解處理
popup.content.java.annotation.processing.has.been.enabled=已啟用 Java 註解處理
inspection.message.standardexception.class.only.supported.on.class=@StandardException 僅在類上支援
inspection.message.standardexception.should.extend.throwable=@StandardException 要求您擴展 Throwable 類型
inspection.message.standardexception.accesslevel.none.not.valid=AccessLevel.NONE 在此處無效
action.delombokStandardException.text=@StandardException
action.delombokStandardException.description=將 lombok @StandardException 註解取代為純 java 方法的操作
notification.enable.annotation.processing=啟用註解處理