override.implement.action.context.ivar.not.available.when.overridden={0,choice,1#屬性|2#屬性}{1} 已使用實例{0,choice,1#變數|2#變數}，但當{0,choice,1#它的|2#他們的}存取器被覆蓋時將無法使用。 您要繼續嗎？

implement.methods.handler.no.members.message={0} 沒有要實作的方法
implement.methods.handler.members.chooser.title=選擇要實作的方法

override.implement.methods.handler.action.title=覆寫/實作方法
override.implement.methods.handler.members.chooser.title=選擇要覆寫/實作的方法

override.implement.methods.handler.no.members.message={0} 沒有要覆寫/實作的方法

generate.cpp.handler.no.parents.message=沒有要{0}的類別
generate.cpp.handler.parent.chooser.title=選擇目標位置
generate.cpp.handler.inplace.option=就地生成(&P)
generate.cpp.handler.show.existing.button=顯示現有(&S)
generate.cpp.handler.replace.button=取代現有(&R)
generate.cpp.handler.add.missing.button=新增缺失(&A)
generate.cpp.handler.usages.string=匹配項
generate.cpp.handler.usages.cannot.make=無法完成生成: 部分檔案已更改

override.implement.show.optional.members=顯示可選成員(&O)
override.implement.show.synthesized.accessors=顯示合成存取器(&S)

class.action.handler.no.members.message={0} 沒有要{1}的成員
class.action.handler.invalid.for.selection=操作對當前選擇無效
class.action.handler.action.title=生成 {0}

declare.action.context.interface=接口
declare.action.context.private.category=私有類別
declare.action.context.implementation=實作(不宣告)

declare.members.handler.action.title=宣告成員
declare.members.handler.members.chooser.title=選擇要宣告的成員
declare.members.handler.no.members.message={0} 沒有要宣告的成員

generate.constructor.action.title=生成構造函數
generate.constructor.members.chooser.title=選擇要初始化的欄位
generate.constructor.choose.base.class.constructor=選擇基類別構造函數
generate.constructor.already.defined.message=構造函數 {0} 已經被定義。\n是否要繼續?

generate.destructor.action.title=生成析構函數
generate.destructor.already.defined.message=析構函數已定義。\n是否要繼續?

generate.cpp.getter.and.setter.action.title=生成 getter 和 setter
generate.cpp.getter.and.setter.members.chooser.title=選擇要{0}的欄位

generate.cpp.getter.action.title=生成 getter

generate.cpp.setter.action.title=生成 setter

generate.definitions.handler.parent.chooser.title=選擇類別/命名空間

generate.description.handler.include.member.names=包含成員名稱(&I)
generate.description.handler.action.title=生成 {0}

generate.encode.handler.action.title=生成 {0}/{1}
generate.encode.handler.no.members.message={0} 沒有可編碼成員

generate.initwith.handler.retain.objects=保留物件參數(&R)
generate.initwith.handler.use.setters=使用屬性 setter(&U)
generate.initwith.handler.generate.class.constructor=生成“+objectWith…”(&G)
generate.initwith.handler.action.title=生成 {0}
generate.initwith.handler.members.chooser.title=選擇要初始化的成員

generate.isequal.and.hash.handler.action.title=生成 {0} 和 {1}

generate.ivars.handler.show.synthesized=顯示合成屬性(&S)
generate.ivars.handler.action.title=從屬性生成實例變數
generate.ivars.handler.members.chooser.title=選擇屬性以創建實例變數
generate.ivars.handler.no.members.message={0} 沒有用於生成實例變數的屬性

generate.method.handler.declare.in.interface=在接口中宣告(&D)
generate.method.handler.members.chooser.title=選擇成員
generate.method.handler.method.already.defined={0} 已經定義。\n是否要取代現有方法?

generate.properties.handler.show.synthesized=顯示具有合成屬性的 ivarsy(&I)
generate.properties.handler.convert.usages=將 ivar 用法轉換為屬性(&C)
generate.properties.handler.members.chooser.title=選擇實例變數以創建屬性
generate.properties.handler.action.title=從實例變數生成屬性
generate.properties.handler.no.instance.variables={0} 沒有用於生成屬性的實例變數

generate.shared.instance.handler.action.title=生成共享實例方法
