action.Kotlin.Gradle.ShowDslLogs.text=显示 Kotlin Gradle DSL 日志
action.LoadKtGradleConfiguration.description=Gradle Kotlin DSL 脚本配置已更改。加载更改以获取代码洞察，无需导入外部 Gradle 项目。
action.LoadKtGradleConfiguration.text=加载脚本配置
action.text.show.kotlin.gradle.dsl.logs.in=在 {0} 中显示 Kotlin Gradle DSL 日志
error.text.invalid.gradle.libraries.directory=Gradle 库目录 {0} 无效
error.text.missing.jars.in.gradle.directory=Gradle 目录中缺少 jar
error.text.unable.to.get.gradle.home.directory=无法获取 Gradle 主目录
gradle.script.configurations.importing.feature=在 Gradle 项目导入期间加载 Gradle Kotlin DSL 脚本配置
gradle.scripts.settings.title=管理独立的 Gradle Kotlin DSL 脚本\:
kotlin.build.script.errors=Kotlin 构建脚本错误
label.sources.were.not.indexed=为了缩短项目启动时间，已禁用脚本依赖项源索引。您可以在“高级设置”中更改此设置。
link.label.opening.advanced.settings=正在打开“高级设置”
notification.action.text.load.script.configuration=加载配置
notification.gradle.legacy.firstLoad=禁用代码洞察以避免 Gradle 构建配置。
notification.gradle.legacy.firstLoad.info=<div width\=400><p>需要运行 Gradle 配置阶段才可获取脚本配置。脚本配置加载默认禁用，因为其对于大型 Gradle 项目可能会占用大量资源。</p><p>点击“加载配置”评估 Gradle Kotlin DSL 脚本。</p><p>或者，要在脚本首次打开时自动加载配置，并在每次更改构建脚本配置块时重新加载配置，可以为所有脚本启用“自动重新加载”。对于配置时间较长的大型 Gradle 项目，不推荐此选项。</p></div>
notification.gradle.legacy.outsideProject=代码洞察不可用(相关 Gradle 项目未链接)。
notification.gradle.legacy.outsideProject.addToStandaloneHelp=<div width\=400><p>需要导入评估此脚本的 Gradle 项目，使 IDE 能够进行分析。尝试重新导入链接的 Gradle 项目或链接评估该脚本的新 Gradle 项目。</p><p>或者，您可以将其添加到独立脚本中，其配置将自动加载。</p><p><b>注意\: </b>每个独立脚本都需要在更新时执行单独的 Gradle 配置阶段。对于大型 Gradle 项目，这可能会占用大量资源。</p></div>
notification.gradle.legacy.standalone.info=<div width\=400><p>评估此脚本的 Gradle 项目未在 IDE 中导入。<br/><p><b>注意\: </b>每个独立脚本都需要在更新时执行单独的 Gradle 配置阶段。对于大型 Gradle 项目，这可能会占用大量资源。</p></div>
notification.notEvaluatedInLastImport.addAsStandaloneAction=添加到独立脚本
notification.notEvaluatedInLastImport.info=<div width\=400><p>需要导入评估此脚本的 Gradle 项目，使 IDE 能够进行分析。尝试重新导入链接的 Gradle 项目或链接评估该脚本的新 Gradle 项目。</p><p>或者，您可以将其添加到独立脚本中，其配置将单独加载。</p><p><b>注意\: </b>每个独立脚本都需要在更新时执行单独的 Gradle 配置阶段。对于大型 Gradle 项目，这可能会占用大量资源。</p></div>
notification.notEvaluatedInLastImport.text=代码洞察不可用(未收到脚本配置)。
notification.outsideAnything.linkAction=链接 Gradle 项目
notification.outsideAnything.text=代码洞察不可用(相关 Gradle 项目未链接)。
notification.standalone.disableScriptAction=从独立脚本移除
notification.standalone.info=<div width\=400><p>此脚本的配置将与 Gradle 项目同步分别加载。<br/><p><b>注意\:</b> 每个独立脚本都需要在更新时执行单独的 Gradle 配置阶段。对于大型 Gradle 项目，这可能会占用大量资源。</p></div>
notification.standalone.text=独立脚本
notification.text.script.configuration.has.been.changed=需要导入 Gradle Project 以加载更改。
notification.wasNotImportedAfterCreation.help=<div width\=400><p>Gradle Kotlin DSL 脚本配置丢失。导入外部 Gradle 项目或加载配置以获取脚本代码洞察。</p></div>
notification.wasNotImportedAfterCreation.text=代码洞察不可用(未加载脚本配置)。
open.advanced.settings=打开“高级设置”
standalone.scripts.settings.column.name=路径
text.default.kotlin.gradle.script=Kotlin Gradle 错误
text.gradle.dsl.logs.cannot.be.found.automatically.see.how.to.find.logs=无法自动找到 Gradle DSL 日志。<br/>可以在<a href\="{0}">此处</a>了解如何查找日志。
