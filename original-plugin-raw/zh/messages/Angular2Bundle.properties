angular.action.goto-declaration.component=组件声明(&D)
angular.action.goto-declaration.directive=指令声明(&D)
angular.action.goto-related.component-class=组件类
angular.action.goto-related.group-name=Angular 组件
angular.action.goto-related.inline=<inline>
angular.action.goto-related.module=模块类
angular.action.goto-related.styles=样式{0}
angular.action.goto-related.template=模板
angular.action.goto-related.tests=测试{0}
angular.action.goto-type-declaration.component-template=组件模板(&T)
angular.action.new-project.description=Angular CLI 有助于创建新的开箱即用 Angular 应用程序。
angular.action.new-project.label-additional-parameters=附加参数:
angular.action.new-project.label-defaults=使用默认项目设置(&D)
angular.action.new-project.label-content-root-folder=内容根文件夹
angular.action.new-project.label-project-name=项目
angular.action.new-project.name=Angular CLI
angular.action.new-project.presentable-package-name=Angular CLI(&C):
angular.action.new-project.wrong-folder-name={0} 名称 ''{1}'' 无效。{0} 名称必须以字母开头，并且只能包含字母数字字符或短划线。添加短划线时，短划线后的分段也必须以字母开头。
angular.action.ng-add.button-close=关闭
angular.action.ng-add.button-install=安装
angular.action.ng-add.cant-add-new-dependency=无法添加新的 Angular 依赖项
angular.action.ng-add.install-current=安装当前
angular.action.ng-add.install-latest=安装最新
angular.action.ng-add.install-other=安装未在上面列出的软件包…
angular.action.ng-add.installing-for=正在为 {1} 安装 {0}
angular.action.ng-add.not-supported-installed-try-latest=已安装的软件包版本似乎不支持 'ng add'。\n\n是否要安装该软件包的最新版本?
angular.action.ng-add.not-supported-specified-try-latest=指定的软件包版本似乎不支持 'ng add'。\n\n是否要安装该软件包的最新版本?
angular.action.ng-add.package-name=软件包名称
angular.action.ng-add.pacakge-not-installed=未安装 Angular CLI 软件包。
angular.action.ng-add.title=通过 'ng add' 安装
angular.action.ng-generate.cant-generate-code=无法从 Angular Schematics 生成代码
angular.action.ng-generate.error-label=\ - 错误: {0}
angular.action.ng-generate.label.parameters=形参 {0}
angular.action.ng-generate.params.options=<选项…>
angular.action.ng-generate.title=使用 Angular Schematics 生成代码

angular.colors.banana-binding=双向数据绑定 ‘[(...)]’
angular.colors.event-binding=事件绑定 ‘(event)’
angular.colors.expansion-form=复数表达式
angular.colors.expansion-form-comma=复数表达式中的逗号
angular.colors.expansion-form-delimiter=复数表达式中的大括号
angular.colors.interpolation-delimiter=插值中的大括号
angular.colors.property-binding=属性绑定 ‘[property]’
angular.colors.ref-var=模板引用变量 ‘#var’
angular.colors.template-binding=结构指令 ‘*directive’
angular.colors.template-expression=模板表达式

angular.description.angular-cli=Angular CLI
filetype.angular-metadata-json.description=Angular 元数据 JSON
filetype.angular-metadata-json.display.name=Angular 元数据 JSON
angular.description.and-separator=和
angular.description.attribute-selector=特性选择器
angular.description.element-selector=元素选择器
angular.description.pipe=管道
angular.description.ref-var=模板引用变量
angular.description.unknown-class=<unknown class>
angular.description.unnamed=<unnamed>

angular.entity.pipe=管道
angular.entity.component=组件
angular.entity.directive=指令
angular.entity.component.or.directive=组件或指令

angular.inlay.params.option.pipe.arguments=管道实参

angular.inspection.ambiguous-component-tag.message.embedded=组件位于嵌入式模板上: {0}
angular.inspection.ambiguous-component-tag.message.many-components=在此元素上匹配多个组件: {0}
angular.inspection.ambiguous-component-tag.name=不明确的组件标记
angular.inspection.animation-trigger-assignment.message=动画触发器赋值无效
angular.inspection.animation-trigger-assignment.name=动画触发器赋值无效
angular.inspection.aot-inaccessible-member.message.member=使用 AOT 编译器时，无法从组件模板解决 {0} {1} {2}
angular.inspection.aot-inaccessible-member.message.template-symbol=使用 AOT 编译器时，无法解决 {0} {1} {2}。
angular.inspection.aot-inaccessible-member.name=在 AOT 模式下无法访问组件成员
angular.inspection.cyclic-module-dependency.message.cycle=模块之间存在循环依赖关系: {0}
angular.inspection.cyclic-module-dependency.message.self-export=模块 {0} 将自身导出
angular.inspection.cyclic-module-dependency.message.self-import=模块 {0} 将自身导入
angular.inspection.cyclic-module-dependency.message.separator=->
angular.inspection.cyclic-module-dependency.name=递归导入或导出 Angular 模块
angular.inspection.group.name=Angular
angular.inspection.i18n.message.empty=i18n- 特性应包含待翻译特性的名称
angular.inspection.i18n.message.not-matching=已翻译的特性 {0} 不存在
angular.inspection.i18n.name=i18n 特性无效
angular.inspection.insecure-binding-to-event.message.attribute=出于安全原因，不允许绑定到事件特性 {0}
angular.inspection.insecure-binding-to-event.message.property=出于安全原因，不允许绑定到事件属性 {0}
angular.inspection.insecure-binding-to-event.name=绑定到事件不安全
angular.inspection.install-with-ng-add.message=可以使用 ''ng add'' 命令安装 {0}
angular.inspection.install-with-ng-add.name=Angular CLI 添加依赖项
angular.inspection.invalid-declaration-in-module.message.declared-in-many={0} 在多个 Angular 模块中声明: {1}
angular.inspection.invalid-declaration-in-module.message.not-declared={0} 未在任何 Angular 模块中声明
angular.inspection.invalid-declaration-in-module.name=模块中的组件、指令或管道声明缺失或无效
angular.inspection.invalid-directive-selector.message.missing=指令缺少必需的 'selector' 属性
angular.inspection.invalid-directive-selector.name=选择器缺失或无效
angular.inspection.invalid-entry-component.message.not-array-of-class-types=表达式不会解析为类类型的数组或类类型
angular.inspection.invalid-entry-component.message.not-component=类 {0} 不是 Angular 组件
angular.inspection.invalid-entry-component.name=入口组件无效
angular.inspection.invalid-template-definition.message.duplicated='template' 和 'templateUrl' 不能一起使用
angular.inspection.invalid-template-definition.message.missing={0} 没有模板
angular.inspection.invalid-template-definition.name=组件模板定义不正确
angular.inspection.invalid-template-ref-var.message.ambiguous-name=有多个指令将 ''exportAs'' 设置为 {0}: {1}
angular.inspection.invalid-template-ref-var.message.unbound=没有任何指令将 ''exportAs'' 设置为 {0}
angular.inspection.invalid-template-ref-var.name=模板引用变量未绑定或不明确
angular.inspection.missing-event-handler.message=事件绑定没有事件处理语句
angular.inspection.missing-event-handler.name=缺少事件处理程序
angular.inspection.multiple-structural-directives.message=只能应用一个结构指令
angular.inspection.multiple-structural-directives.name=一个元素上有多个结构指令
angular.inspection.ng-content-with-content.message=<ng-content> 元素不能拥有内容
angular.inspection.ng-content-with-content.name=内容位于 <ng-content> 标记中
# suppress inspection "UnusedProperty"
angular.inspection.undefined-binding.message.attribute-directive-out-of-scope=提供特性 {0} 的指令超出了当前 Angular 模块的范围
# suppress inspection "UnusedProperty"
angular.inspection.undefined-binding.message.banana-box-binding-not-provided=由于任何适用指令均不提供，无法绑定到 [({0})]
# suppress inspection "UnusedProperty"
angular.inspection.undefined-binding.message.embedded.event-not-emitted=嵌入式模板上的任何适用指令均不发出事件 {0}
angular.inspection.undefined-binding.message.embedded.no-directive-matched=特性 {0} 上没有匹配的指令
angular.inspection.undefined-binding.message.embedded.property-not-provided=嵌入式模板上的任何适用指令均不提供属性 {0}
# suppress inspection "UnusedProperty"
angular.inspection.undefined-binding.message.event-not-emitted=任何适用指令或 {1} 元素均不发出事件 {0}
# suppress inspection "UnusedProperty"
angular.inspection.undefined-binding.message.property-not-provided=任何适用指令或 {1} 元素均不提供属性 {0}
# suppress inspection "UnusedProperty"
angular.inspection.undefined-binding.message.unknown-attribute=此处不允许使用特性 {0}
angular.inspection.undefined-binding.name=未定义的绑定
angular.inspection.undefined-export.message=无法从 {1} 导出 {0}，因为其中既未声明也未导入
angular.inspection.undefined-export.name=未定义从 Angular 模块导出
angular.inspection.undefined-tag.message.out-of-scope=匹配 {0} 元素的组件或指令超出了当前 Angular 模块的范围
angular.inspection.undefined-tag.name=未定义的标记
angular.inspection.unresolved-pipe.message=未解析的管道 {0}
angular.inspection.wrong-entity-type.message.not-a-module=类 {0} 不是 Angular 模块
angular.inspection.wrong-entity-type.message.not-declarable=类 {0} 既不是 Angular 组件，也不是指令或管道
angular.inspection.wrong-entity-type.message.not-entity=类 {0} 既不是 Angular 模块，也不是组件、指令或管道
angular.inspection.wrong-entity-type.name=导入或声明的符号无效

angular.notify.cli.required-package-not-installed=未安装所需软件包 '@angular/cli'。

angular.parse.expression.assignment-in-binding=绑定表达式不能包含赋值
angular.parse.expression.chained-expression-in-binding=绑定表达式不能包含链式表达式
angular.parse.expression.expected-identifier-keyword-or-string=应为标识符、关键字或字符串
angular.parse.expression.expected-identifier-or-keyword=应为标识符或关键字
angular.parse.expression.pipe-in-action=操作表达式不能包含管道
angular.parse.expression.pipe-in-host-binding=主机绑定表达式不能包含管道
angular.parse.expression.unexpected-token=意外的标记 ''{0}''
angular.parse.selector.multiple-not=:not 中的多个选择器不受支持
angular.parse.selector.nested-not=选择器中不允许嵌套 :not
angular.parse.template.animation-trigger-missing-phase-value=动画触发器输出事件 (@{0}) 缺少其阶段值名称(当前支持 ''start'' 或 ''done'')
angular.parse.template.animation-trigger-wrong-output-phase=不支持为 ''@{1}'' 提供的动画输出阶段值 ''{0}'' (使用 ''start'' 或 ''done'')
angular.parse.template.invalid-icu-message-expected-comma=ICU 消息无效。应为 ','。
angular.parse.template.invalid-icu-message-expected-left-brace=ICU 消息无效。缺少 '{'。
angular.parse.template.invalid-icu-message-missing-case-value=ICU 消息无效。缺少 case 值。
angular.parse.template.invalid-icu-message-missing-right-brace=ICU 消息无效。缺少 '}'。
angular.parse.template.let-dash-not-allowed-in-name=变量名称中不允许使用 '-'
angular.parse.template.let-only-on-ng-template=仅在 <ng-template> 元素上支持 'let-'
angular.parse.template.ref-var-dash-not-allowed-in-name=引用名称中不允许使用 '-'
angular.parse.template.unterminated-expansion-form=未终止的扩展形式
angular.parse.template.unterminated-expansion-form-critical=未终止的扩展形式。如果您未转义 '{'，请使用 '{{ "{" }}' 将其转义。
angular.parse.template.unterminated-interpolation=未终止的插值

angular.quickfix.decorator.add-property.family=添加属性
angular.quickfix.decorator.add-property.name=添加 ''{0}'' 属性
angular.quickfix.decorator.remove-property.family=移除属性
angular.quickfix.decorator.remove-property.name=移除 ''{0}'' 属性
angular.quickfix.json.ng-add.error.cant-run=无法运行 'ng add'
angular.quickfix.json.ng-add.family=运行 'ng add'
angular.quickfix.json.ng-add.name.reinstall=通过 ''ng add {0}'' 重新安装
angular.quickfix.json.ng-add.name.run=运行 ''ng add {0}''
angular.quickfix.ngmodule.declare.family=向模块添加声明
angular.quickfix.ngmodule.declare.name=在 {1} 中声明 {0}
angular.quickfix.ngmodule.declare.name.choice=在 Angular 模块中声明 {0}…
angular.quickfix.ngmodule.declare.select.module=在 Angular 模块中声明 {0}
angular.quickfix.ngmodule.declare.select.declarable=要声明的 {0}
angular.quickfix.ngmodule.export.family=从模块导出实体
angular.quickfix.ngmodule.export.name=导出 {0}
angular.quickfix.ngmodule.export.select.declarable=要导出的 {0}
angular.quickfix.ngmodule.import.family=导入 Angular 模块
angular.quickfix.ngmodule.import.name=导入 {0}
angular.quickfix.ngmodule.import.name.choice=导入 Angular 模块…
angular.quickfix.ngmodule.import.select.module=要导入的 Angular 模块
angular.quickfix.template.add-attribute-value.family=添加特性值
angular.quickfix.template.add-attribute-value.name=添加特性值
angular.quickfix.template.bind-to-event.family=绑定到事件
angular.quickfix.template.bind-to-event.name=绑定到事件({0})
angular.quickfix.template.bind-to-property.family=绑定到属性
angular.quickfix.template.bind-to-property.name=绑定到属性 [{0}]
angular.quickfix.template.create-attribute.family=创建特性
angular.quickfix.template.create-attribute.name=创建 ''{0}'' 特性
angular.quickfix.template.remove-attribute-value.family=移除特性值
angular.quickfix.template.remove-attribute-value.name=移除特性值
angular.quickfix.template.remove-tag-content.family=移除标记内容
angular.quickfix.template.remove-tag-content.name=移除内容
angular.quickfix.template.rename-attribute.family=重命名特性
angular.quickfix.template.rename-attribute.name=将特性重命名为 ''{0}''
angular.refactor.extractComponent.task=提取组件
angular.refactor.extractComponent.dialog=提取组件
angular.refactor.extractComponent.dialog.name=名称:
angular.refactor.extractComponent.unsupported-multiple-carets=请使用单文本光标
angular.refactor.extractComponent.unsupported-selection=请选择整个元素
angular.refactor.extractComponent.unsupported-ng-content=不支持元素 ng-content
angular.refactor.extractComponent.unsupported-i18n=不支持 I18n 语法
angular.refactor.extractComponent.animations=不支持动画
angular.refactor.extractComponent.cli-error=无法使用 Angular CLI 创建组件
angular.refactor.extractComponent.unexpected-cli-output=Angular CLI 意外输出
angular.refactor.extractComponent.after-generator-error=文件修改过程中出错


angular.search-scope.template=模板

angular.suppress.for-expression=对表达式禁止

action.angularCliGenerate.text=Angular 原理图…
action.angularCliGenerate.title=生成 {0}
action.angularCliAdd.text=Angular 依赖项…
action.Angular2ExtractComponentAction.text=提取组件…

# suppress inspection "UnusedProperty"
description.angularCliGenerate.description=从 Angular 原理图生成新代码
# suppress inspection "UnusedProperty"
description.angularCliAdd.description=添加新的依赖项并执行关联的 'ng-add' 原理图