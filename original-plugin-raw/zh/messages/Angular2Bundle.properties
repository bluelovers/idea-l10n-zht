action.Angular2ExtractComponentAction.text=提取组件…
action.Angular2VisualizeGeneratedTcbAction.description=直观呈现生成的 Angular 模板 TCB
action.Angular2VisualizeGeneratedTcbAction.text=直观呈现生成的 Angular 模板 TCB
action.angularCliAdd.text=Angular 依赖项…
action.angularCliGenerate.text=Angular 原理图…
action.angularCliGenerate.title=生成 {0}
angular.action.goto-declaration.component=组件声明(&D)
angular.action.goto-declaration.directive=指令声明(&D)
angular.action.goto-related.component-class=组件类
angular.action.goto-related.group-name=Angular 组件
angular.action.goto-related.inline=<inline>
angular.action.goto-related.module=模块类
angular.action.goto-related.open.popup=Open popup Related Files
angular.action.goto-related.show.all=Show all {0} files
angular.action.goto-related.styles=样式{0}
angular.action.goto-related.template=模板
angular.action.goto-related.tests=测试{0}
angular.action.goto-type-declaration.component-template=组件模板(&T)
angular.action.new-project.description=Angular CLI 有助于创建新的开箱即用 Angular 应用程序。
angular.action.new-project.label-additional-parameters=附加形参\:
angular.action.new-project.label-content-root-folder=内容根文件夹
angular.action.new-project.label-defaults=使用默认项目设置(&D)
angular.action.new-project.label-project-name=项目
angular.action.new-project.label-standalone=使用独立组件创建新项目(&S)
angular.action.new-project.name=Angular CLI
angular.action.new-project.presentable-package-name=Angular CLI(&C)\:
angular.action.new-project.wrong-folder-name={0} 名称 ''{1}'' 无效。{0} 名称必须以字母开头，并且只能包含字母数字字符或短划线。添加短划线时，短划线后的分段也必须以字母开头。
angular.action.ng-add.button-close=关闭
angular.action.ng-add.button-install=安装
angular.action.ng-add.cant-add-new-dependency=无法添加新的 Angular 依赖项
angular.action.ng-add.install-current=安装当前
angular.action.ng-add.install-latest=安装最新
angular.action.ng-add.install-other=安装未在上面列出的软件包…
angular.action.ng-add.installing-for=正在为 {1} 安装 {0}
angular.action.ng-add.not-supported-installed-try-latest=已安装的软件包版本似乎不支持 'ng add'。\n\n是否要安装该软件包的最新版本?
angular.action.ng-add.not-supported-specified-try-latest=指定的软件包版本似乎不支持 'ng add'。\n\n是否要安装该软件包的最新版本?
angular.action.ng-add.pacakge-not-installed=未安装 Angular CLI 软件包。
angular.action.ng-add.package-name=软件包名称
angular.action.ng-add.title=通过 'ng add' 安装
angular.action.ng-generate.cant-generate-code=无法从 Angular Schematics 生成代码
angular.action.ng-generate.error-label=\ - 错误\: {0}
angular.action.ng-generate.label.parameters=形参 {0}
angular.action.ng-generate.params.options=<选项…>
angular.action.ng-generate.title=使用 Angular Schematics 生成代码
angular.colors.banana-binding=双向数据绑定 ‘[(...)]’
angular.colors.block-braces=块大括号
angular.colors.block-name=块名称
angular.colors.event-binding=事件绑定 ‘(event)’
angular.colors.expansion-form=复数表达式
angular.colors.expansion-form-comma=复数表达式中的逗号
angular.colors.expansion-form-delimiter=复数表达式中的大括号
angular.colors.interpolation-delimiter=插值中的大括号
angular.colors.ng-deep-pseudo=伪选择器 ‘\:\:ng-deep’
angular.colors.property-binding=属性绑定 ‘[property]’
angular.colors.signal=信号
angular.colors.template-binding=结构指令 ‘*directive’
angular.colors.template-expression=模板表达式
angular.colors.template-variable=模板变量
angular.command.name.auto-import-angular-directives=自动导入 Angular 指令
angular.configurable.name.angular.template=Angular 模板
angular.configurable.service.auto=自动
angular.configurable.service.auto.help=选择此选项可在可能的情况下启用 WebStorm 自定义 Angular TypeScript 插件。WebStorm 将使用 TypeScript 语言服务器检查来分析模板表达式。如果启用了“使用来自服务器的类型”选项，类型评估也将在 TypeScript 语言服务中进行。
angular.configurable.service.disabled=已禁用
angular.configurable.service.disabled.help=选择此选项可以关闭语言服务。将仅使用内部 IDE 检查。
angular.configurable.service.group=WebStorm Angular TypeScript 插件
angular.configurable.service.title=Angular
angular.description.and-separator=和
angular.description.angular-cli=Angular CLI
angular.description.attribute-selector=特性选择器
angular.description.element-selector=元素选择器
angular.description.pipe=管道
angular.description.ref-var=模板引用变量
angular.description.unknown-class=<unknown class>
angular.description.unnamed=<unnamed>
angular.entity.component=组件
angular.entity.component.or.directive=组件或指令
angular.entity.directive=指令
angular.entity.directive.inout=指令输入/输出
angular.entity.directive.input=指令输入
angular.entity.directive.output=指令输出
angular.entity.directive.property=指令属性
angular.entity.module=模块
angular.entity.pipe=管道
angular.html.template=Angular HTML 模板
angular.html.template.17=Angular HTML 模板(17+)
angular.html.template.181=Angular HTML 模板(18.1+)
angular.html.template.20=Angular HTML 模板(20+)
angular.inlay.params.option.pipe.arguments=管道实参
angular.inspection.ambiguous-component-tag.message.embedded=组件位于嵌入式模板上\: {0}
angular.inspection.ambiguous-component-tag.message.many-components=在此元素上匹配多个组件\: {0}
angular.inspection.ambiguous-component-tag.name=不明确的组件标记
angular.inspection.animation-trigger-assignment.message=动画触发器赋值无效
angular.inspection.animation-trigger-assignment.name=动画触发器赋值无效
angular.inspection.cyclic-module-dependency.message.cycle=以下各项之间的循环依赖关系\: {0}
angular.inspection.cyclic-module-dependency.message.self-export={0} 将自身导出
angular.inspection.cyclic-module-dependency.message.self-import={0} 将自身导入
angular.inspection.cyclic-module-dependency.message.separator=->
angular.inspection.cyclic-module-dependency.name=递归导入或导出 Angular 模块或独立组件
angular.inspection.defer-block-on-trigger.message.argument-not-supported=触发器 {0} 不支持实参
angular.inspection.defer-block-on-trigger.message.argument-required=触发器 {0} 需要实参
angular.inspection.defer-block-on-trigger.message.template-var-ref-required=触发器 {0} 仅支持模板变量引用
angular.inspection.defer-block-on-trigger.message.time-duration-required=触发器 {0} 仅支持持续时间
angular.inspection.defer-block-on-trigger.name=@defer `on` 触发器的问题
angular.inspection.for-block-non-iterable.message.non-iterable-type=类型 {0} 必须具有返回迭代器的 {1} 方法。
angular.inspection.for-block-non-iterable.name=@for 块中的不可迭代类型
angular.inspection.group.name=Angular
angular.inspection.i18n.message.empty={0} 特性应包含待翻译特性的名称
angular.inspection.i18n.message.not-matching=已翻译的特性 {0} 不存在
angular.inspection.i18n.name=i18n 特性无效
angular.inspection.illegal-for-loop-access.message=无法在 track 表达式内部访问 {0}。此表达式仅可访问 {1} 和包含组件上的属性。
angular.inspection.illegal-for-loop-access.name=非法 @for 循环访问
angular.inspection.inaccessible-symbol.aot.message={0} {1} 是 {2}，并且只有在使用 AOT 编译器时才能在类 {3} 内访问
angular.inspection.inaccessible-symbol.name=无法访问的组件成员或指令输入
angular.inspection.inaccessible-symbol.strict.private.message={0} {1} 是 {2}，并且只能在类 {3} 中访问
angular.inspection.inaccessible-symbol.strict.protected.message={0} {1} 是 {2}，并且只能在类 {3} 及其子类内访问
angular.inspection.inaccessible-symbol.strict.read-only.message=无法赋值给输入 {0}，因为它是只读属性
angular.inspection.incorrect-block-usage.message.cannot-be-nested={0} 块不能嵌套在 {1} 下
angular.inspection.incorrect-block-usage.message.duplicated-block={0} 块只能有一个 {1} 块
angular.inspection.incorrect-block-usage.message.duplicated-parameter={0} 块只能有一个 {1} 形参
angular.inspection.incorrect-block-usage.message.hydrate-never-surplus-trigger=如果存在 {1}，则无法指定其他 {0} 触发器
angular.inspection.incorrect-block-usage.message.missing-block-name=缺少块名称
angular.inspection.incorrect-block-usage.message.missing-expression={0} 需要 {1} 形参
angular.inspection.incorrect-block-usage.message.missing-primary-block.parent={0} 块必须嵌套在主块 {1} 下
angular.inspection.incorrect-block-usage.message.missing-primary-block.sibling={0} 块必须是主块 {1} 的同级块
angular.inspection.incorrect-block-usage.message.missing-primary-expression={0} 需要一个表达式作为第一个形参
angular.inspection.incorrect-block-usage.message.no-params-allowed={0} 块不能有形参
angular.inspection.incorrect-block-usage.message.not-last={0} 块必须位于 {1} 内的最后
angular.inspection.incorrect-block-usage.message.undefined=未知块 {0}
angular.inspection.incorrect-block-usage.message.unrecognized-parameter={0} 不支持形参 {1}
angular.inspection.incorrect-block-usage.message.unrecognized-parameter-prefix={0} 不支持形参前缀 {1}
angular.inspection.incorrect-block-usage.name=Angular 块的错误用法
angular.inspection.incorrect-let-usage.message.conflicting-declaration=无法声明名为 {1} 的 {0}，因为同一模板作用域中存在另一个同名的符号。
angular.inspection.incorrect-let-usage.message.used-before-declaration=在定义之前无法读取 {0} 声明 {1}
angular.inspection.incorrect-let-usage.name=@let 声明的错误用法
angular.inspection.insecure-binding-to-event.message.attribute=出于安全原因，不允许绑定到事件特性 {0}
angular.inspection.insecure-binding-to-event.message.property=出于安全原因，不允许绑定到事件属性 {0}
angular.inspection.insecure-binding-to-event.name=绑定到事件不安全
angular.inspection.install-with-ng-add.message=可以使用 ''ng add'' 命令安装 {0}
angular.inspection.install-with-ng-add.name=Angular CLI 添加依赖项
angular.inspection.invalid-binding-type.name=无效的绑定类型
angular.inspection.invalid-declaration-in-module.message.declared-in-many={0} 在多个 Angular 模块中声明\: {1}
angular.inspection.invalid-declaration-in-module.message.not-declared={0} 未在任何 Angular 模块中声明
angular.inspection.invalid-declaration-in-module.name=模块中的组件、指令或管道声明缺失或无效
angular.inspection.invalid-directive-selector.message.missing=指令缺少必需的 {0} 属性
angular.inspection.invalid-directive-selector.name=选择器缺失或无效
angular.inspection.invalid-entry-component.message.not-array-of-class-types=表达式不会解析为类类型的数组或类类型
angular.inspection.invalid-entry-component.message.not-component=类 {0} 不是 Angular 组件
angular.inspection.invalid-entry-component.message.standalone=组件 {0} 是独立的，不能在 {1} 数组中使用。请改用 {2} 函数进行引导
angular.inspection.invalid-entry-component.name=入口组件无效
angular.inspection.invalid-template-definition.message.duplicated={0} 和 {1} 不能一起使用
angular.inspection.invalid-template-definition.message.missing={0} 没有模板
angular.inspection.invalid-template-definition.name=组件模板定义不正确
angular.inspection.invalid-template-ref-var.message.ambiguous-name=存在多个 {0} 设置为 {1} 的指令\: {2}
angular.inspection.invalid-template-ref-var.message.unbound=没有任何 {0} 设置为 {1} 的指令
angular.inspection.invalid-template-ref-var.name=模板引用变量未绑定或不明确
angular.inspection.missing-event-handler.message=事件绑定没有事件处理语句
angular.inspection.missing-event-handler.name=缺少事件处理程序
angular.inspection.missing-required-directive-input-binding.message=缺少指令 {1} 的所需输入 {0} 的绑定
angular.inspection.missing-required-directive-input-binding.message.component=缺少组件 {1} 的所需输入 {0} 的绑定
angular.inspection.missing-required-directive-input.name=缺少必需的指令输入
angular.inspection.multiple-structural-directives.message=只能应用一个结构指令
angular.inspection.multiple-structural-directives.name=一个元素上有多个结构指令
angular.inspection.ng-content-with-content.message={0} 元素不能有内容
angular.inspection.ng-content-with-content.name=内容位于 <ng-content> 标记中
angular.inspection.ng-optimized-image.message.both.fill.attributes.not.allowed={2} 指令不允许同时使用 {0} 和 {1} 特性
angular.inspection.ng-optimized-image.message.both.fill.width.or.height.attributes.not.allowed={3} 指令不允许同时使用 {0} 和 {1} 或 {2} 特性
angular.inspection.ng-optimized-image.message.both.width.height.attributes.required={2} 指令同时需要 {0} 和 {1} 特性
angular.inspection.ng-optimized-image.message.ngsrc.requires.width.height.attributes={0} 需要 {1} 和 {2} 特性
angular.inspection.ng-optimized-image.message.ngsrc.requires.width.height.or.fill.attributes={0} 需要 {1} 和 {2} 或 {3} 特性
angular.inspection.ng-optimized-image.message.use-ngsrc=使用 {0} ({1} 指令)提高性能
angular.inspection.ng-optimized-image.name=在 img 标记中使用 ngSrc 的问题
angular.inspection.non-standalone-component-imports.message=只有独立组件才能使用 import
angular.inspection.non-standalone-component-imports.name=非独立组件中的无效 import 用法
angular.inspection.undefined-binding.message.attribute-directive-out-of-scope=提供特性 {0} 的指令超出当前模板的作用域
angular.inspection.undefined-binding.message.banana-box-binding-not-provided=由于任何适用指令均不提供，无法绑定到 {0}
angular.inspection.undefined-binding.message.embedded.event-not-emitted=嵌入式模板上的任何适用指令均不发出事件 {0}
angular.inspection.undefined-binding.message.embedded.no-directive-matched=特性 {0} 上没有匹配的指令
angular.inspection.undefined-binding.message.embedded.property-not-provided=嵌入式模板上的任何适用指令均不提供属性 {0}
angular.inspection.undefined-binding.message.event-not-emitted=任何适用指令或 {1} 元素均不发出事件 {0}
angular.inspection.undefined-binding.message.property-not-provided=任何适用指令或 {1} 元素均不提供属性 {0}
angular.inspection.undefined-binding.message.unknown-attribute=此处不允许使用特性 {0}
angular.inspection.undefined-binding.name=未定义的绑定
angular.inspection.undefined-export.message=无法从 {1} 导出 {0}，因为其中既未声明也未导入
angular.inspection.undefined-export.name=未定义从 Angular 模块导出
angular.inspection.undefined-tag.message.out-of-scope=匹配 {0} 元素的组件或指令超出当前模板的作用域
angular.inspection.undefined-tag.name=未定义的标记
angular.inspection.unresolved-pipe.message=未解析的管道 {0}
angular.inspection.unresolved-pipe.name=未解析的管道
angular.inspection.unsupported-syntax-inspection.message.operator-ng-or-above=仅在 Angular {1} 及更高版本中支持 {0} 运算符。
angular.inspection.unsupported-syntax-inspection.message.template=仅在 Angular 19.2 及更高版本中支持未标记的模板语法。
angular.inspection.unsupported-syntax-inspection.name=不支持的 Angular 表达式语法
angular.inspection.unused-component-import.declaration.message={0} 从未在组件模板中使用
angular.inspection.unused-component-import.name=Angular 组件声明中未使用的 import
angular.inspection.unused-component-import.pseudo-module.message=组件模板中未使用 {0} 提供的任何声明
angular.inspection.wrong-entity-type.message.not-declarable={0}类既不是 Angular 组件，也不是指令或管道
angular.inspection.wrong-entity-type.message.not-entity={0}类既不是 Angular 模块，也不是组件、指令或管道
angular.inspection.wrong-entity-type.message.not-importable=类{0}无法导入(既不是 Angular 模块，也不是独立可声明对象)
angular.inspection.wrong-entity-type.message.not-standalone={0} 不是独立的，无法直接导入。它必须通过 NgModule 导入。
angular.inspection.wrong-entity-type.message.standalone-declarable={0} 是独立的，无法在 Angular 模块中声明。是否要改为将其导入?
angular.inspection.wrong-entity-type.name=导入或声明的符号无效
angular.intention.category=Angular
angular.intention.extract.component.template.name=将 Angular 组件模板提取到单独的文件中
angular.intention.inline.component.template.name=内联 Angular 组件模板
angular.intention.introduce.let.variable.name=引入 @let 变量
angular.intention.introduce.let.variable.title=提取 @let 变量
angular.live.template.context.angular=Angular
angular.live.template.context.template=模板
angular.notify.cli.required-package-not-installed=未安装所需软件包 '@angular/cli'。
angular.parse.expression.assignment-in-binding=绑定表达式不能包含赋值
angular.parse.expression.chained-expression-in-binding=绑定表达式不能包含链式表达式
angular.parse.expression.deferred-time.bad-numeric-format=只允许自然数或小数
angular.parse.expression.deferred-time.wrong-time-unit=仅支持 's' 和 'ms' 时间单位
angular.parse.expression.expected-comma=应为 ','
angular.parse.expression.expected-eq=应为 '\='
angular.parse.expression.expected-identifier-keyword-or-string=应为标识符、关键字或字符串
angular.parse.expression.expected-identifier-or-keyword=应为标识符或关键字
angular.parse.expression.expected-numeric-literal=应为数字字面量
angular.parse.expression.expected-of=应为 'of'
angular.parse.expression.expected-on-when=应为 'when' 或 'on'
angular.parse.expression.expected-on-when-never=应为 'when'、'on' 或 'never'
angular.parse.expression.expected-whitespace=应为空格
angular.parse.expression.pipe-in-action=操作表达式不能包含管道
angular.parse.expression.pipe-in-host-binding=主机绑定表达式不能包含管道
angular.parse.expression.unexpected-token=意外的标记 ''{0}''
angular.parse.expression.unexpected-whitespace=意外空格
angular.parse.selector.multiple-not=\:not 中的多个选择器不受支持
angular.parse.selector.nested-not=选择器中不允许嵌套 \:not
angular.parse.template.animation-trigger-missing-phase-value=动画触发器输出事件 (@{0}) 缺少其阶段值名称(当前支持 ''start'' 或 ''done'')
angular.parse.template.animation-trigger-wrong-output-phase=不支持为 ''@{1}'' 提供的动画输出阶段值 ''{0}'' (使用 ''start'' 或 ''done'')
angular.parse.template.invalid-icu-message-expected-comma=ICU 消息无效。应为 ','。
angular.parse.template.invalid-icu-message-expected-left-brace=ICU 消息无效。缺少 '{'。
angular.parse.template.invalid-icu-message-missing-case-value=ICU 消息无效。缺少 case 值。
angular.parse.template.invalid-icu-message-missing-right-brace=ICU 消息无效。缺少 '}'。
angular.parse.template.let-dash-not-allowed-in-name=变量名称中不允许使用 '-'
angular.parse.template.let-only-on-ng-template=仅在 <ng-template> 元素上支持 'let-'
angular.parse.template.missing-block-closing-rbrace=不完整的块 – 缺少 }
angular.parse.template.missing-block-opening-lbrace=不完整的块 – 缺少 {
angular.parse.template.missing-let-block-closing-semicolon=不完整的 @let 块 - 缺失；
angular.parse.template.ref-var-dash-not-allowed-in-name=引用名称中不允许使用 '-'
angular.parse.template.unexpected-block-closing-rbrace=意外 } – 没有要关闭的匹配块
angular.parse.template.unterminated-expansion-form=未终止的扩展形式
angular.parse.template.unterminated-interpolation=未终止的插值
angular.progress.title.auto-importing-angular-directives-on-paste=在粘贴时自动导入 Angular 指令…
angular.quickfix.decorator.add-property.family=添加属性
angular.quickfix.decorator.add-property.name=添加 ''{0}'' 属性
angular.quickfix.decorator.remove-property.family=移除属性
angular.quickfix.decorator.remove-property.name=移除 ''{0}'' 属性
angular.quickfix.forms.create-form-ctrl-in-form-group.family=创建 FormGroup 控件
angular.quickfix.forms.create-form-ctrl-in-form-group.name=在 ''{2}'' 表单组中创建 ''{0}'' 表单 {1}
angular.quickfix.json.ng-add.error.cant-run=无法运行 'ng add'
angular.quickfix.json.ng-add.family=运行 'ng add'
angular.quickfix.json.ng-add.name.reinstall=通过 ''ng add {0}'' 重新安装
angular.quickfix.json.ng-add.name.run=运行 ''ng add {0}''
angular.quickfix.ngmodule.declare.family=向模块添加声明
angular.quickfix.ngmodule.declare.name=在 {1} 中声明 {0}
angular.quickfix.ngmodule.declare.name.choice=在 Angular 模块中声明 {0}…
angular.quickfix.ngmodule.declare.select.declarable=要声明的 {0}
angular.quickfix.ngmodule.declare.select.module=在 Angular 模块中声明 {0}
angular.quickfix.ngmodule.export.family=从模块导出实体
angular.quickfix.ngmodule.export.name=导出 {0}
angular.quickfix.ngmodule.export.select.declarable=要导出的 {0}
angular.quickfix.ngmodule.import.family=导入 Angular 模块
angular.quickfix.ngmodule.import.name=导入 {0}
angular.quickfix.ngmodule.import.name.choice=导入 Angular 实体…
angular.quickfix.ngmodule.import.select.module=要导入的 Angular 实体
angular.quickfix.remove-import.family=移除 import
angular.quickfix.remove-import.name=移除 ''{0}'' import
angular.quickfix.standalone.convert-to-non-standalone.family=将可声明类设为非独立
angular.quickfix.standalone.convert-to-non-standalone.name=将 {0} 设为非独立
angular.quickfix.standalone.convert-to-standalone.family=将可声明类设为独立
angular.quickfix.standalone.convert-to-standalone.name=将 {0} 设为独立
angular.quickfix.standalone.move-to-imports.family=改为导入可声明类
angular.quickfix.standalone.move-to-imports.name=改为导入{0}
angular.quickfix.template.add-attribute-value.family=添加特性值
angular.quickfix.template.add-attribute-value.name=添加特性值
angular.quickfix.template.bind-to-event.family=绑定到事件
angular.quickfix.template.bind-to-event.name=绑定到事件({0})
angular.quickfix.template.bind-to-property.family=绑定到属性
angular.quickfix.template.bind-to-property.name=绑定到属性 [{0}]
angular.quickfix.template.covert-to-ng-src.family=转换为使用 ngSrc
angular.quickfix.template.create-attribute.family=创建特性
angular.quickfix.template.create-attribute.name=创建 ''{0}'' 特性
angular.quickfix.template.create-height-width-attributes.name=创建 'width' 和 'height' 特性
angular.quickfix.template.create-input-transformer.family=创建输入转换器
angular.quickfix.template.create-input-transformer.std.name=使用 {0} 输入转换器
angular.quickfix.template.create-input.name=创建输入 ''{0}''
angular.quickfix.template.create-model.name=创建模型 ''{0}''
angular.quickfix.template.create-output.name=创建输出 ''{0}''
angular.quickfix.template.create-required-input.name=创建所需信号输入 ''{0}''
angular.quickfix.template.create-required-model.name=创建所需模型 ''{0}''
angular.quickfix.template.create-signal-input.name=创建信号输入 ''{0}''
angular.quickfix.template.create-signal.name=创建信号 ''{0}''
angular.quickfix.template.popup.choose-target-class=选择目标类
angular.quickfix.template.remove-attribute-value.family=移除特性值
angular.quickfix.template.remove-attribute-value.name=移除特性值
angular.quickfix.template.remove-tag-content.family=移除标记内容
angular.quickfix.template.remove-tag-content.name=移除内容
angular.quickfix.template.rename-attribute.family=重命名特性
angular.quickfix.template.rename-attribute.name=将特性重命名为 ''{0}''
angular.quickfix.wrap-with-forwardRef.family=使用 forwardRef 调用包装 import
angular.refactor.extractComponent.after-generator-error=文件修改过程中出错
angular.refactor.extractComponent.animations=不支持动画
angular.refactor.extractComponent.cli-error=无法使用 Angular CLI 创建组件
angular.refactor.extractComponent.dialog=提取组件
angular.refactor.extractComponent.dialog.name=名称\:
angular.refactor.extractComponent.task=正在提取组件
angular.refactor.extractComponent.unexpected-cli-output=Angular CLI 意外输出
angular.refactor.extractComponent.unsupported-i18n=不支持 I18n 语法
angular.refactor.extractComponent.unsupported-multiple-carets=请使用单文本光标
angular.refactor.extractComponent.unsupported-ng-content=不支持元素 ng-content
angular.refactor.extractComponent.unsupported-selection=请选择整个元素
angular.refactor.selector.invalid.html.attribute.name={0} 不是有效的 HTML 特性名称。
angular.refactor.selector.invalid.html.element.name={0} 不是有效的 HTML 元素名称。
angular.search-scope.template=模板
angular.service.name=Angular 语言服务器
angular.suppress.for-expression=对表达式禁止
angular.svg.template=Angular SVG 模板
angular.svg.template.17=Angular SVG 模板(17+)
angular.svg.template.181=Angular SVG 模板(18.1+)
angular.svg.template.20=Angular SVG 模板(20+)
description.angularCliAdd.description=添加新的依赖项并执行关联的 'ng-add' 原理图
description.angularCliGenerate.description=从 Angular 原理图生成新代码
filetype.angular17html.description=Angular HTML 模板(17+)
filetype.angular17svg.description=Angular SVG 模板(17+)
filetype.angular181html.description=Angular HTML 模板(18.1+)
filetype.angular181svg.description=Angular SVG 模板(18.1+)
filetype.angular20html.description=Angular HTML 模板(20+)
filetype.angular20svg.description=Angular SVG 模板(20+)
filetype.angular2html.description=Angular HTML 模板
filetype.angular2svg.description=Angular SVG 模板
livetemplate.description.angular2.a-class=Angular [class] 绑定
livetemplate.description.angular2.a-component=Angular 组件
livetemplate.description.angular2.a-component-inline=带内联模板的 Angular 组件
livetemplate.description.angular2.a-component-root=Angular 应用根组件
livetemplate.description.angular2.a-ctor-skip-self=Angular 模块 SkipSelf 构造函数
livetemplate.description.angular2.a-directive=Angular 指令
livetemplate.description.angular2.a-formControlName=Angular formControlName
livetemplate.description.angular2.a-formGroup=Angular formGroup
livetemplate.description.angular2.a-formGroupName=Angular formGroupName
livetemplate.description.angular2.a-guard-can-activate=Angular CanActivate guard
livetemplate.description.angular2.a-guard-can-activate-child=Angular CanActivateChild guard
livetemplate.description.angular2.a-guard-can-deactivate=Angular CanDeactivate guard
livetemplate.description.angular2.a-guard-can-load=Angular CanLoad guard
livetemplate.description.angular2.a-http-interceptor=用于 HttpClient 的空 Angular HttpInterceptor
livetemplate.description.angular2.a-http-interceptor-headers=用于标头 HttpClient 的 Angular HttpInterceptor
livetemplate.description.angular2.a-http-interceptor-logging=用于登录 HttpClient 的 Angular HttpInterceptor
livetemplate.description.angular2.a-httpclient-get=Angular HttpClient.get
livetemplate.description.angular2.a-injectable-providedin=Angular 可注入 ProvidedIn
livetemplate.description.angular2.a-module=Angular 模块
livetemplate.description.angular2.a-module-root=Angular 根模块
livetemplate.description.angular2.a-module-with-routing=将路由合并到一个文件中的 Angular 模块
livetemplate.description.angular2.a-ngClass=Angular ngClass
livetemplate.description.angular2.a-ngFor=Angular *ngFor
livetemplate.description.angular2.a-ngFor-trackBy=带 trackBy 的 Angular *ngFor
livetemplate.description.angular2.a-ngForAsync=Angular *ngForAsync
livetemplate.description.angular2.a-ngIf=Angular *ngIf
livetemplate.description.angular2.a-ngIfElse=Angular *ngIfElse
livetemplate.description.angular2.a-ngModel=Angular ngModel
livetemplate.description.angular2.a-ngStyle=Angular ngStyle
livetemplate.description.angular2.a-ngSwitch=Angular ngSwitch
livetemplate.description.angular2.a-ngrx-data-entity-collection-data-service=NgRx Data Entity Collection Data Service
livetemplate.description.angular2.a-ngrx-data-entity-metadata=NgRx Data Entity Metadata
livetemplate.description.angular2.a-ngrx-data-store-module=NgRx Data Store Module
livetemplate.description.angular2.a-output-event=Angular @Output 事件和发射器
livetemplate.description.angular2.a-pipe=Angular 管道
livetemplate.description.angular2.a-prej=Angular 预调试 | json
livetemplate.description.angular2.a-preja=Angular 预调试 | 异步 | json
livetemplate.description.angular2.a-preload-strategy=Angular 自定义预加载策略
livetemplate.description.angular2.a-route-params-subscribe=Angular - 订阅路由形参
livetemplate.description.angular2.a-route-path-404=Angular 404 路由路径
livetemplate.description.angular2.a-route-path-default=Angular 默认路由路径
livetemplate.description.angular2.a-route-path-eager=Angular eager 路由路径
livetemplate.description.angular2.a-route-path-lazy=Angular lazy 路由路径
livetemplate.description.angular2.a-route-path-with-children=带子级的 Angular 路由路径
livetemplate.description.angular2.a-router-events=Angular 路由器事件
livetemplate.description.angular2.a-routerLink=Angular routerLink
livetemplate.description.angular2.a-routerLink-param=带路由形参的 Angular routerLink
livetemplate.description.angular2.a-rxjs-import=RxJs 导入
livetemplate.description.angular2.a-rxjs-operator-import=RxJs 导入
livetemplate.description.angular2.a-select=带 ngModel 的 <select> 控制
livetemplate.description.angular2.a-service=Angular 服务
livetemplate.description.angular2.a-service-httpclient=带 HttpClient 的 Angular 服务
livetemplate.description.angular2.a-style=Angular [style] 绑定
livetemplate.description.angular2.a-subscribe=Angular 可观测订阅
