Amper.annotator.unresolved.path.message=未解析的路径
Amper.group.name=Amper
Amper.intentions.convert.catalog.dependency=转换为已解析的依赖项
action.Amper.AddFileAsAmperProject.text=添加为 Amper 项目
action.Amper.RemoveFileAsAmperProject.text=作为 Amper 项目移除
action.Amper.SyncProject.text=同步 Amper 项目
action.NewAmperFile.text=Amper 模块文件
advanced.setting.amper.download.sources=下载源代码
advanced.setting.amper.download.sources.description=在项目导入期间下载项目依赖项的源代码。选中此框后，需要进行项目同步才能下载源代码。
advanced.settings.amper=构建工具。Amper
amper=Amper
amper.build.failed=Amper 构建失败
amper.execution.name.build.project=构建 {0}
amper.exited.with.code=`{0}` 退出，错误代码为 {1}
amper.file.type=Amper
amper.navigation.go.to.super.find.usages.title=重写值
amper.new.module=新建 Amper 模块
amper.new.module.android=Android 应用
amper.new.module.custom=自定义模块
amper.new.module.desktop=Compose 桌面应用
amper.new.module.ios=iOS App
amper.new.module.jvm.application=JVM 应用程序
amper.new.module.library=库
amper.new.project.progress.downloading.wrappers=正在下载最新的 Amper 包装器脚本…
amper.new.project.template.select.label=项目模板\:
amper.new.project.template.select.no.template.selected=未选择模板
amper.template.group.name=Amper
amper.test.runner.no.tests=未收到测试事件
amper.wrapper.not.found=找不到 Amper 包装器
build.progress=正在构建…
create.directories.completion.description=Amper 源目录
element.description.version.catalog.alias=目录别名
element.description.version.catalog.version.ref=目录版本引用
formatter.align.properties.caption=对齐
formatter.align.properties.none=不对齐
formatter.align.properties.on.eq=等号上
formatter.align.properties.on.value=值上
formatter.objects.label=对象
formatter.space_after_eq.label='\=' 后
formatter.space_before_eq.label='\=' 前
formatter.space_within_braces.label=大括号
generate.keystore.background.progress.title=正在生成密钥库
generate.keystore.inspection.title=密钥库文件不存在\: {0}
generate.keystore.notifications.failure.button.title=打开日志
generate.keystore.notifications.failure.title=密钥库生成失败
generate.keystore.notifications.group.title=Amper
generate.keystore.notifications.success.description=已成功在 {0} 生成密钥库
generate.keystore.notifications.success.title=密钥库已成功生成
generate.keystore.quickfix.title.generate.properties=生成{0}
generate.keystore.quickfix.title.run.amper=运行 Amper 以生成密钥库文件
gutter.overridden.marker.name=被重写
gutter.override.marker.name=重写
inspections.android.version.at.least.min.sdk.quickfix=将 Android {0} 替换为版本 {1}
inspections.can.convert.to.catalog.version.conflict=可转换为目录版本(改用版本 {0})
inspections.can.convert.to.catalog.version.no.catalog.version=可转换为目录版本(无版本号)
inspections.can.convert.to.catalog.version.no.conflict=可被转换为目录版本
inspections.can.convert.to.catalog.version.no.dependency.version=可转换为目录版本(改用版本 {0})
inspections.can.convert.to.catalog.version.quickfix.conflict.change=转换为现有目录版本(版本 {0})
inspections.can.convert.to.catalog.version.quickfix.conflict.create=创建一个具有不同版本的新目录条目
inspections.can.convert.to.catalog.version.quickfix.no.conflict=转换为目录版本
inspections.can.extract.to.catalog.version=可以提取到版本目录中
inspections.can.extract.to.catalog.version.quickfix=在目录中创建新条目
inspections.compose.no.dependencies=Compose 已启用，但未添加任何 Compose 依赖项
inspections.dependency.build.problem.version.defined.at=版本 {0} 定义于
inspections.diagnostic.outdated.description=上次同步时已报告此问题。此后已进行了一些更改，或许已修正此问题。
inspections.diagnostic.outdated.prefix=[过时]
inspections.duplicate.dependencies.outside.catalog=此依赖项直接在某些模块中引用。是否将其替换为目录引用?
inspections.duplicate.dependencies.outside.catalog.fix=将所有显式依赖项替换为目录条目
inspections.duplicate.dependencies.outside.catalog.fix.and.update.version=将所有显式依赖项替换为版本 {0} 的目录条目
inspections.duplicate.dependencies.outside.catalog.fix.only.matching=将与版本 {0} 匹配的显式依赖项替换为目录条目
inspections.empty.module=没有源的空模块
inspections.empty.module.generate=生成示例模块结构
inspections.empty.module.generate.sample=生成示例{0}
inspections.keystore.file.does.not.exist=密钥库文件不存在
inspections.module.dependency.unresolved.gradle.quickfix=将依赖关系声明转换为 Amper 格式
inspections.module.dependency.with.overridden.version.dependency.location=，
inspections.module.dependency.with.overridden.version.quickfix=将依赖项版本从 {0} 更新为 {1}
inspections.module.dependency.with.overridden.version.tooltip.header=导致重写的依赖项\:
inspections.module.not.in.project=Amper 模块未在项目文件中注册
inspections.module.not.in.project.add.fix=向项目添加 Amper 模块
inspections.module.not.in.project.ignore.fix=不建议将此模块添加到项目中
inspections.no.build.backend.configured=Amper 未配置
inspections.no.build.system.configured.message=Amper 项目未配置
inspections.no.build.system.configured.message.with.parent.project=Amper 项目未配置，但其中一个父目录中有一个项目 "{0}"
inspections.transitive.dependency.problem=可传递依赖项问题\: {0}
inspections.transitive.dependency.problem.header=依赖项 {0} 依赖于 {1}，而后者存在以下问题\:
intention.collapse.shorthand.form=收起为简短形式
intention.expand.shorthand.form=展开为完整形式
intentions.add.compose.dependencies.name=添加 Compose 依赖项
intentions.choose.template=选择模板
intentions.create.catalog.and.extract=创建版本目录并将此依赖项移至其中
intentions.create.source.and.test.folder=为 {0} 创建源文件夹和测试文件夹
intentions.create.source.folder=为 {0} 创建源文件夹
intentions.create.source.folder.name=创建源文件夹和测试文件夹
intentions.create.source.folder.with.subplatforms.name=创建共享的和平台特定的源文件夹和测试文件夹
intentions.create.test.folder=为 {0} 创建测试文件夹
intentions.enable.compose.name=启用 Compose 支持
intentions.inline.template=内联模板
intentions.inline.template.all.usages.keep=内联所有用法({0})并保留模板
intentions.inline.template.all.usages.remove=内联所有用法({0})并移除模板
intentions.inline.template.cannot.resolve=无法解析模板
intentions.inline.template.current.usage=内联此用法并保留模板
intentions.inline.template.element=内联到模块中
intentions.inline.template.element.choose.block=选择块到内联
intentions.inline.template.element.header=内联到模块中
intentions.inline.template.element.no.apply=模板未应用于任何模块
intentions.inline.template.header=内联模板
intentions.move.can.change.list.order.hint={0} (可以更改列表顺序)
intentions.move.element.more.keys=以及另外 {0} 个键
intentions.move.element.whole.file=整个文件(将删除模板)
intentions.move.nothing.to.extract=无可提取内容
intentions.move.nothing.to.inline=没有要内联的内容
intentions.move.to.template=移至模板
intentions.move.to.template.choose.block=选择要提取的块
intentions.move.to.template.existing.template=移至现有模板
intentions.move.to.template.header=移至模板
intentions.move.to.template.new.template=创建新的 模板
intentions.remove.redundant.setting=移除冗余设置
ios.run.configuration.execution.name=构建
ios.run.configuration.name=iOS 应用
java.project.model.modifier.add.libraries=添加库依赖项
java.project.model.modifier.add.library=添加库依赖项
java.project.model.modifier.add.module=添加模块依赖项
jvm.app.module.yaml.template.group.name=module.yaml
maven.local.repository.name=Maven 本地仓库
notification.dumb.mode.navigation.to.overriding.methods=在静默模式下无法导航到重写值
quickfix.add.dependency.import.failed.hint=已添加依赖项 {0}，但未找到合适的 import。
quickfix.add.dependency.importAction=正在为 ''{0}'' 添加导入
quickfix.add.dependency.on.library=添加对库 ''{0}'' 的依赖
quickfix.add.dependency.on.library.choose=添加对库的依赖…
quickfix.add.dependency.on.library.choose.header=选择要依赖的库
quickfix.add.dependency.on.mixed.choose=添加依赖项…
quickfix.add.dependency.on.mixed.choose.header=选择要添加依赖关系的 Amper 模块或库
quickfix.add.dependency.on.module=添加对模块 ''{0}'' 的依赖
quickfix.add.dependency.on.module.choose=添加对模块的依赖…
quickfix.add.dependency.on.module.choose.header=选择要添加依赖关系的 Amper 模块
quickfix.add.dependency.sync.failed.hint=依赖项 {0} 已添加，但项目同步失败，并出现错误。
quickfix.add.dependency.writeCommandAction=添加对 ''{0}'' 的依赖关系
quickfix.add.platforms.to.module=将平台 {0} 添加到 {1}
quickfix.configure.amper.command.create.project.file=创建 Amper 项目文件
quickfix.configure.amper.directory.chooser.title=选择 Amper 项目目录
quickfix.configure.amper.family.name=配置 Amper
quickfix.configure.amper.name.link=添加 Amper 项目
quickfix.configure.amper.name.multiple=在以下位置配置 Amper 项目…
quickfix.configure.amper.name.project.file=创建 Amper 项目文件
quickfix.configure.amper.name.single=配置 Amper 项目
quickfix.configure.amper.name.wrappers=下载 Amper 包装器
quickfix.configure.amper.preview.header=通过以下方式配置 Amper 项目\:
quickfix.configure.amper.preview.item.link=正在 IDE 中添加 Amper 项目
quickfix.configure.amper.preview.item.project.file=正在创建 Amper 项目文件
quickfix.configure.amper.preview.item.wrappers=正在下载 Amper 包装器
quickfix.configure.amper.progress.step.link=正在链接 Amper 项目
quickfix.configure.amper.progress.step.project.file=正在创建 Amper 项目文件
quickfix.configure.amper.progress.step.wrappers=正在下载 Amper 包装器
quickfix.configure.amper.progress.title=正在配置 Amper
quickfix.create.module.family.name=创建模块
quickfix.create.module.invalid.path=无效路径\: {0}
quickfix.fix.module.path=修复模块路径
quickfix.fix.template.reference.create=在 {1} 创建新模板 {0}
quickfix.fix.template.reference.family.name=修复模板引用
quickfix.fix.template.reference.remove=移除未解析的模板
quickfix.maven.classifier.add.missing.space=添加缺失的空间
quickfix.maven.remove.line.breaks=移除换行符
quickfix.maven.remove.slash=移除斜线
quickfix.maven.remove.space=移除空格
quickfix.maven.remove.trailing.dots=移除尾随点
quickfix.move.dependency.to.another.block=将依赖项移动到 ''{0}''
quickfix.move.dependency.to.another.block.choice=将依赖项移动到另一个依赖项块
quickfix.move.dependency.to.another.block.choice.title=移动依赖项
quickfix.move.dependency.to.another.block.new=创建别名 ''{0}'' 并将依赖项移动到该处
quickfix.move.dependency.to.another.block.new.short=移至''{0}'' (创建新别名)
quickfix.move.dependency.to.another.block.short=移至 ''{0}''
quickfix.open.amper.project.family.name=打开外部 Amper 项目
quickfix.open.amper.project.name=打开 Amper 项目 "{0}"
quickfix.open.amper.project.preview=在当前窗口中打开位于 {0} 的 Amper 项目
quickfix.remove.empty.glob=移除不匹配任何模块的 glob
quickfix.remove.explicit.root.module.reference=移除显式根模块引用
quickfix.remove.maven.classifier=移除分类器
quickfix.remove.module.reference=移除未解析的模块
quickfix.run.sync=同步 Amper 更改
quickfix.utils.cant.create.file.outside.root=无法在根之外创建文件
rename.template.with.suffix=重命名模板文件
sample.project.android=Android 应用
sample.project.cli=Java CLI 应用程序
sample.project.desktop=Compose 桌面应用程序
sample.project.ios=iOS 应用程序
settings.display.name=Amper
sync.cache.initialization.failure=无法初始化 Amper 缓存
sync.cache.initialization.failure.restart.ide.prompt=\ 此后，请重新启动 IDE 并重试。
sync.model.progress.title=正在读取模型…
sync.progress.title=Amper 导入
sync.project.modal.progress.title=正在打开 Amper 项目…
sync.scheduling.modal.title=正在安排 Amper 同步…
sync.stage.external.dependencies.name=正在下载依赖项…
sync.stage.local.dependencies.name=正在解析依赖项…
sync.stage.post.configuration.name=正在执行后配置…
sync.stage.preview.name=预览
sync.stage.project.structure.name=正在配置项目…
sync.stage.read.model.name=正在配置项目…
