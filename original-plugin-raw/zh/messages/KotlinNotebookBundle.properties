action.CopyLetsPlot.description=将此图复制到剪贴板
action.CopyLetsPlot.text=复制图
action.CreateNewKotlinNotebook.description=创建新的 Kotlin Notebook
action.CreateNewKotlinNotebook.text=Kotlin Notebook
action.CreateNewScratchKotlinNotebook.error.dialog.text=无法创建 Kotlin Notebook 文件。错误\: {0}
action.ExportLetsPlot.description=将此图保存到文件
action.ExportLetsPlot.description.multiple=将这些图保存到文件
action.ExportLetsPlot.text=将图另存为…
action.ExportLetsPlot.text.multiple=将图另存为…
action.RestartKotlinNotebookHighlighting.text=在 Kotlin Notebook 中重新启动高亮显示
action.SelectKotlinNotebookModuleDependencies.description=这可能导致在项目文件更改后，在运行单元之前调用构建
action.SelectKotlinNotebookModuleDependencies.text=选择要在 Notebook 中使用的模块
action.SelectKotlinNotebookProjectLibraries.text=选择要添加到 Notebook 类路径的项目库
action.ShowKotlinNotebookPreferencesAction.description=编辑 Kotlin Notebook 插件设置
action.ShowKotlinNotebookPreferencesAction.text=Kotlin Notebook 插件设置…
action.ToggleShowExecutionCount.text=显示执行计数
checkbox.resolve.multiplatform=解析多平台依赖性
checkbox.resolve.sources=解析源
checkbox.should.add.libraries=将项目库添加到 notebook 类路径
checkbox.should.build.project=允许在 Notebook 中使用项目符号
checkbox.should.build.project.comment=这可能导致在项目文件更改后，在运行单元之前调用构建
checkbox.should.show.execution.count=显示执行计数
checkbox.should.show.foldable.regions=显示可折叠区域
checkbox.should.typehint.only.active.cell=仅为有效单元应用提供程序
group.KotlinNotebookSettingsActions.text=Kotlin Notebook 设置
inlay.hint.description.prefix=在 Kotlin Notebook 中显示 {0} 的嵌入提示
jkt.meta.description.classpath=显示当前类路径
jkt.meta.description.dumpClassesForSpark=将编译后的 REPL 类存储在特殊目录中，以便与 Spark 集成
jkt.meta.description.help=显示帮助
jkt.meta.description.logHandler=管理日志记录处理程序
jkt.meta.description.logLevel=设置日志记录级别
jkt.meta.description.output=管理输出捕获设置
jkt.meta.description.trackClasspath=记录类路径更改。适用于调试工件解析失败
jkt.meta.description.trackExecution=记录正在执行的代码。适用于调试库支持
jkt.meta.description.use=为支持的库注入代码\: 工件解析、默认 import、初始化代码、类型呈现器
jkt.meta.description.useLatestDescriptors=使用最新可用版本的库描述符。默认情况下，会使用捆绑的描述符
jkt.meta.description.vars=获取可视变量值
jupyterkotlin.file.type.description=提供对 Kotlin Notebook 的支持。
kotlin.jupyter.action.create.notebook.dialog.kind=新建 Kotlin Notebook
kotlin.jupyter.action.create.notebook.dialog.title=新建 Kotlin Notebook
kotlin.jupyter.action.create.notebook.name=创建 Kotlin Notebook {0}
kotlin.jupyter.debug.node.default.message=变量不可用
kotlin.jupyter.debug.node.empty.no.connection.message=变量不可用，未建立连接
kotlin.jupyter.debug.node.empty.not.attached.message=变量不可用，进程未附加
kotlin.jupyter.debug.node.no.context.message=如果没有 suspend 上下文，计算将不可用
kotlin.jupyter.debug.node.rebuild.message=连接建立后变量将被重新构建
kotlin.jupyter.debug.support.text=在 Kotlin Notebook 中调试正处于开发阶段。部分功能未完全支持
kotlin.jupyter.dependencies.build.error.outdated=由于构建失败，将使用过时的依赖项。不能保证执行结果。
kotlin.jupyter.dependencies.build.error.severe=由于构建错误，无法提供或替换项目级依赖项。请考虑修正构建。
kotlin.jupyter.dependencies.build.error.throwable=在会话初始化期间无法提供项目级依赖项。单元执行中止。
kotlin.jupyter.dialog.outputs.plot.export.directory=输出文件目录\:
kotlin.jupyter.dialog.outputs.plot.export.directory.comment=始终默认为 Notebook 目录。
kotlin.jupyter.dialog.outputs.plot.export.directory.multiple=输出文件目录\:
kotlin.jupyter.dialog.outputs.plot.export.file.name=文件名\:
kotlin.jupyter.dialog.outputs.plot.export.file.name.comment=使用可选的 {0} 作为图编号，这是多图所必需的。
kotlin.jupyter.dialog.outputs.plot.export.file.name.multiple=文件名模板\:
kotlin.jupyter.dialog.outputs.plot.export.format=格式\:
kotlin.jupyter.dialog.outputs.plot.export.ok.text=保存
kotlin.jupyter.dialog.outputs.plot.export.overwrite.existing=覆盖现有文件\:
kotlin.jupyter.dialog.outputs.plot.export.overwrite.existing.multiple=覆盖现有文件\:
kotlin.jupyter.dialog.outputs.plot.export.restore.defaults=恢复默认设置
kotlin.jupyter.dialog.outputs.plot.export.scaling.factor=缩放比例\:
kotlin.jupyter.dialog.outputs.plot.export.scaling.factor.comment=控制 {0}x 和 {1}x 之间的图放大。
kotlin.jupyter.dialog.outputs.plot.export.target.dpi=目标 DPI\:
kotlin.jupyter.dialog.outputs.plot.export.target.dpi.comment=在 {0} 和 {1} DPI 之间调整分辨率。
kotlin.jupyter.dialog.outputs.plot.export.theme.darcula=Darcula
kotlin.jupyter.dialog.outputs.plot.export.theme.highContrastDark=深色
kotlin.jupyter.dialog.outputs.plot.export.theme.highContrastLight=浅色
kotlin.jupyter.dialog.outputs.plot.export.theme.solarizedDark=Solarized 深色
kotlin.jupyter.dialog.outputs.plot.export.theme.solarizedLight=Solarized 浅色
kotlin.jupyter.dialog.outputs.plot.export.theme.title=配色方案\:
kotlin.jupyter.dialog.outputs.plot.export.title=保存图
kotlin.jupyter.dialog.outputs.plot.export.title.multiple=保存图
kotlin.jupyter.dialog.select.all.libraries.checkbox=使用所有项目库
kotlin.jupyter.dialog.select.all.modules.checkbox=使用所有项目模块
kotlin.jupyter.dialog.select.libraries.title=为 {0} 选择库
kotlin.jupyter.dialog.select.modules.title=为 {0} 选择模块依赖项
kotlin.jupyter.editor.dnd.csv.dataframe.command=将 CSV 导入为 Kotlin DataFrame
kotlin.jupyter.editor.dnd.json.dataframe.command=正在将 JSON 导入为 Kotlin DataFrame
kotlin.jupyter.editor.dnd.xls.dataframe.command=正在将 XLS 导入为 Kotlin DataFrame
kotlin.jupyter.line.breakpoint=Kotlin Notebook 行断点
kotlin.jupyter.missing.jdk.notification.not.found.text=找不到选择用于运行 Kotlin Notebook 的 JDK "{0}"
kotlin.jupyter.missing.jdk.notification.not.selected.text=未选择用于运行 Kotlin Notebook 的 JDK
kotlin.jupyter.missing.jdk.select.jdk.action=选择JDK
kotlin.jupyter.output.error.notification.group=Kotlin Notebook 插件输出错误通知
kotlin.jupyter.refactor.changed.definition=重构声明不会对现有的 {0} 用法产生影响。
kotlin.jupyter.refactor.changed.definition.rerun=考虑执行单元以使更改在整个 Notebook 中生效。
kotlin.jupyter.refactor.compiled.script=重构已编译的脚本成员不会对字节码产生任何影响。请考虑适当的重新声明。
kotlin.jupyter.session.classloader.error=单元类由较新版本的运行时编译。
kotlin.jupyter.session.initial.setup=未提供 Notebook 的内部依赖项。
kotlin.jupyter.session.jdk.setting=考虑更改会话的 JDK 设置。
kotlin.jupyter.session.restart=正在重新启动内核会话。先前的状态被中止。
kotlin.jupyter.settings.JDK.action.preview=指定 JDK 设置
kotlin.jupyter.settings.JDK.comment=JDK 版本至少应为 {0}
kotlin.jupyter.settings.JDK.comment.empty.runtime={0} 运行时版本
kotlin.jupyter.settings.JDK.path=JDK 路径
kotlin.jupyter.settings.appearance=外观
kotlin.jupyter.settings.build=JVM 和构建
kotlin.jupyter.settings.dependencies.deselect.all=取消全选
kotlin.jupyter.settings.dependencies.select.all=全选
kotlin.jupyter.settings.environment.variables=环境变量
kotlin.jupyter.settings.jvm.debug=调试选项
kotlin.jupyter.settings.jvm.debug.port.check.box=在会话启动时打开调试端口
kotlin.jupyter.settings.jvm.debug.port.check.box.description=如果未选中，则内核端不会打开调试端口
kotlin.jupyter.settings.jvm.debug.variables=显示 Notebook 会话变量
kotlin.jupyter.settings.jvm.debug.variables.comment=不建立连接无法配置
kotlin.jupyter.settings.jvm.debug.variables.description=如果选中，变量状态将显示在单独的窗口中
kotlin.jupyter.settings.jvm.extra.args=额外实参
kotlin.jupyter.settings.jvm.max.heap=最大堆大小
kotlin.jupyter.settings.jvm.max.heap.units=MiB
kotlin.jupyter.settings.jvm.target.for.snippets=代码段的 JVM 目标
kotlin.jupyter.settings.jvm.target.for.snippets.comment=代码段的目标最多可为 {0} (IDE JDK 版本)
kotlin.jupyter.settings.kernel.explore.button.name=浏览文件夹
kotlin.jupyter.settings.kernel.mode=Kotlin Notebook 会话运行模式
kotlin.jupyter.settings.kernel.mode.ide.process=在 IDE 进程中运行
kotlin.jupyter.settings.kernel.mode.separate.process=在单独的进程中运行
kotlin.jupyter.settings.kernel.version=内核版本
kotlin.jupyter.settings.new.notebook.description=配置为新创建的 Kotlin Notebook 使用的默认设置
kotlin.jupyter.settings.new.notebook.title=新 Notebook 的设置
kotlin.jupyter.settings.outputs=输出
kotlin.jupyter.settings.outputs.swing.dataframe=原生呈现 DataFrame 表
kotlin.jupyter.settings.outputs.swing.letsPlot=原生呈现 Kandy 图
kotlin.jupyter.settings.plot.export.title=Kandy 图导出
kotlin.jupyter.settings.refactoring.progress=正在处理 Kotlin Notebook…
kotlin.jupyter.settings.selected.jdk.default=选择 JDK 默认值
kotlin.jupyter.settings.session=内核会话
kotlin.jupyter.settings.title=Kotlin Notebook
kotlin.jupyter.settings.typeHints=类型提示提供程序
kotlin.jupyter.table.output.cannot.parse.dataframe.error=无法显示数据帧，因为它以序列化格式表示时过大。请考虑在注册表中增大 'jupyter.notebook.json.maxStringLength' 的值，或者切换为 HTML 表示。要使用 HTML 呈现，请在 Kotlin Notebook 插件设置中禁用 ‘Render DataFrame tables natively’ 选项。
kotlin.jupyter.table.output.cannot.parse.dataframe.error.unknown=无法显示数据帧。请考虑提交异常报告。
kotlin.jupyter.table.output.cannot.render.dataframe.error=无法呈现数据帧
kotlin.jupyter.table.output.notification.content.could.not.display.table.with.d.columns=无法显示包含 {0} 列的表。要使用 HTML 呈现，请在 Kotlin Notebook 插件设置中禁用“原生呈现 DataFrame 表”选项。
kotlin.jupyter.table.output.sort_column_not_comparable.error=无法按列 {0} 排序
kotlin.jupyter.table.output.too.many.columns.error=无法显示表数据。列过多.
kotlin.jupyter.template.context.type.generic=Kotlin Notebook
kotlin.jupyter.template.context.type.meta=魔术和命令
kotlin.jupyter.toolbar.actions.stop=停止内核
kotlin.jupyter.toolbar.session.name=Kotlin 内核会话
kotlin.jupyter.toolbar.tabs.log={0} 的日志
kotlin.jupyter.toolbar.title=Kotlin 内核\: {0}
kotlin.notebook.outputs.kandy.export.all.failed.notification.message=Kandy 图保存失败
kotlin.notebook.outputs.kandy.export.all.succeeded.notification.message=Kandy 图已成功保存
kotlin.notebook.outputs.kandy.export.failed.already.exists.message=文件已存在\: {0}
kotlin.notebook.outputs.kandy.export.failed.notification.message=Kandy 图保存失败
kotlin.notebook.outputs.kandy.export.notification.action.open=打开已保存的图
kotlin.notebook.outputs.kandy.export.notification.action.open.multiple=打开所包含的文件夹
kotlin.notebook.outputs.kandy.export.notification.group=Kandy 图已保存
kotlin.notebook.outputs.kandy.export.notification.message=Kandy 图 {0} 已成功保存
kotlin.notebook.outputs.kandy.export.some.failed.notification.message=部分 Kandy 图未保存
kotlin.notebook.session.notification.group=Kotlin Notebook 会话通知
meta.file.type.description=提供对 Jupyter Kotlin 命令、魔术等的支持。
plugin.updater.notification.group=有可用的 Kotlin Notebook 插件更新
