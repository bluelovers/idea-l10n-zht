action.name.show.history.for.tag=标记
action.name.show.history.for.text=文本
add.new.lines=添加新行
any.dialog.status=状态
auto.import.show.popup=显示自动导入工具提示
border.title.xml=XML
browse.button.tooltip=浏览本地文件
cannot.show.preview.for.given.abbreviation=无法显示给定缩写的预览
cant.delete.file=无法删除文件 {0}
cant.rename.file=无法将 {0} 重命名为 {1}
change.template.data.language=更改模板数据语言
checkbox.align.attributes=对齐特性
checkbox.align.text=对齐文本
checkbox.collapse.data.uri=数据 URI
checkbox.collapse.entities=XML 实体
checkbox.collapse.html.style.attribute=HTML 'style' 特性
checkbox.collapse.xml.tags=XML标签
checkbox.enable.completion.html.auto.popup.code.completion.on.typing.in.text=在 HTML 文本中输入时启用标记名称代码补全自动弹出窗口
checkbox.keep.line.breaks=保留换行符
checkbox.keep.line.breaks.in.text=保留文本中的换行符
checkbox.keep.white.spaces=保持空隔
checkbox.spaces.around.equals.in.attribute=在 '\=' 周围
checkbox.spaces.around.tag.name=在标签名后
checkbox.spaces.in.empty.tag=在空的标签
checkbox.uniform.indent=在 <style> 和 <script> 标记内使用 HTML 缩进
checkbox.wrap.text=文字换行
choose.schema.file=选择架构文件
choose.tag.name=选择标记名称
comments=注释
configurable.DefaultSchemasConfigurable.display.name=默认 XML 架构
configurable.XMLCatalogConfigurable.display.name=XML 目录
configurable.XmlEmmetConfigurable.display.name=HTML
configurable.name.html.css=HTML/CSS
convert.cdata.to.text=将 CDATA 转换为文本
convert.text.to.cdata=将文本转换为 CDATA
could.not.save.generated.xml.document.0=无法保存生成的 XML 文档\: {0}
default=默认
dialog.edit.template.checkbox.html=HTML (&H)
dialog.edit.template.checkbox.html.text=HTML文本
dialog.edit.template.checkbox.xml=XML (&X)
dialog.edit.template.checkbox.xsl.text=XSL文本
disable.emmet=禁用 Emmet
don.t.break.if.inline.content=不要中断内联内容\:
edit.emmet.settings=编辑 Emmet 设置
editbox.keep.blank.lines=保留空行\:
emmet.action.surround.error.hint=无法在当前上下文中调用“使用 Emmet 包围”
emmet.add.edit.point.at.the.end.of.template=在模板的结尾处添加编辑点(&P)
emmet.bem.class.name.element.separator.label=类名中的元素分隔符\:
emmet.bem.class.name.modifier.separator.label=类名中的修饰符分隔符\:
emmet.bem.short.element.prefix.label=短元素前缀\:
emmet.configuration.title=Emmet
emmet.context.help.tooltip=使用 Emmet 缩写更新 HTML 标记\:<br/>\n.class[attribute] 用于覆盖值；<br/>\n.+class[attribute] 用于附加值；<br/>\n.-class[attribute] 用于移除值。<br/>\n<p/>\n例如，<code>.+c2[title\=Hello]</code> 缩写将<br/>\n<code>\\&lt;div class\="c1"\\&gt;</code> 更新为<br/>\n<code>\\&lt;div class\="c1 c2" title\="Hello"\\&gt;</code>。
emmet.enable.label=启用 XML/HTML Emmet (&E)
emmet.enable.preview=启用缩写预览(&A)
emmet.error=Emmet 错误
emmet.expand.abbreviation.with=展开缩写(&A)
emmet.filter.BEM=BEM
emmet.filter.comment.tags=注释标记
emmet.filter.escape=Esc
emmet.filter.single.line=单行
emmet.filter.trim.line.markers=清除行标记
emmet.filter.xsl.tuning=XSL 调整
emmet.filters.enabled.by.default=筛选器默认启用
emmet.href.autodetect=使用 <a> 标记包装文本时启用自动 URL 识别(&U)
emmet.preview=Emmet 预览
emmet.title=Emmet
error=错误
file.doesnt.exist=文件 {0} 不存在
generate.instance.document.from.schema.dialog.title=从架构生成实例文档
generate.schema.from.instance.document.dialog.title=从实例文档生成架构
generate.xml.tag=生成 XML 标记
generated.quote.enforce.format=设置格式时强制
global.elements.local.types.option.name=全局元素/局部类型
hint.text.removed.namespace=已移除 {0} 个{1, choice, 0\#命名空间|1\#命名空间}
html.action.new.file.description=创建新 HTML 文件
html.action.new.file.dialog.title=新建 HTML 文件
html.action.new.file.item.html5.file=HTML 5 文件
html.action.new.file.name=HTML 文件
html.inspections.check.empty.tag=空标记
html.inspections.check.valid.script.tag='script' 标记的内容格式错误
html.inspections.extra.closing.tag=冗余结束标记
html.inspections.group.name=HTML
html.inspections.group.name.accessibility=可访问性
html.inspections.missing.closing.tag=缺少结束标记
html.inspections.unknown.anchor=链接中未解析的片段
html.inspections.unknown.attribute=未知特性
html.inspections.unknown.boolean.attribute=不正确的布尔特性
html.inspections.unknown.tag=未知标记
html.inspections.unknown.target=链接中未解析的文件
html.inspections.wrong.attribute.value=特性值错误
html.label.new.line.after.last.attribute=在最后一个特性后换行(&L)\:
html.label.new.line.before.first.attribute=在第一个特性前换行(&F)\:
html.quickdoc.additional.template=有关 <a href\="{0}">MDN 网站</a>的更多信息。
html.related.linked.files.group=链接的文件
ignore.ext.resource.preview=在 {1} 中将 {0} 注册为已忽略的资源
inline.elements=内联元素\:
inspection.javadoc.html.not.required.label.text=附加非必要 html 特性\:
instance.document.file.is.not.exist=实例文档文件不存在
instance.document.file.should.have.xml.extension=实例文档文件应具有 .xml 扩展名 (小写)
instance2schema.dialog.design.type=设计类型\:
instance2schema.dialog.detect.enumerations.limit=检测枚举限制\:
instance2schema.dialog.detect.simple.content.type=检测简单的内容类型\:
instance2schema.dialog.instance.document.path=实例文档路径\:
intention.color.chooser.dialog=选择颜色
intention.name.join.attributes=将特性放在同一行中
intention.name.split.attributes=将特性放在单独的行中
invalid.number.validation.problem=无效数字
label.do.not.indent.children.of=不缩进子级\:
label.insert.new.line.before=插入之前的新行\:
label.keep.white.spaces.inside=保留里面的空格\:
label.lines=行
label.or.if.tag.size.more.than=或者如果标签尺寸超过
label.remove.new.line.before=删除之前的新行\:
local.elements.global.complex.types.option.name=局部元素/全局复杂类型
local.elements.types.option.name=局部元素/类型
map.external.resource=映射外部资源
namespace.prefix=命名空间前缀\:
negative.number.validation.problem=负数
no.errors.found=未发现错误
options.html.attribute.descriptor.attribute.name=特性名称
options.html.attribute.descriptor.attribute.value=特性值
options.html.attribute.descriptor.code=HTML代码
options.html.attribute.descriptor.comment=注释
options.html.attribute.descriptor.entity.reference=实体引用
options.html.attribute.descriptor.tag=标记
options.html.attribute.descriptor.tag.name=标记名称
options.html.attribute.descriptor.tag.tree=标签树(level {0})
options.html.display.name=HTML
options.xml.attribute.descriptor.attribute.name=特性名称
options.xml.attribute.descriptor.attribute.value=特性值
options.xml.attribute.descriptor.comment=注释
options.xml.attribute.descriptor.descriptor.entity,reference=实体引用
options.xml.attribute.descriptor.matched.tag.name=匹配的标记
options.xml.attribute.descriptor.namespace.prefix=命名空间前缀
options.xml.attribute.descriptor.prologue=序言
options.xml.attribute.descriptor.tag=标记
options.xml.attribute.descriptor.tag.data=标记数据
options.xml.attribute.descriptor.tag.name=标记名称
options.xml.attribute.descriptor.tag.name.custom=自定义标记名称
options.xml.display.name=XML
preserve=保留
rearrange.tag.attributes=重新排列标记特性
remove.keep.with.tags=移除(保留标签)
rename.xml.tag=重命名 XML 标记
result.schema.file.name.is.empty.validation.problem=结果架构文件名为空
schema2.instance.no.valid.root.element.name.validation.error=根元素名称无效
schema2.instance.output.file.name.is.empty.validation.problem=输出文件名称无效
schema2instance.dialog.element.name=元素名称\:
schema2instance.dialog.enable.restriction.check=启用限制检查
schema2instance.dialog.enable.unique.check=启用唯一检查
schema2instance.dialog.instance.document.name=实例文档名称\:
schema2instance.dialog.schema.path=架构路径\:
select.xml.document.dialog.title=选择 Xml 文档
select.xsd.schema.dialog.title=选择 XSD 架构
settings.enable.html.xml.tag.tree.highlighting=启用 HTML/XML 标记树高亮显示
settings.levels.to.highlight=要高亮显示的级别\:
settings.opacity=透明度\:
smart.keys.add.quotes.for.attribute.value.on.typing.equal.and.attribute.completion=在输入 '\=' 和特性补全时为特性值添加引号
smart.keys.auto.close.tag.on.typing.less=输入 '</' 时自动关闭标记
smart.keys.insert.closing.tag.on.tag.completion=在标记完成时插入结束标记
smart.keys.insert.required.attributes.on.tag.completion=在标记补全时插入必需特性
smart.keys.insert.required.subtags.on.tag.completion=在标记完成时插入必需子标记
smart.keys.select.whole.css.identifiers.on.double.click=双击时选择整个 CSS 标识符
smart.keys.simultaneous.tags.editing=同时 '<tag></tag>' 编辑
smart.keys.start.attribute.on.tag.completion=标记补全时起始特性
tag.name.completion.display.name=标记名称补全
tag.name.completion.hint=按 {0} 查看其他命名空间中的标记
title.xml=XML
web.editor.configuration.title=HTML/CSS
webservice.status.tooltip=当前设置的状态、输入错误，等等
xml.action.unwrap.enclosing.tag.name.description=移除封闭标记\: {0}
xml.actions=XML 操作
xml.catalog.properties.file=XML 目录属性文件
xml.category=XML
xml.code.style.border.title.cdata=CDATA
xml.code.style.checkbox.keep.whitespace.inside=保留里面的空格
xml.code.style.label.whitespace.around=周围的空格\:
xml.editor.options.css.title=CSS
xml.editor.options.misc.title=XML/HTML
xml.external.resource.column.name.location=位置
xml.external.resource.column.name.uri=URI
xml.external.resource.dialog.title=外部资源
xml.external.resource.display.name=架构和 DTD
xml.external.resource.empty.text.no.external.resources=没有外部资源
xml.external.resource.empty.text.no.ignored.resources=没有忽略的资源
xml.external.resource.label.external.resources=外部架构和 DTD(&E)\:
xml.external.resource.label.ignored.resources=忽略的模式和 DTD(&I)\:
xml.external.resource.label.path=路径\:
xml.external.resource.label.uri=URI\:
xml.generate.schema.dialog.label.result.schema.file.name=结果架构文件名\:
xml.inspections.cannot.resolve.anchor=无法解析定位标记 \#{0}
xml.inspections.cannot.resolve.anchor.in.file=无法解析文件 {1} 中的定位标记 \#{0}
xml.inspections.check.dtd.references=未解析的 DTD 引用
xml.inspections.check.file.with.xerces=外部验证失败
xml.inspections.check.tag.empty.body=空元素内容
xml.inspections.default.attribute.value=包含默认值的冗余特性
xml.inspections.deprecated=弃用的符号
xml.inspections.duplicate.id=重复 'id' 特性
xml.inspections.global=XML 高亮显示
xml.inspections.group.name=XML
xml.inspections.invalid.id=未解析的 'id' 引用
xml.inspections.path.resolve=未解析的文件引用
xml.inspections.required.attributes.display.name=缺少必要的特性
xml.inspections.unbound.prefix=未绑定的命名空间前缀
xml.inspections.unresolved=未解析的引用
xml.inspections.unresolved.element.reference=未解析的 DTD 元素引用 {0}
xml.inspections.unresolved.entity.reference=未解析的实体引用 {0}
xml.inspections.unused.schema=未使用的架构声明
xml.inspections.wrong.root.element=错误的根元素
xml.intention.add.xsi.schema.location.for.external.resource=添加 'xsi\:schemaLocation' 特性
xml.intention.create.xml.declaration=创建 XML 元素声明
xml.intention.fetch.error.fetching.dependent.resource=无法提取依赖资源
xml.intention.fetch.error.fetching.resource=无法提取 {0}
xml.intention.fetch.error.fetching.title=提取时出错
xml.intention.fetch.error.invalid.url.message=检查指定的 URL\: \n{0}
xml.intention.fetch.error.invalid.url.no.xml.file.at.location=指定位置没有 XML\: \n{0}
xml.intention.fetch.error.invalid.url.title=无效的 URL
xml.intention.fetch.name=提取外部资源
xml.intention.fetch.progress.fetching=正在提取 {0}
xml.intention.fetch.progress.fetching.resource=正在提取资源
xml.intention.ignore.external.resource.text=忽略外部资源
xml.intention.insert.namespace.prefix.command=插入命名空间前缀
xml.intention.insert.namespace.prefix.name=插入命名空间前缀
xml.intention.manually.setup.external.resource=手动设置外部资源
xml.intention.reset.to.default.namespace.command=重置为默认命名空间
xml.intention.reset.to.default.namespace.name=重置为默认命名空间
xml.intention.split.tag.family=拆分当前标记
xml.intention.split.tag.text=拆分当前标记
xml.javadoc.complex.type.message=复杂类型
xml.javadoc.description.message=描述
xml.javadoc.enumeration.value.message=枚举值
xml.javadoc.tag.name.message=标记名称
xml.javadoc.version.message=版本
xml.lookup.choose.color=选择颜色…
xml.map.resource.dialog.border.title.project.schemas=项目架构(&S)
xml.map.resource.dialog.label.file=文件(&F)\:
xml.map.resource.dialog.label.uri=URI(&U)\:
xml.options.border.title.bem=BEM
xml.options.label.catalog.property.file=类别属性文件\:
xml.progress.changing.to.default.namespace=正在更改为默认命名空间
xml.quickfix.unescaped.xml.character.family=转义字符
xml.quickfix.unescaped.xml.character.text=转义 ''{0}''
xml.refactor.rename.current.tag=将 {0} 重命名为\:
xml.schemas.border.title.default.html.language.level=默认 HTML 语言级别
xml.schemas.border.title.xml.schema.version=XML 架构版本
xml.schemas.radio.button.html.4.http.www.w3.org.tr.html4.loose.dtd=HTML 4 ("http\://www.w3.org/TR/html4/loose.dtd")
xml.schemas.radio.button.html.5=HTML 5
xml.schemas.radio.button.other.doctype=其他文档类型\:
xml.schemas.radio.button.xml.schema.1.0=XML 架构 1.0
xml.schemas.radio.button.xml.schema.1.1=XML 架构 1.1
xml.tag=XML 标记
xml.tag.info.no.attributes=<无特性>
xml.text=XML 文本
xml.tree.config.files.type={0} 文件
xml.validate.no.errors.detected.status.message=未检测到错误
xml.validate.open.message.view.command.name=打开消息视图
xml.validate.tab.content.title=验证 {0}
xml.validate.validation.is.running.terminate.confirmation.text=终止验证?
xml.validate.validation.is.running.terminate.confirmation.title=正在运行验证
xml2xsd.generator.error=实例 2 架构生成器错误
xml2xsd.generator.error.message=不能从实例文档生成架构。请检查您的 xml 文档
xmlbeans.designtype.tooltip=XMLSchema 设计类型
xmlbeans.enumerations.tooltip=从下面总数检测枚举
xmlbeans.instance.document.name.tooltip=要生成的实例文档文件名
xmlbeans.instance2schema.result.schema.name=结果架构文件名
xmlbeans.instance2schema.url.tooltip=实例文档路径
xmlbeans.particle.valid.tooltip=启用粒子有效(限制)规则
xmlbeans.rootelement.tooltip=实例文档生成的根元素
xmlbeans.schema2instance.url.tooltip=架构路径
xmlbeans.simplecontenttype.tooltip=简单的内容类型检测(叶状文本)
xmlbeans.unique.particle.tooltip=启用唯一粒子规则
zen.coding.context.help.link=访问 docs.emmet.io 获取更多信息
zen.coding.context.help.tooltip=使用 Emmet 缩写生成的 HTML 包装文本。它将展开缩写，并将所选内容放置在生成的代码段的最后一个元素中。\n<p/>\n您可以使用 <code>$\#</code> 占位符定义输出位置。
