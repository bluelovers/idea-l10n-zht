appengine.sdk.version.validation.error.message=无法确定 SDK 版本
chameleon.file.display.name=Chameleon 模板
chameleon.closing.tag.expected.error=应为右 ?>
chameleon.closing.quote.expected.error=应为右 "
chameleon.closing.brace.expected.error=应为右 '}'
filetype.chameleon.description=Chameleon 模板
flask.create.project=创建 Flask 项目
flask.version.required=需要 Flask >= {0}
flask.create.project.error=创建 Flask 应用程序时出错: {0}
flask.integration=Flask 集成:
flask.name=Flask
flask.configurable.name=Flask
flask.project.description=使用 <a href="http://flask.pocoo.org">Flask</a> 微框架创建新的 Python Web 应用程序
flask.project.name=Flask 项目
flask.target.type=目标类型:
flask.target=目标:
flask.app=应用程序:
flask.additional.options=其他选项:
flask.console.tab.name=Flask 控制台
jinja2.exception.breakpoint=Jinja2 异常断点
jinja2.exception.breakpoint.type.short.text=模板渲染错误
filetype.jinja2.description=Jinja2 模板
jinja2.line.breakpoint=Jinja2 行断点
marker.python.coverage.accessible.name=标记: Python 覆盖率
cookiecutter.installation.notification=Cookiecutter 将安装在选定的解释器上以初始化项目
pyramid.new.project.dialog.backend=后端:
pyramid.new.project.dialog.project.name=项目名称:
pyramid.new.project.dialog.template.language=模板语言:
pyramid.create.project=创建 Pyramid 项目
pyramid.create.project.error=创建 Pyramid 项目时出错: {0}
pyramid.create.project.failed.to.initialize=无法初始化项目。
pyramid.create.project.invalid.interpreter=解释器无效。
pyramid.create.project.failed.to.create.temp.dir=无法创建临时目录。
pyramid.project.name.validation.error.message=项目名称应仅包含字母、数字和下划线
pyramid.goto.template.tooltip=Goto 模板
pyramid.select.view.tooltip=选择视图
pyramid.views.group=视图
pyramid.reference.view.name={0} ({1} 内)
pyramid.name=Pyramid
pyramid.project.not.installed.for.development=未安装项目来进行开发
pyramid.run.setup.py.develop.fix=运行 `setup.py develop`
pyramid.run.configuration.select.module.exception=请选择 Pyramid 模块
pyramid.run.configuration.specify.file.exception=请指定配置文件
pyramid.server.description=Pyramid 服务器
pyramid.server.display.name=Pyramid 服务器
pyramid.inspection.group.name=Pyramid
pyramid.setup.inspection.name=未安装项目来进行开发
runcfg.pyramid.display_name=Pyramid 服务器
python.coverage.branch=分支覆盖率
python.coverage.cant.read.data=无法读取覆盖率数据。
python.coverage.error=错误
python.coverage.error.generating.report=生成报告时出错
python.coverage.exit.code=退出代码: {0}
python.coverage.generating.report=正在生成覆盖率报告
python.coverage.highlight=高亮显示
python.coverage.highlight.description=高亮显示
python.coverage.module.not.found=找到包含有效 Python SDK 的模块
python.coverage.report.generated=已生成报告
python.coverage.report.generated.in={0} 中生成的报告
python.coverage.results.not.found=找不到覆盖率结果。
python.coverage.title=Python 覆盖率
python.coverage.use.bundled=使用捆绑的 coverage.py
python.debug.autodetect.link=<html><a href="/">自动检测</a></html>
python.debug.autodetect.sentence=\ 路径映射设置
python.debug.download.link=<html><a href="/">下载</a></html>
python.debug.download.sources.sentence=\ 来自远程主机的源代码
python.debug.downloading.sources=正在下载源…
python.debug.edit.settings.link=<html><a href="/">编辑设置</a></html>
python.debug.edit.settings.sentence=: 远程调试配置中的路径映射
python.debug.host.name.tooltip=可从远程主机访问的 IDE 主机名。
python.debug.path.mappings=路径映射
python.debug.port.tooltip=调试服务器的本地端口 (如果想要自动设置，则设为 0 或留空)。
python.debug.remember.for.session=为调试会话记住
python.debug.text.pane.text=<html><head></head><body></body></html>
python.duplicates.=函数(&U)
python.duplicates.class.fields=类字段(&F)
python.duplicates.class.methods=类方法(&M)
python.duplicates.dont.show.less.than=不显示包含数量小于以下值的重复项:
python.duplicates.literals=字符串和数字文字(&L)
python.duplicates.local.vars=局部变量(&V)
python.duplicates.tokens=令牌
python.duplicates.tokens.title=要匿名的令牌:
python.edit.path.mappings=编辑路径映射
python.pyramid.additional.options=其他选项:
python.pyramid.config.file=配置文件:
python.pyramid.run.browser=运行浏览器:
python.pyramid.tests.path=包含待执行测试的文件或目录的路径
python.remote.debugger.mapping.dialog.error.selection.empty=选区为空
python.remote.debugger.mapping.dialog.label.remote.file.path=远程文件路径:
python.remote.debugger.mapping.dialog.title=为远程主机中的文件选择本地文件
configurable.PyTemplateLanguageModulesConfigurable.display.name=Python 模板语言
python.template.configure.dirs=配置模板目录
python.template.file.types=模板文件类型
python.template.folder=模板文件夹
python.template.installing.progress=正在安装 {0}
python.template.installing.title=正在安装 {0}…
python.template.languages=模板语言
python.template.languages.python=Python 模板语言
python.template.unmark.as.template.folder=取消标记为模板文件夹
python.profiler.view.call.graph.tab.title=调用图
python.profiler.view.call.tree.title=调用树
python.profiler.view.statistics.tab.title=统计信息
filetype.cython.description=Cython
python.interpreter.path=Python 解释器路径:
python.wsl.error.no.installed.distributions=找不到安装的 WSL 分发版。确保安装了 WSL 分发版。
python.wsl.add.path.dialog.title=添加路径
action.MarkTemplateDirectory.text=模板目录

python.resources.name=资源
python.resources.description=将目录标记为资源文件夹
python.resources.group.title=资源文件夹

python.templates.name=模板
python.templates.description=将目录标记为模板文件夹
python.templates.group.title=模板文件夹

python.google.app.engine.model.dependency.diagram=Google App Engine 模型依赖关系图
python.django.model.dependency.diagram=Django 模型依赖关系图
python.class.diagram=Python 类图
python.sqlalchemy.model.dependency.diagram=SQLAlchemy 模型依赖关系图
python.flask.run.server=通过 'flask run' 运行服务器
python.flask.run.server.name=Flask 服务器
python.django.tests=Django 测试
python.copying.remote.files=正在复制远程文件…
python.pyramid.select.configuration.file=选择配置文件:
python.coverage.report.no.generated.in=未在 {0} 中生成报告
python.package.installation.failed.title=安装 {0} 失败
python.debugger.remote.server.stopped.event.text=服务器已停止。

action.RescanPythonModulesAndPackages.text=重新扫描可用的 Python 模块和软件包
action.RescanPythonModulesAndPackages.description=重新扫描可用的 Python 解释器模块和软件包
python.interpreter.rescanning.python.modules.and.packages=正在重新扫描 Python 模块和软件包
python.scientific.show.plots.in.toolwindow=在工具窗口中显示绘图
configurable.PyScientificConfigurable.display.name=Python Scientific
line.marker.provider.popup.title.select.view=选择视图
flask.dialog.message.provide.qualified.name.module.with.flask.app=提供包含 Flask 应用的模块的限定名称
flask.dialog.message.provide.path.to.file.with.flask.app=提供包含 Flask 应用的文件的路径
flask.dialog.message.cant.find=找不到 {0}
flask.dialog.message.cant.find.path.from.to=找不到从 {0} 到 {1} 的路径
flask.dialog.message.set.valid.sdk=请设置有效的 SDK
flask.dialog.message.cant.find.working.dir=找不到 {0}
flask.line.marker.go.to.template=转到模板 ''{0}''
flask.line.marker.go.to.template.plural=转到模板
flask.line.marker.go.to.template.target.name=模板
flask.line.marker.go.to.view.function=转到视图函数 ''{0}''
flask.line.marker.go.to.view.function.plural=转到视图函数
flask.line.marker.go.to.view.function.target.name=视图函数
flask.function.does.not.have.a.parameter=函数 ''{0}'' 没有参数 ''{1}''
python.remote.skeleton.generator.empty.output={1} 的 {0} 输出为空
python.template.configure.dirs.apply.fix=项目结构

# All placeholders in the messages below are file paths.
python.remote.debugger.path.mapper.can.replace=<html>远程文件 <b>{0}</b> 被映射到本地路径 <b>{1}</b>，但找不到此文件。<br/>您可以在不具备此源的情况下继续调试。<br/>要进行修复，可以执行下面的一项操作: </html>
python.remote.debugger.path.mapper.cannot.replace=<html>无法将路径映射应用于远程文件。在项目中找不到 <b>{0}</b>。<br/>您可以在不具备此源的情况下继续调试。<br/>要进行修复，可以执行下面的一项操作: </html>
python.remote.debugger.path.mapper.is.empty=<html>在项目中找不到 <b>{0}</b>。<br/>您可以在不具备此源的情况下继续调试。<br/>要进行修复，可以执行下面的一项操作: </html>
python.remote.debugger.path.mapping.tree.column.name=远程路径


fastapi.framework.name=FastAPI
fastapi.run.config.name=FastAPI
fastapi.run.config.description=FastAPI 运行配置
fastapi.run.invalid.file.error=FastAPI 应用程序必须是有效的 .py 文件
fastapi.run.no.app.in.file=<html>未在 {0} 中找到有效的 FastAPI 应用<br/><a href="edit">添加显式应用名称…</a></html>
fastapi.run.options.file.path=应用程序文件:
fastapi.run.options.additional.options=Uvicorn 选项:
fastapi.run.options.uvicorn.hint=Uvicorn <a href="https://www.uvicorn.org/#command-line-options">命令行选项</a>
python.wsl.bad.interpreter.path=Python 解释器路径错误
fastapi.run.invalid.file.error.notification=<html>FastAPI 应用程序必须是有效的 .py 文件。<br/><a href="edit">在运行配置中更改…</a></html>
fastapi.run.options.app.name=应用程序名称:
fastapi.run.options.autodetect=<detect automatically>