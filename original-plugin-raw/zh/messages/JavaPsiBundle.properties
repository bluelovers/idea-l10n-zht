0.is.not.an.identifier=''{0}'' 不是一个标识符.
annotation.name.is.missing=注解特性必须为 'name=value' 形式
anonymous.class.context.display=匿名在{0}
anonymous.class.derived.display=派生自 {0} 的匿名类
aux.context.display=/ {0}
bound.not.expected=意外绑定
catch.without.try='catch' 没有 'try'
class.context.display={0} ({1} 内)
class.literal.expected=应为 .class
context.type.java.comment=注释
context.type.string=字符串

default.language.level.description=SDK 默认值

# These constants are used from JavaElementKind
# When localizing you may use the parameter #0 which signals the desired grammatical case:
# 0 = nominative case (subject)
# 1 = accusative case (object)
element.abstract_method=abstract 方法
element.annotation=注解
element.anonymous_class=匿名类
element.class=类
element.type.parameter=类型形参
element.constant=常量字段
element.constructor=构造函数
element.enum=枚举
element.enum_constant=枚举常量
element.expression=表达式
element.field=字段
element.initializer=初始值设定项
element.interface=接口
element.label=标签
element.local_variable=局部变量
element.method=方法
element.module=模块
element.package=软件包
element.parameter=形参
element.pattern_variable=模式变量
element.record=记录
element.record_component=记录组件
element.statement=语句
element.unknown=元素
element.variable=变量
element.throws.list=throws 列表
element.extends.list=extends 列表
element.type.arguments=类型实参
element.receiver.parameter=接收器形参
element.method.call=方法调用

else.without.if='else' 没有 'if'
enum.constant.context=枚举常数 ''{0}'' 在 ''{1}''
expected.array.initializer=应为数组初始值设定项
expected.boolean.expression=应为布尔表达式
expected.catch.or.finally=应为 'catch' 或 'finally'
expected.class.or.interface=应为 'class' 或 'interface'
expected.class.reference=应为类引用
expected.colon=应为 ':'
expected.comma=应为 ','
expected.comma.or.rparen=应为 ',' 或 ')'
expected.comma.or.semicolon=应为 ',' 或 ';'
expected.dot=应为 '.'
expected.eq=应为 '='
expected.expression=应为表达式
expected.gt=应为 '>'。
expected.gt.or.comma=应为 '>' 或 ','
expected.identifier=应为标识符
expected.identifier.or.type=应为标识符或类型
expected.lbrace=应为 '{'
expected.lbrace.or.semicolon=应为 '{' 或 ';'
expected.lbracket=应为 '['
expected.lparen=应为 '('
expected.lparen.or.lbracket=应为 '(' 或 '['
expected.lt.or.lparen=应为 '<' 或 '('
expected.module.declaration=应为模块声明
expected.module.statement=应为模块指令
expected.package.reference=应为软件包引用
expected.parameter=应为形参
expected.rbrace=应为 '}'
expected.rbracket=应为 ']'
expected.resource=应为资源定义
expected.rparen=应为 ')'
expected.semicolon=应为 ';'
expected.statement=应为语句
expected.string=应为字符串文字
expected.switch.label=应为 'case'、'default' 或 '}'
expected.switch.rule=应为表达式、块或 throw 语句
expected.type=应为类型
expected.type.parameter=应为类型形参
expected.value=应为值
expected.while=应为 'while'
expected.with=应为 'with'
filetype.class.description=Java类文件
filetype.class.display.name=Java类文件
filetype.java.description=Java
filetype.jshell.description=JShell snippet files
finally.without.try='finally' 没有 'try'
import.statement.identifier.or.asterisk.expected.=应为标识符或 '*'

java.terms.anonymous.class.base.ref=匿名 {0}
javadoc.exception.tag.class.is.not.throwable=类 {0} 不是 Throwable 的后代
javadoc.exception.tag.exception.is.not.thrown={0} 未被声明为由方法 {1} 引发
javadoc.exception.tag.wrong.tag.value=标签值错误
javadoc.param.tag.parameter.name.expected=应为形参名称
javadoc.param.tag.type.parameter.gt.expected=应为 '>'
javadoc.param.tag.type.parameter.name.expected=应为类型形参名称
javadoc.ref.tag.class.ref.expected=应为类引用
javadoc.value.field.required=@value 标记必须引用字段
javadoc.value.field.with.initializer.required=@value 标记必须引用具有常量初始值设定项的字段
javadoc.value.static.field.required=@value 标记必须引用 static 字段
javadoc.value.tag.jdk15.required=使用 JDK 1.4 或更早版本时，@value 标记可能没有任何实参
jdk.1.3.language.level.description=1.3 - 普通旧 Java
jdk.1.4.language.level.description=1.4 - 'assert' 关键字
jdk.1.5.language.level.description=5.0 - 'enum' keyword, generics, autoboxing etc.
jdk.1.6.language.level.description=6 - 接口中的 @Override
jdk.1.7.language.level.description=7 - 钻石、ARM、多 catch 等
jdk.1.8.language.level.description=8 - lambda、类型注解等
jdk.1.9.language.level.description=9 - 模块、接口中的 private 方法等
jdk.10.language.level.description=10 - 局部变量类型推理
jdk.11.language.level.description=11 - lambda 形参的局部变量语法
jdk.12.language.level.description=12 - 无新语言功能
jdk.13.language.level.description=13 - 无新语言功能
jdk.14.language.level.description=14 - switch 表达式
jdk.15.language.level.description=15 - 文本块
jdk.16.language.level.description=16 - 记录、模式、本地枚举和接口
jdk.16.preview.language.level.description=16 (预览) - 密封类型
jdk.X.language.level.description=X - 实验性功能

local.class.preposition=本地
method.context.display={0}() 在 {1}
node.abstract.flag.tooltip=abstract
node.annotation.tooltip=注解
node.anonymous.class.tooltip=匿名类
node.class.tooltip=类
node.enum.tooltip=枚举
node.exception.tooltip=异常
node.field.tooltip=字段
node.final.flag.tooltip=Final
node.interface.tooltip=接口
node.junit.test.tooltip=JUnit测试
node.method.tooltip=方法
node.record.tooltip=记录
node.runnable.class.tooltip=Runnable类
node.static.flag.tooltip=static
psi.error.attempt.to.edit.class.file=无法修改文件中的已编译元素''{0}''

task.background.title.maven=Maven

unexpected.identifier=意外标识符
unexpected.token=意外的标记
unexpected.tokens=意外的标记
error.message.wildcard.not.expected=意外通配符

bad.return.type.in.method.reference=方法引用中存在错误返回类型: 无法将 {0} 转换为 {1}
bad.return.type.in.lambda.expression=lambda 表达式中存在错误返回类型: {0} 无法转换为 {1}
bad.return.type.in.lambda.expression1=lambda 表达式中存在错误返回类型: {0} 无法转换为 void
missing.return.value.lambda=缺少返回值
unexpected.return.value=意外返回值
lambda.body.must.be.a.statement.expression=lambda 体必须是语句表达式
diamond.error.explicit.type.parameters.for.constructor=无法将 diamond 与显式类型形参用于构造函数
diamond.error.cannot.infer.arguments=无法推断实参
diamond.error.cannot.infer.arguments.unable.to.resolve.constructor=无法推断实参(无法解析构造函数)
diamond.error.anonymous.inner.classes=无法将 '<>' 用于匿名内部类
diamond.error.anonymous.inner.classes.non.private=由于非 private 方法不会重写或实现父类型中的方法，因而无法使用 '<>'
diamond.error.cannot.infer.type.arguments=无法推断 {0} 的类型实参
error.incompatible.type.no.type.variable=变量类型的实例不存在，因此{0}
error.incompatible.type.no.type.variable.0=变量类型 {0} 的实例不存在，因此{1}
type.conforms.to.constraint={0} 符合 {1}
type.can.be.converted={0} 无法转换为 {1}
conflicting.conjuncts={0} 和 {1}
error.type.parameter.has.incompatible.upper.bounds=类型形参 {0} 的上限不兼容: {1}
error.incompatible.upper.bounds=不兼容的上限: {0}
error.inference.variable.has.incompatible.bounds=推断变量 {0} 的界限不兼容:\n {1}: {2}\n{3}: {4}
error.incompatible.type={0} 与 {1} 不兼容
error.incompatible.type.not.a.functional.interface={0} 不是函数接口
error.incompatible.type.no.valid.function.type.found=未找到 {0} 的有效函数类型
error.incompatible.type.parameter.type.is.not.yet.inferred=形参类型尚未推断: {0}
error.incompatible.type.return.type.is.not.yet.inferred=返回类型尚未推断: {0}
error.incompatible.type.unhandled.exception=未处理的异常: {0}
error.incompatible.type.failed.to.resolve.argument=无法解析实参
error.incompatible.type.incompatible.parameter.types.in.lambda=lambda 表达式中的形参类型不兼容
error.incompatible.type.incompatible.types.expected.void.lambda=不兼容的类型: 应为 void，但 lambda 体既不是语句表达式，也不是与 void 兼容的块
error.incompatible.type.expected.value.lambda=不兼容的类型: 不应当为 void，但 lambda 体是与值不兼容的块
error.incompatible.type.bad.lambda.return.type=lambda 表达式中存在错误返回类型: {0} 无法转换为 {1}
error.incompatible.type.incompatible.parameter.types.in.method.reference=方法引用表达式中存在不兼容的形参类型
error.incompatible.type.incompatible.types.expected.not.void.got.void.method.reference=不兼容的类型: 不应当为 void，但方法引用的编译时声明具有 void 返回类型
error.incompatible.type.declaration.for.the.method.reference.not.found=未找到方法引用的编译时声明
error.incompatible.type.expected.non.void.got.void.method.reference=不兼容的类型: 不应当为 void，但方法引用的编译时声明具有 void 返回类型
error.incompatible.type.not.convertible=不兼容的类型: {0} 无法转换为 {1}
error.incompatible.type.incompatible.equality.constraint=不兼容的相等约束: {0} 和 {1}
list.item.no.module=<无模块>
# {0} = localized element kind ('class', 'field', 'method', etc.); {1} = element name  
element.kind.and.name={0} {1}

jdk.17.language.level.description=17 - sealed 类型、始终严格的浮点语义
jdk.17.preview.language.level.description=17 (预览) - switch 的模式匹配