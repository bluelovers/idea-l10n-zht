DbColumnsCheckboxTreeCellRenderer.forAssociation=用于关联
DbColumnsCheckboxTreeCellRenderer.from=从
DbColumnsCheckboxTreeCellRenderer.incomingAttribute.tooltip=通过外键约束从 ''{0}'' 引用 - ''{1}''
DbColumnsCheckboxTreeCellRenderer.notNull=非 null
DbColumnsCheckboxTreeCellRenderer.to=到
DbColumnsCheckboxTreeCellRenderer.viaJoinTable=通过联接表
DisplayName.entityDeclaration=JPA 实体声明
DisplayName.reverseEngineering=JPA 逆向工程
NameCase.AsIs=保留原样
NameCase.Lower=小写
NameCase.Upper=大写
RelationPanel.label.id.columns=ID 列\:
SettingsPage.accessModifier=默认实体特性访问修饰符
SettingsPage.accessModifierPrivate=private
SettingsPage.accessModifierProtected=protected
SettingsPage.className=类名
SettingsPage.className.error=应指定类名
SettingsPage.className.notFoundError=找不到指定类名的类
SettingsPage.constants.columnNames=列名
SettingsPage.constants.entityNames=实体名称
SettingsPage.constants.error=必须指定所有持久性单元的类名
SettingsPage.constants.tableNames=表名
SettingsPage.constantsSeparator=常量生成
SettingsPage.generateJpaOnGetter=在 getter 方法上生成 JPA 注解
SettingsPage.generateSerialVersionUID=生成串行版本 UID 字段
SettingsPage.generationLanguage=基架语言
SettingsPage.indexConstraintNameCase=索引/约束名称大小写
SettingsPage.innerClassName=内部类名
SettingsPage.interfaceName=接口名称
SettingsPage.interfaceName.notInterface=指定的接口不是接口
SettingsPage.lombok.allArgsConstructor=生成 @AllArgsConstructor
SettingsPage.lombok.builder=生成 @Builder
SettingsPage.lombok.getterAndSetter=生成 @Getter 和 @Setter
SettingsPage.lombok.noArgsConstructor=生成 @NoArgsConstructor
SettingsPage.lombok.onlyExplicitlyIncluded=生成 @ToString 且 onlyExplicitlyIncluded \= true
SettingsPage.lombok.separator=Lombok
SettingsPage.lombok.toString=生成 @ToString
SettingsPage.mapReferencesToBasicType=将 ORM 引用替换为基本类型特性
SettingsPage.placeToGenerate=放置常量的位置
SettingsPage.putValuesIntoConstants=为新对象名称生成常量
SettingsPage.re.naming.strategy.algorithm=算法
SettingsPage.re.naming.strategy.algorithm.incorrect=无法编译自定义命名算法
SettingsPage.re.naming.strategy.configs=配置
SettingsPage.registerTypesOnEntity=在实体上注册 Hibernate 自定义类型
SettingsPage.templatesSeparator=名称模板
SettingsPage.unpluralizeTableName=将表名转换为单数形式以生成类名
SettingsPage.useBuilderSetters=在特性 setter 中生成 "return this;"
SettingsPage.useLazy=为 @OneToOne 和 @ManyToOne 关联使用 FetchType.LAZY
SettingsPage.useValidationAnnotation=使用验证注解(NotNull、Size 等)
action.JpbCreateUJpaEntityFromTable.text=从数据库创建 JPA 实体
action.ReBulkReverseEngineering.text=来自数据库的 JPA 实体
action.move.down.text=下移
action.move.up.text=上移
action.refresh.description=刷新
action.refresh.text=刷新
column.name.attribute=特性
column.name.case=大小写
column.name.class=类
column.name.column.reference.name=列/引用名
column.name.mapping.type=映射类型
column.name.name=名称
column.name.persistence.unit=持久性单元
column.name.pluralize=复数化
column.name.postfix=后缀
column.name.prefix=前缀
column.name.target=目标
column.name.underscore=下划线
command.name.create.datatype.objects=创建数据类型对象
command.name.create.entity.attributes=创建实体特性
command.name.create.enum=创建枚举
comment.saving.strategy=添加为
comments=<html>表和列注释</html>
java.type=特性/转换器/Hibernate 类型
label.error=错误\!
mapping.type.editor=映射类型编辑器
naming.rules=命名规则
please.select.table=请选择表
popup.title.reverse.engineering=逆向工程
prefixes.to.skip.in.column.name=列名中要跳过的前缀
prefixes.to.skip.in.column.name.description=如果要跳过的前缀被指定为 <b>d_, t_</b>，并且对 <b>d_first_name</b> 和 <b>t_email</b> 列应用了逆向工程，则它们的前缀将不会出现在相应的实体字段名称中，因此得到的名称将是 <b>firstName</b> 和 <b>email</b>，而不是 <b>dFirstName</b> 和 <b>tEmail</b>
prefixes.to.skip.in.table.name=表名中要跳过的前缀
prefixes.to.skip.in.table.name.description=如果要跳过的前缀被指定为 <b>sys_、p_</b>，并且对 <b>sys_user</b> 和 <b>p_product</b> 表应用了逆向工程，则它们的前缀将不会出现在相应的实体名称中，因此得到的名称将是 <b>User</b> 和 <b>Product</b>，而不是 <b>SysUser</b> 和 <b>PProduct</b>
progress.title.create.entity.attributes=创建实体特性…
relation.panel.initRelations=初始化实体关系
reserved.keyword.field.suffix=保留关键字字段后缀
sql.type=SQL 类型
suffixes.to.skip.in.column.name=列名中要跳过的后缀
suffixes.to.skip.in.column.name.description=如果要跳过的后缀被指定为 <b>_d, _t</b>，并且对 <b>first_name_d</b> 和 <b>email_t</b> 列应用了逆向工程，则它们的前缀将不会出现在相应的实体字段名称中，因此得到的名称将是 <b>firstName</b> 和 <b>email</b>，而不是 <b>firstNameD</b> 和 <b>emailT</b>
suffixes.to.skip.in.table.name=表名中要跳过的后缀
suffixes.to.skip.in.table.name.description=如果要跳过的后缀被指定为 <b>_sys、_p</b>，并且对 <b>user_sys</b> 和 <b>product_p</b> 表应用了逆向工程，则它们的前缀将不会出现在相应的实体名称中，因此得到的名称将是 <b>User</b> 和 <b>Product</b>，而不是 <b>UserSys</b> 和 <b>ProductP</b>
target.type=目标类型
unmapped.parent.attributes=<html>父实体的某些特性被映射到相应表中不存在的列。如果您想保留这些特性，可以手动创建它们的列或使用 JPA Buddy 自动生成 DDL。请观看<a href\='https\://youtu.be/a-K-53_8Pcg'>此视频</a>了解其运作方式。</html>
