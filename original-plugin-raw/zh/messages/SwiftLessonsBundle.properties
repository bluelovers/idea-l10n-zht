swift.editor.module.name=编辑器
swift.editor.module.description=了解如何选择、注释、删除、复制和移动行，以及如何设置代码格式等等。
swift.code.generations.module.name=代码生成
swift.code.generations.module.description=从用法创建、重写/实现并应用快速修复。
swift.navigation.module.name=导航
swift.navigation.module.description=窗口、视图、代码导航、跳转到源代码、声明/实现、文件结构等。
swift.refactorings.module.name=重构
swift.refactorings.module.description=重命名、提取变量/方法和其他重构。
swift.run.debug.test.module.name=运行、调试、测试
swift.run.debug.test.module.description=了解如何运行、调试和测试您的应用程序。

swift.codegeneration.cfu.name=从用法创建
swift.codegeneration.cfu.create.local=在 <ide/> 中，对未解析实体按 {0}，即可根据其用法创建各种代码结构。按 {1}，选择<strong>创建局部变量 ''label''</strong>，然后按 {2}。
swift.codegeneration.cfu.repeat=重复相同的操作以创建 {0} 函数。
swift.codegeneration.cfu.nice=不错! 注意形参及形参名称的生成方式。
swift.codegeneration.cfu.create.class=这次我们可以使用相同的方式来创建类声明。按 {0}，选择<strong>创建类型 ''IDE''</strong>，然后按 {1}。请注意，您可以自动创建以使其嵌套在当前类或新文件中。
swift.codegeneration.cfu.create.init=很好! 我们来重复执行相同的操作，为 {0} 类生成初始值设定项。按 {1}，选择<strong>创建初始值设定项</strong>，然后按 {2}。
swift.codegeneration.cfu.create.empty.init=最后，使用相同的操作添加一个空的初始值设定项。
swift.codegeneration.generate.name=生成
swift.codegeneration.generate.intro=您可以使用<strong>生成</strong>操作来生成 {0}、{1}、{2}、{3} 属性以及初始值设定项。
swift.codegeneration.generate.init=按 {0}，然后在<strong>生成</strong>弹出窗口中选择<strong>初始值设定项</strong>。选择要包含在初始值设定项签名中的属性，然后按 {1}。
swift.codegeneration.generate.hash=使用 {2} → <strong>equals 和 hash</strong> 来生成 {0} 和 {1}。
swift.codegeneration.generate.description=最后，使用 {1} →<strong>描述</strong>操作生成 {0}。
swift.codegeneration.overrideimplement.name=重写/实现
swift.codegeneration.overrideimplement.intro=您可以使用<strong>重写/实现</strong>操作({0}/{1})重写父类的任何方法或实现任何协议。
swift.codegeneration.overrideimplement.implement=按 {0} → {1}，然后为 {2} 中所有必需的方法添加存根。
swift.codegeneration.overrideimplement.override=现在我们尝试一次重写几种方法。按 {0}，然后开始键入 {1}。您可以重写的方法和属性列表应筛选为仅两种方法。按 {2} → {3} 重写它们。
swift.codegeneration.quickfix.name=快速修复和意图
swift.codegeneration.quickfix.intro=<ide/> 为您的 Swift 代码显示与 Xcode 相同的 {0}。
swift.codegeneration.quickfix.fixit=按 {0}，然后选择<strong>应用 Fix-it</strong>，将未使用的变量替换为 {1}。
swift.codegeneration.quickfix.sourcekit.inspection=AppCode 还将 SourceKit 作为一种单独的检查进行集成。这意味着您可以在整个文件中运行它，并在可以进行多种修正时一并修正所有问题。按 {0}。
swift.codegeneration.quickfix.sourcekit.fixit=正如您看到的，这段代码中存在几个问题。我们来修正其中一些问题。选择<strong> Swift→SourceKit 检查</strong>，然后点击右侧的<strong>应用 Fix-it</strong> 按钮。此操作会解决该组中的所有问题。
swift.codegeneration.quickfix.typo.in.var=现在，按 {0} 返回编辑器窗口，将文本光标插入拼写错误的变量名称处，然后按 {1}。选择<strong>拼写错误: 重命名为…</strong>，选择正确的选项，然后按 {2}。
swift.codegeneration.quickfix.typo.in.string=请注意，所有变量用法都会自动重命名。现在，尝试使用“{0}”修正 {1} 字符串。
swift.codegeneration.quickfix.go.next.error=按 {0} 转到下一个错误。
swift.codegeneration.quickfix.error.handling=错误处理意图让您能够在需要之处添加 {0}。按 {1} → {2} 并选择一种快速修复。
swift.codegeneration.quickfix.go.next.warning=按 {0} 转到下一个警告。
swift.codegeneration.quickfix.redundant=您也可以移除冗余的 {0} 特性。按 <shortcut>⇧⌥⏎</shortcut>。
swift.codegeneration.quickfix.explicit.type=如果要添加或移除某些变量的显式类型，只需按 {0}，然后选择<strong>添加/移除显式类型</strong>。现在试着对 {1} 变量执行操作。
swift.editor.format.name=代码格式化
swift.editor.format.reformat=<ide/> 可以帮助您只通过一项操作更正代码格式设置。使用 {0} 重新格式化所选代码。
swift.editor.format.reformat.whole.file=要重新格式化整个源文件，请在未选择任何行的情况下使用 {0}。按 {1}，然后按 {2}。
swift.editor.comment=注释
swift.editor.comment.intro=使用 {0} 注释掉任意一行。
swift.editor.comment.uncomment=撤消对使用相同快捷键 {0} 注释过的行的注释。
swift.editor.comment.several.lines=通过 {0} 选择几行，然后用 {1} 进行注释。
swift.editor.comment.block=按 {0} 两下以选择 {1}，然后使用 {2} 以块注释的形式对其进行注释。
swift.editor.completion.name=补全
swift.editor.completion.basic=默认情况下，<ide/> 会立即补全代码。在文本光标所在处开始键入 {0}，然后按 {1} 以选择 {2} 函数。
swift.editor.completion.basic.shortcut=您可以随时按 {0} 激活基本补全。
swift.editor.completion.smart=智能类型补全可以筛选建议列表，以使其仅包含当前上下文中适用的类型。按 {0} 以查看匹配建议的列表。按 {1} 选择第一个。
swift.editor.completion.show=现在，按 {0} 显示补全选项。
swift.editor.completion.tab=选择 {0} 条目，然后按 {1}(而不是 {2})。此操作将覆盖文本光标处的单词，而不是简单地插入而已。
swift.editor.completion.tab.method=现在调用 {0} 和 {1}，轻松使用 {3} 覆盖 {2}。
swift.editor.completion.go.next=太棒了! 点击下面的按钮开始下一课或使用 {0}。
swift.editor.delete.name=删除
swift.editor.delete.action=通过 {0} 删除当前行。
swift.editor.delete.undo=要恢复已删除的行，请按 {0}。
swift.editor.duplicate.name=复制
swift.editor.duplicate.line=通过 {0} 复制任何行。
swift.editor.duplicate.several.lines=您可以对多行执行同一操作。选择两行或更多行，然后通过 {0} 进行复制。
swift.editor.folding.name=折叠
swift.editor.folding.collapse=有时您需要收起一段代码以提高可读性。尝试通过 {0} 折叠代码。
swift.editor.folding.expand=要展开代码区域，请按 {0}。
swift.editor.folding.collapse.all=如果要收起文件中的所有区域，请使用 {0}。
swift.editor.folding.expand.all=同样，按 {0} 展开所有可用区域。
swift.editor.folding.collapse.statement.any=在 <ide/> 中，有一种方法可以折叠任何顺序的语句或声明。尝试使用 {0} 折叠所选区域。
swift.editor.folding.expand.statement=现在，按 {0} 展开语句。
swift.editor.folding.block=最后使用 {0} 折叠控制流语句。
swift.editor.move.name=移动
swift.editor.move.line.down=重新排列行通常涉及两项操作: 剪切和粘贴。但在 <ide/> 中只需执行一项操作，因为按 {0} 将下移当前行。将当前行移至 {1} 函数的末尾。
swift.editor.move.line.up=同样，要向上拉取一行，请使用 {0}。移动 {1} 声明使之位于设置前面。
swift.editor.selections.name=多选
swift.editor.selections.next=按 {0} 以选择文本光标处的符号。
swift.editor.selections.next.again=再次按 {0} 以选择该符号的下一个匹配项。
swift.editor.selections.unselect=按 {0} 取消选择上一个匹配项。
swift.editor.selections.select.all=按 {0} 以选择文件中的所有匹配项。
swift.editor.selections.replace=键入 {0}，将 {1} 的所有匹配项替换为 {2}，然后按 {3}。
swift.editor.selections.column=使用“{0}”切换列选区，然后使用键盘({3})在从 {1} 到 {2} 的所有行放置文本光标。
swift.editor.selections.select.sample=现在，键入 {0} 并选择所有包含 {1} 的用例名称。
swift.editor.selections.select.sample.toggle=按 {0} 切换用例，然后再次按 {1} 退出列选区模式。
swift.editor.selections.reformat=按 {0}，使用 {1} 重新格式化代码就可以了!
swift.editor.popups.name=快速弹出窗口
swift.editor.popups.param.info=按 {0} 可查看初始值设定项签名。
swift.editor.popups.close.param.info=按 {0} 可关闭弹出窗口。
swift.editor.popups.doc=按 {0} 可查看文本光标处符号的文档。
swift.editor.popups.impl=按 {0} 可查看文本光标处符号的定义。
swift.editor.selection.name=选区
swift.editor.selection.word=将文本光标放在任何单词前面。按 {0} 将文本光标移至下一个单词，然后选择二者之间的所有内容。
swift.editor.selection.expand=按 {0} 将选区扩展到下一个代码块。
swift.editor.selection.expand.more=尝试使用 {0} 增大选区，直至选择整个文件。
swift.editor.selection.shrink={0} 可缩小当前选区。尝试按此按钮。
swift.editor.selection.all=现在使用 {0} 立即选择整个文件。
swift.navigation.code.name=代码导航
swift.navigation.code.intro=在处理项目时，通常需要打开和编辑特定的类、文件或符号。最快捷的方法是使用主导航三元组: <strong>转到类/文件/符号 </strong>。
swift.navigation.code.class=我们来导航到 {0} 类。按 {1}，键入 {2}，然后按 {3}。
swift.navigation.code.fuzzy=每个 <strong>转到…</strong> 对话框都支持使用模糊匹配，因此可以只键入类、文件或符号名称的一部分便可找到它。
swift.navigation.code.file=很好! 现在打开 {0} 文件: 按 {1}，键入 {2}，然后按 {3}。
swift.navigation.code.symbol=直接跳转到 {1} 类中的 {0} 声明。按 {2}，键入 {3}，然后按 {4}。
swift.navigation.code.non.project.files=如果还需要包括标准库和其他非项目文件、符号或类，只需双击快捷键。
swift.navigation.code.declaration=<strong>转到…</strong> 系列的另一项重要操作是<strong>转到声明</strong>。将文本光标插入 {0} 处，然后按 {1} 跳转至其声明。
swift.navigation.code.implementation=如果一个方法或类具有多个实现，{0} 将让您进入第一个。尝试使用 {1} 查看 {2} 的所有定义。
swift.navigation.code.go.back=我们来通过 {1} 导航回到 {0}。
swift.navigation.code.super=<strong>转到父定义</strong>会将您导航到父类声明。按 {0} 跳转到 {1} 类。
swift.navigation.code.super.again=现在再次按 {0} 跳转到 {1} 协议声明。
swift.navigation.code.recent=最后，有两种非常有用并且经常使用的导航操作，可以帮助您在最近的文件和工具窗口之间快速切换。首先是<strong>最近的文件</strong>弹出窗口。通过 {0} 将其打开，然后使用键盘上的箭头键选择所需的内容。
swift.navigation.code.switcher=第二个是<strong>切换器</strong>，它看上去并无不同，但在选择某些内容后会立即消失。在按住 <shortcut>⌃</shortcut> 键的同时按 {0}，然后再按一次切换到某个文件或工具窗口。选择所需内容后，松开 <shortcut>⌃</shortcut> 键。
swift.navigation.windows.name=主窗口与视图
swift.navigation.windows.intro=<ide/> 中有许许多多的导航视图。了解在特定情况下要调用哪种视图可以更有效地使用 IDE。
swift.navigation.windows.project=<strong>项目</strong>视图类似于 Xcode 中的项目导航器。它显示特定工作区中包括的所有项目，以及其中的所有文件和组。按 ({0}) 打开<strong>项目</strong>视图。
swift.navigation.windows.project2=默认情况下，<ide/> 中的<strong>项目</strong>视图按照文件和文件夹在文件系统中的存储顺序来显示文件和文件夹。
swift.navigation.windows.project.settings=点击项目视图选项菜单中的 {0} 图标，然后选择 <strong>树外观 | Xcode 顺序</strong>，设置和 Xcode 中相同的文件顺序(如果在设置 <ide/> 时选择了 Xcode 行为，则会自动启用此选项)。
swift.navigation.windows.project.settings.more=其他功能包括<strong>一键打开文件</strong>和<strong>始终选择打开的文件</strong>。通过<strong>一键打开文件</strong>，可以在选择文件时自动打开文件的代码。通过<strong>始终选择打开的文件</strong>，可在编辑器区域处于聚焦状态时，自动将聚焦点设置在<strong>项目</strong>视图中的文件名上。
swift.navigation.windows.files=<strong>文件</strong>视图是 <ide/> <strong>项目</strong>视图的另一种有用模式。它显示 {0} 或 {1} 所在目录中的所有文件。使用此视图可以轻松打开项目中未包含的任何文件并进行查看。
swift.navigation.windows.files.activate=按 {0} 激活<strong>文件</strong>视图。
swift.navigation.windows.return.to.editor=按 {0} 返回编辑器窗口。
swift.navigation.windows.structure=<strong>结构</strong>视图和<strong>结构</strong>弹出窗口显示特定文件的结构以及代码中的所有 {0}、{1} 和 {2} 或 {3} 注释。它们的作用方式类似于 Xcode 中的<strong>符号</strong>导航器。
swift.navigation.windows.structure.activate=按 {0} 激活<strong>结构</strong>视图。
swift.navigation.windows.jump.to.source=使用 ↑ 和 ↓ 键选择此处的任何代码结构，然后按 {0} 跳转到代码中的某处。
swift.navigation.windows.structure.popup=现在通过 {0} 激活<strong>结构</strong>弹出窗口。
swift.navigation.windows.dismiss.structure.popup=使用 {0} 关闭此弹出窗口，或按 ⏎ 跳转到代码中的某处。
swift.navigation.windows.find=<strong>在文件中查找</strong>({0})对话框提供的功能与 Xcode 中的<strong>查找</strong>导航器提供的功能相同。立即试用这项功能来执行全文搜索。
swift.navigation.windows.build=调用 {0} 以构建项目。
swift.navigation.windows.build.messages=<strong>构建消息</strong>工具窗口显示编译器输出，从中可以按类型筛选构建消息(参见左侧的<strong>筛选消息</strong>({0})按钮)。
swift.navigation.windows.run=现在在模拟器上运行我们的项目，查看<strong>运行</strong>工具窗口。按 {0}。
swift.navigation.windows.run.window=该工具窗口显示控制台，从中可以查看应用程序的输出，如果运行的是<strong>测试</strong>运行配置，则可以查看<strong>测试运行程序</strong>的输出。您始终可以通过({0})激活它。
swift.navigation.windows.stop=按 {0} 停止应用程序。
swift.navigation.windows.go.to.file=我们从模拟器窗口切换回 IDE，然后通过 {1} 导航到 {0}。
swift.navigation.windows.toggle.break=使用 {0} 在第 11 行放置断点，然后按 {1}。
swift.navigation.windows.debug=<strong>调试</strong>工具窗口({0})与 Xcode 的<strong>调试</strong>导航器相似。它在右侧显示所有监视和局部变量，在左侧显示线程列表。
swift.navigation.windows.stop.debug=按 {0} 停止应用程序。
swift.navigation.windows.breakpoints=<strong>断点</strong>对话框的功能与 Xcode 中的<strong>断点</strong>导航器的功能相同 - 它显示项目中所有断点的列表。使用 {0} 激活它。
swift.navigation.windows.init.git=通过 {0}→<strong>创建 Git 仓库</strong>初始化 GIT 仓库。现在使用 {1} 快捷键激活 <strong>VCS</strong> 工具窗口。
swift.navigation.windows.vcs.window=<strong>VCS</strong> 工具窗口提供处理版本控制系统所需的一切功能，包括<strong>变更</strong>视图、<strong>VCS 日志</strong>等等。
swift.navigation.precise.name=精准导航
swift.navigation.precise.intro=借助在代码文件中导航的几种快捷键，可以大大提高开发效率。我们来快速了解一下这些快捷键。
swift.navigation.precise.next.error=此文件中有几个警告和错误。按 {0} 可导航到第一个错误。
swift.navigation.precise.next.error.again=现在，再次使用相同的快捷键跳转到下一个错误。
swift.navigation.precise.first.error=使用 {0} 跳回到第一个错误。
swift.navigation.precise.comment.combo=现在，按 {0} - {1} - {2} 对其中的每一行进行注释。
swift.navigation.precise.first.warning=现在再次按 {0} - 它应指向文件中的第一个警告。
swift.navigation.precise.fix.warning=按 {0}，然后使用 {1} 修正第一个警告。
swift.navigation.precise.next.method=按 {0} 快速跳转到当前文件中的下一个方法。
swift.navigation.precise.prev.method=使用 {0} 跳转到上一个方法。
swift.navigation.precise.jump.last.changes=假设您有一个很长的文件，而您记不清其中所做的变更和变更的位置。按 {0} 跳转到文件中最近进行的变更。
swift.navigation.precise.jump.line=最后，当您需要跳转到代码中特定的行或列时，请按 {0}。
swift.navigation.search.name=搜索
swift.navigation.search.intro=在 AppCode 中进行搜索是不同的。我们为搜索文本提供了特殊功能，为搜索代码也专门提供了其他功能。这是因为代码并不只是文本而已 - 它具有由代码结构形成的特定结构。
swift.navigation.search.var=此示例文件中有许多包含 {0} 一词的代码结构。文本光标位于名称为 {1} 的变量处。按 {2} 查找 {3} 一词的所有文本匹配项。
swift.navigation.search.find.usages.var=这不是很有用，是吗? 在实际代码中，我们可能想在不包括类名、方法名或任何其他代码结构的情况下搜索 {0} 变量。尝试按 {1}，然后按 {2}。
swift.navigation.search.find.usages.var.result=现在，AppCode 仅显示 {0} 变量的实际用法。
swift.navigation.search.find.usages.proto=这种相同的工作流适用于任何其他代码结构。按 {0} → {1} 查找 {2} 协议在此项目中的所有用法。
swift.navigation.search.find.usages.method=现在我们要查找方法 {0} 的所有用法。再次按 {1} → {2}。
swift.navigation.search.rule=有一条简单的规则，那就是确定需要查找的符号，而不是需要查找的文本片段。<strong>查找用法</strong>适用于项目上下文中的任何代码结构，因此将查找在整个代码库中的所有用法。
swift.navigation.search.text.search=当然，有时您或许不知道要查找的是何内容，并且您想通过搜索文本来查找尽可能多的匹配项。在这种情况下，可以使用 {0} 在当前文件中执行搜索，或者使用 {1} 在整个项目中执行搜索。
swift.navigation.search.everything=如果要搜索符号、文件名乃至 IDE 设置和菜单项中的某些文本怎么办? 按 <shortcut>⇧ 两次</shortcut>打开<strong>随处搜索</strong>对话框。
swift.navigation.search.action=最后，尝试使用<strong>查找操作</strong>({0})快速查找并执行 IDE 操作。例如，键入 ''plugins'' 以打开<strong>偏好设置 | 插件</strong>。
swift.navigation.todo.name=TODO 与书签
swift.navigation.todo.activate=您是否想知道代码中有多少个待办事项? <ide/> 中有一个专门的 <strong>TODO</strong> 工具窗口。按 {0} 激活此窗口。
swift.navigation.todo.custom=您可以定义自己的自定义 <strong>TODO</strong> 筛选器。使用 {0} →<strong>编辑筛选器</strong>打开 TODO 筛选器对话框，然后使用正则表达式添加筛选器。
swift.navigation.todo.go.back=按 {0} 返回编辑器。
swift.navigation.todo.bookmark=现在按 {0}。此快捷键可在代码中设置书签。书签保存在项目目录中，如果想将同事引导至代码中的特定位置，书签这项功能会很有用。
swift.navigation.todo.all.bookmarks=使用 {0} 快捷键查看所有书签。
swift.navigation.todo.change.bookmark=您可以更改书签名。选择书签，按 {0}，输入新名称并按 {1}。
swift.refactoring.change.signature.name=更改签名
swift.refactoring.change.signature.intro=<strong>更改签名</strong>是一种重构，通过它可以同时更改方法和函数的名称、编辑内部和外部形参名称、更改它们的顺序，还可以更改方法和函数的可见性。
swift.refactoring.change.signature.exec=按 {0} 将 {1} 名称更改为 {2}。
swift.refactoring.change.signature.exec.again=再次按 {0}。点击包含 {1} 形参的行并将其更改为 {2}，或添加一个内部形参名称。
swift.refactoring.change.signature.final=最后，再次调用<strong>更改签名</strong>，使用 {0}/{1} 按钮或 <shortcut>⌥↑</shortcut>/<shortcut>⌥↓</shortcut> \n 快捷键更改形参顺序。
swift.refactoring.extract.closure.name=提取闭包
swift.refactoring.extract.closure.intro=您可以通过<strong>提取闭包</strong>将代码选区封装到可自定义形参和返回类型的新闭包中。它的工作方式类似于“提取方法”重构。
swift.refactoring.extract.closure.exec=按 {0}，然后选择<strong>提取闭包…</strong>。
swift.refactoring.extract.function.name=提取函数
swift.refactoring.extract.function.intro=<strong>提取函数</strong>是一种重构，通过它可以将所选代码封装到可自定义形参和返回类型的新函数中。将一些代码行提取到新的 {0} 函数中。按 {1} -> {2}。
swift.refactoring.extract.function.undo=按 {0} 撤消变更。
swift.refactoring.extract.function.change.params=在 <ide/> 中提取函数时，可以更改其签名。点击<strong>形参</strong>部分中的一个形参，然后使用 {0}/{1} 图标更改形参顺序。点击形参行更改其名称。
swift.refactoring.extract.function.exec.again=现在，按 {0} 并尝试更改所提取函数的签名。
swift.refactoring.extract.variable.name=提取变量
swift.refactoring.extract.variable.exec=按 {0} 将常量 {1} 提取到变量或字段 {2} 中。
swift.refactoring.extract.variable.description=<strong>提取变量</strong>不要求您选择要提取的具体代码段。只需将文本光标放在语句处，然后选择所需的表达式。
swift.refactoring.extract.variable.exec.again=现在，按 {0}，然后从列表中将其选定，以将 {1} 提取到变量 {2}。
swift.refactoring.rename.name=重命名
swift.refactoring.rename.any=您可以将文本光标放在某个符号上，并使用<strong>重命名</strong>重构来重命名任何内容。
swift.refactoring.rename.go.to.file=按 {1} 导航到 {0}。
swift.refactoring.rename.var=我们先从简单的操作开始，例如将 {0} 字段重命名为 {1}。按 {2}，键入新名称，然后按 {3}。
swift.refactoring.rename.class=重复执行相同的操作，并将 {0} 类型重命名为某些新值。
swift.refactoring.rename.check=按 {0}。可以看到，<strong>重命名</strong>重构全局有效，甚至还可以重命名 .xib 和 .storyboard 文件中的匹配项。
swift.rdt.debug.name=调试
swift.rdt.debug.intro=现在来了解如何调试您的代码。
swift.rdt.debug.prepare=按 {1} 导航到 {0}。
swift.rdt.debug.toggle.break=使用 {0} 在第 11 行放置断点，然后按 {1}。
swift.rdt.debug.step.into=按 {0} 单步执行，然后按 {1} 单步跳过。
swift.rdt.debug.run.cursor=现在，将文本光标放在第 21 行，然后通过“{0}”执行<strong>运行到光标</strong>。
swift.rdt.debug.step.over.next.line=单步跳过到下一行。
swift.rdt.debug.eval=使用 {1} 选择 {0}，然后使用<strong>评估表达式</strong>({2} → {3})。
swift.rdt.debug.eval.again=键入点符号，选择一些属性，然后在不切换到 LLDB 控制台的情况下按 {0} 进行评估。
swift.rdt.debug.stop=按 {0} 停止调试应用程序。
swift.rdt.run.name=运行
swift.rdt.run.actions=针对运行项目和调试项目，<ide/> 提供两种不同的操作(因为调试速度通常较慢)。按 {0} 运行您的应用程序。
swift.rdt.run.stop=按 {0} 停止您的应用程序。
swift.rdt.run.another=非常好! 要为当前运行配置选择其他运行配置或模拟器并快速运行您的应用程序，请按 {0}，选择目标运行配置或模拟器，然后按 {1}。
swift.rdt.run.final=按 {0} 停止您的应用程序。
swift.rdt.test.name=测试
swift.rdt.test.prepare=使用 {1} 导航到 {0}。
swift.rdt.test.intro=<ide/> 支持多种测试框架，其中包括 XCTest、Quick、Kiwi、Catch、Boost.Test 和 Google Test。我们来了解在测试应用程序时可以使用的所有常用功能。
swift.rdt.test.intro.tests=<ide/> 会根据文本光标的位置自动识别测试范围。当文本光标位于测试文件中的某处时，可以执行此文件中的所有测试。这同样适用于单个测试。要运行单个测试，请将文本光标放入测试方法中。
swift.rdt.test.suite=按 {0} 运行测试套件中的所有测试。
swift.rdt.test.show=现在我们要在树视图中显示测试。单击 {0} 图标。
swift.rdt.test.single=使用相同的 {0} 快捷键运行单个测试。
swift.rdt.test.debug.single=现在来调试测试。使用“{0}”放置行断点，然后使用“{1}”调试测试。
swift.rdt.test.resume=按 {0} 继续执行。
swift.rdt.test.stop.debug=按 {0} 停止调试。
swift.rdt.test.go.back=按 {1} 导航回到 {0}。
swift.rdt.test.failing=现在有一项失败的测试。使用 {0} 快捷键再次运行所有测试。
swift.rdt.test.filter.failed=点击 {0} 图标仅筛选出失败的测试。
swift.rdt.test.delete.failed=使用 {1} 删除 {0}。
swift.rdt.test.rerun.failed=现在点击 {0} 仅重新运行失败的测试。
swift.rdt.test.additional= 您可以使用<strong>测试运行程序</strong>工具窗口中的特定图标按持续时间({0})或按字母顺序({1})对测试排序。按 {2} 再次运行所有测试，然后按持续时间对它们排序。
swift.rdt.test.history=内置的测试历史记录自动保存最近几次测试运行的结果，并且也会将它们加载到测试运行程序工具窗口中。点击 {0} 图标并选择列表中的一项，加载以前的一项测试运行。
swift.rdt.test.more=就是这样! 对于某些框架(例如 <strong>Quick</strong>)，<ide/> 对测试结果提供了进一步增强的呈现效果。有关 <ide/> 支持的所有测试框架的概述，请观看<a href="https://www.youtube.com/watch?v=DXvx6xNG_jc">这段视频</a>。

swift.codegeneration.cfu.help.link=根据各自的用法生成方法和属性
swift.codegeneration.generate.help.link=生成代码
swift.codegeneration.overrideimplement.help.link.1=重写超类的方法
swift.codegeneration.overrideimplement.help.link.2=实现接口或 abstract 类的方法
swift.codegeneration.quickfix.help.link.1=意图操作
swift.codegeneration.quickfix.help.link.2=获取结果并修正问题
swift.editor.format.help.link=重新格式化并重新排列代码
swift.editor.comment.help.link=记录代码
swift.editor.completion.help.link=代码补全
swift.editor.delete.help.link=代码行
swift.editor.folding.help.link=代码折叠
swift.editor.move.help.link=移动语句
swift.editor.selections.help.link=多个文本光标和选择范围
swift.editor.popups.help.link=快速弹出窗口
swift.editor.selection.help.link=选择代码结构
swift.navigation.code.help.link=代码导航
swift.navigation.windows.help.link=用户界面概览
swift.navigation.precise.help.link=在错误或警告之间导航
swift.navigation.search.help.link.1=在文件中查找并替换
swift.navigation.search.help.link.2=在项目中查找并替换
swift.navigation.todo.help.link.1=TODO 注释
swift.navigation.todo.help.link.2=收藏夹
swift.refactoring.change.signature.help.link=更改签名
swift.refactoring.extract.closure.help.link=提取闭包
swift.refactoring.extract.function.help.link=提取函数
swift.refactoring.extract.variable.help.link=提取变量
swift.refactoring.rename.help.link=“重命名”重构
swift.rdt.debug.help.link.1=调试代码
swift.rdt.debug.help.link.2=在 AppCode 中调试
swift.rdt.run.help.link=运行应用程序
swift.rdt.test.help.link.1=创建测试
swift.rdt.test.help.link.2=AppCode 中的单元测试