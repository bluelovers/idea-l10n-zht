action.GitLabCiSwitchShellLanguageInjectionAction.text=在 GitLab CI/CD 中注入 Shell 脚本
gitlab.ci.expression.color.bad.character=错误字符
gitlab.ci.expression.color.comparison.operator=比较运算符(\=\=、\!\=、\=~、\!~)
gitlab.ci.expression.color.identifier=标识符
gitlab.ci.expression.color.logical.operator=逻辑运算符(&&、||)
gitlab.ci.expression.color.parentheses=圆括号
gitlab.ci.expression.color.regexp=正则表达式
gitlab.ci.expression.color.settings.display.name=GitLab CI 表达式
gitlab.ci.expression.color.string=字符串
gitlab.ci.expression.color.variable.prefix=变量前缀($)
gitlab.ci.expression.language.description="GitLab CI 表达式语言"
gitlab.ci.inspections.duplicated.job.usage=重复的作业用法
gitlab.ci.inspections.duplicated.job.usage.inspection.message=“needs”映射中存在重复的作业“{0}”
gitlab.ci.inspections.name=GitLab CI/CD
gitlab.ci.inspections.undefined.job=未定义的作业
gitlab.ci.inspections.undefined.job.inspection.message=未解析的作业引用\:“{0}”
gitlab.ci.inspections.undefined.stage=未定义的暂存
gitlab.ci.inspections.undefined.stage.inspection.message=未解析的暂存引用\:“{0}”
gitlab.ci.intention.category=GitLab CI/CD
intention.GitLabCiSwitchShellLanguageInjectionIntention.text=switch shell 脚本注入
yaml.document.search.scope.name=YAML 文档
