accessing.url=正在访问 URL {0}
http.request.element.name=HTTP 请求
reference.tool.windows.rest.client=REST 客户端

# actions
http.request.action.name=HTTP 请求
filetype.http.request.action.description=HTTP 请求
http.request.new.file=HTTP 请求
http.request.new.file.description=创建新的 HTTP 请求文件
action.com.intellij.httpClient.actions.ConvertCurlToHttpRequestAction.text=将 cURL 转换为 HTTP 请求
group.HTTPClientGroup.text=HTTP 客户端
action.RESTClient.ConvertToNew.text=将旧版 REST 客户端文件转换为新格式
action.RESTClient.RequestFromLegacyFiles.text=将旧版 REST 客户端文件转换为 HTTP 请求
action.HTTPClient.OpenCollection.text=打开 HTTP 请求集合
http.request.reformat.response.action.group.title=查看方式
http.request.reformat.response.action.view.as.text=作为{0}查看
http.request.reformat.response.action.view.as.description=作为{0}重新格式化并高亮显示文件
http.request.reformat.response.action.view.as.raw.text=文本
http.request.reformat.response.action.view.as.raw.description=将响应正文显示为原始文件
http.request.response.view.settings.action.popup.text=响应视图设置
http.request.save.log.file.action.title=将 HTTP 客户端请求保存到历史记录
action.RESTClient.ShowHistory.text=显示 HTTP 请求历史记录
http.request.show.log.file.action.toolbar=打开日志
http.request.show.log.file.action.description=打开包含已执行 HTTP 请求的日志文件
http.request.show.log.file.action.failed=无法找到 HTTP 请求日志文件
http.request.show.log.file.action.failed.default.project=无法打开默认项目的 HTTP 请求日志文件
http.request.show.log.file.action.failed.open.config=打开配置
http.request.create.scratch.file.with.request.action.title=创建 HTTP 请求临时文件
http.request.create.scratch.file.with.request.failed=无法创建 HTTP 请求临时文件
http.request.create.scratch.file.with.request.file.is.invalid=创建的 HTTP 请求临时文件无效
http.request.open.requests.collection.action.toolbar=示例
http.request.open.requests.collection.action.description=打开 HTTP 请求的内置集合
http.request.open.requests.collection.action.failed.default.project=无法打开默认项目的 HTTP 请求集合
http.request.open.requests.collection.action.failed.no.file=无法找到 HTTP 请求集合
action.HTTPClient.AddRequest.text=添加请求
action.HTTPClient.AddRequest.notification.label=添加请求
action.HTTPClient.NewRequestInToolMenuAction.text=在 HTTP 客户端中创建请求
http.request.add.request.action.failed.find.template=无法找到此请求的模板
http.request.add.request.action.error.adding.request=添加 HTTP 请求时出错
http.request.add.request.action.error.adding.request.message=当前的编辑器不是文本编辑器
http.request.add.request.action.get=GET 请求
http.request.add.request.action.post.text.body=POST 文本正文
http.request.add.request.action.post.parameters.body=POST 参数正文
http.request.add.request.action.form.text.field=带文本字段的 POST 表单
http.request.add.request.action.form.file.field=带文件字段的 POST 表单
http.request.copy.response.body.action.text=将响应正文复制到剪贴板


action.HTTP.Request.NewFile.text=HTTP 请求
action.HTTP.Request.NewFile.description=创建新的 HTTP 请求文件
group.HTTPClientNewEnvironmentFile.text=HTTP 环境文件
http.request.create.new.public.environment.file.action.text=为 HTTP 请求创建环境文件
http.request.create.new.private.environment.file.action.text=为 HTTP 请求创建私有 HTTP 环境文件
http.request.create.new.environment.file.action.toolbar=添加环境文件
action.NewPublicEnvironmentFile.popup@HttpClient.NotificationPanel.text=常规(用于常见变量，例如主机或查询参数)
action.NewPrivateEnvironmentFile.popup@HttpClient.NotificationPanel.text=私有(用于密码、令牌或 SSL 设置等敏感数据)
http.request.create.new.environment.file.fail.notification=无法创建文件: 当前目录已包含所有可能的环境文件
http.request.create.new.environment.file.command.name=创建 HTTP 环境文件
http.request.create.new.environment.tooltip.text=直接在 .http 文件中使用 ''{{''{0}''}}'' 变量，并通过 ''{1}'' 环境执行请求

# request collections
# These keys are used dynamically as "http.request.collection." + collectionFileName.replace("-", ".")
# See: com.intellij.ws.actions.HttpRequestOpenCollectionAction.getCollectionName
# suppress inspection "UnusedProperty"
http.request.collection.get.requests=GET 请求
# suppress inspection "UnusedProperty"
http.request.collection.post.requests=POST 请求
# suppress inspection "UnusedProperty"
http.request.collection.requests.with.authorization=带授权的请求
# suppress inspection "UnusedProperty"
http.request.collection.requests.with.tests=带测试的请求

# http requests log
http.request.log.file.is.ignored=无法打开日志文件，因为它已包含在忽略的列表中。<br/>从“忽略文件和文件夹”中移除 ''{0}'' 以使用请求日志文件。
http.request.log.file.is.excluded=无法打开日志文件，因为它已被标记为排除。<br/>取消排除 ''{0}'' 目录以使用请求日志文件。
http.request.log.file.wrong.type=无法打开日志文件，因为 ''*.http'' 扩展被标记为 ''{0}''，但应为 ''HTTP 请求''。
http.request.log.ignored.files.provider.title=基于编辑器的 HTTP 客户端请求

# cookie jar
filetype.http.request.cookie.jar.description=Cookie 存储文件
http.request.cookie.jar.action.title=将 HTTP 响应 Cookie 保存到 Cookie Jar
http.request.cookie.jar.inspection.attributes.missing=Cookie 格式错误: 缺少一些 TAB 分隔的特性。Cookie 格式应为: "domain\tpath\tname\tvalue\texpirationDate"
http.request.cookie.jar.inspection.too.many.attributes=Cookie 格式错误: Cookie 的 TAB 分隔特性过多。Cookie 格式应为: "domain\tpath\tname\tvalue\texpirationDate"
http.request.cookie.jar.inspection.empty.domain=Cookie 格式错误: 不允许空 domain 特性
http.request.cookie.jar.inspection.empty.path=Cookie 格式错误: 不允许空 path 特性
http.request.cookie.jar.inspection.empty.date=Cookie 格式错误: 不允许空 date 特性。预期日期格式:“Tue, 01-Jan-2019 00:00:00”，会话 Cookie 为”-1“
http.request.cookie.jar.inspection.expired.cookie=Cookie 已过期。调整到期日期，以防止下一个请求后删除此 Cookie
http.request.cookie.jar.inspection.date.format=Cookie 格式错误: 日期格式错误。预期日期格式:“Tue, 01-Jan-2019 00:00:00”，会话 Cookie 为”-1“
http.request.cookie.jar.cookie.preserved=Cookie 在请求之间保留:
http.request.cookie.jar.cookie.preserved.failed=无法保留 Cookie，{0}:

# run
rest.client.request.url.is.invalid=由于 URL 无效，因此无法执行请求
rest.client.request.file.path.is.invalid=在 {1} 找不到输入文件 ''{0}''
rest.client.request.file.path.is.empty=输入文件的路径为空
rest.client.request.query.is.invalid=查询形参 ''{0}'' 无效，因此无法执行请求
rest.client.request.cannot.create.file=无法为多部分字段 ''{0}'' 创建临时文件
rest.client.request.cannot.create.file.post=无法为 POST 主体创建临时文件
rest.client.request.cannot.find.environment=无法找到 ''{0}'' 环境
rest.client.request.multiple.environments=找到了多个具有 ''{0}'' 环境的文件
rest.client.request.execute.cancel=HTTP 请求被中断
rest.client.request.execute.cancel.post.process=\n\
\n\
HTTP 请求在响应后处理期间被中断
rest.client.cannot.execute.response.handler.failed.title=JavaScript 响应处理程序执行失败
rest.client.cannot.execute.response.processor.log.disabled=由于禁用了文件登录，无法显示响应
rest.client.request.cannot.find.response.handler=无法找到 ''{0}'' 响应处理程序脚本
# suppress inspection "TrailingSpacesInProperty"
rest.client.request.response.handler.console=响应处理程序脚本的输出将在此处显示。\n\
\n\

rest.client.request.response.handler.execution=正在执行响应处理程序脚本…
rest.client.request.run.request.tooltip=运行 HTTP 请求
rest.client.request.run.debug.request.tooltip=运行/调试 HTTP 请求
rest.client.request.execute.with.environment=使用 ''{1}'' 环境{0}
rest.client.request.execute.with.default.environment=使用默认环境{0}
rest.client.request.execute.with.no.environment=无环境{0}
rest.client.request.execute.with.text={0}方式…
rest.client.request.execute.environment.popup.header=选择环境
action.HTTPClient.RunAll.text=在文件中运行所有请求
action.HTTPClient.RunAll.text.in.notification=运行文件中的所有请求
rest.client.request.execute.all.text=全部{0}
rest.client.request.execute.all.with.environment.text=使用 ''{1}'' 环境全部{0}
rest.client.request.run.test.console.root=HTTP 请求
rest.client.request.response.handler.tab.name=响应处理程序
rest.client.request.test.tab.name=测试
rest.client.request.execute.notification=HTTP 客户端执行
rest.client.request.response.handler.failed.on.execution=无法执行响应处理程序
rest.client.request.test.result=测试失败: {0}，已通过: {1}
rest.client.request.response.body.empty=<Response body is empty>
rest.client.request.response.truncated.label=响应输出被截断以适应控制台。
rest.client.request.change.console.settings.label=考虑更改控制台内存设置

# Request error
http.client.request.error.message.begin=由于 {1} 处的{0}，URI 无效
http.client.request.error.message.description=未替换的变量 ''{0}''
http.client.request.error.message.quickfixes.title=可能的解决方案:
http.client.request.error.message.add.to.env.quickfix=向现有环境添加变量
http.client.request.error.message.add.env.file.quickfix=添加新的环境文件
http.client.request.error.message.run.with.env.quickfix=在环境中运行
http.client.request.error.message.add.to.env.no.env.error=无配置的环境
http.client.request.error.message.add.to.env.already.has.var.error=所有环境均已包含 ''{0}'' 变量
http.client.request.error.message.run.with.env.no.env.error=没有环境包含变量 ''{0}''

# debug
debug.http.client.can.not.resolve.host.name=无法解析 URL 的主机名: {0}
debug.http.client.can.not.parse.url=无法从该字符串解析 URL: {0}
debug.http.client.no.debugger.extensions=无法调试请求: 未定义调试器扩展
debug.http.client.no.debugger.extension.by.name=无法调试请求: 名称为 {0} 的调试器扩展不存在

# refactorings
rest.client.refactoring.move.request.name=移动 HTTP 请求
rest.client.refactoring.move.request.description=将 HTTP 请求移动到单独的文件
rest.client.refactoring.ui.path.label=路径:
rest.client.refactoring.ui.browse.select.path=选择路径
rest.client.refactoring.ui.browse.select.path.description=选择目标文件路径
rest.client.refactoring.no.requests=无法找到要移动的 HTTP 请求
rest.client.refactoring.request.is.invalid=无法移动所选请求
rest.client.refactoring.file.is.invalid=包含 HTTP 请求的文件无效
rest.client.refactoring.cannot.create.file=无法创建目标文件
rest.client.refactoring.target.file.is.invalid=目标文件无效或不存在。
rest.client.refactoring.target.file.same.as.original=目标文件与当前文件相同。
rest.client.refactoring.not.inside.project=目录不在项目内
rest.client.refactoring.file.not.valid.name="{0}" 不是有效的文件名
rest.client.refactoring.file.is.empty=目标文件路径为空
rest.client.refactoring.is.a.directory=所选路径应指向文件而不是目录
rest.client.refactoring.empty.selection=选择至少一个请求
rest.client.refactoring.invalid.variable.name=名称 ''{0}'' 无效，因此无法重命名环境变量
rest.client.refactoring.invalid.dynamic=动态变量不支持重命名操作

# highlighting
http.request.highlighting.method.type=方法类型
http.request.highlighting.comment=注释
http.request.highlighting.requests.separator=请求分隔符
http.request.highlighting.request.port=请求端口
http.request.highlighting.request.parameter.name=请求形参名称
http.request.highlighting.request.parameter.value=请求形参值
http.request.highlighting.header.field.key=标头字段键
http.request.highlighting.header.field.value=标头字段值
http.request.highlighting.header.message.body=请求正文
http.request.highlighting.header.input.file.sign=输入文件符号
http.request.highlighting.header.input.file.path=输入文件路径
http.request.highlighting.header.difference.file.sign=响应历史记录符号
http.request.highlighting.header.difference.file.path=响应历史记录路径
http.request.highlighting.multipart.boundary=多部分边界
http.request.highlighting.environment.variable=环境变量
http.request.highlighting.variable.braces=变量大括号

# find usages
http.request.find.usages.type.variable=变量
http.request.find.usages.type.dynamic.variable=动态变量

# diff
http.request.diff.compare.with=比较对象…
http.request.diff.line.marker.provider=HTTP 响应差异
http.request.diff.compare.with.file=与 {0} 比较
http.request.diff.compare.with.description=将响应输出与先前结果之一比较
http.request.diff.compare.with.dialog.title={0} vs {1} ({2})
http.request.diff.compare.with.dialog.title.directories={0} 与 {1}
http.request.diff.compare.with.can.not.resolve=找不到文件 ''{0}''

# ui
rest.clien.ui.deprecation.convert.action=将请求转换为新格式
rest.client.ui.notification.link.label.legacy.request.file=旧版 REST 客户端请求文件

# run-configuration
http.request.run.configuration.panel.title=配置
http.request.run.configuration.name=HTTP 请求
http.request.run.configuration.description=执行 '*.http' 或 '*.rest' 文件中描述的 HTTP 请求
http.request.run.configuration.env.label=环境(&E):
http.request.run.configuration.env.combo.box.tooltip=定义要在请求中使用的变量的环境
http.request.run.configuration.no.env.name=无环境
http.request.run.configuration.file.label=文件(&F):
http.request.run.configuration.index.label=请求(&R):
http.request.run.configuration.file.is.not.configured=未配置 HTTP 请求文件路径
http.request.run.configuration.file.doesn.exists=无法找到要执行的文件
http.request.run.configuration.request.doesn.exists=无法找到要执行的 HTTP 请求，选择了 #{0} 个，但只有一个请求
http.request.run.configuration.request.doesn.exists.many=无法找到要执行的 HTTP 请求，选择了 #{0} 个，但只有 {1} 个请求
http.request.run.configuration.run.single.request=运行单个请求
http.request.run.configuration.run.all.in.file=运行文件中的所有请求
http.request.run.configuration.run.all.in={0}中的所有

# doc comment tags
http.request.doc.comment.documentation.no.redirect=此标记禁用对请求进行自动重定向处理
http.request.doc.comment.documentation.no.log=此标记禁用自动响应日志记录。在响应可能包含敏感信息时很有用。
http.request.doc.comment.documentation.no.cookie=此标记禁用在请求之间保留 Cookie。<br/>此请求不会使用 Cookie jar 中的 Cookie，也不会保留响应中的 Cookie。
http.request.doc.comment.documentation.use.os.credentials=带有此标记的请求将尝试从操作系统获取授权票证。

# converter
http.request.convert.curl.ui.title=将 cURL 转换为 HTTP 请求
http.request.convert.from.toolbar=转换…
http.request.convert.curl.ui.ok.action=转换(&C)
http.request.convert.curl.to.http.request.failed.title=无法将 cURL 转换为 HTTP 请求
http.request.convert.curl.is.not.curl=输入字符串不是有效的 cURL 命令
http.request.convert.curl.no.url=在 cURL 命令中找不到 URL
http.request.convert.curl.unknown.option=不支持选项 ''{0}''
http.request.convert.curl.no.data=无法找到选项 ''{0}'' 的必需数据
http.request.convert.curl.method.not.supported=不支持自定义 HTTP 方法: ''{0}''
http.request.convert.curl.invalid.url=cURL 命令中的 URL 无效: ''{0}''
http.request.convert.curl.invalid.header=头名称不应为空: ''{0}''
http.request.convert.curl.custom.path.in.form.data=无法解析表单数据中的文件路径: ''{0}''
http.request.convert.curl.form.data.no.value=无法解析表单数据，值为空: ''{0}''
http.request.convert.curl.method.do.not.support.body=方法 ''{0}'' 不支持请求正文

legacy.cannot.convert.message.begin=无法从旧版 REST 客户端文件转换
dialog.title.select.xml.file.with.rest.client.request=选择包含 REST 客户端请求的 .xml 文件

# microservices
http.request.microservices.generate.from.endpoints.view.fail.title=无法在 HTTP 客户端中生成请求
http.request.microservices.generate.from.endpoints.view.fail.message=部分 URL 无效:
http.request.microservices.generate.from.endpoints.view.fail.dropdown=无效 URL
http.request.microservices.generate.from.endpoints.view.fail.concrete.message={0} ({1} 内)


#request navigator
http.request.navigator.rest.client.display.text=运行 HTTP 请求
http.request.navigator.update.scratch.file=更新 HTTP 请求临时文件
http.request.navigator.invalid.file=''{0}'' 不是有效的 HTTP 请求文件
http.request.navigator.invalid.file.document=无法修改文件 ''{0}''

# generation
http.request.generation.unsupported.schemes=不支持的方案: {0}。
http.request.generation.invalid.authorities=无效授权: {0}。
http.request.generation.invalid.url=无效 URL: ''{0}''。
http.request.generation.unsupported.methods="不支持的方法: {0}"

http.request.open.in.http.client.gutter.tooltip=在 HTTP 客户端中生成请求: {0}
http.request.open.in.http.client.goto.related.name=HTTP 客户端中的 {0}

# placeholder
http.request.placeholder.inspection.message=替换 $placeholder 变量以运行请求
http.request.placeholder.inspection.message.fix=替换 '$placeholder'
http.request.placeholder.inspection.name=HTTP 请求中的 '$placeholder'
http.request.placeholder.run.ignore=由于请求不完整而忽略 ''{0}''，替换 ''$placeholder'' 变量以运行此请求。

#inlay action

http.request.add.http.request.command=添加 HTTP 请求
http.request.file.0.is.not.found.error.message=找不到文件 ''{0}''
http.request.failed.reading.0.error.message=读取 {0} 失败
http.requests.move.requests.member.panel=请求
http.request.add.http.request.separator.command=添加 HTTP 请求分隔符

rest.client.accessing.resource.indicator.text=正在访问资源
rest.client.0.of.1.kb.indicator.text={0}/{1}Kb
http.request.no.requests.to.execute.error=没有要执行的请求
the.selected.file.is.not.a.valid.xml.file.error=所选文件不是有效的 .xml 文件: {0}
error.loading.error=加载 {0} 时出错: {1}
the.selected.file.is.not.a.rest.client.request.error=所选文件不是 REST 客户端请求
rest.client.ui.xml.file.unknown.error=XML 文件包含无效数据

http.request.content.length.is.redundant.inspection.name=冗余的 'Content-Length'
http.request.content.length.is.redundant.inspection.message=冗余的 'Content-Length' 字段
http.request.content.length.is.redundant.inspection.message.fix=删除冗余字段

http.request.incorrect.http.header.inspection.name=不正确的 HTTP 标头

# convert to cURL
http.request.convert.to.curl.env.list.title=替代变量的环境
http.request.convert.to.curl.env.list.element={0} (包含 {2} 个变量中的 {1} 个)
http.request.convert.to.curl.intention.name=转换为 cURL 并复制到剪贴板
http.request.convert.to.curl.error=无法转换为 cURL:\n\
{0}
http.request.convert.to.curl.message.1=已转换并复制到剪贴板:\n\
{0}
http.request.convert.to.curl.message.2=已使用 {0} 环境转换并复制到剪贴板: \n\
{1}
http.request.convert.to.curl.no.environment.option=无环境

action.HTTPClientConvertToCurlAndCopy.text=转换到 cURL 并复制

http.request.endpoints.tab.empty.panel.label=选择 HTTP 端点以查看 HTTP 请求
http.request.endpoints.tab.run.empty.panel.label=提交请求以查看响应
http.request.endpoints.tab.click.hint=点击以替换变量
http.request.endpoints.tab.enter.hint=按 Enter 以替换变量
http.request.endpoints.tab.submit.request.action.text=提交请求
http.request.endpoints.tab.submit.requests.action.text=提交请求
http.request.endpoints.tab.variable.substitute.command.name=替换变量
http.request.endpoints.tab.substitute.variables.to.run.tooltip=替换变量以运行请求

# foldings
http.request.difference.files.folding.placeholder.text=… ({0,number,integer} 个{0,choice, 1#之前的响应|1<之前的响应})

#inspection
inspection.name=采用未加密协议的链接
inspection.group=安全性
inspection.template=HTTP 链接不安全
notification.group.name=微服务
intention.family.name.change.prefix.to.https=将前缀更改为 https://
checkbox.ignore.comments=忽略注释
column.name.ignored.urls=已忽略的 URL
column.name.ignored.urls.label=已忽略的 URL:
quickfix.ignore.url.family.name=忽略 URL: {0}

# ssl
http.request.env.ssl.conf.key.without.cert.error=SSL 配置有密钥但没有证书
http.request.env.ssl.conf.cert.obj.has.not.path.error=没有为客户端证书提供路径
http.request.env.ssl.conf.key.obj.has.not.path.error=没有为客户端私钥提供路径
http.request.env.ssl.conf.guess.format.from.extension.error=无法根据文件扩展名 ''.{0}'' 确定格式。\n\
可能的修正: 添加 ''format'' 属性以显式指定格式。\n\
根据此规则确定格式: {1}。
http.request.env.ssl.conf.unknown.format.error=未知格式 ''{0}''。可能的变体: {1}。
# suppress inspection "TrailingSpacesInProperty"
http.request.env.ssl.conf.unresolved.path.error=无法解析路径 {0}。\n\
选中的绝对路径:
http.request.env.ssl.conf.property.not.object.error=''{0}'' 必须为 JSON 对象。
http.request.env.ssl.conf.property.not.object.or.string.literal.error=''{0}'' 必须为 JSON 对象或字符串文字。
http.request.env.ssl.conf.property.not.string.literal.error=''{0}'' 必须为 JSON 字符串文字。
http.request.env.ssl.conf.property.not.boolean.literal.error=''{0}'' 必须为 JSON 布尔文字。
http.request.env.ssl.conf.has.passphrase.and.has.not.certificate.error=SSL 配置有密码短语但没有证书
http.request.ssl.cannot.read.key.error=无法读取密钥文件:\n\
{0}
http.request.ssl.cannot.read.p12.key.store.error=无法读取 P12 密钥库:\n\
{0}
http.request.ssl.cannot.read.certificate.error=无法打开证书:\n\
{0}
http.request.ssl.cannot.add.key.to.key.store.error=无法向密钥库添加密钥:\n\
{0}
http.request.ssl.cannot.add.key.store.to.ssl.context.error=无法向 SSL 上下文添加密钥库:\n\
{0}
http.request.ssl.no.cert.in.file.error=文件不含证书
http.request.ssl.no.key.in.file.error=文件不含私钥
http.request.ssl.encrypted.key.without.passphrase.error=文件包含加密私钥，但未提供密码短语
http.request.ssl.cert.file.already.contains.key.error=证书文件已包含私钥
http.request.ssl.error.response=SSL 配置错误: {0}
http.request.ssl.cannot.determine.key.for.cert.error=无法确定证书的私钥
http.request.env.ssl.add.format.fix.action=添加显式格式属性
http.request.env.ssl.passphrase.presentable.name=证书密码短语

# scheme
http.request.private.env.file.name=HTTP 客户端私有环境文件
http.request.env.file.name=HTTP 客户端环境文件

# live templates
http.request.environment.general.context.type.label=HTTP 客户端环境文件
http.request.environment.env.context.type.label=环境
http.request.environment.private.env.context.type.label=私有环境
http.request.environment.object.for.envs.context.type.label=环境对象

# secrets
http.request.secrets.dialog.message=输入 {0} 的保护值
http.request.secrets.dialog.title=HTTP 客户端保护值
http.request.secrets.intention.family.name=设置保护值的值
http.request.secrets.intention.text=设置 ''{0}'' 的值
checkbox.ignore.tldOnly=忽略没有顶层域的 URL
checkbox.ignore.ip=忽略 IP 地址
http.request.generate.request.in.http.client.action.message=在 HTTP 客户端中生成请求
http.request.generate.request.in.http.client.action.title=在 HTTP 客户端中生成请求
http.request.open.in.http.client.intention.error.title=无效 URL。无法在 HTTP 客户端生成请求。
action.HTTPClientConvertToCurlAndCopy.popup@HttpClientConvertPopup.text=将文本光标处的 HTTP 请求转换为 cURL 并复制到剪贴板
rest.client.request.executor.not.found=无法执行请求，因为找不到合适的运行程序
http.request.open.in.http.client.intention.web.reference.authority.error.message=空机构
http.request.open.in.http.client.intention.web.reference.scheme.error.message=无法从引用检索 HTTP 方案
http.request.run.dashboard.customization.status.label=状态: {0}
rest.client.request.cannot.dereference.psi=无法访问请求 PSI
rest.client.request.debug.null.process.handler=无法准备调试会话，因为进程处理程序为 null
rest.client.request.connection.closed.message=连接已关闭
rest.client.request.connection.closed.error.message=连接意外关闭
rest.client.request.response.handler.finished.message=脚本已完成
http.request.run.anything.group.title=HTTP 请求
http.request.run.anything.element.action.description=使用 @name ''{0}'' 运行 HTTP 请求
http.request.run.anything.element.from.file.name={0}，来自 {1}
rest.client.request.response.file.error.message=错误: {0}
rest.client.request.response.file.created.message=响应文件已保存。
http.client.request.error.message.cannot.write.to.response.file=文件 {0} 不可写
http.request.highlighting.doc.comment.tag=注释标记
http.request.highlighting.request.name=请求名称
http.request.run.configuration.request.doesn.exists.by.identifier=找不到要执行的 HTTP 请求，所选文件中没有标识符为 ''{0}'' 的请求
http.client.whats.new.title=HTTP 请求中的新内容
http.client.whats.new.first.request.description=使用 >> 将响应重定向到相对于 HTTP 请求文件的文件
http.client.whats.new.second.request.description=如果想重写该文件，而不是创建一个带有后缀的新文件，请使用 >>!
http.client.whats.new.third.request.description=您还可以使用绝对路径和变量: \n\
{{$projectRoot}} 指向项目根，{{$historyFolder}} 指向 .idea/httpRequests/\n\
您可以将响应重定向到响应处理程序脚本和文件
http.client.whats.new.forth.request.description=现在可以给请求命名了。\n\
请求名称可以通过第一个分隔符('###')中的文本或 'name' 注释标记的值提供。\n\
IDE 将高亮显示名称或请求。\n\
可以通过“运行任何内容”菜单执行已命名的请求，也可以通过“随处搜索”进行搜索
http.request.run.anything.ad.text=按 {0} 在环境中运行
http.request.history.file.formatting.status.notification.label=正在等待 IDE 格式化响应并将其写入文件
http.request.mime.type.registry.text.name=文本文件
http.request.mime.type.registry.binary.name=二进制
http.request.mime.type.registry.action.popup.title=将 ''{0}'' 识别为...
http.request.mime.type.registry.inlay.text=''{0}'' MIME 类型设置
http.request.mime.type.registry.inlay.with.mark.text=''{0}'' MIME 类型被识别为了 {1}
http.request.mime.type.registry.hint.message=将在下一次请求执行时考虑更改
http.request.redirections.header=重定向
http.request.redirections.disable.button.success.hint=已添加 @no-redirect 标记
http.request.redirections.disable.button.error.hint=找不到禁用重定向的请求
http.request.redirections.disable.button.label=关闭
http.request.redirections.command.name=添加 '@no-redirect' 标记
http.request.select.environment.action.text=选择
http.request.navigate.to.public.environment.action.text=编辑 Public…
http.request.navigate.to.private.environment.action.text=编辑 Private…
http.request.no.environment.action.text=无环境
notification.group.http.generation=HTTP 客户端请求生成失败
notification.group.http.client=HTTP客户端请求执行失败
http.client.environment.selector.label=使用以下环境运行:
http.client.select.environment.intention.text=切换环境
http.client.select.environment.intention.popup.title=选择环境
http.request.create.new.public.environment.action.text=将环境添加到 Public 文件…
http.request.create.new.private.environment.action.text=将环境添加到 Private 文件…
http.client.unresolved.variable.inspection.name=未解析的环境变量
http.client.unresolved.variable.add.variable.quickfix.text=将变量 ''{0}'' 添加到环境 ''{1}'' {2,choice,0#在常规文件中|1#在私有文件中}
http.client.unresolved.variable.select.env.with.var.quickfix.text=切换到具有变量 ''{0}'' 的环境
http.client.unresolved.variable.create.env.with.var.quickfix.text=使用变量 ''{0}'' 创建环境
http.request.collection.whats.new=2021.3 中的最新变化
rest.client.request.error.status=请求出错
group.HTTPClient.Convert.text=导入 HTTP 请求
action.com.intellij.httpClient.actions.ConvertCurlToHttpRequestAction.popup@HttpClientConvertPopupV2.text=cURL 命令…
action.RESTClient.RequestFromLegacyFiles.popup@HttpClientConvertPopupV2.text=旧版 REST 客户端文件…
http.client.convert.popup.title=转换…
http.client.convert.popup.v2.title=导入从
rest.client.request.response.printing.interrupted.error=响应检索被中断
rest.client.request.response.downloading.with.bound.status=正在下载 {0} 个(共 {1} 个)
rest.client.request.response.downloading.without.bound.status=正在下载 {0}
http.client.unresolved.variable.with.dev.message=无法解析所选环境 ''{1}'' 中的变量 ''{0}''
http.client.unresolved.variable.without.dev.message=未选择环境。无法解析变量 ''{0}''
rest.client.request.file.path.is.invalid.fallback=找不到输入文件 ''{0}''
http.client.ws.handshake.status.message=握手状态:
http.client.bidi.dialog.description.label.text=要发送到 {0} 的消息:
http.client.bidi.dialog.controls.label.text=按 {0} 发送。使用 {1} 和 {2} 浏览历史记录。
http.client.bidi.dialog.language.label.tooltip.text=点击以更改语言
http.client.bidi.dialog.language.popup.title=选择语言
http.client.graphql.over.ws.no.url.error.message=无法通过 WebSocket 创建 GraphQL 请求: 请求中没有 URL
http.client.graphql.over.ws.no.body.error.message=无法通过 WebSocket 创建 GraphQL 请求: 请求中没有请求正文
http.request.add.request.action.graphql.field=GraphQL 查询请求
http.request.add.request.action.websocket.field=WebSocket 请求
http.client.graphql.plugin.promote.install.label.text=安装 GraphQL 插件以高亮显示 GraphQL 请求
http.client.graphql.plugin.promote.install.action.text=安装 GraphQL 插件
http.client.graphql.plugin.promote.enable.label.text=启用 GraphQL 插件以高亮显示 GraphQL 请求
http.client.graphql.plugin.promote.enable.action.text=启用 GraphQL 插件
http.request.select.before.run.action.text=<Select Environment Before Run>
http.request.collection.open.help=打开 HTTP 客户端帮助
http.client.graphql.add.json.variables.intention.text=添加 GraphQL JSON 变量块