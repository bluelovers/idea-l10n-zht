accessing.url=正在访问 URL {0}
action.HTTP.Request.NewFile.description=创建新的 HTTP 请求文件
action.HTTP.Request.NewFile.text=HTTP 请求
action.HTTPClient.AddRequest.notification.label=添加请求
action.HTTPClient.AddRequest.text=添加请求
action.HTTPClient.ClearBrowserCookies.text=清除身份验证浏览器 Cookie
action.HTTPClient.CopyResponseBody.text=将响应正文复制到剪贴板
action.HTTPClient.CopyUrl.MultiResponseConsole.text=复制 URL
action.HTTPClient.NewRequestInToolMenuAction.synonym.text=打开 HTTP 客户端
action.HTTPClient.NewRequestInToolMenuAction.text=在 HTTP 客户端中创建请求
action.HTTPClient.OpenCollection.HttpClient.NotificationPanel.text=示例
action.HTTPClient.OpenCollection.description=打开 HTTP 请求的内置集合
action.HTTPClient.OpenCollection.text=打开 HTTP 请求集合
action.HTTPClient.Preview.InlinePdf.description=允许禁用或启用 PDF 文件的内联预览
action.HTTPClient.Preview.InlinePdf.text=启用内联 PDF 预览
action.HTTPClient.Preview.text=显示预览
action.HTTPClient.PreviewHtml.NavigateBack.text=后退
action.HTTPClient.PreviewHtml.NavigateForward.text=前进
action.HTTPClient.RunAll.text=在文件中运行所有请求
action.HTTPClient.RunAll.text.in.notification=运行文件中的所有请求
action.HTTPClientConvertToCurlAndCopy.popup@HttpClientConvertPopup.text=将文本光标处的 HTTP 请求转换为 cURL 并复制到剪贴板
action.HTTPClientConvertToCurlAndCopy.text=转换到 cURL 并复制
action.HttpClient.Add.AuthConfig.description=向当前环境添加新的身份验证配置
action.HttpClient.Add.AuthConfig.got.it.link=复制变量
action.HttpClient.Add.AuthConfig.got.it.text=您可以通过使用 '''{{'$auth.token("{0}")'}}''' 动态变量，将身份验证令牌用于在 ''.http'' 文件中创建的配置
action.HttpClient.Add.AuthConfig.text=身份验证配置
action.HttpClient.Add.Private.Variable.description=向当前环境添加新变量
action.HttpClient.Add.Private.Variable.text=私有文件中的变量
action.HttpClient.Add.Public.Variable.description=向当前环境添加新变量
action.HttpClient.Add.Public.Variable.text=公共文件中的变量
action.NewPrivateEnvironmentFile.description=为 HTTP 请求创建私有 HTTP 环境文件
action.NewPrivateEnvironmentFile.popup@HttpClient.NotificationPanel.text=私有(用于密码、令牌或 SSL 设置等敏感数据)
action.NewPrivateEnvironmentFile.text=http-client.private.env.json
action.NewPublicEnvironmentFile.description=为 HTTP 请求创建环境文件
action.NewPublicEnvironmentFile.popup@HttpClient.NotificationPanel.text=常规(用于常见变量，例如主机或查询形参)
action.NewPublicEnvironmentFile.text=http-client.env.json
action.RESTClient.ShowHistory.description=打开包含已执行 HTTP 请求的日志文件
action.RESTClient.ShowHistory.text=显示 HTTP 请求历史记录
action.com.intellij.httpClient.actions.ConvertCurlToHttpRequestAction.popup@HttpClientConvertPopupV2.text=cURL 命令…
action.com.intellij.httpClient.actions.ConvertCurlToHttpRequestAction.text=将 cURL 转换为 HTTP 请求
action.com.intellij.httpClient.microservices.actions.HttpGenerateRequestFromEndpointsAction.text=在 HTTP 客户端中生成请求
action.com.intellij.httpClient.postman.converter.action.ConvertPostmanCollectionToHttpFileFromProjectViewAction.description=运行 Postman 集合文件格式到 .http 格式的转换
action.com.intellij.httpClient.postman.converter.action.ConvertPostmanCollectionToHttpFileFromProjectViewAction.text=将集合转换为 .http 文件
action.com.intellij.httpClient.postman.converter.action.ConvertPostmanEnvironmentToHttpFileFromProjectViewAction.description=运行 Postman 环境文件格式到 .http 格式的转换
action.com.intellij.httpClient.postman.converter.action.ConvertPostmanEnvironmentToHttpFileFromProjectViewAction.text=将环境转换为 HTTP 客户端格式
action.com.intellij.httpClient.postman.converter.action.ConvertPostmanToHttpFileAction.description=运行 Postman 文件格式到 .http 格式的转换
action.com.intellij.httpClient.postman.converter.action.ConvertPostmanToHttpFileAction.popup@HttpClientConvertPopupV2.text=Postman 集合…
action.com.intellij.httpClient.postman.converter.action.ConvertPostmanToHttpFileAction.text=从 Postman 集合文件导入
advanced.setting.http.client.history.size=HTTP 客户端请求日志中的最大请求数
checkbox.ignore.comments=忽略注释
checkbox.ignore.ip=忽略 IP 地址
checkbox.ignore.tldOnly=忽略没有顶层域的 URL
column.name.ignored.urls.label=已忽略的 URL\:
configurable.http.client.display.name=HTTP 客户端
curl.client.generator.title=cURL
debug.http.client.can.not.parse.url=无法从该字符串解析 URL\: {0}
debug.http.client.can.not.resolve.host.name=无法解析 URL 的主机名\: {0}
debug.http.client.no.debugger.extension.by.name=无法调试请求\: 名称为 {0} 的调试器扩展不存在
debug.http.client.no.debugger.extensions=无法调试请求\: 未定义调试器扩展
dialog.title.select.xml.file.with.rest.client.request=选择包含 REST 客户端请求的 .xml 文件
error.loading.error=加载 {0} 时出错\: {1}
filetype.http.request.cookie.jar.description=Cookie 存储文件
group.HTTPClient.Convert.text=导入 HTTP 请求
group.HTTPClientGroup.text=HTTP 客户端
group.HTTPClientNewEnvironmentFile.text=HTTP 环境文件
group.HttpClient.Add.description=添加新的请求、变量或身份验证配置
group.HttpClient.Add.separator=新建…
group.HttpClient.Add.text=添加到 HTTP 客户端…
http.client.add.auth.quickfix=向当前环境添加身份验证配置
http.client.ambiguity.encoding.inspection.name=歧义编码检查
http.client.ambiguity.encoding.plus.sign.warning=可能存在歧义\: ' ' 被编码为 '。它将被自动编码为 '%2B'
http.client.ambiguity.encoding.quick.fix.name.add.no.auto.encode.tag=添加 "@no-auto-encoding" 标记
http.client.ambiguity.encoding.quick.fix.name.replace.plus=将 ' 替换为 '%20'
http.client.auht.code.error.page.loading=由于页面加载错误，无法从浏览器检索代码
http.client.auht.token.error.page.loading=由于页面加载错误，无法从浏览器检索访问令牌
http.client.auth.acquire.action.popup.title=获取身份验证令牌
http.client.auth.acquire.automatically.must.be.boolean.error=“Acquire automatically”必须是 JSON 布尔值
http.client.auth.acquire.or.refresh.action.text=获取或刷新身份验证令牌
http.client.auth.auth.tests.section.title=身份验证
http.client.auth.automatic.retrieving.disabled=已禁用自动令牌获取
http.client.auth.browser.dialog.title=浏览器
http.client.auth.clear.browser.cookies=清除浏览器 Cookie
http.client.auth.client.credentials.must.be.string.boolean.error=客户端凭据必须为 JSON 字符串或布尔值
http.client.auth.code.error.browser.closed=由于浏览器已关闭，无法从浏览器检索代码
http.client.auth.config.validation.auth.in.private.intention.message=安全配置必须在公开文件中声明
http.client.auth.config.validation.intention.name=身份验证配置验证
http.client.auth.copy.user.code.tooltip=复制用户代码
http.client.auth.device.code.expired=设备代码已过期。轮询已停止
http.client.auth.device.no.complete.uri.in.response=设备授权端点返回的响应没有 'verification_uri_complete'
http.client.auth.environment.contains.hint=包含身份验证配置 ''{0}''
http.client.auth.environment.doesnt.contain.hint=不包含身份验证配置 ''{0}''
http.client.auth.environment.popup.hint=IDE 将建议创建配置
http.client.auth.environment.popup.title=可用环境
http.client.auth.force.acquire.action.text=强制获取身份验证令牌
http.client.auth.force.generate.token.intention=强制获取身份验证令牌
http.client.auth.generate.token.intention=获取或刷新身份验证令牌
http.client.auth.incorrect.code.verifier.length.error=代码验证器长度必须介于 43 到 128 个符号之间，但提供的为 {0} 个符号
http.client.auth.inspection.message=未解析的身份验证配置 ID
http.client.auth.line.marker.tooltip=获取身份验证令牌
http.client.auth.loading.page.html.content=正在加载页面…
http.client.auth.log.browser.closed.message=用户关闭了浏览器
http.client.auth.log.error=错误\: {0}
http.client.auth.log.just.error=错误
http.client.auth.log.mock.token.title=正在使用模拟身份验证配置
http.client.auth.log.opening.header=正在打开页面。
http.client.auth.log.page.loaded.header=页面已加载。
http.client.auth.log.page.loaded.message=状态\: {0}\nURL\: {1}
http.client.auth.log.page.loading.error.header=页面加载错误。
http.client.auth.log.redirect.header=已处理重定向。
http.client.auth.log.redirecting.header=正在重定向。
http.client.auth.log.refresh.title=正在刷新 OAuth2 令牌
http.client.auth.log.request.sent.header=请求已发送。
http.client.auth.log.response.received.long.header=已收到响应。状态\: {0}，主体\:
http.client.auth.log.response.received.short.header=已收到响应。
http.client.auth.log.retrieving.title=正在检索新的 OAuth2 令牌
http.client.auth.log.reusing.existing.title=正在重用现有的 OAuth2 令牌
http.client.auth.log.see.url.prefix=请参阅\:
http.client.auth.log.start.title=正在获取 ''{0}'' 的身份验证
http.client.auth.log.tab.title=身份验证日志
http.client.auth.log.toolwindow.id=HTTP 客户端身份验证日志
http.client.auth.log.toolwindow.tab.name=身份验证日志\: {0}
http.client.auth.log.url.message=URL\: {0}
http.client.auth.message.in.tab=请求使用身份验证
http.client.auth.must.be.in.public.file.error=身份验证配置必须在公共环境文件(http-client.env.json)中声明。但环境仅包含私有文件\: {0}
http.client.auth.must.be.object.error=身份验证配置必须为 JSON 对象
http.client.auth.no.environment.inspection.message=没有环境就无法使用身份验证配置
http.client.auth.object.context.name=身份验证配置对象
http.client.auth.object.error=''{0}'' 的身份验证配置必须为对象
http.client.auth.page.loading.progress=身份验证页面加载中…
http.client.auth.password.prompt.description=此站点要求您登录。
http.client.auth.password.prompt.password.label=密码\:
http.client.auth.password.prompt.title={0} 的凭据
http.client.auth.password.prompt.username.label=用户名\:
http.client.auth.pkce.must.be.object.boolean.error=PKCE 必须为 JSON 对象或布尔值
http.client.auth.polling.access.token.progress=正在轮询访问令牌…
http.client.auth.polling.canceled.error=访问令牌轮询已取消
http.client.auth.private.file.chooser.popup.title=选择带有 ''{0}'' 的私有文件来获取令牌
http.client.auth.private.file.chooser.without.option=没有私有文件
http.client.auth.property.must.be.boolean.error={0} 必须为 JSON 布尔值
http.client.auth.property.must.be.string.error={0} 必须为 JSON 字符串
http.client.auth.refresh.disabled=自动刷新已禁用
http.client.auth.refresh.implicit.error=隐式授权不支持刷新
http.client.auth.select.environment.fix=选择具有身份验证配置的环境
http.client.auth.select.environment.fix.description=建议选择具有 ''{0}'' 身份验证配置的环境
http.client.auth.token.error.browser.closed=由于浏览器已关闭，无法从浏览器检索访问令牌
http.client.auth.unexpected.code.challenge.method.value.error=意外的代码挑战方法 ''{0}''。应为 {1} 之一
http.client.auth.unexpected.code.verifier.symbol.error=意外的符号 ''{0}''。代码验证程序必须仅包含 [A-Z][a-z][0-9].-_~ 符号。
http.client.auth.unexpected.grant.type=意外的授权类型 ''{0}''。应为 {1} 之一
http.client.auth.unexpected.type=意外的身份验证类型 ''{0}''。应为 {1} 之一
http.client.auth.unresolved.auth.id.inspection=未解析的身份验证标识符
http.client.auth.unsupported.mime.type=端点返回了不受支持的 MIME 类型\: ''{0}''
http.client.auth.unsupported.response.error=端点以未知格式返回了响应
http.client.auth.user.code.label=用户代码\: {0}
http.client.auto.authorization.failed.title=授权失败
http.client.bidi.dialog.controls.label.text=按 {0} 发送。使用 {1} 和 {2} 浏览历史记录。
http.client.bidi.dialog.description.label.text=要发送到 {0} 的消息\:
http.client.bidi.dialog.language.label.tooltip.text=点击以更改语言
http.client.bidi.dialog.language.popup.title=选择语言
http.client.client.credentials.require.client.secret.error=客户端凭据要求客户端密钥属性
http.client.code.style.inspection.add.request.separator.fix.text=添加请求分隔符
http.client.code.style.inspection.add.request.separator.message=缺少请求分隔符
http.client.code.style.inspection.add.run.named.request.import.fix.text=导入自\: {0}
http.client.code.style.inspection.add.run.named.request.import.message=缺少命名请求的导入
http.client.code.style.inspection.add.wrap.with.quotes=变量应带双引号
http.client.code.style.inspection.add.wrap.with.quotes.fix.text=使用双引号包装变量
http.client.code.style.inspection.in.path.text=URL 路径段内部存在空格。使用“拆分行”操作正确拆分 URL\: {0}
http.client.code.style.inspection.in.query.name.text=查询形参名称段中存在空格。使用“拆分行”操作正确拆分 URL\: {0}
http.client.code.style.inspection.in.query.value.text=查询形参值段中存在空格。使用“拆分行”操作正确拆分 URL\: {0}
http.client.code.style.inspection.json.body.inspection.name=变量应带双引号
http.client.code.style.inspection.remove.duplicated.import.fix.text=移除当前 import 定义
http.client.code.style.inspection.remove.duplicated.import.message=import {0} 已在此文件中定义
http.client.code.style.inspection.remove.space.fix.text=从 URL 中移除不适当的空格
http.client.code.style.inspection.space.in.request.target.url.inspection.name=请求 URL 中存在空格
http.client.code.style.inspection.space.in.url.json.body.inspection.name=JSON 正文中缺少请求分隔符
http.client.code.style.inspection.space.in.url.xml.body.inspection.name=HTML/XML 正文中缺少请求分隔符
http.client.code.style.inspection.space.in.url.yaml.body.inspection.name=YAML 正文中缺少请求分隔符
http.client.code.style.put.form.urlencoded.parameters.one.line.intention.text=将 form-urlencoded 形参放在同一行中
http.client.code.style.put.form.urlencoded.parameters.separate.line.intention.text=将 form-urlencoded 形参放在单独的行中
http.client.code.style.put.parameters.one.line.intention.family.name=将形参放在同一行中
http.client.code.style.put.parameters.separate.line.intention.family.name=将形参放在单独的行中
http.client.code.style.put.query.parameters.one.line.intention.text=将查询形参放在同一行中
http.client.code.style.put.query.parameters.separate.line.intention.text=将查询形参放在单独的行中
http.client.code.style.settings.call.parameters.wrap.label=查询形参换行\:
http.client.code.style.settings.continuation.indent.label=URL 部分缩进\:
http.client.code.style.settings.form.urlencoded.group.label='x-www-form-urlencoded' 形参
http.client.code.style.settings.method.parameters.wrap.label=Form-urlencoded 形参换行\:
http.client.code.style.settings.space.before.and.label='\\&' 之前有空格
http.client.code.style.settings.spaces.around.equals.label='\=' 周围有空格
http.client.convert.popup.title=转换…
http.client.convert.popup.v2.title=导入自
http.client.create.new.item=新建…
http.client.current.environment.separator.text=当前环境
http.client.custom.parameter.wrong.type.error=自定义请求参数元素必须为 JSON 字符串、JSON 对象或 JSON 数组
http.client.custom.request.headers.must.be.object.error=自定义请求标头必须为 JSON 对象
http.client.custom.request.parameters.must.be.object.error=自定义请求参数必须为 JSON 对象
http.client.dynamic.variable.documentation.sample.value.title=示例值\:
http.client.dynamic.variable.documentation.type=必须为 $type$
http.client.dynamic.variable.documentation.versions.title=版本
http.client.environment.selector.label=使用以下环境运行\:
http.client.file.variable.line.marker.name=HTTP 客户端行标记
http.client.file.variable.overrides.env.line.marker.tooltip=导航到重写的环境变量
http.client.for.current.file.separator.text=对于文件
http.client.from.whole.project.separator.text=来自整个项目
http.client.graphql.add.json.variables.intention.text=添加 GraphQL JSON 变量块
http.client.graphql.plugin.promote.enable.action.text=启用 GraphQL 插件
http.client.graphql.plugin.promote.enable.label.text=启用 GraphQL 插件以高亮显示 GraphQL 请求
http.client.graphql.plugin.promote.install.action.text=安装 GraphQL 插件
http.client.graphql.plugin.promote.install.label.text=安装 GraphQL 插件以高亮显示 GraphQL 请求
http.client.h2.lookup.element.description=启用 HTTP/2 协议
http.client.h2.pk.lookup.element.description=强制使用 HTTP/2 协议
http.client.h2c.lookup.element.description=启用 HTTP/2 明文传输协议
http.client.h2c.pk.lookup.element.description=强制使用 HTTP/2 明文传输协议
http.client.header.context.name=HTTP 请求标头
http.client.headers.authorization.context.name=HTTP 请求授权标头
http.client.http.http1.documentation=强制使用 HTTP/1.1 协议。这是 'http\://' 请求的默认选项。
http.client.http.http2.documentation=在启用 HTTP/1.1 的同时启用 HTTP/2 明文传输协议。HTTP/2 具有更高的优先级。
http.client.http.http2.pk.documentation=强制使用 HTTP/2 明文传输协议。
http.client.http11.lookup.element.description=强制使用 HTTP/1.1 协议
http.client.https.http1.documentaion=强制使用 HTTP/1.1 协议。
http.client.https.http2.documentation=在启用 HTTP/1.1 的同时启用 HTTP/2 协议。HTTP/2 具有更高的优先级。这是 'https\://' 请求的默认选项。
http.client.https.http2.pk.documentation=强制使用 HTTP/2 协议。
http.client.inappropriate.protocol.fix=移除 HTTP 协议关键字
http.client.inappropriate.protocol.inspection.message=HTTP 协议关键字仅对 HTTP 方法的请求有意义，例如 GET、POST 等。它将被忽略，并且可以省略
http.client.more.environments.ad.text=编制索引后可以找到更多内容
http.client.move.choose.public.file.popup.title=选择公开文件
http.client.move.security.config.quick.fix=将安全配置移至公开文件
http.client.multiple.declaration.error=变量 ''{0}'' 已在此文件中定义
http.client.multiple.declaration.error.fix=重命名当前定义
http.client.multiple.declaration.reference.warning=使用多次定义的变量将导致请求失败。
http.client.no.authentication.in.environment.error=环境中无身份验证
http.client.no.stored.id.token.in.environment.error=没有存储 ID ''{0}'' 的 ID 令牌。已尝试获取 ID 令牌，因为 "Use ID Token" 属性为 true
http.client.no.stored.id.token.in.environment.simple.error=没有 ID 为 ''{0}'' 的存储 ID 令牌
http.client.no.stored.token.in.environment.error=没有 ID 为 ''{0}'' 的存储令牌
http.client.postman.converter.background.task.name=正在将 Postman 文件转换为 HTTP 客户端文件
http.client.postman.converter.collection.conversion.step.name=正在转换集合文件…
http.client.postman.converter.convert.dialog.button.text=转换
http.client.postman.converter.convert.dialog.checkbox.text=附加环境\:
http.client.postman.converter.convert.dialog.label.text=要转换的文件\:
http.client.postman.converter.convert.dialog.title=将 Postman 集合转换为 .http
http.client.postman.converter.convert.dialog.validation.error.invalid.collection.file.text=未知的 Postman 集合文件格式\: {0}
http.client.postman.converter.convert.dialog.validation.error.invalid.environment.file.text=未知的 Postman 环境文件格式\: {0}
http.client.postman.converter.convert.script.calculated=// 计算的响应\: {0}
http.client.postman.converter.convert.script.specify.env=// 请为计算指定环境变量
http.client.postman.converter.convert.script.specify.qop=// 请指定 qop 类型，当前计算会将其视为未知
http.client.postman.converter.convert.suggest.http.client.api=TODO\: 您可以在此处添加 {0} 处理程序
http.client.postman.converter.convert.suggest.migrate.to.http.client.api=TODO\: 迁移到 HTTP 客户端 {0} 处理程序 API
http.client.postman.converter.convert.ui.browse.select.path=选择路径
http.client.postman.converter.convert.ui.browse.select.path.description=选择目标文件路径
http.client.postman.converter.dialog.help.tooltip=显示帮助
http.client.postman.converter.env.conversion.step.name=正在转换环境文件…
http.client.postman.converter.postman.files.search.task.name=正在项目目录中搜索 Postman 文件
http.client.postman.converter.save.collection.file.step.name=正在保存集合文件…
http.client.postman.converter.save.env.file.step.name=正在保存环境文件…
http.client.postman.converter.save.responses.step.name=正在保存响应文件…
http.client.postman.converter.task.name=正在转换…
http.client.property.missed.error=''{0}'' 不存在
http.client.protocol.doc.invalid.presentation=无效的协议
http.client.protocol.doc.valid.presentation={0} 关键字
http.client.protocol.inspection.name=HTTP 协议使用不当
http.client.refactoring.invalid.variable.name=名称 ''{0}'' 无效，因此无法重命名环境变量
http.client.request.error.message.add.to.env.already.has.var.error=所有环境均已包含 ''{0}'' 变量
http.client.request.error.message.add.to.env.no.env.error=无配置的环境
http.client.request.error.message.cannot.write.to.response.file=文件 {0} 不可写
http.client.request.error.message.run.with.env.no.env.error=没有环境包含变量 ''{0}''
http.client.security.must.be.object.error=安全配置必须为 JSON 对象
http.client.select.environment.intention.popup.title=选择环境
http.client.select.environment.intention.text=切换环境
http.client.show.auth.button=显示身份验证日志
http.client.static.onboarding.comment.text=<p>要运行请求，请点击装订区域中的 <icon src\="AllIcons.Actions.Execute"/> 或按 <shortcut actionId\="RunClass"/></p><p>要从其他格式导入请求，请点击 <icon src\="AllIcons.ToolbarDecorator.Import"/> 或按 <shortcut actionId\="HTTPClient.Convert"/></p><p>有关详情，请查阅 <a href\="https\://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html">HTTP 客户端文档</a></p>
http.client.structure.import=导入
http.client.structure.request.body=主体\:
http.client.structure.request.host.undefined=<未定义>
http.client.structure.request.pre.handler=预请求处理程序
http.client.structure.response.handler=响应处理程序
http.client.structure.run.file=运行文件
http.client.structure.run.named.request=运行请求
http.client.token.created.hint.text=令牌获取成功。现在可以使用
http.client.type.must.be.string.error=身份验证类型必须为 JSON 字符串
http.client.unexpected.client.credentials.value.error=意外的客户端凭据值 ''{0}''
http.client.unexpected.custom.parameter.scalar.error=自定义请求参数定义必须为 JSON 字符串或 JSON 对象
http.client.unexpected.usage.value.error=意外用法 ''{0}''。应为 {1} 之一
http.client.unresolved.variable.add.file.variable.fix=添加就地变量 ''{0}''
http.client.unresolved.variable.add.to.pre.request.handler.quickfix.text=在预请求处理程序脚本中初始化变量 ''{0}''
http.client.unresolved.variable.add.variable.quickfix.text=将变量 ''{0}'' 添加到环境 ''{1}'' {2,choice,0\#在常规文件中|1\#在私有文件中}
http.client.unresolved.variable.create.env.with.var.quickfix.text=使用变量 ''{0}'' 创建环境
http.client.unresolved.variable.inspection.name=未解析的环境变量
http.client.unresolved.variable.select.env.with.var.quickfix.text=切换到具有变量 ''{0}'' 的环境
http.client.unresolved.variable.with.dev.message=无法解析所选环境 ''{1}'' 中的变量 ''{0}''
http.client.unresolved.variable.without.dev.message=未选择环境。无法解析变量 ''{0}''
http.client.whats.new.title=带有包含的文件的请求
http.request.action.name=HTTP 请求
http.request.add.http.request.command=添加 HTTP 请求
http.request.add.http.request.separator.command=添加 HTTP 请求分隔符
http.request.add.request.action.error.adding.request=添加 HTTP 请求时出错
http.request.add.request.action.error.adding.request.message=当前的编辑器不是文本编辑器
http.request.add.request.action.failed.find.template=找不到此请求的模板
http.request.add.request.action.form.file.field=带文件字段的 POST 表单
http.request.add.request.action.form.text.field=带文本字段的 POST 表单
http.request.add.request.action.get=GET 请求
http.request.add.request.action.graphql.field=GraphQL 查询请求
http.request.add.request.action.post.parameters.body=POST 形参正文
http.request.add.request.action.post.text.body=POST 文本正文
http.request.add.request.action.websocket.field=WebSocket 请求
http.request.add.tag.command.name=添加 ''{0}'' 标记
http.request.clean.log.file.command.name=清理 HTTP 请求日志
http.request.collection.different.responses=响应演示
http.request.collection.get.requests=GET 请求
http.request.collection.graphql.requests=GraphQL 请求
http.request.collection.open.help=打开 HTTP 客户端帮助
http.request.collection.post.requests=POST 请求
http.request.collection.requests.with.authorization=带授权的请求
http.request.collection.requests.with.include=带有 Include 的请求
http.request.collection.requests.with.loop=带循环的请求
http.request.collection.requests.with.tests=带有测试和脚本的请求
http.request.collection.whats.new=2025.2 最新变化
http.request.collection.ws.requests=WebSocket 请求
http.request.content.length.is.redundant.inspection.message=冗余的 'Content-Length' 字段
http.request.content.length.is.redundant.inspection.message.fix=删除冗余字段
http.request.content.length.is.redundant.inspection.name=冗余的 'Content-Length'
http.request.convert.curl.custom.path.in.form.data=无法解析表单数据中的文件路径\: ''{0}''
http.request.convert.curl.form.data.no.value=无法解析表单数据，值为空\: ''{0}''
http.request.convert.curl.invalid.header=头名称不应为空\: ''{0}''
http.request.convert.curl.invalid.url=cURL 命令中的 URL 无效\: ''{0}''
http.request.convert.curl.is.not.curl=输入字符串不是有效的 cURL 命令
http.request.convert.curl.method.do.not.support.body=方法 ''{0}'' 不支持请求正文
http.request.convert.curl.method.not.supported=不支持自定义 HTTP 方法\: ''{0}''
http.request.convert.curl.no.data=找不到选项 ''{0}'' 的必需数据
http.request.convert.curl.no.url=在 cURL 命令中找不到 URL
http.request.convert.curl.to.http.request.failed.title=无法将 cURL 转换为 HTTP 请求
http.request.convert.curl.ui.ok.action=转换(&C)
http.request.convert.curl.ui.title=将 cURL 转换为 HTTP 请求
http.request.convert.curl.unknown.option=不支持选项 ''{0}''
http.request.convert.from.toolbar=转换…
http.request.convert.to.curl.env.list.element={0} (包含 {2} 个变量中的 {1} 个)
http.request.convert.to.curl.env.list.title=替代变量的环境
http.request.convert.to.curl.error=无法转换为 cURL\:\n{0}
http.request.convert.to.curl.intention.name=转换为 cURL 并复制到剪贴板
http.request.convert.to.curl.message.1=已转换并复制到剪贴板\:\n{0}
http.request.convert.to.curl.message.2=已使用 {0} 环境转换并复制到剪贴板\: \n{1}
http.request.convert.to.curl.no.environment.option=无环境
http.request.cookie.jar.action.title=将 HTTP 响应 Cookie 保存到 Cookie Jar
http.request.cookie.jar.cookie.preserved=Cookie 在请求之间保留\:
http.request.cookie.jar.cookie.preserved.failed=无法保留 Cookie，{0}\:
http.request.cookie.jar.inspection.attributes.missing=Cookie 格式错误\: 缺少一些 TAB 分隔的特性。Cookie 格式应为\: "domain\tpath\tname\tvalue\texpirationDate"
http.request.cookie.jar.inspection.date.format=Cookie 格式错误\: 日期格式错误。预期日期格式\:“Tue, 01-Jan-2019 00\:00\:00”，会话 Cookie 为 "-1"
http.request.cookie.jar.inspection.empty.date=Cookie 格式错误\: 不允许空 date 特性。预期日期格式\:“Tue, 01-Jan-2019 00\:00\:00”，会话 Cookie 为 "-1"
http.request.cookie.jar.inspection.empty.domain=Cookie 格式错误\: 不允许空 domain 特性
http.request.cookie.jar.inspection.empty.path=Cookie 格式错误\: 不允许空 path 特性
http.request.cookie.jar.inspection.expired.cookie=Cookie 已过期。调整到期日期，以防止下一个请求后删除此 Cookie
http.request.cookie.jar.inspection.too.many.attributes=Cookie 格式错误\: Cookie 的 TAB 分隔特性过多。Cookie 格式应为\: "domain\tpath\tname\tvalue\texpirationDate"
http.request.create.new.environment.file.action.toolbar=添加环境文件
http.request.create.new.environment.file.command.name=创建 HTTP 环境文件
http.request.create.new.environment.file.fail.notification=无法创建文件\: 当前目录已包含所有可能的环境文件
http.request.create.new.environment.tooltip.text=直接在 .http 文件中使用 '{{'{0}'}}' 变量，并通过 ''{1}'' 环境执行请求
http.request.create.new.private.environment.action.text=将环境添加到 Private 文件…
http.request.create.new.public.environment.action.text=将环境添加到 Public 文件…
http.request.create.scratch.file.with.request.action.title=创建 HTTP 请求临时文件
http.request.create.scratch.file.with.request.failed=无法创建 HTTP 请求临时文件
http.request.create.scratch.file.with.request.file.is.invalid=创建的 HTTP 请求临时文件无效
http.request.custom.presentation.tag.added.hint=已添加 ''{0}'' 标记
http.request.diff.compare.with=比较对象…
http.request.diff.compare.with.can.not.resolve=找不到文件 ''{0}''
http.request.diff.compare.with.description=将响应输出与先前结果之一比较
http.request.diff.compare.with.dialog.title={0} vs {1} ({2})
http.request.diff.compare.with.dialog.title.directories={0} 与 {1}
http.request.diff.compare.with.file=与 {0} 比较
http.request.diff.line.marker.provider=HTTP 响应差异
http.request.difference.files.folding.placeholder.text=… ({0,number,integer} 个{0,choice, 1\#之前的响应|1<之前的响应})
http.request.disable.cookie.action.error.hint=找不到禁用 Cookie Jar 的请求
http.request.doc.comment.documentation.connection.timeout=使用此标记指定建立连接的超时(默认情况下，以秒为单位，或带有 <code>ms</code>、<code>s</code> 或 <code>m</code> 后缀)。例如，<code>\# @connection-timeout 600</code> 或 <code>\# @connection-timeout 1 m</code>
http.request.doc.comment.documentation.name=使用此标签为 HTTP 请求定义名称。有助于在 HTTP 客户端 UI 和历史记录中区分此请求。例如，<code>\# @name GetUserDetails</code>。
http.request.doc.comment.documentation.no.auto.encoding=此标签会禁用自动编码，允许按原样发送原始数据。
http.request.doc.comment.documentation.no.cookie=此标记禁用在请求之间保留 Cookie。<br/>此请求不会使用 Cookie jar 中的 Cookie，也不会保留响应中的 Cookie。
http.request.doc.comment.documentation.no.log=此标记禁用自动响应日志记录。在响应可能包含敏感信息时很有用。
http.request.doc.comment.documentation.no.redirect=此标记禁用对请求进行自动重定向处理
http.request.doc.comment.documentation.socket.timeout=使用此标记指定正在进行的连接中新数据包的超时(默认情况下，以秒为单位，或带有 <code>ms</code>、<code>s</code> 或 <code>m</code> 后缀)。例如，<code>\# @timeout 600</code> 或 <code>\# @timeout 1 m</code>
http.request.doc.comment.documentation.use.os.credentials=带有此标记的请求将尝试从操作系统获取授权票证。
http.request.element.name=HTTP 请求
http.request.endpoints.tab.click.address.hint=点击以替换地址
http.request.endpoints.tab.click.method.hint=点击以替换方法
http.request.endpoints.tab.click.variable.hint=点击以替换变量
http.request.endpoints.tab.empty.panel.label=选择 HTTP 端点以查看 HTTP 请求
http.request.endpoints.tab.enter.address.hint=按 Enter 以替换地址
http.request.endpoints.tab.enter.method.hint=按 Enter 以替换方法
http.request.endpoints.tab.enter.variable.hint=按 Enter 以替换变量
http.request.endpoints.tab.run.empty.panel.label=提交请求以查看响应
http.request.endpoints.tab.submit.request.action.text=提交请求
http.request.endpoints.tab.submit.requests.action.text=提交请求
http.request.endpoints.tab.substitute.variables.to.run.tooltip=替换变量以运行请求
http.request.endpoints.tab.substitute.variables.to.submit.plural.tooltip=将变量替换为提交请求
http.request.endpoints.tab.substitute.variables.to.submit.single.tooltip=将变量替换为提交请求
http.request.endpoints.tab.variable.must.be.substituted.error=在编辑器中打开以使用变量或将其替换为值
http.request.endpoints.tab.variable.substitute.command.name=替换变量
http.request.env.file.name=HTTP 客户端环境文件
http.request.env.ssl.add.format.fix.action=添加显式格式属性
http.request.env.ssl.conf.cert.obj.has.not.path.error=没有为客户端证书提供路径
http.request.env.ssl.conf.guess.format.from.extension.error=无法根据文件扩展名 ''.{0}'' 确定格式。\n可能的修正\: 添加 ''format'' 属性以显式指定格式。\n根据此规则确定格式\: {1}。
http.request.env.ssl.conf.has.passphrase.and.has.not.certificate.error=SSL 配置有密码短语但没有证书
http.request.env.ssl.conf.key.obj.has.not.path.error=没有为客户端私钥提供路径
http.request.env.ssl.conf.key.without.cert.error=SSL 配置有密钥但没有证书
http.request.env.ssl.conf.property.not.boolean.literal.error=''{0}'' 必须为 JSON 布尔字面量。
http.request.env.ssl.conf.property.not.object.error=''{0}'' 必须为 JSON 对象。
http.request.env.ssl.conf.property.not.object.or.string.literal.error=''{0}'' 必须为 JSON 对象或字符串字面量。
http.request.env.ssl.conf.property.not.string.literal.error=''{0}'' 必须为 JSON 字符串字面量。
http.request.env.ssl.conf.unknown.format.error=未知格式 ''{0}''。可能的变体\: {1}。
http.request.env.ssl.conf.unresolved.path.error=无法解析路径 {0}。\n选中的绝对路径\:
http.request.env.ssl.passphrase.line.marker=设置证书密码短语
http.request.env.ssl.passphrase.presentable.name=证书密码短语
http.request.environment.env.context.type.label=环境
http.request.environment.general.context.type.label=HTTP 客户端环境文件
http.request.environment.object.for.envs.context.type.label=环境对象
http.request.environment.private.env.context.type.label=私有环境
http.request.environment.public.env.context.type.label=公共环境
http.request.find.usages.type.dynamic.variable=动态变量
http.request.find.usages.type.file.variable=就地变量
http.request.find.usages.type.variable=变量
http.request.fold.headers.default.toggle.text=默认情况下折叠非空响应的标题
http.request.generate.request.in.http.client.action.message=在 HTTP 客户端中生成请求
http.request.generation.from.gutter.error=无法在 HTTP 客户端中生成请求\:\n{0}
http.request.generation.invalid.authorities=无效授权\: {0}。
http.request.generation.invalid.url=无效 URL\: ''{0}''。
http.request.generation.progress.title=正在生成请求…
http.request.generation.unsupported.methods="不支持的方法\: {0}"
http.request.generation.unsupported.schemes=不支持的方案\: {0}。
http.request.highlighting.comment=注释
http.request.highlighting.doc.comment.tag=注释标记
http.request.highlighting.dynamic.variable.number=动态变量//数字实参
http.request.highlighting.dynamic.variable.string=动态变量//字符串实参
http.request.highlighting.environment.variable=环境变量
http.request.highlighting.escaped.value=转义值
http.request.highlighting.file.variable.begin=就地变量//变量开始
http.request.highlighting.file.variable.name=就地变量//变量名
http.request.highlighting.file.variable.value=就地变量//变量值
http.request.highlighting.header.difference.file.path=响应历史记录路径
http.request.highlighting.header.difference.file.sign=响应历史记录符号
http.request.highlighting.header.field.key=标头字段键
http.request.highlighting.header.field.value=标头字段值
http.request.highlighting.header.input.file.path=输入文件路径
http.request.highlighting.header.input.file.sign=输入文件符号
http.request.highlighting.header.message.body=请求正文
http.request.highlighting.import=Import
http.request.highlighting.method.type=方法类型
http.request.highlighting.multipart.boundary=多部分边界
http.request.highlighting.protocol=HTTP 协议
http.request.highlighting.request.name=请求名称
http.request.highlighting.request.parameter.name=请求形参名称
http.request.highlighting.request.parameter.value=请求形参值
http.request.highlighting.request.port=请求端口
http.request.highlighting.requests.separator=请求分隔符
http.request.highlighting.scripts=响应处理程序和预请求脚本
http.request.highlighting.variable.braces=变量大括号
http.request.history.file.formatting.status.notification.label=正在等待 IDE 格式化响应并将其写入文件
http.request.incorrect.http.header.inspection.name=不正确的 HTTP 标头
http.request.log.file.is.excluded=无法打开日志文件，因为它已被标记为排除。<br/>取消排除 ''{0}'' 目录以使用请求日志文件。
http.request.log.file.is.ignored=无法打开日志文件，因为它已包含在忽略的列表中。<br/>从“忽略文件和文件夹”中移除 ''{0}'' 以使用请求日志文件。
http.request.log.file.wrong.type=无法打开日志文件，因为 ''*.http'' 扩展被标记为 ''{0}''，但应为 ''HTTP 请求''。
http.request.log.ignored.files.provider.title=基于编辑器的 HTTP 客户端请求
http.request.log.too.large=由于日志文件过大，无法打开。请对其进行清理。
http.request.log.too.large.fix.link.label=清理 HTTP 请求日志
http.request.microservices.generate.from.endpoints.view.fail.concrete.message={0} ({1} 内)
http.request.microservices.generate.from.endpoints.view.fail.dropdown=无效 URL
http.request.microservices.generate.from.endpoints.view.fail.message=部分 URL 无效\:
http.request.microservices.generate.from.endpoints.view.fail.title=无法在 HTTP 客户端中生成请求
http.request.mime.type.registry.action.popup.title=将 ''{0}'' 识别为…
http.request.mime.type.registry.hint.message=将在下一次请求执行时考虑更改
http.request.mime.type.registry.inlay.text=''{0}'' MIME 类型设置
http.request.mime.type.registry.inlay.with.mark.text=''{0}'' MIME 类型被识别为了 {1}
http.request.navigate.to.private.environment.action.text=编辑 Private…
http.request.navigate.to.public.environment.action.text=编辑 Public…
http.request.navigator.invalid.file=''{0}'' 不是有效的 HTTP 请求文件
http.request.navigator.invalid.file.document=无法修改文件 ''{0}''
http.request.navigator.rest.client.display.text=运行 HTTP 请求
http.request.navigator.update.scratch.file=更新 HTTP 请求临时文件
http.request.new.file=HTTP 请求
http.request.no.environment.action.text=无环境
http.request.no.requests.to.execute.error=没有要执行的请求
http.request.open.in.http.client.goto.related.name=HTTP 客户端中的 {0}
http.request.open.in.http.client.gutter.tooltip=在 HTTP 客户端中生成请求\: {0}
http.request.open.in.http.client.gutter.tooltip.empty=在 HTTP 客户端中生成请求
http.request.open.in.http.client.intention.error.title=无效 URL。无法在 HTTP 客户端生成请求。
http.request.open.in.http.client.intention.web.reference.authority.error.message=空机构
http.request.open.in.http.client.intention.web.reference.scheme.error.message=无法从引用检索 HTTP 方案
http.request.open.requests.collection.action.failed.default.project=无法打开默认项目的 HTTP 请求集合
http.request.open.requests.collection.action.failed.no.file=找不到 HTTP 请求集合
http.request.open.requests.collection.action.toolbar=示例
http.request.placeholder.inspection.message=替换 $placeholder 变量以运行请求
http.request.placeholder.inspection.message.fix=替换 '$placeholder'
http.request.placeholder.inspection.name=HTTP 请求中的 '$placeholder'
http.request.private.env.file.name=HTTP 客户端私有环境文件
http.request.redirections.disable.button.error.hint=找不到禁用重定向的请求
http.request.redirections.disable.button.label=禁用
http.request.redirections.header=重定向
http.request.reformat.response.action.group.title=查看方式
http.request.reformat.response.action.view.as.description=重新设置文件格式并作为{0}高亮显示
http.request.reformat.response.action.view.as.raw.description=将响应正文显示为原始文件
http.request.reformat.response.action.view.as.raw.text=文本
http.request.response.handler.path.context.type=HTTP 请求响应处理程序路径
http.request.response.view.settings.action.popup.text=响应视图设置
http.request.run.anything.ad.text=按 {0} 在环境中运行
http.request.run.anything.element.action.description=使用 @name ''{0}'' 运行 HTTP 请求
http.request.run.anything.element.from.file.name={0}，来自 {1}
http.request.run.anything.group.title=HTTP 请求
http.request.run.configuration.description=执行 '*.http' 或 '*.rest' 文件中描述的 HTTP 请求
http.request.run.configuration.env.combo.box.tooltip=定义要在请求中使用的变量的环境
http.request.run.configuration.env.label=环境(&E)\:
http.request.run.configuration.file.doesn.exists=找不到要执行的文件
http.request.run.configuration.file.is.not.configured=未配置 HTTP 请求文件路径
http.request.run.configuration.file.label=文件(&F)\:
http.request.run.configuration.index.label=请求(&R)\:
http.request.run.configuration.is.not.runnable.without.license="HTTP 客户端需要许可证才能运行请求"
http.request.run.configuration.name=HTTP 请求
http.request.run.configuration.no.env.name=无环境
http.request.run.configuration.panel.title=配置
http.request.run.configuration.request.doesn.exists=找不到要执行的 HTTP 请求，选择了 \#{0} 个，但只有一个请求
http.request.run.configuration.request.doesn.exists.by.identifier=找不到要执行的 HTTP 请求，所选文件中没有标识符为 ''{0}'' 的请求
http.request.run.configuration.request.doesn.exists.many=找不到要执行的 HTTP 请求，选择了 \#{0} 个，但只有 {1} 个请求
http.request.run.configuration.run.all.in={0}中的所有
http.request.run.configuration.run.all.in.file=运行文件中的所有请求
http.request.run.configuration.run.single.request=运行单个请求
http.request.run.dashboard.customization.status.label=状态\: {0}
http.request.save.log.file.action.title=将 HTTP 客户端请求保存到历史记录
http.request.secrets.dialog.message=输入 {0} 的保护值
http.request.secrets.dialog.title=HTTP 客户端保护值
http.request.secrets.intention.family.name=设置保护值的值
http.request.secrets.intention.text=设置 ''{0}'' 的值
http.request.select.before.run.action.text=<运行前选择环境>
http.request.select.environment.action.text=选择
http.request.show.log.file.action.failed=找不到 HTTP 请求日志文件
http.request.show.log.file.action.failed.default.project=无法打开默认项目的 HTTP 请求日志文件
http.request.show.log.file.action.failed.open.config=打开配置
http.request.show.log.file.action.toolbar=打开日志
http.request.show.request.method.single.toggle.text=显示请求方法(重新运行以应用)
http.request.show.request.methods.toggle.text=显示请求方法(重新运行以应用)
http.requests.generation.progress.title=正在生成请求…
http.requests.move.requests.member.panel=请求
inspection.group=安全性
inspection.name=采用未加密协议的链接
inspection.template=HTTP 链接不安全
intention.family.name.change.prefix.to.https=将前缀更改为 https\://
label.jetbrains.account.required=登录 JetBrains Account 以激活免费许可证
label.license.required=激活 IDE 许可证以使用 HTTP 客户端
legacy.cannot.convert.message.begin=无法从旧版 REST 客户端文件转换
link.label.learn.more=了解详情
link.label.login=登录
link.label.trial=申请试用
live.template.auth.description=授权配置
live.template.auth.obj.description=身份验证配置对象
live.template.authorization.token.description=带有令牌的授权头，例如 OAuth2
live.template.bearer.token.description=带有令牌的 Bearer，例如来自 OAuth2 配置
live.template.env.description=HTTP 客户端环境
live.template.fptr.description=通过 multipart/form-data POST 文件
live.template.gqlr.description=GraphQL 请求
live.template.gtr.description=GET http\://example.com/get
live.template.gtrp.description=GET http\://example.com/get?id\=99
live.template.json.path.description=使用 JSONPath 筛选响应
live.template.mptr.description=POST multipart/form-data
live.template.ptr.description=POST http\://example.com/add…
live.template.ptrp.description=POST application/x-www-form-urlencoded
live.template.ssl.description=SSL 配置
live.template.var.description=环境变量
live.template.wsr.description=WebSocket 请求
live.template.xpath.description=使用 XPath 筛选响应
notification.group.http.client=HTTP 客户端请求执行失败
notification.group.http.generation=HTTP 客户端请求生成失败
notification.group.name=微服务
quickfix.ignore.url.family.name=忽略 URL\: {0}
rest.clien.ui.deprecation.convert.action=将请求转换为新格式
rest.client.cannot.execute.response.processor.log.disabled=由于禁用了文件登录，无法显示响应
rest.client.duplicate.import.name=重复的 import
rest.client.possible.run.request.name=可能的请求名称
rest.client.refactoring.cannot.create.file=无法创建目标文件
rest.client.refactoring.empty.selection=选择至少一个请求
rest.client.refactoring.file.is.empty=目标文件路径为空
rest.client.refactoring.file.is.invalid=包含 HTTP 请求的文件无效
rest.client.refactoring.file.not.valid.name=“{0}”不是有效的文件名
rest.client.refactoring.is.a.directory=所选路径应指向文件而不是目录
rest.client.refactoring.move.request.description=将 HTTP 请求移至单独的文件
rest.client.refactoring.move.request.name=移动 HTTP 请求
rest.client.refactoring.no.requests=找不到要移动的 HTTP 请求
rest.client.refactoring.not.inside.project=目录不在项目内
rest.client.refactoring.request.is.invalid=无法移动所选请求
rest.client.refactoring.target.file.is.invalid=目标文件无效或不存在。
rest.client.refactoring.target.file.same.as.original=目标文件与当前文件相同。
rest.client.refactoring.ui.browse.select.path=选择路径
rest.client.refactoring.ui.browse.select.path.description=选择目标文件路径
rest.client.refactoring.ui.path.label=路径\:
rest.client.request.cannot.find.environment=找不到 ''{0}'' 环境
rest.client.request.cannot.find.non.dumb.environment=找不到 ''{0}'' 环境。可能只有在编制索引之后才能找到
rest.client.request.change.console.settings.label=考虑更改控制台内存设置
rest.client.request.connection.closed.error.message=连接意外关闭
rest.client.request.connection.closed.message=连接已关闭
rest.client.request.debug.null.process.handler=无法准备调试会话，因为进程处理程序为 null
rest.client.request.execute.all.text=全部{0}
rest.client.request.execute.all.with.environment.text=使用 ''{1}'' 环境全部{0}
rest.client.request.execute.cancel=HTTP 请求被中断
rest.client.request.execute.cancel.post.process=\n\nHTTP 请求在响应后处理期间被中断
rest.client.request.execute.environment.popup.header=选择环境
rest.client.request.execute.notification=HTTP 客户端执行
rest.client.request.execute.with.default.environment=使用默认环境{0}
rest.client.request.execute.with.environment=使用 ''{1}'' 环境{0}
rest.client.request.execute.with.no.environment=无环境{0}
rest.client.request.execute.with.text={0}方式…
rest.client.request.inspection.add.custom.http.method=添加自定义 HTTP 方法
rest.client.request.iteration.tab.name=迭代
rest.client.request.pre.request.handler.execution=正在执行预请求处理程序脚本…
rest.client.request.pre.request.handler.tab.name=预请求处理程序
rest.client.request.response.body.empty=<响应正文为空>
rest.client.request.response.downloading.with.bound.status=正在下载 {0} 个(共 {1} 个)
rest.client.request.response.downloading.without.bound.status=正在下载 {0}
rest.client.request.response.file.created.message=响应文件已保存。
rest.client.request.response.file.error.message=错误\: {0}
rest.client.request.response.handler.console=响应处理程序脚本的输出将在此处显示。\n\n
rest.client.request.response.handler.execution=正在执行响应处理程序脚本…
rest.client.request.response.handler.tab.name=响应处理程序
rest.client.request.response.printing.interrupted.error=响应检索被中断
rest.client.request.response.truncated.label=响应输出被截断以适应控制台。
rest.client.request.run.debug.request.tooltip=运行/调试 HTTP 请求
rest.client.request.run.request.tooltip=运行 HTTP 请求
rest.client.request.run.test.console.root=HTTP 请求
rest.client.request.tab.name=请求
rest.client.request.test.tab.name=测试
rest.client.request.unknown.http.method=未知 HTTP 方法
rest.client.safe.mode.message=安全模式下禁止 HTTP 客户端脚本。信任项目以运行脚本。
rest.client.show.html.preview.editor.name=HTTP 客户端中的 HTML 预览
rest.client.show.request.button.text=显示请求
rest.client.ui.notification.link.label.legacy.request.file=旧版 REST 客户端请求文件
rest.client.ui.xml.file.unknown.error=XML 文件包含无效数据
rest.client.unknown.error=未知错误
the.selected.file.is.not.a.rest.client.request.error=所选文件不是 REST 客户端请求
the.selected.file.is.not.a.valid.xml.file.error=所选文件不是有效的 .xml 文件\: {0}
