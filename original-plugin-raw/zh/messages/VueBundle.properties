action.CreateVueSingleFileComp.description=创建 Vue 组件文件
action.CreateVueSingleFileComp.text=Vue 组件
action.VueExtractComponentAction.description=将 Vue.js 模板的所选部分提取到新的单文件组件，并通过 props 传递使用的数据和方法
action.VueExtractComponentAction.text=提取 Vue 组件
nuxt.support.notification.contents=为获取更好的代码补全建议，请向项目依赖项中添加 @nuxt/types
nuxt.support.notification.title=Nuxt.js 支持
options.indent.label.top-level.caption=缩进顶级标记的子级\:
options.indent.radio.block-specific.caption=特定于块中的语言
options.indent.radio.block-specific.tooltip=<template>、<script> 和 <style> 块中的缩进将根据所使用语言的代码样式设置进行设置。例如，<style lang\='scss'> 将使用 SCSS 中设置的缩进
options.indent.radio.uniform.caption=整个文件中相同
vue.command.name.auto-import-external-symbols=自动导入外部符号
vue.command.name.auto-import-vue-components=自动导入 Vue 组件
vue.configurable.service.alpha.preview.comment=使用 Vue LS 3.0 中的 Vue TypeScript 插件
vue.configurable.service.alpha.preview.label=Vue LS 3.0 预览版
vue.configurable.service.alpha.preview.tooltip=在此模式下，Vue 项目中的 TypeScript 通过插件实现“原生”支持。<br>选择后，将忽略上述选项。
vue.configurable.service.auto=自动
vue.configurable.service.auto.help=选择此选项可在可能的情况下启用 Vue Language Server (在接管模式下)。仍将使用内部 IDE 检查。
vue.configurable.service.disabled=已禁用
vue.configurable.service.disabled.help=选择此选项可关闭两种语言服务。将仅使用内部 IDE 检查。
vue.configurable.service.group=Vue 服务
vue.configurable.service.languageServerPackage=Vue 语言服务器\:
vue.configurable.service.ts=经典 TypeScript 服务
vue.configurable.service.ts.help=选择此选项可强制为 Vue 文件启用与 TypeScript 服务的经典集成。由于此集成不适用于 TypeScript 5.0 及更高版本，在这种情况下，将使用内部 IDE 检查。
vue.configurable.service.typescriptPluginPackage=TypeScript 插件\:
vue.configurable.title=Vue
vue.create.single.file.component.action.dialog.title=新建 {0}
vue.create.single.file.component.action.name=创建 Vue 组件文件 ''{0}''
vue.create.single.file.component.template.class.api=Class API
vue.create.single.file.component.template.composition.api=Composition API
vue.create.single.file.component.template.options.api=Options API
vue.documentation.section.argument=实参\:
vue.documentation.section.default=默认\:
vue.documentation.section.library=库\:
vue.documentation.section.pattern=模式\:
vue.documentation.section.required=必要
vue.documentation.section.slot.scope=作用域
vue.documentation.type.component=组件
vue.documentation.type.component.computed.property=组件计算属性
vue.documentation.type.component.data.property=组件数据属性
vue.documentation.type.component.event=组件事件
vue.documentation.type.component.method=组件方法
vue.documentation.type.component.property=组件属性
vue.documentation.type.directive=指令
vue.documentation.type.directive.argument=指令实参
vue.documentation.type.directive.modifier=指令修饰符
vue.documentation.type.filter=筛选
vue.documentation.type.functional.component=函数组件
vue.documentation.type.slot=槽位
vue.documentation.vue=Vue
vue.inspection.display.name.data.function=数据函数
vue.inspection.display.name.deprecated.symbol=已弃用的符号
vue.inspection.display.name.duplicate.tag=重复的模板/脚本标记
vue.inspection.display.name.missing.component.import=缺少组件导入
vue.inspection.display.name.unrecognized.directive=无法识别的指令
vue.inspection.display.name.unrecognized.slot=无法识别的槽位
vue.inspection.group.name=Vue
vue.inspection.message.attribute.does.not.accept.value={0} 不接受任何值
vue.inspection.message.data.property.should.be.function=数据属性应是一个函数
vue.inspection.message.duplicate.tag=顶级标记 {0} 重复
vue.inspection.message.filter.function.with.no.args=筛选器函数应至少接受一个实参
vue.inspection.message.filter.invalid.number.of.arguments=筛选器实参数量无效，应为 {0} 个
vue.inspection.message.missing.component.import=未导入组件 {0}
vue.inspection.message.unresolved.filter=未解析的筛选器 {0}
vue.live.template.context.component=Vue 组件
vue.live.template.context.script.tag=Vue 脚本标记内容
vue.live.template.context.template=Vue 模板
vue.live.template.context.template.tag.element=Vue 模板标记元素
vue.live.template.context.top.level=Vue 顶级元素
vue.param.hints.show.names.for.filters=筛选器实参
vue.parser.message.expected.comma.or.end.of.expression=应为逗号或表达式结尾
vue.parser.message.expected.end.of.expression=应为表达式结尾
vue.parser.message.expected.identifier.or.string=应为标识符或字符串
vue.parser.message.expected.in.or.of=应为 'in' 或 'of'
vue.parser.message.expected.lparen.pipe.or.end.of.expression=应为 (, | 或表达式结尾
vue.parser.message.expected.pipe.or.end.of.expression=应为 | 或表达式结尾
vue.parser.message.generic.component.parameters.only.with.typescript=只有 TypeScript 语言支持泛型组件形参。
vue.parser.message.statements.not.allowed=Vue 表达式中不允许使用语句
vue.parser.message.unterminated.interpolation=未终止的插值
vue.progress.title.auto-importing-external-symbols-on-paste=在粘贴时自动导入外部符号…
vue.progress.title.auto-importing-vue-components-on-paste=在粘贴时自动导入 Vue 组件…
vue.project.generator.description=使用 <a href\='https\://cli.vuejs.org'>Vue CLI</a> 创建新的 <a href\='https\://vuejs.org'>Vue.js</a> 项目。
vue.project.generator.name=Vue.js
vue.project.generator.nuxt.description=使用 <a href\='https\://nuxt.com/docs/api/commands/init'>nuxi</a> 创建新的 <a href\='https\://nuxt.com/'>Nuxt</a> 项目。
vue.project.generator.nuxt.name=Nuxt
vue.project.generator.nuxt.presentable.package.name=Nuxt CLI(&C)
vue.project.generator.presentable.package.name=Vue CLI(&C)
vue.project.generator.use.default.project.setup=使用默认项目设置(&D)
vue.quickfix.import.component.family=导入组件
vue.quickfix.import.component.name=导入 ''{0}'' 组件
vue.quickfix.wrap.with.function.family=包装对象
vue.quickfix.wrap.with.function.text=在函数中包装数据对象
vue.search.scope.template.name=模板
vue.service.name=Vue 语言服务器
vue.service.prefix=Vue
vue.symbol.presentation=Vue {0} {1}
vue.template.intention.extract.component.command.name=提取 Vue 组件
vue.template.intention.extract.component.continue=继续编辑
vue.template.intention.extract.component.error.component.exists=组件 {0} 已存在
vue.template.intention.extract.component.error.component.name=组件名称无效\: {0}
vue.template.intention.extract.component.error.file.exists=文件 {0} 已存在
vue.template.intention.extract.component.family.name=提取 Vue 组件
vue.template.intention.import.component.family.name=本地导入组件
vue.template.intention.v-model.expand.command.name=展开 v 模型
vue.template.intention.v-model.expand.family.name=展开 v 模型
vuex.inspection.message.unresolved.action=无法解析 Vuex 操作 {0}
vuex.inspection.message.unresolved.getter=无法解析 Vuex getter {0}
vuex.inspection.message.unresolved.mutation=无法解析 Vuex 变异 {0}
vuex.inspection.message.unresolved.namespace=未知 Vuex 模块命名空间 {0}
vuex.inspection.message.unresolved.state=无法解析 Vuex 状态 {0}
vuex.inspection.message.unresolved.symbol=无法解析 Vuex 符号 {0}
