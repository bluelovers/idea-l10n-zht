action.PCAnalyzeVulnerableDependencies.description=显示工具窗口，并根据已知漏洞检查导入的依赖项
action.PCAnalyzeVulnerableDependencies.text=易受攻击的依赖项…
action.PCFindUsagesAction.description=查找相关库的用法
action.PCFindUsagesAction.error.usages.notfound.text=找不到请求的依赖项对应的库。请确保项目已正确导入。
action.PCFindUsagesAction.indicator.looking.text=正在查找用法
action.PCFindUsagesAction.task.text=查找用法
action.PCFindUsagesAction.text=查找用法
action.PCNavigateToSource.description=在编辑器中打开相关文件
action.PCNavigateToSource.text=跳转到源
action.PCOnlyVulnerableToggleAction.description=筛选出安全的依赖项
action.PCOnlyVulnerableToggleAction.text=显示安全的依赖项
action.PCRefreshAction.description=收集依赖项并重新检查
action.PCRefreshAction.text=刷新
action.link.read.more=阅读更多
action.link.report.false.positive=报告误报
change.version.quickfix=更新到不受影响的版本 {0}
change.version.quickfix.familyname=更改易受攻击的依赖项版本
copyright.message=结果由 {0} 提供技术支持
cve.label.text={0}，分数\: {1}
dependency.copy.description.link=将描述复制到剪贴板
dependency.safe.version.link=<a href \="{0}{1}">{2}</a>
dependency.safe.version.title=更新到不受影响的版本 {0}
dependency.safe.version.updated.title=已更新到不受影响的版本 {0}
dependency.tree.defaultModuleModel={0} 中的所有库
dependency.tree.failed.to.emit.message=无法发出软件包 {0}
dependency.tree.package.html.message=<html>依赖项 <b>{0}</b> {1}</html>
dependency.tree.package.text.message=依赖项 {0} {1}
dependency.tree.popup.groupid=PackageChecker.Toolwindow.Tree.Popup
dependency.tree.select.dependency.message=选择左侧的依赖项可查看详细信息
dependency.tree.selecting.dependency=正在加载 {0} 的详细信息
dependency.usages.panel.content.name={0} 的用法
dependency.usages.panel.usages.string=项目文件中的用法
fleet.inspection.direct=依赖项 {0} 易受攻击
fleet.inspection.transitive=提供可传递易受攻击的依赖项 {0}
fleet.inspection.vulnerable.api.usage=易受攻击的 API 用法
fleet.inspection.vulnerable.api.usage.dependency=来自 {0} 的易受攻击的 API 用法
ignoreVulnerabilities.dialog.describeReason=描述\:
ignoreVulnerabilities.dialog.ignore=忽略
ignoreVulnerabilities.dialog.packageTitle=软件包\:
ignoreVulnerabilities.dialog.reasonTitle=原因\:
ignoreVulnerabilities.dialog.title=忽略易受攻击的软件包
ignoreVulnerabilities.ignoreReasons.fixedInBranch=已在分支中修复
ignoreVulnerabilities.ignoreReasons.inProgress=进行中
ignoreVulnerabilities.ignoreReasons.notExploitable=不可利用
ignoreVulnerabilities.ignoreReasons.otherReasons=其他
ignoreVulnerabilities.optionPane.isIgnoringEnabled=忽略依赖项
ignoreVulnerabilities.optionPane.moduleColumn=模块
ignoreVulnerabilities.optionPane.packageColumn=软件包
ignoreVulnerabilities.optionPane.reasonColumn=原因
ignoreVulnerabilities.optionPane.title=忽略的依赖项
ignoreVulnerabilities.text=忽略易受攻击的依赖项
inspection.global.name=易受攻击的导入依赖项
inspection.group=安全性
inspection.local.name=易受攻击的声明依赖项
inspection.malicious.name=恶意依赖项
inspection.message.vulnerable.api.usage=<html><body>易受攻击的 API 用法\n{0} {1} </body> </html>
inspection.message.vulnerable.dependency.usage=<html><body>易受攻击的依赖项用法\n{0} {1}</body> </html>
inspection.navigate.to.dependency.declaration=依赖项声明
inspection.popup.header.multiple=在依赖项中发现了 {0} 个漏洞\:
inspection.popup.header.single=在依赖项中发现的漏洞\:
inspection.popup.header.vulnerable.api.usage.multiple=在 API 调用中发现了 {0} 个漏洞\:
inspection.popup.header.vulnerable.api.usage.single=在 API 调用中发现的漏洞\:
inspection.popup.show.all.hint=显示全部 {0} 个…
inspection.popup.show.details.hint=显示详细信息…
inspection.popup.transitive.prefix=可传递
inspection.template=<html><body>依赖项 {0} 易受攻击 {1} {2}</body></html>
inspection.template.module.name=<br/>模块\: {0}
inspection.template.safe.version=，安全版本 {0}
inspection.template.tree=<br/>树\:<pre>{0}</pre>
inspection.transitive=<html><body>提供可传递易受攻击的依赖项 {0} {1} {2}</body></html>
inspection.usages.name=易受攻击的 API 用法
malicious.commit.check.progress.title=正在检查恶意依赖项…
malicious.commit.check.show.details=显示详细信息
malicious.commit.check.title=检查恶意依赖项
malicious.commit.check.warning.multiple=发现 {0} 个恶意依赖项\: {1}
malicious.commit.check.warning.single=发现一个恶意依赖项\: {0}
malicious.inspection.popup.header.multiple=在依赖项中发现 {0} 个恶意风险\:
malicious.inspection.popup.header.single=在依赖项中发现恶意风险\:
malicious.inspection.template=<html><body>依赖项 {0} 是恶意的 {1} {2}</body></html>
message.false.positive.content=已将依赖项 {1} 的漏洞 {0} 报告为误报
message.false.positive.title=误报报告
notification.dependency.checker.error.title=Dependency Checker 错误
notification.group.security=Package Checker 检查失败
problem.tab.emptyText=分析依赖项是否存在漏洞
problem.tab.ignoreVulnerabilities=忽略软件包中的漏洞
problem.tab.name=易受攻击的依赖项
problem.tab.refreshAction=显示结果
quick.fix.navigate.toSource=转到具有声明的依赖项的文件
show.info.quickfix=显示漏洞信息
show.info.quickfix.title={0} 的漏洞列表
show.info.quickfix.title.without.package=漏洞列表
vulnerability.popup.step.text={0}\: {1}
