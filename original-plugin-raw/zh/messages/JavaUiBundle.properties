action.AddJdkAction.text=从磁盘添加 JDK…
action.AnActionButton.text.remove=移除
action.DisableRepositoryLibrariesSha256Checksum.text=为所有库禁用 SHA256 校验和
action.DownloadJdkAction.text=下载 JDK…
action.EnableAllRepositoryLibrariesSha256Checksum.text=为所有库启用 SHA256 校验和
action.GuessRemoteRepositoryForEachRepositoryLibrary.text=为所有库猜测并绑定远程仓库
action.ParseSdkmanrcAction.text=更新项目 JDK
action.PromoBeans.text=Bean
action.PromoDatabase.text=数据库
action.PromoEndpoints.text=端点
action.PromoKubernetes.text=Kubernetes
action.PromoOpenAPI.text=配置 OpenAPI 源代码…
action.PromoPersistence.text=持久性
action.PromoProfiler.text=IntelliJ 分析器
action.PromoSpring.text=更改有效 Spring 配置文件…
action.ResolveAllRepositoryLibraries.text=解析所有 Maven 库
action.TemplateProjectStructure.description=配置所有新项目的默认结构
action.TemplateProjectStructure.text=新项目的结构…
action.UnbindRemoteRepositoryForAllRepositoryLibraries.text=为所有库取消绑定远程仓库
action.attach.external.project.description=将 {0} 项目链接到当前的 IDE 项目
action.attach.external.project.text=链接 {0} 项目
action.attach.external.project.warning.message.directory=所选目录 ''{0}'' 中没有 {1} 构建文件
action.attach.external.project.warning.message.file=所选文件 ''{0}'' 不是 {1} 构建文件
action.attach.external.project.warning.title=无法识别的 {0} 项目
action.continue.searching=继续搜索
action.description.add.0.support=添加 {0} 支持
action.description.add.the.library.to.the.dependencies.list.of.chosen.modules=将库添加到所选模块的依赖项列表
action.description.change.module.names=通过更改模块名称的共同前缀来调整模块的自动分组
action.description.convert.to.repository.library=将常规库转换为仓库库，该库还存储其 Maven 坐标，因此 IDE 可以自动下载库 JAR (如果缺少)
action.description.inline.module.dependency=将没有源根的模块的依赖项替换为其依赖项列表
action.description.remove.packaging.elements=移除选定元素
action.do.not.mark=不要标记
action.hide.content.text=隐藏内容 {1, choice, 1\# of ''''{0}''''|2\#}
action.mark=标记
action.name.extract.artifact=提取工件…
action.name.facet.navigate=导航
action.name.inline.artifact=内联原型
action.name.remove.packaging.element=移除
action.name.rename.packaging.element=重命名
action.name.text=文本
action.stop.searching=停止搜索
action.text.0.disabled.if.elements.are.sorted={0}(如果对元素进行排序，则禁用)
action.text.add.packaging.element=添加…
action.text.add.to.modules=添加到模块…
action.text.analyze.this.dependency=分析此依赖项
action.text.cancel.exclusion=取消排除
action.text.change.module.names=更改模块名称…
action.text.class.path.move.down=下移(如果各个项按排序顺序显示，则禁用)
action.text.class.path.move.up=上移(如果各个项按排序顺序显示，则禁用)
action.text.convert.to.repository.library=转换为仓库库…
action.text.extract.source.item.into.0=提取到 {0}
action.text.hide.content=隐藏内容
action.text.import.module=导入模块
action.text.inline.module.dependency=内联模块依赖项
action.text.library.0.to.1.copy=复制到 {0}…
action.text.library.0.to.1.move=移至 {0}…
action.text.new.module=新建模块
action.text.pack.element.into.0=打包到 {0}
action.text.put.into.0.and.link.via.manifest=置于 ''{0}'' 并通过清单链接
action.text.put.source.item.into.0=置于 {0}
action.text.sort.elements.by.names.and.types=按名称和类型对元素进行排序
add.external.annotations.path.description=选择模块源的外部注解所在的路径
add.external.annotations.path.title=为外部注解添加路径
add.framework.support.label.version={0} 版本\:
add.group.framework.separator=框架
add.idea.module.label=添加 Intellij IDEA 模块
add.new.global.library.text=新建全局库
add.new.header.text=添加
add.new.jdk.text=添加新SDK
add.new.module.text.full=模块
add.new.project.library.text=新建项目库
add.support.for.single.framework.remove.duplicates.dialog.message={0, choice,1\#已存在一个 {1} 库“{2}”|2\#已存在 {0} 个 {1} 库}。\n是否要替换{0, choice, 1\#它|2\#它们}?
analyze.module.dependency.action.dialog.message.no.dependency.found=找不到任何代码依赖项。{0} 是否移除该依赖项?
analyze.module.dependency.however.exported.by=但是，{4, choice, 1\#已|2\#已}在代码中使用 ''{2}'' 导出的 ''{0}''{3, choice, 0\#|1\# 和“{1}”|2\# 和超过 {3} 个依赖关系}。
analyze.module.dependency.replace.dialog.confirm.replace=是否要将 ''{0}'' 的依赖项替换为{1, choice, 1\#“{2}”的直接依赖项|2\#直接依赖项}?
analyze.module.dependency.replace.dialog.message=找不到直接代码依赖项。{0}\n{1}\n{2}
and.in=并在
artifact.source.items.tree.tooltip=<html>双击元素放入默认位置<br>拖放元素添加到所需位置<br>弹出菜单中有更多操作可用</html>
artifacts.add.copy.action=添加副本
artifacts.create.action=创建 {0}
attach.source.provider.download.sources.action.busy.text=下载源代码…
attach.source.provider.download.sources.action.name=下载源
banner.slogan.artifact.0=工件''{0}''
build.script.found.notification=找到 {0} 构建 {1,choice,1\#脚本|1<脚本}
build.script.found.notification.import={0,choice,1\#加载|2\#全部加载}
build.scripts.from.multiple.providers.found.notification=已找到构建脚本
button.add=添加(&A)
button.add.selected=添加所选项
button.add2=增加(&D)
button.configure=配置(&C)…
button.create=创建(&C)…
button.edit=编辑(&E)
button.edit2=编辑
button.edit3=编辑(&E)…
button.mark.all=标记所有 (&M)
button.reload=重新加载(&R)
button.reload.description=在 {0} 中重新加载 Maven 本地数据
button.remove=移除(&R)
button.remove2=移除
button.reset.defaults=重置默认值
button.set.default=设置默认值
button.stop.searching=停止搜索 (&S)
button.test=测试(&T)
button.text.extract.module=提取
button.text.replace=替换
button.unmark.all=取消标记所有 (&U)
button.unmark.resource=取消标记资源
button.unmark.test.resource=取消标记测试资源
can.t.find.library.for.0=找不到 {0} 的库
checkbox.0.library.files.to.copy=将库文件复制到(&C)\:
checkbox.0.library.files.to.move=将库文件移至(&M)\:
checkbox.annotations=注解(&N)
checkbox.copy.library.files.to=将库文件复制到(&C)\:
checkbox.create.project.from.template=从模板创建项目(&T)
checkbox.create.source.root=创建源根(&C)\:
checkbox.download.annotations=下载注解(&N)
checkbox.download.javadocs=下载 JavaDoc(&J)
checkbox.download.javadocs2=下载 JavaDoc(&J)
checkbox.download.sources=下载源(&S)
checkbox.download.to=下载到\:
checkbox.for.generated.resources=用于生成的资源(&G)
checkbox.include.transitive.dependencies=包括可传递依赖项(&T)
checkbox.javadocs=JavaDoc(&D)
checkbox.move.classes.to.separate.source.root=将类移至单独的源根\:
checkbox.show.content.of.elements=显示元素内容
checkbox.sources=源(&S)
checkbox.text.build.on.make=包含在项目构建中 (&B)
checkbox.transitive.dependencies=可传递依赖项(&T)
choose.module=选择模块
choose.modules.dialog.description=库 ''{0}'' 将被添加到所选模块中。
choose.modules.dialog.title=选择模块
chooser.description.select.directories.which.should.be.excluded.from.the.library.content=选择应从库内容中排除的目录。IDE 不会处理排除目录的内容。
chooser.description.select.directory.where.external.annotations.are.located=选择外部注解所在的目录
chooser.title.attach.external.annotations=附加外部注解
chooser.title.directory.for.library.files=库文件的目录
chooser.title.exclude.from.library=从库中排除
chooser.title.select.directory.containing.module.files=选择包含模块文件的目录
chooser.title.select.file.or.directory.to.import=选择要导入的文件或目录
circular.dependencies.message=循环依赖关系
class.file.decompiled.bytecode.version.text=字节码版本\: {0}.{1}
class.file.decompiled.sdk.version.text=(Java {0})
class.file.decompiled.text=反编译 .class文件
class.file.multi.release.decompiled.text=从 JDK {0} 特定根反编译的 .class 文件
class.file.open.source.action=打开源文件
class.file.open.source.version.specific.action=从库根打开源文件
classpath.add.library.action=库…
classpath.add.module.dependency.action=模块依赖关系…
classpath.add.simple.module.library.action=JAR 或目录…
classpath.chooser.description.add.module.dependency=选择当前模块应该依赖的模块\:
classpath.chooser.title.add.module.dependency=选择模块
classpath.message.library.already.added=库''{0}''已经添加到此模块中
classpath.panel.navigate.action.text=导航
classpath.title.adding.dependency=添加依赖关系…
combobox.item.global.library=全局库
combobox.item.module.library=模块库
combobox.item.project.library=项目库
configurable.ErrorPaneConfigurable.display.name=问题
configurable.FrameworkDetectionConfigurable.display.name=检测
configurable.GlobalLibrariesConfigurable.display.name=全局库
configurable.JdkListConfigurable.display.name=SDK
configurable.ProjectLibrariesConfigurable.display.name=库
configurable.RemoteRepositoriesConfigurable.display.name=远程 Jar 仓库
configurable.artifact.prefix=工件
configurable.empty.text.select.library=在此处选择一个库以查看或编辑其详细信息
configurable.library.prefix=库
copy.module.dialog.title=复制模块
create.default.library.type.action.name=Java
create.module.from.sources.dialog.message.file.not.exist=文件 ''{0}'' 不存在
create.module.from.sources.dialog.message.not.directory=''{0}'' 不是目录
default.project.structure.root.type.name=内容
dependencies.used.in.popup.title=用于
description.select.project.file.directory={0}文件将被存储在该目录
dialog.comment.compile.modules=项目将被编译以查找引用。
dialog.mesage.0.was.not.loaded={0} 未加载。
dialog.message.0.do.you.want.to.proceed={0}\n\n是否要继续?
dialog.message.are.you.sure.you.want.to.delete.this.library=确定要删除此库吗?
dialog.message.artifact.0.already.exists=工件 ''{0}'' 已存在\!
dialog.message.cannot.detect.maven.coordinates=无法从库 JAR 检测 Maven 坐标
dialog.message.cannot.file.copy=无法复制文件 {0}\: {1}
dialog.message.cannot.file.move=无法移动文件 {0}\: {1}
dialog.message.do.you.want=是否要手动搜索 Maven 仓库?
dialog.message.failed.to.extract.module=无法提取模块\: {0}
dialog.message.module.name=模块名称\:
dialog.message.multiple.maven.coordinates=在库 JAR 中找到多个 Maven 坐标
dialog.message.no.files.were.downloaded=未下载任何文件。是否要尝试其他坐标?
dialog.message.no.suitable.modules.for.0.facet.found=找不到适合 {0} facet 的模块
dialog.message.no.suitable.parent.0.facets.found=找不到合适的父级 {0} facet
dialog.message.obsolete.library.files.remover.delete.files=以下所选{0,choice,1\#文件不再|2\#文件不再}使用\: {1}\n是否要删除{0, choice,1\#它|2\#它们}? 您可能无法完全撤消此操作\!
dialog.text.enter.common.prefix=为 {0} 个所选模块的名称指定前缀\:
dialog.text.enter.common.prefix.comment=<html>模块在 IDE 中按照名称进行分组。<br>如果多个模块的名称具有共同前缀，则会显示在一起。</html>
dialog.title.0.library.copy=复制库
dialog.title.0.library.move=移动库
dialog.title.add.framework.0.support=添加 {0} 支持
dialog.title.add.frameworks.support=添加框架支持
dialog.title.add.repository.0=添加 {0}
dialog.title.cannot.change.library.0.copy=无法复制
dialog.title.cannot.change.library.0.move=无法移动
dialog.title.cannot.create.0.facet=无法创建 {0} Facet
dialog.title.cannot.create.facet=无法创建 Facet
dialog.title.cannot.detect.maven.coordinates=无法检测到 Maven 坐标
dialog.title.cannot.import=无法导入
dialog.title.change.module.names=更改模块名称
dialog.title.configure.library.0=配置 {0}
dialog.title.copy.artifact=复制工件
dialog.title.copy.library=复制库
dialog.title.create.library=创建库
dialog.title.download.library.from.maven.repository=从 Maven 仓库下载库
dialog.title.downloading.options=下载选项
dialog.title.edit.library=编辑库
dialog.title.edit.repository.0=编辑 {0}
dialog.title.extract.artifact=提取工件
dialog.title.extract.module.from.package=从软件包中提取模块
dialog.title.failed.to.download.library=无法下载库
dialog.title.include.transitive.dependencies=包括可传递依赖项
dialog.title.libraries.are.required=必须提供库
dialog.title.library.already.exists=库已存在
dialog.title.merge.module.or.library=合并
dialog.title.new.library=新建库…
dialog.title.no.files.were.downloaded=无法下载库
dialog.title.obsolete.library.files.remover.delete.files=删除未使用的文件
dialog.title.project.initialization.failed=项目初始化失败
dialog.title.remove.elements=移除元素
dialog.title.rename.module.or.library.0=重命名{0, choice, 0\#库|1\#模块}
dialog.title.search.library.in.maven.repositories=搜索 Maven 仓库中的库
dialog.title.specify.path.to.new.source.root=指定新源根的路径
dialog.title.split.module.or.library.0=拆分{0, choice, 0\#库|1\#模块}
directory.module.content.root=模块内容根
directory.module.file=模块文件目录
directory.project.file.directory={0}文件目录\n
directory.with.existing.sources=具有<b>现有源</b>的目录
display.name.artifacts=工件
download.javadocs=下载 JavaDoc
download.sources=下载源
downloadable.library.properties.change.version.title=更改版本(&V)…
downloadable.library.type.description={0} 库 {2, choice, 0\# 版本 {1}|1\#}
drag.n.drop.text.0.packaging.elements={0}元素
empty.module.selection.string=在此处选择一个模块以查看或编辑其详细信息
enter.module.copy.name.error.message=输入模块复制的名称
error.cannot.parse.project=无法解析 {0} 项目
error.directory.read.only=目录 ''{0}'' 为只读
error.library.with.name.already.exists=名称为 {0} 的库已存在
error.message.failed.to.download.sources.0=无法下载源\: {0}
error.message.failed.to.save.0=无法保存 {0}
error.message.library.0.already.exists=库 ''{0}'' 已存在
error.message.library.name.is.not.specified=未指定库名称
error.message.module.name.cannot.be.empty=模块名称不能为空
error.message.module.name.prefix.contains.empty.string=前缀必须是由点分隔的单词序列
error.message.module.name.prefix.contains.invalid.chars=前缀必须由可在文件名中使用的字符组成
error.message.no.files.were.downloaded.for.0=未为 {0} 下载任何文件
error.message.please.enter.valid.coordinate.discover.it.or.select.one.from.the.list=请输入有效的坐标，发现它或从列表中选择一个
error.message.please.enter.valid.library.files.path=请输入有效的库文件路径
error.message.required.library.is.not.configured=无法为项目启用{0}，因为{1, choice, 1\#它的库未|2\#它们的库未}配置。
error.message.the.selected.node.belongs.to.0.element.so.it.cannot.be.edited=所选节点属于 ''{0}'' 元素，因此无法对它进行编辑。\n关闭“显示元素内容”复选框以编辑输出布局。
error.message.the.selected.node.consist.of.several.elements.so.it.cannot.be.edited=所选节点由多个元素组成，因此无法对它进行编辑。\n关闭“显示元素内容”复选框以编辑输出布局。
error.module.with.name.already.exists=名称为 {0} 的模块已存在
error.project.undefined=没有定义外部项目配置文件
error.resolve.generic=解析错误
error.resolve.with.log_link=<html>{0}<br><br>请参阅 IDE 日志以获取更多详细信息 (帮助 | <a href\="{1}">显示日志</a>)<html>
error.source.directory.should.be.under.module.content.root.directory=源目录不能在模块内容根目录下
error.title.required.library.is.not.configured=未配置
existing.sources=现有源
facet.banner.text=Facet ''{0}''
facet.defaults.display.name=默认
facet.project.structure.display.text=模块 ''{1}'' 中的 Facet ''{0}''
facet.title=Facet
facet.type.banner.text=''{0}''Facets
facet.will.be.added.to.selected.module={0} facet 将添加到选定模块
feature.profiler.cpu=CPU 和内存分配分析
feature.profiler.description.html=获得有关应用程序性能的<a href\="{0}">洞察</a>，并通过强大的 JVM 分析功能增强应用程序的性能，例如\:
feature.profiler.hints=编辑器内性能提示
feature.profiler.memory=内存快照
feature.spring.config.files=对配置文件的广泛支持
feature.spring.data=智能 JPA 和 SQL 代码辅助
feature.spring.description.html=在 Java 和 Kotlin 代码中使用一组丰富的内置开发者工具和对 Spring 框架的支持，包括 Spring MVC、Spring Data、Spring Security 和 Spring Cloud，功能包括\:
feature.spring.navigation=高级代码导航和可视化功能
feature.spring.run.config=专用运行配置
feature.spring.wizard.description=IntelliJ IDEA Ultimate 中提供了 Spring Boot 集成
file.chooser.directory.for.downloaded.libraries.description=下载的库将被复制到选定的目录
file.chooser.directory.for.downloaded.libraries.title=下载的库的目录
file.location.should.be.absolute={0}位置路径应该是绝对的
find.pointcut.applications.not.found.title=信息
find.usage.view.no.usages.text=未找到任何用法
fix.link.text=修复
framework.support.options.label.versions=版本\:
group.JarRepositoryLibraries.text=JAR 仓库库(&J)
import.module.action.text={0, choice, 0\#导入|1\#}现有源中的{1, choice, 0\# Java |1\#}模块…
import.project.action.text={0, choice, 0\#导入|1\#}现有源中的{1, choice, 0\# Java |1\#}项目…
in=, 在 
info.text.found.0.br.showing.1=<html>找到\: {0}<br>显示\: {1}</html>
intellij.idea.module.file.iml=Intellij IDEA 模块文件(*.iml)
intention.family.maven.libraries=Maven 库
intention.text.add.0.library.to.module.dependencies=将 {0} 库添加到模块依赖项
internet.attach.source.provider.action.busy.text=正在搜索…
internet.attach.source.provider.action.name=下载…
internet.attach.source.provider.action.notification.content.connection.problem=连接问题。请参阅日志了解更多详细信息。
internet.attach.source.provider.action.notification.content.failed.to.create.directory=无法创建目录来存储源\: {0}
internet.attach.source.provider.action.notification.content.sources.for.jar.not.found=找不到 ''{0}.jar'' 的源
internet.attach.source.provider.action.notification.title.downloading.failed=下载失败
internet.attach.source.provider.action.notification.title.sources.not.found=找不到源代码
internet.attach.source.provider.name=附加已下载源
is.used.in=' 用于
item.name.with.module={0} (模块 {1})
ivi.attach.source.provider.action.name=附加来自 Ivy 仓库的源
jar.repository.manager.confirm.reset.default.repositories.dialog.text={0,choice,1\#有|2\#有} {0} 个{0,choice,1\#库|2\#库}绑定到{0,choice,1\#仓库|2\#仓库}。确定要取消绑定{0,choice,1\#该库|2\#所有库}吗?
jar.repository.manager.confirm.reset.default.repositories.dialog.title=确认重置默认仓库
jar.repository.manager.delegate.repository.usages.dialog.label=仓库有 {0} 个绑定{0,choice,1\#库|2\#库}。<br/>选择要将{0,choice,1\#库|2\#库}绑定到的另一个仓库。
jar.repository.manager.delegate.repository.usages.dialog.title=将用法委托给另一个仓库
jar.repository.manager.dialog.resolving.dependencies.title=正在解析 Maven 依赖项{0, choice, 0\#|1\#…}
jar.repository.manager.library.resolve.progress.text=正在加载 {0}
jar.repository.manager.notification.title.downloaded=已下载以下文件\:
jar.repository.manager.progress.text.loading.dependencies=正在加载 {0} 的依赖项
jar.repository.manager.version.resolve.progress.text=正在加载 {0} 版本
jdk.combo.box.none.item=<无>
jdk.detected.items=检测到的 JDK
jdk.download.comment=JDK 将在项目创建时下载并安装
jdk.download.item=下载 JDK…
jdk.download.predefined.item=下载 {0}
jdk.location.error=无法在 ''{0}'' 中安装 JDK
jdk.missing.item=<No JDK>
jdk.missing.item.comment=稍后在“文件 | 项目结构”中配置 JDK。
jdk.missing.item.no.internet.comment=下载 JDK 需要稳定的互联网连接。稍后在“文件 | 项目结构”中配置。
jdk.project.item=项目 JDK
jdk.registered.items=注册的 JDK
jdk.windows.wsl.error=WSL JDK 不能用于设置 Windows 项目
jdk.wsl.windows.error=Windows JDK 不能用于设置 WSL 项目
label.add.to.dependencies=添加到依赖项…
label.add.to.module=添加到模块(&A)\:
label.additional.libraries.and.frameworks=其他库和框架(&F)\:
label.artifact.configurable.type=类型\:
label.available.elements=可用元素
label.bind.remote.repository=绑定远程仓库(&B)
label.build.process.configuration=构建过程配置
label.cannot.load.artifact=无法加载工件
label.component.file.location={0}文件位置\: (&L)
label.copy.downloaded.files.to=将下载的文件复制到(&T)\:
label.description=描述
label.directory.based={0} (基于目录)
label.downloading.options.dialog.version=版本(&V)\:
label.enter.artifact.name=输入工件名称\:
label.enter.library.name=输入库名称\:
label.enter.new.name.for.merge.result=为合并结果输入新名称\:
label.existing.library.will.be.used=将使用 <b>{0}</b> 库
label.failed.to.load.versions=无法加载版本
label.files.to.download=要下载的文件(&F)\:
label.info=信息
label.ipr.file.based=.ipr (基于文件)
label.java.source.files.have.been.found=已找到模块的源文件。请选择将被标记为源路径的目录。这些路径对应于默认(根、未命名、顶层)软件包。\n注\: 程序将仅识别位于这些目录下的源文件。
label.label=标签
label.library.level=级别(&L)\:
label.library.name=名称(&N)\:
label.library.will.be.created.description.text={0}级库 <b>{1}</b> 以及 {2} 个文件将被创建
label.loading.available.versions=正在加载可用版本(&L)…
label.loading.versions=正在加载版本…
label.maven=Maven\:
label.missed.libraries.prefix=以下库丢失\:
label.missed.libraries.text=在模块依赖项列表中找不到 ''{0}'' 库
label.module.name=模块名\: (&M)
label.name=名称(&N)\:
label.new.name.for.0.1={0, choice, 0\#库|1\#模块} ''{1}'' 的新名称\:
label.please.enter.project.name=请输入名称以创建一个新的{0} {1}。
label.project.format=项目格式\:
label.project.format1=项目格式\:
label.project.jdk=项目SDK\:
label.project.layout.panel.name=名称(&N)\:
label.project.roots.have.been.found=已找到项目的源文件。请选择将被添加到项目根的目录。这些路径对应于默认(根、未命名、顶层)软件包。\n注\: 程序将仅识别位于这些目录下的源文件。
label.project.roots.not.found=找不到项目源文件。
label.project.wizard.new.project.build.system=构建系统\:
label.project.wizard.new.project.jdk=JDK\:
label.relative.output.path=相对输出路径(&P)\:
label.remove.all.unused.libraries=移除所有未使用的库
label.remove.invalid.roots=移除无效的{0, choice, 0\#根|1\#根}
label.remove.library=移除库
label.select.artifact.type=选择工件类型(&T)\:
label.select.content.roots.to.extract.to.new.module=选择您想提取到新模块的内容根(&S)\:
label.select.jars.to.extract.to.new.library=选择您想提取到新库的 JAR(&S)\:
label.select.project.type.to.configure=选择要配置的项目类型
label.source.directory=以下目录将被标记为源码目录\:
label.text.no.frameworks.detected=未检测到框架。
label.text.output.directory=输出目录\:
label.text.please.select.desired.technologies=<html>请选择所需技术。<br>这将下载所有需要的库，并在项目配置中创建 Facet。</html>
label.text.specify.artifact.name=指定工件名称(&N)\:
label.text.the.following.frameworks.are.detected=<html>在项目中检测到多个框架。请检查以下条目并排除错误检测到的条目。</html>
label.unloaded.module=已卸载模块 ''{0}''
label.use.library=使用库\:
label.version=版本(&V)\:
label.x.unloaded.modules={0} 个已卸载模块
language.level.combo.experimental.versions=实验版
language.level.combo.supported.versions=支持的版本
language.level.combo.unsupported.versions=不支持的版本
layout.tree.check.can.remove.dialog.message=所选节点属于{1, choice, 1\#“{0}”元素。|2\#{1} 个元素。}是否要{1, choice, 1\#从工件移除整个“{0}”元素?|2\#从工件移除所有元素?}
libraries.layout.step.description=检查检测到的库。在此阶段，您可以设置将在该项目中使用的库名称，从项目中排除特定库或在库之间移动各个文件。
libraries.remove.confirmation.text=库 ''{0}'' 和其他 {1} 个{1, choice, 1\#库|2\#库} 正在项目中使用。\n确定要删除所有选定库吗?
libraries.remove.confirmation.title=移除{0, choice, 1\#库|2\#库}
library=库
library.0=库 ''{0}''
library.0.is.not.used=未使用库 {0}
library.attach.sources.action=附加源
library.attach.sources.action.busy.text=正在附加…
library.attach.sources.description=选择库源所在的JAR/ZIP文件或目录
library.choose.one.to.attach=选择要附加源代码的库
library.classes.node=类
library.configure.title=配置库
library.depends.on.ide.fix.convert.to.repo=将 {0} 转换为 Maven 库
library.depends.on.ide.message=库 {0} 使用来自 IDE 安装的 JAR。如果从未来版本的 IDE 中删除 JAR，则它可能会中断。{1}
library.depends.on.ide.message.can.be.replaced=可以将它替换为 Maven 工件 {0}
library.depends.on.ide.message.jar.mixture=它还包含其他不可能自动替换的 JAR。请考虑重做
library.depends.on.ide.message.replacement.not.found=然而，还没有找到直接的 Maven 替代品。请考虑重做
library.depends.on.ide.title=IDE 安装中对 JAR 的依赖
library.detection.dialog.message.stop.library.analysis=停止库分析?
library.jars.change.coordinates.action.title=更改坐标…
library.jars.diff.dialog.0.jars.differ.from.1.library.jars={0} JAR 与 ''{1}'' 库 JAR 不同。
library.java.attach.files.description=选择库类、源、文档或原生库所在的文件或目录
library.javadocs.node=JavaDoc
library.name.already.exists.error=库 ''{0}'' 已存在
library.name.already.exists.title=库已经存在
library.name.is.not.specified=未指定库名
library.name.not.specified.error=请输入库名
library.name.not.specified.title=库名未指定
library.options.panel.existing.library.combobox.label.no.library.selected=[未选择库]
library.options.panel.update.state.download.files.message={0} {0, choice, 1\#JAR|2\#JAR} 将被下载到 <b>{1}</b> 目录<br>{2} 库 <b>{3}</b> 将被创建
library.options.panel.update.state.error.library.is.not.specified=<b>错误\:</b> 未指定库
library.options.panel.update.state.library.from.0.will.be.used=将使用 {0} 的库
library.project.structure.invalid.roots.description=库 {0} 已经丢失 {1} {2, choice, 0\#路径|1\#路径}\:
library.remove.action=移除
library.root.node=根
library.source.item.label.empty.library=空库
library.source.item.label.invalid.library=无效的库
library.source.mismatch=库源与类 {0} 的字节码不符
library.source.open.class=打开 .class文件
library.source.show.diff=展示差异
library.sources.node=源
library.unnamed.text={0}和{1, choice, 1\#另一个文件|2\#{1}个文件}
library1=库 '
message.cannot.import.anything.from.0=无法从 {0} 导入任何内容
message.no.module.dependency.candidates=未发现要依赖的模块
message.text.creating.deployment.descriptor=创建部署描述
message.text.dependencies.were.successfully.collected.in.0.toolwindow=已在“{0}”工具窗口中成功收集依赖关系
message.text.error.creating.deployment.descriptor=创建部署项目错误\:{0}
message.text.stop.searching.for.frameworks={0} 目前正在搜索框架。要停止搜索吗?
modal.text.importing.module=正在导入…
modification.imported.model.warning.label.text={0} 从 {1} 导入。对其配置做出的任何更改在重新导入后可能丢失。
module.0.already.exists.error.message=模块''{0}''已存在
module.add.error.message=向项目添加模块时出错\: {0}
module.add.error.title=添加模块
module.circular.dependency.warning.description=以下项之间存在循环依赖关系\:
module.circular.dependency.warning.short={0}之间存在循环依赖关系
module.classpath.button.edit=编辑(&I)…
module.detection.dialog.message.stop.module.analysis=停止模块分析?
module.group.banner.text=模块组 ''{0}''
module.insight.scan.progress.text.building.modules.layout=正在构建模块布局…
module.insight.scan.progress.text.scanning=正在扫描 {0}
module.javadoc.add.path.prompt=选择模块javadoc文档的JAR/zip文件或目录
module.javadoc.add.path.title=添加路径到JavaDoc
module.javadoc.add.url.button=添加 JavaDoc URL…
module.javadoc.title=JavaDoc\:
module.libraries.attach.sources.button=附加源(&S)…
module.libraries.choose.sources.button=选择源(&S)…
module.libraries.target.jdk.module.radio=模块SDK (&M)\:
module.module.language.level=语言级别(&L)\:
module.name.location.dialog.message.enter.module.file.location=输入模块文件位置
module.name.location.dialog.message.enter.module.name=输入模块名称
module.name.location.dialog.message.error.content.root=无法将目录 ''{0}'' 设置为内容根
module.name.location.dialog.message.error.module.file.location=无法将目录 ''{0}'' 设置为模块文件位置
module.name.location.dialog.message.module.already.exist.in.project=模块 ''{0}'' 已存在于项目中。请指定其他名称。
module.new.action={0, choice, 0\#新建|1\#}{1, choice, 0\#Java |1\#}模块…
module.new.action.description=向项目添加新模块
module.paths.exclude.output.checkbox=排除输出目录
module.paths.output.label=输出目录\:
module.paths.output.title=选择输出目录
module.paths.searching.source.roots.progress=搜索{0}中的源根
module.paths.searching.source.roots.title=添加源根
module.paths.test.output.label=测试输出目录\:
module.paths.test.output.title=选择测试输出目录
module.paths.validation.duplicate.content.error=为 ''{1}'' 和 ''{2}'' 定义了内容根 ''{0}''。\n项目中的两个模块不能共享相同的内容根。
module.paths.validation.duplicate.source.root.error=模块 ''{0}''\n不得包含源根 ''{1}''。\n该根已属于模块 ''{2}''
module.paths.validation.duplicate.source.root.in.same.module.error=源根 ''{0}'' 在模块 ''{1}'' 中重复。
module.paths.validation.source.root.belongs.to.another.module.error=源根 ''{0}''\n无法在模块 ''{1}'' 中定义，因为它属于嵌套模块 ''{2}'' 的内容
module.remove.confirmation=从项目中移除{1, choice, 1\#模块“{0}”|2\#{1} 个模块}?\n不会删除磁盘上的文件。
module.remove.confirmation.title=移除{0, choice, 1\#模块|2\#模块}
module.remove.last.confirmation=确定要从此项目中移除{0, choice, 1\#唯一的模块|2\#所有模块}吗?\n不会删除磁盘上的文件。
module.sdk.not.defined=未定义模块 JDK
module.structure.step.description=审查此项目的建议模块结构。在此阶段，您可以设置模块名称、排除此项目中的特定模块、合并或拆分单个模块。\n模块之间的所有依赖项以及库中的依赖项都会自动更新。
module.wizard.dialog.title={1, choice, 0\#|1\#从 {2}} 导入{0, choice, 0\#项目|1\#模块}
modules.order.export.export.column=导出
modules.order.export.scope.column=作用域
multiple.facets.banner.0.1.facets={0} {1} facet
new.library.file.chooser.description=选择jar文件所在的本地类库
new.library.file.chooser.title=新的库文件
new.project.action.text={0, choice, 0\#新建|1\#}{1, choice, 0\#Java |1\#}项目…
no.facets.are.configured=未配置 Facet
notification.action.text.show.dependencies=显示依赖项
notification.content.libraries.reloaded={0, choice, 0\#没有任何库|1\#一个库|2\#{0} 个库} 成功重新加载
notification.content.no.files.were.downloaded=尚未为 {0} 下载任何文件
notification.content.no.files.were.downloaded.multiple=尚未为 {0} 和其他 {1} 个下载任何文件
notification.content.none.module.dependencies.can.be.safely.removed=无法安全移除模块 ''{0}'' 的任何一个依赖项
notification.content.transitive.dependencies.were.added={1,choice,0\#|1\#}仍在使用的模块 ''{0}''{1,choice,0\#|1\# 以及另外一个模块|2\# 以及另外 {1} 个模块}上的可传递{1,choice,0\#依赖项|1\#依赖项}{1,choice,0\#|1\#}已作为{1,choice,0\#直接依赖项|1\#直接依赖项}添加。
notification.content.unused.dependencies.were.removed=模块 ''{0}''{1,choice,0\#|1\# 以及另外一个模块|2\# 以及另外 {1} 个模块}上的{1,choice,0\#依赖项|1\#依赖项}{1,choice,0\#|1\#}已被移除。<br>在提取新模块后，{1,choice,0\#此依赖项|1\#这些依赖项}变为未使用状态。{2}
notification.group.build.script.found=已找到构建脚本
notification.text.duplicated.urls.were.removed=从 {0} 中移除了重复的 URL。这些 URL 之所以重复，是由于以前的 {1} 版本中存在错误，并且可能会导致性能问题。
notification.title.dependencies.were.cleaned.up=已清理 ''{0}'' 的依赖项
notification.title.downloading.failed=下载失败
notification.title.io.error=IO 错误
notification.title.repository.libraries.cleanup=仓库库清理
notification.title.repository.library.synchronization=仓库库同步
output.tab.title=输出
path.0.is.invalid.error.message=路径 ''{0}'' 无效
popup.reload.failed.result=库 {0} 重新加载失败
popup.reload.success.result=库 {0} 已成功重新加载
popup.title.select.library.type=选择库类型
popup.title.surround.with=环绕方式…
precompile.library.resolution.failure=无法解析 Maven 库 {0}\: {1}
precompile.library.resolution.start=正在解析 Maven 库 {0}
progress.details.building.library.dependencies.for.module=正在为模块 {0} 构建库依赖关系
progress.details.building.module.dependencies.for.module=正在为模块 {0} 构建模块依赖关系
progress.searching.for.sources=正在{0}中搜索源代码. 请稍候…
progress.step.extract.module.analyzing.dependent.modules=正在分析依赖模块
progress.step.extract.module.building.dependencies=正在为新模块构建依赖项
progress.step.extract.module.collecting.dependent.modules=正在收集依赖于 ''{0}'' 的模块
progress.step.extract.module.collecting.used.classes=正在收集 ''{0}'' 中使用的类
progress.step.extract.module.extracting=正在创建新模块
progress.step.extract.module.preparing.to.extract=正在准备提取单独的模块
progress.text.building.initial.libraries.layout=正在为库构建初始布局…
progress.text.processing.0.project.roots=正在处理 {0} 个项目根…
progress.text.scanning.for.libraries=正在扫描库 {0}
progress.text.searching.for.libraries=正在搜索库。请稍候。
progress.text.searching.for.modules=正在搜索模块。请稍候。
progress.text.searching.frameworks=正在搜索框架。请稍候。
progress.title.0.library.files={0}库文件
progress.title.downloading=正在下载 {0}…
progress.title.downloading.sources=正在下载源
progress.title.extract.module.from.package=正在将软件包 ''{0}'' 提取到单独的模块中
progress.title.searching.for.redundant.dependencies=正在搜索 ''{0}'' 中的冗余依赖项
progress.title.searching.source=正在搜索源…
project.configurable.dialog.message=项目名称为必选项
project.directory.is.already.taken=目录 ''{0}'' 已被项目 ''{1}'' 占用。请选择其他位置。
project.directory.is.not.writable=目录 ''{0}'' 似乎不可写。请选择其他位置。
project.facets.display.name=Facet
project.import.default.name=从{0}导入的
project.import.default.name.dotIdea=从{0}导入的
project.import.open.existing=''{1}''中存在{0}。\n要打开现有项目，还是将其删除并导入 ''{2}''?
project.import.open.existing.openExisting=打开现有项目
project.import.open.existing.reimport=删除现有项目并导入
project.import.select.title=选择{0}导入项目
project.import.show.settings.after=导入后打开项目结构 (&O)
project.import.wizard.title=从 {0} 导入
project.inherit.compile.output.path=继承项目编译输出路径
project.jdks.configurable.empty.selection.string=在此处选择一个 SDK 以查看或编辑其详细信息
project.language.level.combo.item=项目默认
project.module.compile.output.path=使用模块编译输出路径
project.new.wizard.from.existent.sources.description=<html>在现有来源上创建{0} {1}结构</html>
project.new.wizard.from.existent.sources.title=从现有项目创建 {0} (&E)
project.new.wizard.import.description=<html>从外部模型({2})创建{0} {1}</html>
project.new.wizard.import.title=从外部模型导入{0} (&M)
project.new.wizard.module.content.root.chooser.description=所选目录将被标记为模块内容根
project.new.wizard.module.content.root.chooser.title=选择模块内容根
project.new.wizard.module.file.chooser.title=选择模块文件父目录
project.new.wizard.module.file.description=模块 .iml 文件将被放置在所选目录中
project.new.wizard.module.file.title=模块文件位置 (&U)\:
project.new.wizard.module.name.title=模块名称(&M)\:
project.new.wizard.module.root.title=内容根 (&R)\:
project.new.wizard.progress.title=初始化…
project.or.module.jdk.misconfigured={0, choice, 0\#项目|1\#模块} JDK 配置不正确
project.roots.classpath.format.default.descr=IntelliJ IDEA (.iml)
project.roots.classpath.format.label=依赖存储格式\:
project.roots.display.name=模块
project.roots.error.message.invalid.roots=无效 {0} {1, choice, 1\#根|2\#根}
project.roots.external.annotations.description=管理附加到此模块的外部注解。
project.roots.external.annotations.tab.title=外部注解\:
project.roots.javadoc.tab.description=管理附加到此模块的外部 JavaDoc。<br>外部 JavaDoc 会重写模块中可能具有的 JavaDoc 注解。
project.roots.jdk.banner.text=SDK ''{0}''
project.roots.library.banner.text={1} ''{0}''
project.roots.library.problem.message=依赖关系列表中的无效项''{0}''
project.roots.module.banner.text=模块 ''{0}''
project.roots.module.duplicate.name.message=重复的模块名称
project.roots.module.groups.text=模块组用于逻辑组织项目模块。
project.roots.module.jdk.problem.message=模块SDK未定义
project.roots.native.library.node.text=原生库位置
project.roots.no.jdk.on.project.message=在项目中设置创建的SDK?
project.roots.no.jdk.on.project.title=创建 SDK
project.roots.output.compiler.title=编译器输出
project.roots.path.tab.title=路径
project.roots.plain.mode.action.text.disabled=隐藏模块分组
project.roots.plain.mode.action.text.enabled=显示模块分组
project.roots.project.banner.text=项目 ''{0}'' 的常规设置
project.roots.project.jdk.problem.message=项目SDK未定义
project.roots.replace.library.entry.message=您确实要替换旧的库 ''{0}'' 吗
project.roots.replace.library.entry.title=库已经添加
project.roots.tooltip.library.has.broken.paths=库 ''{0}'' 具有中断的{1, choice, 1\#路径|2\#路径}。
project.sdk.not.defined=未定义项目 JDK
project.settings.display.name=项目结构
project.settings.title=项目设置
project.settings.wizard.label.project.format=项目格式(&F)\:
project.structure.automatically.detected.notification=已根据项目源自动配置项目
project.structure.automatically.detected.notification.configure.action=手动配置…
project.structure.automatically.detected.notification.gotit.action=知道了
project.structure.comment=所有模块的默认设置。根据需要在模块页面上为每个模块配置这些形参。
project.structure.compiler.output=编译器输出\:
project.structure.compiler.output.comment=用于相应源代码的模块子目录、生产目录和测试目录。
project.structure.configurable.reset.text=正在重置项目结构
project.structure.dialog.title.choose.libraries=选择库
project.structure.empty.text=<html><body><center>在此处选择要查看或编辑其详细信息的设置</center></body></html>
project.structure.name=名称\:
project.structure.platform.title=平台设置
project.structure.sdk=SDK\:
project.structure.title=项目
project.wizard.sdk.preindexing.progress.title=正在预索引 SDK…
projects.settings.wizard.expert.decorator.separator.title=更多设置(&E)
promo.configurable.profiler=Java 分析器
prompt.confirm.project.no.jdk=是否要在不指定 SDK 的情况下创建项目?\n编译、调试和运行应用程序以及标准 SDK 类解析都需要 SDK。
prompt.enter.project.file.location=输入{0}文件位置
prompt.enter.relative.path.to.module.content.root=为模块内容根输入相对路径  (例如\: java{0}src)\:
prompt.new.project.file.name=输入文件名来创建新的{0}{1}
prompt.overwrite.project.folder={0} 文件夹已存在于 {1} 中。\n其内容可能会被覆盖。\n是否继续?
prompt.please.select.module.jdk=选择{0}设为此模块
prompt.please.select.project.jdk=请选择项目 SDK。此 SDK 默认将由所有项目模块使用。
prompt.please.specify.java.sources.directory=请指定从中可以找到项目源文件的目录。\n此路径应对应于默认(根、未命名、顶层)软件包。\n注\: 程序将仅识别位于这些目录下的源文件。
prompt.project.wizard.directory.does.not.exist={0}''{1}''\n不存在。它将由 {2} 创建。
prompt.relative.path.to.sources.empty=源代码的相对路径为空。\n要将模块内容根\n''{0}''\n标记为源目录吗?
prompt.select.source.directory=选择源代码目录
prompt.stop.searching.for.sources={0} 当前正在搜索源。是否停止搜索?
quarantine.clean.progress=隔离清除器状态
quarantine.cleaner=隔离清理器
quarantine.dialog.message=操作系统将以下文件夹标记为“隔离”，可能是因为它们是从互联网下载的。从这些文件夹打开文件可能无法按预期工作。是否要清除隔离状态?\n{0}
quarantine.error.message=清除隔离状态时出错\: {0}
radio.button.download=下载(&D)
radio.button.set.up.library.later=稍后设置库(&L)
radio.button.use.library=使用库(&U)\:
radio.button.use.library.from.0=使用 {0} 中的库
radio.create.source.directory=创建源码目录 (&C)
radio.do.not.create.source.directory=不要创建源码目录 (&D)
refresh.library.roots.action.name=刷新库根
rename.message.prefix.module=模块
rename.module.title=重命名模块
repository.attach.dialog.caption.label=用于搜索的关键字或类名或确切的 Maven 坐标，如 'spring'、'Logger' 或 'ant\:ant-junit\:1.6.5'
repository.library.bind.repository.not.selected=<无绑定仓库>
repository.library.properties.include.transitive.dependencies=包括可传递依赖项(&T)
repository.library.root.action.attach.annotations.text=附加注解…
repository.library.type.action.name.label=来自 Maven…
repository.library.type.maven.description=Maven\: {0}
repository.library.utils.library.update.title=Maven 库更新
repository.library.utils.notification.action.open.project.structure=打开“项目结构”对话框
repository.library.utils.notification.content.libraries.resolve.fail=无法解析库\: <code>{0}</code><br/>{1, choice, 0\#|1\#和其他 1 个。|2\#和其他 {1} 个。}请在“项目结构设置”中检查绑定远程仓库。
repository.library.utils.notification.content.libraries.resolve.fail.before.update=更新已取消，无法解析库。请检查库绑定仓库设置\:<code>{0}</code>
repository.library.utils.notification.content.libraries.resolve.success={0, choice, 0\#没有要解析的内容|1\#已解析 1 个库|2\#已解析 {0} 个库}
repository.library.utils.notification.content.library.bind.repo.guess.failed=无法为以下对象猜测远程仓库\: <code>{0}</code><br/>{1, choice, 0\#|1\#和其他 1 个。|2\#和和其他 {1} 个。}请在“项目结构设置”中手动选择远程仓库。
repository.library.utils.notification.content.library.properties.built={0, choice, 0\#没有更新库。|1\#已成功更新 1 个库\: 已构建扩展属性。|2\#已成功更新 {0} 个库\: 已构建扩展属性。}
repository.library.utils.notification.content.library.properties.cleared={0, choice, 0\#无更新|1\#已更新 1 个库\: 已清除扩展属性|2\#已更新 {0} 个库\: 已清除扩展属性}
repository.library.utils.notification.content.nothing.to.update=没有要更新的内容
repository.library.utils.progress.checking.resolution=正在检查可被解析的更新{0, choice, 1\#库|2\#库}{1, choice, 0\#|1\#…}
repository.library.utils.progress.details.complete.for=补全 {1} 的 {0}
repository.library.utils.progress.text.computing.properties=正在计算库的扩展属性
repository.library.utils.progress.text.resolving.before.update=更新前正在解析库
repository.library.utils.progress.text.saving.changes=正在保存库更改
repository.library.utils.progress.text.verifying.resolution.after.update=更新后正在验证库解析
repository.library.utils.progress.title.binding.remote.repos=Maven 库远程仓库绑定
repository.library.utils.progress.title.building.sha256sum=Maven 库 SHA256 校验和构建
repository.library.utils.progress.title.libraries.changed=Maven 库更新
repository.library.utils.progress.title.removing.sha256sum=Maven 库 SHA256 校验和移除
repository.library.utils.progress.title.resolving.all.libraries=正在解析所有 Maven 库
repository.library.utils.progress.title.unbinding.remote.repos=Maven 库远程仓库取消绑定
sdk.configure.annotations.tab=注解
sdk.configure.classpath.tab=类路径
sdk.configure.editor.title=SDK编辑器
sdk.configure.javadoc.tab=文档路径
sdk.configure.save.settings.error=无法保存设置
sdk.configure.sourcepath.tab=源路径
sdk.configure.title=配置SDK
sdk.missing.item=<无 SDK>
sdk.paths.specify.url.button=指定 URL…
sdk.setting.step.label={0, choice, 0\#项目|1\#模块} &SDK\:
section.title.resource.folders=资源文件夹
section.title.test.resource.folders=测试资源文件夹
select=选择
select.imported.projects.dialog.message.nothing.found=未找到要导入的内容
select.imported.projects.dialog.title.unable.to.proceed=无法继续操作
select.in.project.settings=项目结构
select.parent.facet=选择父 Facet
settings.label.project.format=项目格式\:
settings.remote.repo.Maven.Repository.URL=maven 仓库 URL
settings.remote.repo.artifactory.or.nexus=Artifactory 或 Nexus 服务 URL
settings.remote.repo.artifactory.or.nexus.service.urls=Artifactory 或 Nexus 服务 URL\:
settings.remote.repo.maven.jar.repositories=Maven Jar 仓库\:
settings.remote.repo.maven.repository.url=Maven 仓库 URL
settings.remote.repo.no.remote.repositories=无远程仓库
settings.remote.repo.no.repositories.found=找不到仓库
settings.remote.repo.no.services=无服务
settings.remote.repo.repositories.found={0} 个 {0, choice, 1\#仓库|2\#仓库} 已找到
settings.remote.repo.service.connection.failed=服务连接失败
settings.remote.repo.service.connection.successful=服务连接成功
settings.remote.repo.service.url=服务 URL
setup.library.dialog.title=安装库
show.dependencies=显示依赖关系
tab.name.all.facets=全部Facets
tab.title.module.dependencies=''{0}'' 的依赖项
tab.title.output.layout=输出布局
task.searching.for.project.sources=正在检测项目结构…
task.title.comparing.jar.files=正在比较 JAR 文件…
text.press.button.to.add.new.facet=按 '+' 按钮添加新 Facet
title.directory.does.not.exist=目录不存在
title.libraries=库
title.library.contents=库内容
title.mark.source.directory=标记源目录
title.module.dependencies=模块依赖项
title.modules=模块
title.no.jdk.specified=未指定 SDK
title.question=问题
title.resources=资源
title.select.project.file.directory=选择{0}文件目录
title.test.resources=测试资源
tooltip.text.dependency.was.rejected=依赖项在冲突解决期间被拒绝
unnamed.title=<未命名>
warning.message.some.required.libraries.wasn.t.downloaded=某些必需库未被下载。是否要在缺少这些库的情况下继续?
warning.message.the.module.file.0.already.exist.and.will.be.overwritten=项目文件 ''{0}'' 已存在。
warning.text.0.do.you.want.to.overwrite.these.files={0}覆盖{1,choice,1\#该|2\#这些}文件吗?
x.more.problems=其他 {0} 个问题…
