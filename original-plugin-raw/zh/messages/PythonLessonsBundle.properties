#Need to translate in pair with action.EditorToggleCase.text key!
toggle.case.part=大小写

python.onboarding.module.name=入门导览
python.onboarding.module.description={0} 中的主要功能概览。

python.onboarding.lesson.name=熟悉 PyCharm
python.onboarding.project.view.description=<strong>项目视图</strong>是主要工具窗口之一。它包含项目目录、SDK 特定的外部库和临时文件。点击带条纹的按钮可以预览演示项目。您也可以按 {0} 打开。
python.onboarding.balloon.project.view=点击以打开<strong>项目视图</strong>
python.onboarding.balloon.project.directory=展开项目目录以查看项目文件
python.onboarding.balloon.open.file=双击以打开 {0}
python.onboarding.balloon.open.learn.toolbar=切换到“{0}”工具窗口继续学习本课
python.onboarding.context.menu=您已经打开了演示，现在来运行该演示。右键点击编辑器以调用上下文菜单。
python.onboarding.run.sample=选择 {0} 或尝试 {1}。
python.onboarding.temporary.configuration.description=<ide/> 刚刚创建了一个临时运行配置。您可以在“运行”工具栏中找到此配置。使用此工具栏，您可以为所选配置执行常用的运行操作，例如运行 {0}、调试 {1}、分析代码 {2} 以及运行代码覆盖率 {3}。
python.onboarding.balloon.click.here=点击此处设置断点
python.onboarding.toggle.breakpoint.1=您可能会注意到 {1} 方法没有返回预期值 {0}，而是返回 {2}。我们来查看 return 语句，调试有问题的代码。
python.onboarding.toggle.breakpoint.2=点击高亮显示区域内的间距以设置断点。
python.onboarding.balloon.start.debugging=点击该图标以开始调试
python.onboarding.start.debugging=点击 {0} 图标启动调试过程。
python.onboarding.balloon.about.debug.panel={0} 工具窗口为{1,choice,0#工具栏|1#工具栏}提供了各种调试操作。您可以稍后在 {2} 课程中进行尝试。
python.onboarding.balloon.stop.debugging=点击该图标以停止调试
python.onboarding.stop.debugging=停止调试。点击 {0} 图标。
python.onboarding.type.division=发现代码中的问题后，我们来进行修正。将得到的和除以值的长度。课程脚本已插入 {0}。
python.onboarding.invoke.completion=接下来，我们开始在括号 {1} 内输入 {0}。<ide/> 会在您输入时自动显示补全选项。或者，您也可以按 {2} 并继续输入以缩短列表。
python.onboarding.choose.values.item=选择 {0} 并按 {1}。
python.onboarding.invoke.intention.for.warning.1=您刚刚修正了一个错误，但还可以进一步改进这段代码。PyCharm 将高亮显示可以改进的代码行，并为这些行添加黄色灯泡。
python.onboarding.invoke.intention.for.warning.2=按 {0} 预览警告并应用快速修复。
python.onboarding.select.fix=应用第一个条目: {0}。执行此修正后，代码会看起来很整洁。
python.onboarding.invoke.intention.for.code=意图也可以节省您的时间，让编码更轻松。我们来使用意图快速添加 {0} 的返回类型。按 {1}。
python.onboarding.apply.intention=选择 {0} 并按 {1}。
python.onboarding.complete.template=键入 {0}，然后按 {1}。
python.onboarding.invoke.search.everywhere.1=在 <ide/> 中进行处理时，您可能想要搜索项目中的文件、符号、类，乃至 IDE 操作。在本课中，我们将搜索 {0} 操作，以将 {1} 字符串改为小写。
python.onboarding.invoke.search.everywhere.2=按两次 {0} 以打开“{1}”对话框。
python.onboarding.search.everywhere.description=可以看到，所选文本 {0} 已被自动复制到输入字符串中。我们不键入 {0}，而是键入 {1}。
python.onboarding.apply.action=选择“{0}”操作，然后按 {1}。
python.onboarding.case.changed=大小写已更改。
python.onboarding.epilog=恭喜! 您已完成入门导览。此时，您可以:\n\
  - <callback id="{0}">关闭</callback>学习项目{1}\n\
  - <callback id="{2}">显示</callback>更多教程

python.onboarding.finish.title=恭喜
python.onboarding.finish.text=您刚刚完成了 PyCharm 入门导览。\n\
现在可以关闭学习项目{0}。\n\
您也可以继续学习，尝试其他课程。
python.onboarding.finish.exit=关闭演示项目
python.onboarding.finish.modules=显示更多课目

python.3.required.warning.message=要完成本课，请根据 Python 3 <callback id="{0}">配置解释器</callback>。

python.f.string.completion.lesson.name=F-string 补全
python.f.string.completion.type.prefix=<ide/> 支持 f-string 自动转换。只需开始键入 {0}。
python.f.string.completion.invoke.manually=您可以使用 {0} 手动调用补全。
python.f.string.completion.complete.it=用 {0} 补全语句。只需按 {1} 即可应用第一个条目。
python.f.string.completion.result.message=您可能会看到，在补全后，简单的 Python 字符串已替换为 f-string。

python.postfix.completion.type=在圆括号后面键入 {0}，以查看建议列表。
python.postfix.completion.complete=从列表中选择 {0}，然后按 {1} 补全语句。

python.smart.completion.try.basic.completion=按 {0} 尝试使用基本补全。
python.smart.completion.use.smart.completion=很遗憾，<ide/> 没有直接关于 {0} 类型的信息。但有时它可以通过上下文提供补全建议! 使用 {1} 调用智能补全。
python.smart.completion.finish.completion=现在选择 {0} 条目即可完成本课。

python.tab.completion.lesson.name=选项卡补全
python.tab.completion.start.completion=假设您要将 {0} 替换为 {1}。按 {2} 调用补全。
python.tab.completion.select.item=使用键盘箭头选择 {0} 条目或者开始键入。
python.tab.completion.use.tab.completion=如果按 {0}，将在 {2} 前面插入 {1}。改为按 {3} 将 {2} 替换为 {1}。

python.in.place.refactoring.lesson.name=就地重构
python.in.place.refactoring.start.type.new.name=考虑一种执行重构的替代方法。假设我们想将局部变量 {0} 重命名为 {1}。您只需开始键入新名称。
python.in.place.refactoring.invoke.intentions=<ide/> 猜测您将要重命名此变量。从间距中的 {0} 图标可以看到它。键入新名称后，通过 {1} 调用意图。
python.in.place.refactoring.finish.rename=按 {0} 结束重命名。
python.in.place.refactoring.add.parameter=为该方法添加一个实参。我们将编辑器文本光标放在第一个形参后面。现在输入逗号和形参名称: {0}。
python.in.place.refactoring.invoke.intention.for.parameter=<ide/> 预计您将更改此方法的签名。在间距中可以看到相同的图标 {0}。键入新参数的名称后，按 {1} 调用意图。
python.in.place.refactoring.update.callers=按 {0} 更新调用方。
python.in.place.refactoring.signature.preview=<ide/> 向您显示简短的签名预览。按 {0} 继续。
python.in.place.refactoring.set.default.value=现在需要键入作为参数插入到每个调用的值。对于此例，您可以选择 {0}。然后按 {1} 继续。
python.in.place.refactoring.remark.about.application.scope=注意: 就地重构只能在定义点应用，而直接调用重命名或变更-签名重构可以从定义和用法中调用。

python.quick.fix.refactoring.lesson.name=快速修复重构
python.quick.fix.refactoring.type.new.argument=有些重构可以作为快速修复来执行。假设我们要向方法 {0} 添加一个参数并将变量 {1} 传递给它。在第一个参数后面键入 {2}。
python.quick.fix.refactoring.close.completion.list=我们暂时不想应用任何补全。关闭列表 ({0})。
python.quick.fix.refactoring.invoke.intentions=您可能会注意到，<ide/> 在此处显示警告。按 {0} 调用意图。
python.quick.fix.refactoring.choose.change.signature=选择 {0} 快速修复。
python.quick.fix.refactoring.select.new.parameter=为新参数设置默认值。点击新参数行。您也可以先按 {0} 后按 {1}，将焦点切换到该参数。
python.quick.fix.refactoring.set.default.value=您可以使用 {0} 导航字段和复选框。在选中该复选框的情况下，<ide/> 会将默认值内联到其他调用方，或将其设置为新参数的默认值。签名预览有助于您了解区别。现在，将默认值设置为 0。
python.quick.fix.refactoring.finish.refactoring=按 {0} (或点击 {1}) 以补全重构。

python.rename.press.rename=按 {0} 并重命名 {1} 字段 (例如重命名为 {2})。
python.rename.expand.dynamic.references=在简单的情况下，{0} 未经确认就执行重命名重构。但在此例中，<ide/> 检测到类型未知的对象两次调用 {0} 方法。展开 {1} 条目。
python.rename.find.window.closed.warning=按 {0} 再次打开查找工具窗口。
python.rename.exclude.item=似乎应从重命名重构中排除 {0}。将其选定，然后按 {1}。
python.rename.finish.refactoring=使用 {0} 按钮完成重命名重构。

python.editor.coding.assistance.fix.error=我们来修正此错误。按 {0} 并选择 {1} 或 {2} <strong>→ math</strong>
python.editor.coding.assistance.press.to.fix=按 {0} 移除意外参数。

python.run.configuration.lets.run=我们来用 {0} 运行一个简单示例。

python.debug.workflow.rerun=重新运行程序。只需再次点击 {0} 或使用 {1}。

python.onboarding.interpreter.description=PyCharm 已经为本课程配置了一个 Python 解释器。您可以对它进行修改或为您的项目创建另一个解释器。最简单的方式是使用状态栏中的 Python 解释器选择器。
choose.python.sdk.to.start.learning.header=需要 Python 解释器
python.onboarding.change.ui.settings=在本课中，PyCharm 会将某些 UI 设置更改为默认状态。完成或退出课目后，将恢复您的偏好设置。
python.onboarding.indexing.description=第一次打开项目时，<ide/> 会扫描 Python SDK 和项目本身，以收集编码辅助所需的详细信息。要继续，请等待索引完成。
python.f.string.completion.help.link=F-string 补全
python.smart.completion.help.link=类型匹配补全
python.in.place.refactoring.help.rename.link=就地重命名代码
python.in.place.refactoring.help.signature.link=就地更改签名
python.quick.fix.refactoring.help.link=更改签名
python.run.configuration.help.link=代码运行辅助
python.debug.workflow.help.link=第 1 部分. 调试 Python 代码
python.onboarding.feedback.system.found.interpreters=找到的解释器:
python.onboarding.feedback.system.no.interpreters=无
python.onboarding.feedback.system.used.interpreter=使用的解释器:
python.onboarding.interpreter.tip=<strong>提示：</strong>您可以在此了解您的 Python 解释器设置
python.onboarding.feedback.system.start.interpreter=启动解释器：
no.interpreter.in.learning.project=无法配置解释器，请尝试<callback id="{0}">手动</callback>配置。
no.interpreter.in.user.project=找不到 Python解释器，请<callback id="{0}">打开</callback>演示 Python 项目以自动设置解释器，或者点击<callback id="{1}">这里</callback>手动设置。