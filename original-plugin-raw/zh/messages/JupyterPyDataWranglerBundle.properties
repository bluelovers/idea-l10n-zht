JupyterStringTransformationCondition.capitalize.first.character=将第一个字符大写
JupyterStringTransformationCondition.convert.to.lower.case=转换为小写
JupyterStringTransformationCondition.convert.to.upper.case=转换为大写
RoundType.ceil=向上取整
RoundType.floor=向下取整
RoundType.round=四舍五入取整
SkewedTransformationType.logarithmic=对数
SkewedTransformationType.square.root=平方根
action.DataWrangler.Jupyter.Cell.Export.description=将生成的代码导出到单元
action.DataWrangler.Jupyter.Cell.Export.text=在 {0} 中新建 DW 单元
action.DataWrangler.Jupyter.Code.Export.description=将生成的代码导出到单元
action.DataWrangler.Jupyter.Code.Export.text=在 {0} 中新建单元
action.DataWrangler.Jupyter.Notebook.Export.description=将生成的代码导出到新 Notebook
action.DataWrangler.Jupyter.Notebook.Export.text=新建 Notebook…
action.DataWrangler.Jupyter.Python.Script.Export.description=将生成的代码导出到新的 Python 文件
action.DataWrangler.Jupyter.Python.Script.Export.text=新建 Python 脚本…
action.DataWrangler.Jupyter.Show.description=在 Data Wrangler 中编辑表
action.DataWrangler.Jupyter.Show.text=在 Data Wrangler 中编辑
action.DataWrangler.TableFile.Show.description=在 Data Wrangler 中编辑表
action.DataWrangler.TableFile.Show.text=在 Data Wrangler 中编辑
action.DataWranglerPyTablePanel.Show.description=使用 Data Wrangler 打开或隐藏面板
action.DataWranglerPyTablePanel.Show.text=Data Wrangler
action.JupyterAddDataWranglerCellAction.description=插入 Data Wrangler 单元
action.JupyterAddDataWranglerCellAction.text=Data Wrangler
action.JupyterConvertDataWranglerToCodeAction.description=将单元转换为代码单元
action.JupyterConvertDataWranglerToCodeAction.text=将单元转换为代码(_C)
action.JupyterDataWranglerEditAction.description=在 data wrangler 中编辑
action.JupyterDataWranglerEditAction.text=_在 Data Wrangler 中编辑
action.JupyterDataWranglerInputNamePopup.text.before.variable=从变量转换
action.JupyterDataWranglerOutputNamePopup.text.before.variable=保存到
data.wrangler.jupyter.cell.empty.action.link=添加转换
data.wrangler.jupyter.cell.link.text=在 Data Wrangler 中编辑
data.wrangler.jupyter.command.changeType.description=将类型 {0} 修改为 {1}
data.wrangler.jupyter.command.changeType.description.hint.text=更改列的数据类型。确保为分析提供正确的数据表示。
data.wrangler.jupyter.command.changeType.label=更改类型\: {0}
data.wrangler.jupyter.command.changeType.name=更改列的类型
data.wrangler.jupyter.command.drop.description=从数据帧中移除列 {0}
data.wrangler.jupyter.command.drop.description.hint.text=永久移除 DataFrame 中的某一列。当某些特征不再需要时使用。
data.wrangler.jupyter.command.drop.label=删除列\: {0}
data.wrangler.jupyter.command.drop.name=拖放列
data.wrangler.jupyter.command.dropRows.description=删除从 {0} 到 {1} 范围内的行
data.wrangler.jupyter.command.dropRows.description.hint.text=根据索引号移除特定行。有助于消除不需要的观测值。
data.wrangler.jupyter.command.dropRows.label=删除行\: {0} 至 {1}
data.wrangler.jupyter.command.dropRows.name=删除行
data.wrangler.jupyter.command.duplicates.description=删除列中的重复行
data.wrangler.jupyter.command.duplicates.description.hint.text=移除指定列中具有相同值的行。有助于清理冗余数据。
data.wrangler.jupyter.command.duplicates.label=移除重复项\: {0}
data.wrangler.jupyter.command.duplicates.name=移除重复项
data.wrangler.jupyter.command.encoding.description={0} 列的独热编码
data.wrangler.jupyter.command.encoding.description.hint.text=将分类变量转换为二进制列。对于准备机器学习的分类数据至关重要。
data.wrangler.jupyter.command.encoding.label=独热编码\: {0}
data.wrangler.jupyter.command.encoding.name=独热编码分类变量
data.wrangler.jupyter.command.fillMissing.description=使用 {1} 填充列 {0} 中的缺失值
data.wrangler.jupyter.command.fillMissing.description.hint.text=将缺失值替换为指定值。有助于在不删除行的情况下维护数据完整性。
data.wrangler.jupyter.command.fillMissing.label=填充缺失值\: {0}
data.wrangler.jupyter.command.fillMissing.name=填充缺失
data.wrangler.jupyter.command.filter.condition.equal=等于
data.wrangler.jupyter.command.filter.condition.greater=大于
data.wrangler.jupyter.command.filter.condition.greaterOrEqual=大于或等于
data.wrangler.jupyter.command.filter.condition.less=小于
data.wrangler.jupyter.command.filter.condition.lessOrEqual=小于或等于
data.wrangler.jupyter.command.filter.condition.notEqual=不等于
data.wrangler.jupyter.command.filter.description=带有条件\: {0} {1}
data.wrangler.jupyter.command.filter.description.hint.text=根据等于、大于或小于等条件筛选数据。有助于聚焦特定的数据子集。
data.wrangler.jupyter.command.filter.label={0} {1} 列
data.wrangler.jupyter.command.filter.name=筛选
data.wrangler.jupyter.command.handleOutliersWithED.description=使用阈值为 {0} 的 ED 移除 {1} 中的异常值
data.wrangler.jupyter.command.handleOutliersWithED.description.hint.text=使用到中心的欧几里得距离查找异常值。有助于检测数据中的异常模式。
data.wrangler.jupyter.command.handleOutliersWithED.label=欧几里得距离异常值\: {0}
data.wrangler.jupyter.command.handleOutliersWithED.name=使用欧几里得距离检测异常值
data.wrangler.jupyter.command.handleOutliersWithIQR.description=使用乘数为 {0} 的 IQR 移除列 {1} 中的异常值
data.wrangler.jupyter.command.handleOutliersWithIQR.description.hint.text=使用四分位距法检测并移除异常值。有助于识别异常数据点。
data.wrangler.jupyter.command.handleOutliersWithIQR.label=IQR 异常值\: {0}
data.wrangler.jupyter.command.handleOutliersWithIQR.name=使用 IQR 的异常值检测
data.wrangler.jupyter.command.handleOutliersWithMAD.description=使用阈值为 {0} 的 MAD 移除列 {1} 中的异常值
data.wrangler.jupyter.command.handleOutliersWithMAD.description.hint.text=使用中位数绝对偏差识别异常值。与标准差相比，对极端值更可靠。
data.wrangler.jupyter.command.handleOutliersWithMAD.label=MAD 异常值\: {0}
data.wrangler.jupyter.command.handleOutliersWithMAD.name=使用 MAD 的异常值检测
data.wrangler.jupyter.command.handleSkewed.description=对列 {1} 应用 {0} 变换以减少偏斜
data.wrangler.jupyter.command.handleSkewed.description.hint.text=应用转换来减少数据偏斜。有助于归一化数据分布。
data.wrangler.jupyter.command.handleSkewed.label=减少偏斜\: {0}
data.wrangler.jupyter.command.handleSkewed.name=减少偏斜
data.wrangler.jupyter.command.init.description=创建新的 DataFrame 变量
data.wrangler.jupyter.command.init.label=复制 Python DataFrame 变量
data.wrangler.jupyter.command.init.name=复制 DataFrame
data.wrangler.jupyter.command.minMax.description=使用 Min-Max 对列 {0} 进行归一化，最小值\: {1} 到最大值\: {2}
data.wrangler.jupyter.command.minMax.description.hint.text=将数值缩放到 0 到 1 之间的范围。机器学习预处理的关键步骤。
data.wrangler.jupyter.command.minMax.label={0} 中的 Min-Max
data.wrangler.jupyter.command.minMax.name=Min-Max 缩放
data.wrangler.jupyter.command.miss.description=删除 {0} 中缺少数据的行
data.wrangler.jupyter.command.miss.description.hint.text=移除指定列中包含缺失值(NaN, None)的行。
data.wrangler.jupyter.command.miss.label=删除缺失值\: {0}
data.wrangler.jupyter.command.miss.name=删除缺失值
data.wrangler.jupyter.command.remove.description=移除缺失的行
data.wrangler.jupyter.command.remove.description.hint.text=移除所有列中包含 NaN 值的行。可以快速获取干净、完整的数据。
data.wrangler.jupyter.command.remove.label=移除 Na
data.wrangler.jupyter.command.remove.name=移除具有 NaN 值的行
data.wrangler.jupyter.command.removeCols.description=移除多列 {0}
data.wrangler.jupyter.command.removeCols.description.hint.text=一次移除多个列。可以简化清理未使用特征的过程。
data.wrangler.jupyter.command.removeCols.label=移除列
data.wrangler.jupyter.command.removeCols.name=移除多列
data.wrangler.jupyter.command.replace.description=从 {0} 到 {1}
data.wrangler.jupyter.command.replace.description.hint.text=查找并替换数据中的特定值或模式。支持精确匹配和正则表达式。
data.wrangler.jupyter.command.replace.label=在 {1} 列中{0}
data.wrangler.jupyter.command.replace.name=查找并替换
data.wrangler.jupyter.command.round.description=将列 {1} 中的值四舍五入到小数点后 {0} 位
data.wrangler.jupyter.command.round.description.hint.text=将数值四舍五入到指定的小数位数。在需要时提高可读性。
data.wrangler.jupyter.command.round.label=将数值四舍五入\: {0}
data.wrangler.jupyter.command.round.name=将数值四舍五入
data.wrangler.jupyter.command.split.description=按分隔符 {1} 拆分列 {0}，最多拆分 {2} 个
data.wrangler.jupyter.command.split.description.hint.text=根据分隔符将一列拆分为多列。有助于拆分复杂的文本字段。
data.wrangler.jupyter.command.split.label=拆分列\: {0}
data.wrangler.jupyter.command.split.name=拆分列
data.wrangler.jupyter.command.standardization.description=将列 {0} 转换为平均值为 0 和标准差为 1
data.wrangler.jupyter.command.standardization.description.hint.text=将数据归一化为零均值和单位方差。用于统计分析和机器学习。
data.wrangler.jupyter.command.standardization.label={0} 的 Z 分数
data.wrangler.jupyter.command.standardization.name=Z 分数归一化
data.wrangler.jupyter.command.string.transform.description={0} 中的 {0}，转换为 {1}
data.wrangler.jupyter.command.string.transform.description.hint.text=应用文本转换，如小写、大写或首字母大写。标准化文本数据格式。
data.wrangler.jupyter.command.string.transform.label=转换字符串自\: {0}
data.wrangler.jupyter.command.string.transform.name=使用字符串转换列
data.wrangler.py.local.file.init.description=创建新的 DataFrame 变量
data.wrangler.py.local.file.init.label=将表数据导出到 DataFrame 变量
data.wrangler.py.local.file.init.name=创建 DataFrame
jupyter.cell.wrangler.variable.popup.text=使用 Python 变量\:
unknown.command.0=未知命令 {0}
