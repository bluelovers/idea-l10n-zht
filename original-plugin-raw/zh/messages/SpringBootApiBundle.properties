DefineLocalMetaConfigKeyFix=定义配置键
DefineLocalMetaConfigKeyFix.define.properties.configuration.key=定义属性配置键
DefineLocalMetaConfigKeyFix.define.yaml.configuration.key=定义 YAML 配置键
SpringBootConfigFileHighlightingUtil.cannot.resolve.configuration.property=无法解析配置属性 ''{0}''
SpringBootConfigFileHighlightingUtil.deprecated=已弃用\: {0}
SpringBootConfigFileHighlightingUtil.deprecated.configuration.property=弃用的配置属性 ''{0}''
SpringBootReplacementTokenCompletionContributor.configure.replacement.tokens=配置替换令牌…
SpringBootReplacementTokenCompletionContributor.press.again.to.show.replacement.tokens=再次按 {0} 显示替换令牌
additional.config.deprecated.property=属性 'deprecated' 应替换为 'deprecation'
additional.config.missing.required.parameter=缺少所需的 {0, choice, 1\#形参|1<形参}\: {1}
additional.config.missing.required.property=缺少必需 ''{0}''
additional.config.text.should.end.with.dot=文本应以 '.' 结尾
additional.config.unresolved.config.key.reference=无法解析配置键引用 ''{0}''
additional.config.unresolved.provider=无法解析提供程序 ''{0}''
additional.config.usage.type=Spring Boot 附加配置元数据
additional.params.table.add=添加形参
additional.params.table.empty.text=未添加形参。
additional.params.table.name=名称
additional.params.table.quick.doc=应用程序属性快速文档
additional.params.table.value=值
application.config.duplicate.entry=''{0}'' 的重复条目
application.config.missing.closing.bracket=缺少结束 ']'
application.config.missing.index.value=缺少索引值
application.config.missing.map.key=缺少映射键
application.config.non.integer.index=索引值必须是整数
application.config.rename.description=重命名与 Spring 配置文件 ''{0}'' 匹配的 Spring Boot 配置文件
application.config.rename.entity.name=文件
application.config.rename.option=Spring Boot 配置文件
application.config.rename.title=重命名 Spring Boot 配置文件
application.config.replacement.quick.fix=使用替换键 ''{0}''
application.config.replacement.quick.fix.family.name=使用替换键
application.config.spring.profiles.completion.tail=\ (为此文档定义配置文件)
application.config.usage.type=Spring Boot 配置文件
banner.unresolved.property=无法解析属性 ''{0}''
configuration.properties.constructor.binding.component=已使用 @ConstructorBinding 注解但被定义为了 Spring 组件
configuration.properties.duplicated.prefix=前缀重复
configuration.properties.gutter.icon.name=配置属性
configuration.properties.no.duplicates.found=未找到前缀 ''{0}'' 的重复项
configuration.properties.not.registered=未通过 {0} 注册、标记为 Spring 组件或通过 {1} 扫描
configuration.properties.not.registered.below.2.2=未通过 {0} 注册或标记为 Spring 组件
configuration.properties.prefix.must.be.in.canonical.form=前缀必须采用规范形式
configuration.properties.prefix.must.be.non.empty=前缀为空
configuration.properties.prefix.must.be.specified=未指定前缀
configuration.properties.related.config.file.line.marker.popup.title=Spring Boot 配置文件
configuration.properties.related.config.file.line.marker.tooltip=在 Spring Boot 配置文件中的用法
configuration.properties.related.config.file.task.base.title=配置属性 ''{0}.{1}''
configuration.properties.related.config.file.task.caption=<html><body><b>{0}</b> 的用法 ({1}) </body></html>
configuration.properties.related.config.file.task.details=目前已发现 {0}
configuration.properties.related.config.file.task.details.finished=已找到 {0} 个
configuration.properties.related.config.file.task.title=正在搜索 {0} 的用法
configuration.properties.show.duplicates=显示重复项
configuration.properties.show.duplicates.for.prefix=前缀 ''{0}'' 的重复项
goto.hint.tooltip=导航到{0,choice,1\#提示|1<提示}
icon.icons.SpringBoot.tooltip=Spring Boot
icon.icons.SpringBoot_Overlay.tooltip=Spring Boot
logical.spring.auto.configurations=自动配置
logical.spring.configured.properties=配置的属性
logical.spring.properties.default=默认属性
logical.spring.properties.group.others=其他
notification.group.request.mappings=Spring Boot 应用程序请求映射
runtime.beans.class.gutter.icon.name=运行时 Bean
runtime.beans.xml.gutter.icon.name=运行时 Bean (XML)
runtime.conditions.gutter.icon.name=运行时条件
spring.boot.additional.config.metadata.inspection.key=无效的 additional-spring-configuration-metadata.json
spring.boot.application.already.applies.annotation=@{0} 已应用 @{1}
spring.boot.application.already.applies.given.annotation=@{0} 已应用给定的 @{1}
spring.boot.application.attribute.in.wrong.annotation=应通过 @{0} 指定特性
spring.boot.application.endpoints.application.is.starting=''{0}'' 正在启动
spring.boot.application.endpoints.error.actuator.starter.add.dependency=添加对 spring-boot-starter-actuator 的依赖以将其启用
spring.boot.application.endpoints.error.actuator.starter.added=Actuator 依赖项已添加。
spring.boot.application.endpoints.error.actuator.starter.disabled=Spring Boot Actuator 未启用。
spring.boot.application.endpoints.error.actuator.starter.loading.changes=正在加载更改
spring.boot.application.endpoints.error.actuator.starter.not.added=无法添加 Actuator 依赖项\:
spring.boot.application.endpoints.error.actuator.starter.not.reloaded=无法重新加载项目
spring.boot.application.endpoints.error.actuator.starter.restart=重启应用程序
spring.boot.application.endpoints.error.caused.by=原因\: {0}\: {1}
spring.boot.application.endpoints.error.failed.to.retrieve.endpoint.data.detailed=无法检索 ''{0}'' 端点数据\:
spring.boot.application.endpoints.updated.at=于 {0} 更新
spring.boot.application.in.default.package=默认软件包中的 Spring Boot 应用程序
spring.boot.application.properties.inspection.key=无效的属性配置
spring.boot.application.redundant.declaration=冗余声明\: {0}
spring.boot.application.setup.inspection.key=无效的 Spring Boot 应用程序设置
spring.boot.application.yaml.inspection.key=无效的 YAML 配置
spring.boot.config.chooser.dialog.title=选择自定义配置文件
spring.boot.config.files.add.ad=使用(+)添加自定义位置中的配置文件
spring.boot.config.files.name.setting=Spring Boot\: {0} 值
spring.boot.config.files.section.title=应用程序配置文件
spring.boot.config.properties.inspection.key=无效的 @ConfigurationProperties
spring.boot.configuration.key.value.quick.info=“{0}”[{1}]
spring.boot.custom.config.files.locations=Spring Boot\: 自定义 bootstrap 配置文件位置
spring.boot.customization.action.description=自定义 Spring Boot 自动检测到的上下文
spring.boot.customization.action.name=自定义 Spring Boot…
spring.boot.customization.add.config.files.action=添加自定义配置文件
spring.boot.customization.dialog.config.not.set=(未设置，使用默认 ''{0}'')
spring.boot.customization.dialog.config.tree.tooltip=取消选中可移除自定义配置文件
spring.boot.customization.dialog.no.configs=未找到与模式 ''{0}'' 匹配的配置文件
spring.boot.customization.dialog.title=Spring Boot 上下文 ''{0}''
spring.boot.diagnostics.auto.config.progress=正在检查自动配置类…
spring.boot.diagnostics.conditional.on.progress=正在收集 @ConditionalOnXXX 注解…
spring.boot.diagnostics.config.keys.progress=正在检查配置键…
spring.boot.diagnostics.module.info.progress=正在收集模块信息…
spring.boot.diagnostics.progress=正在收集 Spring Boot 诊断…
spring.boot.imports.file.type.description=Spring Boot 导入
spring.boot.imports.file.type.name=Spring Boot 导入
spring.boot.imports.registration.title=选择注册
spring.boot.imports.registration.tooltip=导航到导入注册
spring.boot.intention.category=Spring Boot
spring.boot.metadata.goto.related.item.group.name=Spring Boot 元数据
spring.boot.name=Spring Boot
spring.boot.non-strict.conditional.evaluation=Spring Boot\: 非严格 @Conditional 求值
spring.boot.profile=分析
spring.boot.properties.file.not.associated.with.json=文件 ''{0}'' 未与 {1} 文件类型关联
spring.boot.properties.invalid.json=''{0}'' 中有无效的 JSON 结构
spring.boot.properties.json.metadata.create=为 ''{0}'' 创建 Spring Boot 元数据文件
spring.boot.properties.no.json.metadata.hint=找不到其他元数据文件。将创建一个新文件
spring.boot.properties.no.json.metadata.popup=在以下目录为 ''{0}'' 创建元数据文件\:
spring.boot.properties.no.resources.roots=在模块 ''{0}'' 中未找到资源根
spring.boot.reactor.hooks.on.debug.inspection=初始化 ReactorDebugAgent 时调用 Hooks.onOperatorDebug()
spring.boot.reactor.hooks.on.debug.quickfix=移除 Hooks.onOperatorDebug() 调用
spring.boot.reactor.inspection.key=可疑的 Hooks.onOperatorDebug() 用法
spring.boot.replacement.token.label=替换令牌\:
spring.boot.settings.create.run.configuration=自动创建运行配置(&R)
spring.boot.settings.create.run.configuration.tooltip=(重新)导入时添加 Spring Boot 运行配置(如果尚不存在)
spring.boot.settings.initializr=项目导入
spring.data.no.driver.class.inspection.description=Driver class {0} not found in dependencies
spring.data.no.driver.class.inspection.name=Spring Data driver class availability
spring.data.no.driver.dependency.fix=添加对 {0} 的依赖关系
