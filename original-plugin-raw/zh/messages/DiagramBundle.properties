UML=UML
abstract=抽象(&B)
action.Diagram.AnalyzeGraph.AutoClustering.text=自动聚类…
action.Diagram.AnalyzeGraph.DropCentralityValues.text=删除中心性标签
action.Diagram.AnalyzeGraph.DropClustering.text=删除聚类
action.Diagram.AnalyzeGraph.DropFocus.text=删除焦点
action.Diagram.AnalyzeGraph.FocusOnCycles.text=聚焦于循环…
action.Diagram.AnalyzeGraph.FocusOnNodeNeighbourhood.text=聚焦于节点邻近区域…
action.Diagram.AnalyzeGraph.FocusOnPathsBetweenTwoNodes.text=聚焦于两个节点之间的路径…
action.Diagram.AnalyzeGraph.FocusOnSelectedNodes.text=聚焦于所选节点
action.Diagram.AnalyzeGraph.MeasureCentrality.text=测量中心性…
action.Diagram.AnalyzeGraph.ShowCharacteristics.text=显示图特性…
action.Diagram.CopyToClipboardGroup.Dot.text=作为 Graphviz DOT
action.Diagram.CopyToClipboardGroup.DotWithPositions.text=作为具有位置的 Graphviz DOT
action.Diagram.CopyToClipboardGroup.Mermaid.text=作为 Mermaid
action.Diagram.CopyToClipboardGroup.Plantuml.text=作为 PlantUML
action.Diagram.DeleteSelection.text=删除
action.Diagram.DeselectAll.text=取消全选
action.Diagram.ExportToFileGroup.Dot.text=Graphviz .dot
action.Diagram.ExportToFileGroup.DotWithPositions.text=带位置的 Graphviz.dot
action.Diagram.ExportToFileGroup.Graphml.text=YEd .graphml
action.Diagram.ExportToFileGroup.Mermaid.text=Mermaid .md
action.Diagram.ExportToFileGroup.Mxgraph.text=JGraph .drawio
action.Diagram.ExportToFileGroup.Plantuml.text=PlantUML
action.Diagram.Layout.CustomLayouter.text=图特定
action.Diagram.OpenInOnlineEditorGroup.Dot.text=Graphviz Online
action.Diagram.OpenInOnlineEditorGroup.DotWithPositions.text=带位置的 Graphviz Online
action.Diagram.OpenInOnlineEditorGroup.Graphml.text=yEd Live
action.Diagram.OpenInOnlineEditorGroup.Mermaid.text=Mermaid Live
action.Diagram.OpenInOnlineEditorGroup.Mxgraph.text=JGraph diagrams.net
action.Diagram.OpenInOnlineEditorGroup.Plantuml.text=PlantUML Web 服务器
action.Diagram.OpenSettings.text=打开图表设置
action.Diagram.RefreshDataModelManually.text=刷新数据模型
action.Diagram.SearchItemOnWeb.text=使用 Google 搜索
action.Diagram.SelectAll.text=全选
action.ShowUmlDiagram.text=显示图…
action.ShowUmlDiagramPopup.text=显示图弹出窗口…
action.UML.Find.text=查找元素图
action.UML.SaveDiagram.text=IDEA .uml
action.UML.ShowChanges.text=以 UML 显示本地更改
action.UML.ShowStructure.text=查看结构
action.Uml.CollapseNodes.text=收起节点
action.Uml.ExpandNodes.text=展开节点
action.Uml.NewElement.text=新建
action.Uml.NodeIntentions.text=显示节点的意图
action.Uml.ShowDiff.text=以 UML 显示差异
action.name.add.elements2=添加元素
action.name.add.note=添加注释
action.name.change.ordering.to.0=将条目顺序更改为 {0}
action.name.change.scope.to.0=将作用域更改为 {0}
action.name.change.visibility.to.0=将可见性更改为 {0}
action.name.collapse.nodes=收起节点
action.name.create.line=创建行
action.name.deselect.all=取消全选
action.name.disable.category=禁用 {0}
action.name.enable.category=启用 {0}
action.name.expand.nodes=展开节点
action.name.safe.delete=安全删除
action.name.save.diagram=保存图
action.name.select.all=全选
action.name.set.edge.creation.mode=设置边缘创建模式
action.name.show.dependencies=显示依赖项
action.name.show.diagram.structure=显示图结构
action.text.show.0.1=显示 {0}{1}…
add.class.to.diagram=将类添加到图…
add.element.to.diagram=向图中添加元素
add.modules.libraries=添加模块和库…
add.new.enum.constant.title=向 {0} 添加新的枚举常量
add.new.field.title=向 {0} 添加新字段或常量
add.note.action.title=注释
add.note.no.docs.found=未找到任何文档
add.note.with.docs.action.title=使用元素文档进行备注
annotation.class.cant.be.extended.or.implemented=注解不能继承/实现其他类/接口
building.diagram=构建 {0}
can.t.save.diagram.to.0=无法将图保存到 {0}
cant.annotate.class.0=无法注解类 {0}
cant.create.element=无法在目录 {1} 中创建 {0}
category.name.all=所有
category.name.constants=常量
category.name.constructors=构造函数
category.name.dependencies=依赖项
category.name.details=详细信息
category.name.fields=字段
category.name.inner.classes=内部类
category.name.methods=方法
category.name.properties=属性
category.name.show.borders=显示边框
category.name.show.neighbours.of.selected.nodes=显示所选节点的近邻
category.name.show.paths.root.selection=显示路径\: 根 → 选区
change.list.contains.too.many.files=更改列表 ''{0}'' 包含超过 {1} 个文件
change.ordering.group.text=更改项目顺序
change.scope.group.text=更改作用域
change.visibility.group.text=更改可见性级别
changes.for.revision.0=修订 {0} 的更改
class.is.readonly=''{0}'' 为只读类
class.must.be.abstract.or.implement.methods=类 ''{0}'' 必须声明为 abstract 或实现所需的 abstract 方法
class.must.be.abstract.title=实现方法或声明抽象类
color.descriptor.annotation.edge=边缘//注解边缘
color.descriptor.bad.edge=边缘//坏边缘
color.descriptor.bend=弯曲//弯曲
color.descriptor.coarse.grid=粗网格
color.descriptor.default.edge=边缘//默认边缘
color.descriptor.fine.grid=细网格
color.descriptor.generalization.edge=边缘//泛化边缘
color.descriptor.highlighted.node=节点//高亮显示节点边框
color.descriptor.hot.spot=热点
color.descriptor.inner.class.edge=边缘//内部类边缘
color.descriptor.node.background=节点//节点背景
color.descriptor.node.border=节点//节点边框
color.descriptor.node.header=节点//节点标头
color.descriptor.node.sloppy.background=节点//概览节点背景
color.descriptor.note.background=注释//注释背景
color.descriptor.note.border=注释//注释边框
color.descriptor.note.sloppy.background=注释//概览注释背景
color.descriptor.port=端口
color.descriptor.realization.edge=边缘//实现边缘
color.descriptor.selected.bend=弯曲//弯曲选区
color.descriptor.selected.edge=边缘//边缘选区
color.descriptor.selected.node=节点//所选节点边框
color.descriptor.selection.box.background=选择框//选择框背景
color.descriptor.selection.box.border=选择框//选择框边框
color.descriptor.snap.lines=对齐行
command.edit.note=编辑注释
configurable.UmlConfigurable.display.name=图表
configurable.display.name.diagrams=图表
constant.in.interface.must.have.initializer=接口中的常量必须具有初始值设定项
create.method=创建(&C)
create.new.constructor.dialog.title=创建新构造函数
create.new.method.dialog.title=创建新方法
creates.a.relationship.between.nodes=创建节点之间的关系
default.layout=默认布局(&L)\:
default.scope=默认作用域(&S)\:
dependencies=依赖项
dependencies.for.module=模块 ''{0}'' 的依赖
diagram.auto.clustering=自动聚类…
diagram.auto.clustering.cluster=集群
diagram.build.progress.building.data.model=正在构建数据模型…
diagram.build.progress.finishing.diagram.build=正在完成…
diagram.build.progress.opening.diagram=正在打开图
diagram.build.progress.preparing.data=正在准备数据…
diagram.build.progress.starting.data.model.build=正在开始数据模型构建…
diagram.computing.characteristics=正在计算图表特征…
diagram.edge.origins=边缘原点
diagram.export.progress=正在导出…
diagram.focus.view.no.path.has.been.found.notification=未找到路径
diagram.focusview.focus.view=焦点视图
diagram.graph.characteristics.average.degree=平均度数\:
diagram.graph.characteristics.average.degree.context.help=<i>平均度数</i>衡量边数与节点数的比较，定义为\: <code>numberOfEdges / numberOfNodes</code>
diagram.graph.characteristics.contains.multiple.edges=包含多重边\:
diagram.graph.characteristics.contains.multiple.edges.context.help=如果两条不同的边 <code>e1, e2</code> 在任意方向上连接相同的节点对，它们被称为<i>多重边</i>。
diagram.graph.characteristics.contains.self.loops=包含自循环\:
diagram.graph.characteristics.contains.self.loops.context.help=如果一条边的源和目标是同一个节点，它被称为<i>自循环</i>
diagram.graph.characteristics.density=密度\:
diagram.graph.characteristics.density.context.help=<i>密度</i>是图的边数与可能的最大边数之比，定义为\: <code>numberOfEdges / (numberOfNodes * (numberOfNodes - 1))</code>
diagram.graph.characteristics.edge.count=边计数\:
diagram.graph.characteristics.edge.count.context.help=图中的边数量
diagram.graph.characteristics.group.common=通用
diagram.graph.characteristics.group.connectivity=连接性
diagram.graph.characteristics.group.cycles=周期
diagram.graph.characteristics.is.acyclic=无环\:
diagram.graph.characteristics.is.acyclic.context.help=如果图不包含有向环，它被称为<i>无环</i>图
diagram.graph.characteristics.is.biconnected=双向连通\:
diagram.graph.characteristics.is.biconnected.context.help=如果图没有割点或连接点(即没有被移除时会断开图的节点)，它被称为<i>双向连通</i>图
diagram.graph.characteristics.is.bipartite=二分\:
diagram.graph.characteristics.is.bipartite.context.help=如果一个图的节点可以划分为两个集合，使得每条边连接不同集合中的两个节点，它被称为<i>二分</i>图
diagram.graph.characteristics.is.connected=连通\:
diagram.graph.characteristics.is.connected.context.help=如果每对节点之间存在边的无向路径，该图被称为<i>连通</i>图
diagram.graph.characteristics.is.forest=森林\:
diagram.graph.characteristics.is.forest.context.help=如果图的连通组件为树形，它被称为<i>森林</i>图
diagram.graph.characteristics.is.planar=可平面\:
diagram.graph.characteristics.is.planar.context.help=如果一个图可以在平面上画出来而没有边相交，它称为<i>可平面</i>图
diagram.graph.characteristics.is.simple=简单\:
diagram.graph.characteristics.is.simple.context.help=如果图包含两条不同的边 <code>e1, e2</code>，其中 <code>e1.source()</code> 等于 <code>e2.source()</code> 且 <code>e1.target()</code> 等于 <code>e2.target()</code>，它被称为<i>简单</i>图
diagram.graph.characteristics.is.strongly.connected=强连通\:
diagram.graph.characteristics.is.strongly.connected.context.help=如果每对节点之间都存在有向路径，它被称为<i>强连通</i>图
diagram.graph.characteristics.is.tree=树\:
diagram.graph.characteristics.is.tree.context.help=如果图为无圈连通图，则其称为<i>树</i>图
diagram.graph.characteristics.no=否
diagram.graph.characteristics.node.count=节点计数\:
diagram.graph.characteristics.node.count.context.help=图中的节点数量
diagram.graph.characteristics.yes=是
diagram.layout.ar.tree=紧凑
diagram.layout.balloon=气球
diagram.layout.balloon.edge.bundled=边缘捆绑(气球)
diagram.layout.channel=通道
diagram.layout.circular=循环
diagram.layout.circular.edge.bundled=边缘捆绑(圆形)
diagram.layout.compact.orthogonal=紧凑
diagram.layout.component=组件
diagram.layout.custom=自定义
diagram.layout.directed.orthogonal=定向(从下至上)
diagram.layout.family.tree=系列
diagram.layout.generic.tree=泛型
diagram.layout.hierarchic=分层
diagram.layout.hierarchic.compact=分层紧凑
diagram.layout.hv.tree=宽
diagram.layout.on.category.switch.never=从不
diagram.layout.on.category.switch.with.current.layouter=使用当前布局器
diagram.layout.on.category.switch.with.light.layouter=使用简易布局器
diagram.layout.organic=有机
diagram.layout.organic.edge.bundled=边缘捆绑(有机)
diagram.layout.orthogonal.groups=正交群
diagram.layout.radial=径向
diagram.layout.radial.edge.bundled=边缘捆绑(径向)
diagram.layout.random=随机
diagram.layout.series.parallel=串并联
diagram.layout.single.cycle=单循环
diagram.measuring.centrality=正在测量中心性…
diagram.node.item.style=节点项样式
diagram.node.style.plain=纯
diagram.node.style.with.types.aligned=类型对齐
diagram.path.finding=路径查找…
diagram.scope.all=所有
diagram.scope.non-project.files=非项目文件
diagram.scope.production=生产
diagram.scope.project.files=项目文件
diagram.scope.tests=测试
diagram.settings.appearance.title=外观
diagram.settings.enable.animations=启用动画(&A)
diagram.settings.layout.title=布局
dialog.description.save.uml.class.diagram.as.uml=将 UML 类图另存为 .uml
dialog.diagram.auto.clustering=自动聚类
dialog.diagram.auto.clustering.biconnected=双向连通组件
dialog.diagram.auto.clustering.biconnected.description=将对节点进行分组，以便每个组中的节点是双向连通的。属于多个双向连通组件的节点将仅分配给其中一个组件。
dialog.diagram.auto.clustering.button.title=运行
dialog.diagram.auto.clustering.edge.betweenness=边介数
dialog.diagram.auto.clustering.edge.betweenness.description=在每次迭代中，将具有最高介数中心性的边从图中移除。如果没有更多要移除的边，或者如果找到了请求的最大组数，则该方法停止。
dialog.diagram.auto.clustering.kmeans=K 均值
dialog.diagram.auto.clustering.kmeans.description=图中的节点将根据它们的位置划分为 K 个聚类，以使它们与聚类均值(质心)的距离最小 
dialog.diagram.auto.clustering.quality.time.ratio=质量/时间比
dialog.diagram.centrality.closeness.centrality=接近中心性
dialog.diagram.centrality.closeness.centrality.description=显示一个节点到所有其他节点的最短路径距离之和的倒数
dialog.diagram.centrality.consider.edge.directions=考虑边方向
dialog.diagram.centrality.edges.to.consider=要考虑的边
dialog.diagram.centrality.edges.to.consider.incoming=传入
dialog.diagram.centrality.edges.to.consider.outgoing=传出
dialog.diagram.centrality.graph.centrality=图中心性
dialog.diagram.centrality.graph.centrality.description=显示一个节点到所有其他节点的所有最短路径距离的最大值的倒数
dialog.diagram.centrality.measure.button.title=测量
dialog.diagram.centrality.nodes.betweenness.centrality=节点介数中心性
dialog.diagram.centrality.nodes.betweenness.centrality.description=显示节点/边位于每对节点之间的最短路径上的频率
dialog.diagram.centrality.number.of.connected.edges=连接的边数
dialog.diagram.centrality.number.of.connected.edges.description=显示关联到节点的传入、传出或整体边的数量(测量传入、传出和整体度)
dialog.diagram.focus.view.cycles.filter=显示循环
dialog.diagram.focus.view.cycles.filter.all=所有
dialog.diagram.focus.view.cycles.filter.containing.all.selected.nodes=包含所有选定节点
dialog.diagram.focus.view.cycles.filter.containing.any.selected.node=包含任何选定节点
dialog.diagram.focus.view.find.button.title=查找
dialog.diagram.focus.view.on=以下对象的焦点视图\:
dialog.diagram.focus.view.on.cycles.title=循环的焦点视图
dialog.diagram.focus.view.on.directed.cycles=有向循环
dialog.diagram.focus.view.on.directed.paths.from.0=来自 {0} 的有向路径
dialog.diagram.focus.view.on.directed.paths.from.0.to.1=从 {0} 到 {1} 的有向路径
dialog.diagram.focus.view.on.directed.paths.in.both.directions=两个方向上的有向路径
dialog.diagram.focus.view.on.directed.paths.to.0=到 {0} 的有向路径
dialog.diagram.focus.view.on.node.neighbourhood.title=聚焦于节点邻近区域
dialog.diagram.focus.view.on.paths.between.two.nodes.title=将视图聚焦于两个节点之间的路径
dialog.diagram.focus.view.on.undirected.cycles=无向循环
dialog.diagram.focus.view.on.undirected.paths=无向路径
dialog.diagram.focus.view.path.filter=显示路径
dialog.diagram.focus.view.path.filter.all=所有
dialog.diagram.focus.view.path.filter.k.shortest=最短 K\:
dialog.diagram.graph.characteristics.title=图的共同特征
dialog.diagram.measure.centrality=测量中心性
dialog.message.can.t.save.converted.content.into.file.check.read.only.status=无法将转换的内容保存到文件中。请检查是否为只读状态。
dialog.message.can.t.show.more.than.0.changes.at.one.diagram=在一个图中显示的更改数不能超过 {0} 个。
dialog.message.note.text=注释文本
dialog.message.this.file.has.old.format.would.you.like.to.convert.it=此文件为旧格式。要转换吗?
dialog.title.add.a.note=添加注释
dialog.title.edit.note=编辑注释
dialog.title.old.diagram.format=旧图格式
dialog.title.save.file=保存文件
diff.presentable.name=显示差异
do.relayout.when.new.elements.were.added=添加新元素时重新布局(&R)
edge.creation.mode=边缘创建模式
enable.node.items.syntax.highlighting=启用节点项语法高亮显示(&E)
error=错误
error.cant.create.edge=无法创建关系链接
file.is.readonly=''{0}'' 为只读文件
filetype.diagram.description=图
filetype.diagram.display.name=图
final.class.cant.be.inherited=类 {0} 为 final
fit.content.after.layout=在布局后调整内容(&F)
generate.methods=生成方法
goto.class.prompt.text.enter.class.name.to.add=输入要添加的类名
group.Diagram.AnalyzeGraphGroup.text=分析图
group.Diagram.AppearanceGroup.text=外观
group.Diagram.CopyToClipboardGroup.text=复制到剪贴板
group.Diagram.ExportAndCopyGroup.text=导出图
group.Diagram.ExportGroup.text=导出图
group.Diagram.ExportToFileGroup.text=导出到文件
group.Diagram.MergeEdgesGroup.text=合并边缘
group.Diagram.OpenInOnlineEditorGroup.text=在 Web 编辑器中打开
group.UML.EditorGroup.description=图表
group.UML.EditorGroup.text=图表
group.UML.Group.Simple.description=图表
group.UML.Group.Simple.text=图表
group.UML.Group.description=图表
group.UML.Group.text=图表
group.UML.SourceActionsGroup.text=所选元素操作
group.Uml.NewGroup.text=新建图表
group.Uml.NodeCellEditorPopup.GoTo.text=转到
group.Uml.NodeCellEditorPopup.QuickActions.text=显示
group.Uml.Refactoring.text=重构
group.Uml.SourceActionsGroup.GoTo.text=转到
group.Uml.SourceActionsGroup.QuickActions.text=显示
group.action.text.new=新建
group.change.content.name=内容
initializer.is.empty=初始值设定项为空
java.build.progress.analyzing=正在分析 {0}
java.build.progress.inferring.nullability=正在推断为 null 性…
java.build.progress.inferring.relationships=正在推断关系…
java.build.progress.searching.for.class.members=正在搜索类成员…
java.build.progress.searching.for.classes=正在搜索类…
layout.animation.duration=布局动画持续时间(&A)\:
layout.on.category.switch=类别开关上的布局(&C)\:
line.to=行目标…
looking.for.dependencies=查找依赖
make.abstract=设为 abstract
make.class.abstract=将类设为 abstract
modules.diagram.presentable.name=项目模块
new.class=新类
new.enum=新枚举
new.interface=新接口
new.record=新记录
node.is.interface=接口只能扩展一个接口
notification.can.t.open.diagram.while.indexing.is.in.progress=索引编制期间无法使用图表
notification.message.scope.has.been.changed.to.b.all.b=作用域已被更改为<b>全部</b>
ordering.alphabetically=按字母顺序排序
ordering.as.in.source.code=按声明顺序排序
ordering.by.visibility=按可见性排序
other=其他
popup.content.unable.to.find.diagrams=找不到所选元素的图
popup.title.select.change.list=选择更改列表
popup.title.select.target.node=选择目标节点
preview=预览
progress.title.updating.node.presentations=正在更新节点表示
relationship.already.exists={0} 与 {1} 之间的关系已存在
remove.annotation.from.class=从 {1} 中移除注解 @{0}
remove.relationship.link=移除关系链接
searching.for.elements=正在搜索元素
select.uml.provider=选择图类型
set.up.jdk=未设置 JDK
settings.select.categories.text=选择将在显示图表时启用的类别
shorten.node.items.on.length=缩短长度上的节点条目(&I)\:
show.categories.title=显示类别
show.diagram.popup.title={1} 的 {0}
show.grid.by.default=默认显示网格(&S)
show.implementations=显示实现
show.modules.dependencies=显示模块依赖
show.parents=显示父级
show.supers.for={0} 的超类
task.title.calculating.paths=正在计算路径
this.will.remove.relationship.link.between.classes=这将移除类之间的关系链接并修改类 {0}。是否继续?
uml.0.presentable.name={0} 类
uml.action.name=图
uml.change.list.name=更改
uml.class.diagram.file.name=''{0}'' 类图
uml.dependencies.settings.group.title=依赖项
uml.file.name.for.changes=''{0}'' 的更改
uml.java.analyzing.0=正在分析 {0}
uml.java.calculating.dependencies=正在计算依赖关系
uml.java.default.package.title=顶层软件包
uml.java.package.title=软件包
uml.jigsaw.presentable.name=Java 模块
uml.structure.view=图元素
unknown.uml.action=未知 UML 操作
unknown.uml.file=未知 UML 文件
visibility.level.all=所有
visibility.level.package=public + package
visibility.level.protected=public + package + protected
visibility.level.public=仅 public
