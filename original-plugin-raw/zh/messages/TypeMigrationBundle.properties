change.class.parameter.incorrect.type.error.hint=错误类型
change.class.type.parameter.family.name=更改类类型形参
checkbox.statically.import.matcher.methods=静态导入匹配程序的方法
convert.to.atomic.family.name=转换为原子
convert.to.longadder.family.name=转换为 LongAdder
convert.to.threadlocal.family.name=转换为 ThreadLocal
guava.functional.primitives.can.be.replaced.by.java.api.problem.description=Guava 的函数基元可替换为 Java API
inspection.guava.erase.option=从转换后的函数中擦除 @javax.annotations.Nullable
inspection.guava.method.chains.option=报告方法链
inspection.guava.return.types.option=报告返回类型
inspection.guava.variables.option=报告变量
inspection.migrate.assert.to.matcher.description=断言表达式 <code>#ref</code> 可替换为 ''{0}'' 调用 #loc
migrate.fix.text=<html>将 {0} 类型迁移到 ''{1}''</html>
migrate.guava.to.java.family.name=将 Guava 类型迁移到 Java
migrate.method.chain.fix.text=将方法链类型迁移到 ''{0}''
inspection.guava.name=Guava 的函数基元可替换为 Java
inspection.assertion.name=JUnit 断言可以是 'assertThat()' 调用