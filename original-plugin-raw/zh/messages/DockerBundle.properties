action.Docker.AddDockerConnection.text=Docker 连接
action.Docker.AddDockerConnection.description=添加 Docker 连接
action.Docker.FilterUntaggedImages.text=无标记的镜像
action.Docker.FilterStoppedContainers.text=已停止容器
group.Docker.Filter.text=Docker
action.Docker.RemoteServers.StopDeploy.text=停止部署
action.Docker.RemoteServers.StopDeploy.description=停止所选部署
action.Docker.RemoteServers.PauseContainer.text=暂停容器
action.Docker.RemoteServers.PauseContainer.description=暂停所选容器中的所有进程
action.Docker.RemoteServers.UnpauseContainer.text=取消暂停容器
action.Docker.RemoteServers.UnpauseContainer.description=取消暂停所选容器中的所有进程
action.Docker.RemoteServers.CreateTerminal.text=创建终端
action.Docker.RemoteServers.CreateTerminal.description=在所选容器中启动 Shell
action.Docker.RemoteServers.ExecInContainer.text=Exec
action.Docker.RemoteServers.ExecInContainer.description=在所选容器中运行命令
action.Docker.RemoteServers.Attach2Container.text=附加
action.Docker.RemoteServers.Attach2Container.description=附加到所选容器
action.Docker.RemoteServers.ShowContainerProcesses.text=显示进程
action.Docker.RemoteServers.ShowContainerProcesses.description=显示所选容器的进程列表
action.Docker.RemoteServers.InspectContainerOrImage.text=检查
action.Docker.RemoteServers.CopyContainerImageId.text=复制镜像 ID
action.Docker.RemoteServers.CopyContainerImageId.description=将所选容器的镜像 ID 或标记复制到剪贴板
action.Docker.RemoteServers.CopyContainerId.text=复制容器 ID
action.Docker.RemoteServers.CopyContainerId.description=将所选容器的 ID 复制到剪贴板
action.Docker.RemoteServers.CopyImageId.text=复制镜像 ID
action.Docker.RemoteServers.CopyImageId.description=将所选镜像的 ID 复制到剪贴板
action.Docker.RemoteServers.ShowContainerLog.text=显示日志
action.Docker.RemoteServers.ShowContainerLog.description=显示所选容器的日志
action.Docker.RemoteServers.SelectContainerImage.text=显示镜像
action.Docker.RemoteServers.SelectContainerImage.description=在服务工具窗口中显示所选容器的镜像
action.Docker.RemoteServers.ScaleComposeService.text=Scale
action.Docker.RemoteServers.ScaleComposeService.description=扩展服务
action.Docker.RemoteServers.StopComposeService.text=停止
action.Docker.RemoteServers.StopComposeService.description=停止服务
action.Docker.RemoteServers.DeleteService.text=删除服务
action.Docker.RemoteServers.StartComposeService.text=启动
action.Docker.RemoteServers.StartComposeService.description=启动服务
action.Docker.RemoteServers.PullImage.text=拉取镜像…
action.Docker.RemoteServers.PullImage.description=从仓库中拉取镜像
action.Docker.RemoteServers.PushImage.text=推送镜像…
action.Docker.RemoteServers.PushImage.description=将所选镜像推送到仓库
action.Docker.RemoteServers.DeleteImage.text=删除镜像
action.Docker.RemoteServers.DeleteImage.description=删除所选镜像
action.Docker.RemoteServers.DeleteVolume.text=删除卷
action.Docker.RemoteServers.DeleteVolume.description=删除所选卷
action.Docker.RemoteServers.DeleteNetwork.text=删除网络
action.Docker.RemoteServers.DeleteNetwork.description=删除所选网络
action.Docker.RemoteServers.CreateContainer.text=创建容器
action.Docker.RemoteServers.CreateContainer.description=为所选镜像创建并运行容器
action.Docker.RemoteServers.DeleteConnection.text=删除连接
action.Docker.RemoteServers.DeleteContainer.text=删除容器
action.Docker.RemoteServers.DeleteContainer.description=删除所选容器
action.Docker.RemoteServers.DeleteFailedNode.text=删除
action.Docker.RemoteServers.StopContainer.text=停止容器
action.Docker.RemoteServers.StopContainer.description=停止所选容器
action.Docker.RemoteServers.RecreateContainer.text=重新创建容器
action.Docker.RemoteServers.RecreateContainer.description=重新创建并运行所选容器
action.Docker.RemoteServers.StartContainer.text=启动容器
action.Docker.RemoteServers.StartContainer.description=启动所选容器
action.Docker.RemoteServers.RestartContainer.text=重启容器
action.Docker.RemoteServers.RestartContainer.description=重启所选容器
action.Docker.RemoteServers.DownComposeApp.text=下
action.Docker.RemoteServers.DownComposeApp.description=停止并移除容器以及关联的网络、卷和镜像
action.Docker.RemoteServers.StopComposeApp.text=停止
action.Docker.RemoteServers.StopComposeApp.description=停止所有服务
action.Docker.RemoteServers.RemoveOrphans.text=移除孤立项
action.Docker.RemoteServers.StartAllComposeApp.text=全部启动
action.Docker.RemoteServers.StartAllComposeApp.description=启动所有 Compose 服务
action.Docker.RemoteServers.RestartComposeApp.text=重新启动
action.Docker.RemoteServers.RestartComposeApp.description=重启所有正在运行的 Compose 服务
group.Docker.RemoteServersViewToolbar.text=Docker
DockerConverterProvider.conversion.description=Docker 运行配置将转换为新格式
DockerFileDetector.notification.group=Docker: Dockerfile 检测
DockerFileDetector.Notifier.title=检测到 {0,choice,1#Dockerfile|2#Dockerfile}
DockerFileDetector.Notifier.message.one=您可以为以下文件创建 Docker 运行配置:
DockerFileDetector.Notifier.message.full=您可以为以下文件创建 Docker 运行配置:
DockerFileDetector.Notifier.message.limited=您可以为 {0} 个文件创建 Docker 运行配置，其中包括以下文件:
DockerFileDetector.Notifier.disable=不再询问
dockerConsole.name=控制台
dockerTools.name=工具
dockerfile.brackets=中括号
dockerfile.comma=逗号
dockerfile.comments=注释
dockerfile.dot=点
dockerfile.keyword=关键字
dockerfile.number=数字
dockerfile.parenths=圆括号
dockerfile.string=字符串
dockerfile.variable=变量
dockerfile.displayName=Dockerfile
DockerCloudType.debug.not.supported=''{0}'' 不支持调试模式
DockerCloudType.presentable.name=Docker
DockerCloudType.run.configuration.type.presentable.name=Docker
DockerPropertiesRuntimeEditor.containers.names.warning.message=更改容器名称将中断与此容器相关的所有链接。\n是否仍要更改容器名称?
DockerPropertiesRuntimeEditor.containers.names.warning.title=正在更改容器名称
DockerPropertiesRuntimeEditor.container.name.error.empty.message=不允许使用空容器名称
DockerPropertiesRuntimeEditor.container.name.error.invalid.message=容器名称 {0} 无效: 仅允许文字、数字和标点 [_.-] 字符
DockerPropertiesRuntimeEditor.container.name.error.title=容器名称无效
DockerPropertiesRuntimeEditor.container.name.text=容器名称:
DockerVolumeBindingConfigurable.BrowseFolderAction.title=主机路径
DockerVolumeBindingConfigurable.BrowseFolderAction.description=选择卷主机路径
DockerVolumeBindingConfigurable.mapping.warning.message=在 Docker 设置中配置路径映射
DockerVolumeBindingConfigurable.mapping.warning.title=警告
DockerVolumeBindingConfigurable.container.path.text=容器路径:
DockerVolumeBindingConfigurable.host.path.text=主机路径:
DockerVolumeBindingConfigurable.read.only.text=只读
InspectDockerAction.description.container=检查所选容器
InspectDockerAction.description.image=检查选定镜像
InspectDockerAction.description.volume=检查所选卷
InspectDockerAction.description.network=检查所选网络
InspectDockerAction.tab.title=检查
ShowContainerProcessesAction.tab.title=进程
CreateContainerAction.popup.title=创建容器
CreateContainerAction.popup.defaultAction=创建...
DockerDeleteProvider.buttons.cancel=取消
DockerDeleteProvider.smart.delete.compose=Compose: {0}
DockerDeleteProvider.buttons.smart.delete=选择并删除
DockerDeleteProvider.buttons.force.delete=全部删除
DockerDeleteProvider.smart.delete.dialog.title=检测到的依赖项
DockerDeleteProvider.smart.delete.dialog.ok.text=删除所选项
DockerDeleteProvider.background.message=正在删除…
DockerDeleteProvider.runtime.name.volume=卷
DockerDeleteProvider.runtime.name.image=镜像
DockerDeleteProvider.confirmation.text.runtime.with.dependencies=所选 {0,choice,1#{1} 包含|2#{1}包含}依赖项
ComposeRemoveOrphansAction.dialog.message=删除所有无效服务?
DockerDeleteProvider.confirmation.title=确认删除
DockerDeleteProvider.confirmation.text.unspecified.type.one=删除条目?
DockerDeleteProvider.confirmation.text.unspecified.type.many=删除 {0} 个条目?
DockerDeleteProvider.confirmation.text.both.types=删除 {0} 和 {1}?
DockerDeleteProvider.confirmation.text.single.type=删除 {0}?
DockerDeleteProvider.confirmation.image.one=1 个镜像
DockerDeleteProvider.confirmation.image.many={0} 个镜像
DockerDeleteProvider.confirmation.container.one=1 个容器
DockerDeleteProvider.confirmation.container.many={0} 个容器
DockerCliImageBuilder.output.command=命令:
DockerGroupRuntime.ContainersGroup.groupName=容器
DockerGroupRuntime.ImagesGroup.groupName=镜像
DockerGroupRuntime.VolumesGroup.groupName=卷
DockerGroupRuntime.NetworksGroup.groupName=网络
DockerColorAnnotator.unresolvedVariableRef=无法解析变量 ''{0}''
DockerInlayHintsProvider.name=Docker 运行已命名的阶段
DockerInlayHintsProvider.tooltip.run=运行 "{0}" 阶段(通过启用的 BuildKit)
DockerInlayHintsProvider.tooltip.build=构建 "{0}" 阶段(通过启用的 BuildKit)
DockerInlayHintsProvider.tooltip.all=显示所有已命名的阶段配置
DockerInlayHintsProvider.popup.title="{0}" 的操作
DockerFileFindUsagesProvider.usageType.envVar=ENV 变量
DockerFileFindUsagesProvider.usageType.argVar=ARG 变量
DockerFileFindUsagesProvider.usageType.stage=阶段声明
DockerFileFindUsagesProvider.usageType.unknown=声明
DockerFileRunLineMarkerProvider.action.group.run=运行
DockerFileRunLineMarkerProvider.action.group.build=构建镜像
DockerFileRunLineMarkerProvider.BuildAsTemporaryRunConfig.text=在 ''{0}'' 上构建镜像
DockerFileRunLineMarkerProvider.BuildExistingRunConfig.text=为 ''{0}'' 构建镜像
DockerRunLineMarkerProviderBase.tooltip=在 Docker 上运行
DockerRunConfigActions.RunOrBuildExistingConfig.text.build=构建 ''{0}''
DockerRunLineMarkerProviderBase.RunExistingRunConfig.text=运行 ''{0}''
DockerRunLineMarkerProviderBase.EditExistingRunConfig.text=编辑 ''{0}''...
DockerRunLineMarkerProviderBase.EditExistingRunConfig.dialogTitle=编辑运行配置
DockerRunLineMarkerProviderBase.ConfigureNewRunConfig.text=新建运行配置…
DockerRunLineMarkerProviderBase.ConfigureNewRunConfig.dialogTitle=编辑运行配置
DockerRunLineMarkerProviderBase.RunAsTemporaryRunConfig.text=在 ''{0}'' 上运行
DockerRunConfigurationCreator.editConfiguration.title.new=创建 Docker 配置
DockerCloudConfigurable.loadMachines.task.title=加载机器
DockerCloudConfigurable.error.apiUrlRequired=需要 API URL
DockerCloudConfigurable.error.machineRequired=需要 Docker 机器
DockerCloudConfigurable.error.connectionNotSpecified=指定连接类型
DockerCloudConfigurable.error.certificatesFolder.missing={0} 下没有证书文件夹
DockerCloudConfigurable.chooser.certificates.title=选择证书位置
DockerCloudConfigurable.task.loading.machines.title=加载机器设置
DockerCloudConfigurable.docker.for.mac.radio.title=Docker for Mac
DockerCloudConfigurable.docker.for.windows.radio.title=Docker for Windows
DockerCloudConfigurable.connect.daemon.text=使用以下方式连接到 Docker 守护进程:
DockerCloudConfigurable.unix.socket.text=Unix 套接字:
DockerCloudConfigurable.docker.machine.text=Docker 机器:
DockerCloudConfigurable.tcp.socket.text=TCP 套接字
DockerCloudConfigurable.configure.executable.text=配置可执行文件
DockerCloudConfigurable.engine.url.text=引擎 API URL:
DockerCloudConfigurable.certificates.folder.text=证书文件夹:
DockerCloudConfigurable.path.mappings.text=路径映射：
DockerCloudConfigurable.email.text=电子邮件:
DockerCloudConfigurable.password.text=密码:
DockerSshConnectionConfigurator.label=SSH:
DockerFileArgumentCountInspection.display.name=参数数量错误
DockerFileArgumentCountInspection.error.exactly.one.argument.required=只需要一个参数
DockerFileArgumentCountInspection.error.at.least.N.arguments.required=至少需要 {0} 个参数
DockerFileAssignmentsInspection.display.name='key=value' 对中无效的空格
DockerFileAssignmentsInspection.error.spacing.not.allowed=此处不允许空格
DockerFileAddOrCopySemanticInspection.display.name='ADD'/'COPY' 命令的无效目标
DockerFileAddOrCopySemanticInspection.error.target.must.be.folder=目标必须是目录，并以 '/' 结尾
DockerFileAddOrCopySemanticInspection.error.quick.fix=添加尾随的 '/'
DockerFileAssignmentsInspection.remove.spaces=移除空格
DockerMappingConfigurable.browse.title=共享文件夹路径
DockerMappingConfigurable.browse.description=选择共享文件夹路径
DockerMappingConfigurable.displayName=路径映射
DockerMappingConfigurable.error.local.path.required=需要本地路径
DockerMappingConfigurable.error.remote.path.required=需要虚拟机路径
DockerMappingConfigurable.virtual.machine.path.text=虚拟机路径:
DockerMappingConfigurable.local.path.text=本地路径:
docker.path.mapping.editor.table.virtual.machine.path.header=虚拟机路径
docker.path.mapping.editor.table.local.path.header=本地路径
docker.registry.configurable.connection.status.connecting=连接中...
docker.registry.configurable.connection.status.successful=连接成功
docker.registry.configurable.connection.status.cannot.connect=无法连接: {0}
DockerContainerSettingsUI.exposedPortsHyperlink=<html>将公开端口发布到主机接口:</html>
DockerContainerSettingsUI.executable.panel.title=可执行文件
DockerContainerSettingsUI.entrypoint.text=入口点:
DockerContainerSettingsUI.command.text=命令:
DockerContainerSettingsUI.all.text=所有
DockerContainerSettingsUI.specify.text=指定
DockerContainerSettingsUI.bind.ports.text=绑定端口:
DockerContainerSettingsUI.bind.mounts.text=绑定挂载:
DockerContainerSettingsUI.environment.variables.text=环境变量：
DockerContainerSettingsUI.run.options.text=运行选项:
## the similar set as above but without a ":" to use in the fragments UI
DockerContainerSettingsFragments.entrypoint.fragment=入口点
DockerContainerSettingsFragments.entrypoint.actionHint=覆盖镜像的默认 NTRYPOINT
DockerContainerSettingsFragments.command.fragment=命令
DockerContainerSettingsFragments.command.actionHint=要在新容器中运行的命令
DockerContainerSettingsFragments.bind.ports.fragment=绑定端口
DockerContainerSettingsFragments.bind.ports.actionHint=将容器端口映射到主机端口
DockerContainerSettingsFragments.bind.mounts.fragment=绑定挂载
DockerContainerSettingsFragments.bind.mounts.actionHint=将主机目录或命名卷绑定挂载到容器
DockerContainerSettingsFragments.environment.variables.fragment=环境变量
DockerContainerSettingsFragments.environment.variables.actionHint=设置容器环境变量
DockerContainerSettingsFragments.attach.to.container.name=附加到容器
DockerContainerSettingsFragments.attach.to.container.tooltip=附加到容器并在启动时打开 `Attached Console`
DockerContainerSettingsFragments.run.options.fragment=运行选项
DockerContainerSettingsFragments.run.options.actionHint=为 `docker run` 命令指定其他选项
DockerContainerSettingsFragments.all.ports.fragment=随机发布所有暴露端口
DockerContainerSettingsFragments.all.ports.actionHint=将所有暴露端口发布到随机端口
DockerPortBindingsField.dialogTitle=端口绑定
DockerPortBindingsField.dialogEmptyText=无端口绑定
DockerPortBindingsField.PortBindingsTable.hostPort=主机端口
DockerPortBindingsField.PortBindingsTable.containerPort=容器端口
DockerPortBindingsField.PortBindingsTable.hostIP=主机 IP
DockerPortBindingsField.PortBindingsTable.protocol=协议
DockerPortBindingsEditor.hostPort=主机端口
DockerPortBindingsEditor.containerPort=容器端口
DockerPortBindingsEditor.hostIP=主机 IP
DockerPortBindingsEditor.protocol=协议
DockerVolumeBindingsField.dialogTitle=绑定挂载
DockerVolumeBindingsField.dialogEmptyText=无绑定挂载
DockerVolumeBindingsField.VolumeBindingsTable.source=主机路径
DockerVolumeBindingsField.VolumeBindingsTable.destination=容器路径
DockerVolumeBindingsField.VolumeBindingsTable.readOnly=只读
DockerComposeFilesTextField.DockerComposeFileDialog.title=Docker Compose 配置文件
DockerComposeFilesTextField.DockerComposeFileDialog.title.chooser.fileOrFolder=选择配置文件或文件夹
DockerComposeFilesTextField.DockerComposeFileDialog.title.chooser.fileOnly=选择配置文件
DockerDeploymentSourcePathCombo.dialogTitle=Dockerfile
DockerDeploymentSourcePathCombo.dialogDescription=指定要构建和运行的 Dockerfile 
DockerFileAndContextFolderUI.ContextFolderField.dialogTitle=上下文文件夹
DockerFileAndContextFolderUI.ContextFolderField.dialogDescription=指定上下文文件夹或默认留空
DockerBuildSettingsUI.BuildArgsField.dialogTitle=构建实参
DockerBuildSettingsUI.BuildArgsField.dialogEmptyText=无构建实参
DockerBuildSettingsUI.DockerBuildOptionsField.onParseError=无法解析构建 CLI 选项: {0}
DockerBuildSettingsUI.dockerfile.text=Dockerfile:
DockerBuildSettingsUI.context.folder.text=上下文文件夹:
DockerBuildSettingsUI.image.tag.text=镜像标记:
DockerBuildSettingsUI.build.args.text=构建实参:
DockerBuildSettingsUI.enable.buildkit.experimental=启用 BuildKit (实验性)
DockerBuildSettingsUI.build.options.text=构建选项:
# the same as labels but without ":" for a fragments popup togggle actions
DockerBuildSettingsFragments.context.folder.fragment=上下文文件夹
DockerBuildSettingsFragments.context.folder.actionHint=指定要在构建期间发送到守护程序的文件夹
DockerBuildSettingsFragments.build.args.fragment=构建实参
DockerBuildSettingsFragments.build.options.fragment=构建选项
DockerBuildSettingsFragments.build.options.actionHint=为 `docker build` 命令指定其他选项
DockerContainerSettingsUI.EnvVarsField.dialogTitle=环境变量
DockerContainerSettingsUI.EnvVarsField.dialogEmptyText=无变量
DockerContainerSettingsUI.DockerRunOptionsField.onParseError=无法解析运行 CLI 选项: {0}
DockerCliOptionsField.onParseError=无法解析命令行选项: {0}
SingletonDeploymentSourceType.error.image.tag.atMaxOne=最多允许一个标记
SingletonDeploymentSourceType.error.image.tag.format=镜像标记格式无效
SingletonDeploymentSourceType.error.container.name.format=容器名称无效: 应为 `[a-zA-Z0-9][a-zA-Z0-9_.-]*`
DockerImageDeploymentSourceType.name=Docker 镜像
DockerImageDeploymentSourceType.suggestRunConfigurationName=Docker 镜像
DockerImageDeploymentSourceType.deploymentName={0} 镜像 ID: {1}
DockerImageDeploymentSourceType.error.image.id.required=需要镜像 ID 或名称
DockerComposeDeploymentSourceType.name=Docker-compose
DockerComposeDeploymentSourceType.deploymentName=Compose: {0}
DockerComposeDeploymentSourceType.suggestRunConfigurationName={0}: Compose 部署
DockerComposeDeploymentSourceType.error.path.required=需要 Compose 文件的路径
DockerComposeDeploymentSourceType.error.file.does.not.exist=''{0}'' 下没有 Compose 文件
DockerFileDeploymentSourceType.name=Dockerfile
DockerFileDeploymentSourceType.deploymentName={0} Dockerfile: {1}
DockerFileDeploymentSourceType.suggestRunConfigurationName={0}
DockerFileDeploymentSourceType.error.path.required=需要 Dockerfile 文件的路径
DockerFileDeploymentSourceType.error.dockerfile.does.not.exist=''{0}'' 下没有 Dockerfile
DockerBeforeRunTaskProvider.name=调试前启动 Docker
DockerBeforeRunTaskProvider.description=调试前启动 Docker: `{0}`
DockerBeforeRunTaskProvider.notifier=在运行任务前 Docker
DockerBeforeRunTaskProvider.Dialog.title=配置 Docker
DockerEnvVarsRuntimeEditor.name=环境变量
DockerPortBindingRuntimeEditor.name=端口绑定
DockerPortBindingRuntimeEditor.publish.ports.checkbox.title=发布所有端口
DockerVolumeBindingsRuntimeEditor.name=卷绑定
DockerPropertiesRuntimeEditor.name=属性
DockerPropertiesRuntimeEditor.property.container.id=容器 ID
DockerPropertiesRuntimeEditor.property.container.names=容器名称
DockerPropertiesRuntimeEditor.property.image.id=镜像 ID
DockerPropertiesRuntimeEditor.property.image.created=已创建
DockerPropertiesRuntimeEditor.property.image.size=大小
DockerPropertiesRuntimeEditor.property.image.tags=标记
DockerPropertiesRuntimeEditor.action.copy.to.clipboard.name=复制到剪贴板
DockerRuntimeLabelsTab.tab.title=标签
DockerFileSystem.error.modification.not.supported=Docker 容器文件系统不支持修改: {0}
DockerFileSystem.error.can.not.get.contents=无法获取 {0} 的内容
DockerContainerBrowserTab.displayName=文件
DockerContainerBrowserTab.emptyText=启动容器以浏览文件
DockerFileChooser.emptyText=无法访问文件系统根。可能尚不支持这种 Docker 容器。
DockerFileChooser.loadingText=正在获取文件系统根…
DockerFileChooser.emptyPathText=选择要查看路径的项目
DockerFileChooser.RefreshAction.text=刷新
DockerFileChooser.RefreshAction.description=刷新 Docker 容器文件系统树
DockerContainerBrowser.downloadTask.title=从 Docker 容器下载文件
DockerContainerBrowser.DownloadAction.text=下载到临时目录
DockerContainerBrowser.DownloadAction.description=将文件从 Docker 容器下载到临时文件
DockerContainerBrowser.ViewInEditorAction.text=在编辑器中查看
DockerContainerBrowser.ViewInEditorAction.description=在编辑器中查看 Docker 容器中的文件
DockerRootType.displayName=Docker 文件
DockerWritingAccessProvider.readOnlyMessage=Docker 容器中的文件为只读文件
#
DockerComposeDeploymentEditor.enable.buildkit.hint=为镜像构建启用 BuildKit 支持
DockerComposeDeploymentEditor.env.file.does.not.exist=''{0}'' 中没有环境变量文件
DockerComposeDeploymentEditor.env.file.not.valid=无法从 ''{0}'' 读取环境变量文件
DockerComposeDeploymentEditor.project.name=项目名称:
DockerComposeDeploymentEditor.project.name.name=指定项目名称
DockerComposeDeploymentEditor.environment.variables=环境变量
DockerComposeDeploymentEditor.environment.variables.actionHint=设置 Docker Compose 进程的环境变量。这些变量不对任何容器提供。
DockerComposeDeploymentEditor.up.build.desc=--build
DockerComposeDeploymentEditor.up.build.name=构建: 始终
DockerComposeDeploymentEditor.up.build.actionHint=在启动容器之前构建镜像
DockerComposeDeploymentEditor.up.scale.name=重写扩展
DockerComposeDeploymentEditor.up.scale.desc=--scale
DockerComposeDeploymentEditor.up.scale.hint=设置服务的容器数
DockerComposeDeploymentEditor.up.exit.code.from=服务退出代码
DockerComposeDeploymentEditor.up.exit.code.from.name=返回退出代码
DockerComposeDeploymentEditor.up.exit.code.from.desc=--exit-code-from
DockerComposeDeploymentEditor.up.exit.code.from.actionHint=返回所选服务容器的退出代码。在指定服务中的容器停止时停止所有容器。
DockerComposeDeploymentEditor.up.timeout.name=SIGKILL 超时
DockerComposeDeploymentEditor.up.timeout.desc=--timeout
DockerComposeDeploymentEditor.up.timeout.hint=以秒为单位设置终止容器的超时。容器首先会收到 SIGTERM，然后在指定的超时后收到 SIGKILL。
DockerComposeDeploymentEditor.up.detach.name=附加到: 无
DockerComposeDeploymentEditor.up.detach.desc=--detach
DockerComposeDeploymentEditor.up.detach.actionHint=在分离模式下运行
DockerComposeDeploymentEditor.no.deps.name=启动: 所选服务
DockerComposeDeploymentEditor.no.deps.desc=--no-deps
DockerComposeDeploymentEditor.no.deps.actionHint=不启动链接的服务
DockerComposeDeploymentEditor.up.force.recreate.name=重新创建容器: 全部
DockerComposeDeploymentEditor.up.force.recreate.desc=--force-recreate
DockerComposeDeploymentEditor.up.force.recreate.actionHint=即使容器的配置和镜像并未更改，也重新创建所有容器
DockerComposeDeploymentEditor.up.always.recreate.name=重新创建依赖项
DockerComposeDeploymentEditor.up.always.recreate.desc=--always-recreate-deps
DockerComposeDeploymentEditor.up.always.recreate.actionHint=重新创建依赖的容器
DockerComposeDeploymentEditor.up.no.recreate.desc=--no-recreate
DockerComposeDeploymentEditor.up.no.recreate.name=重新创建容器: 无
DockerComposeDeploymentEditor.up.no.recreate.actionHint=即使配置更改，也不重新创建现有容器
DockerComposeDeploymentEditor.up.no.build.name=构建: 从不
DockerComposeDeploymentEditor.up.no.build.desc=--no-build
DockerComposeDeploymentEditor.up.no.build.actionHint=不构建镜像。如果缺失，则以错误停止。
DockerComposeDeploymentEditor.up.group.start=启动
DockerComposeDeploymentEditor.up.group.start.hint=配置要启动的服务
DockerComposeDeploymentEditor.up.group.start.default=所选部署和依赖项
DockerComposeDeploymentEditor.up.group.start.default.hint=启动指定服务和链接服务
DockerComposeDeploymentEditor.up.group.attach.to=附加到
DockerComposeDeploymentEditor.up.group.attach.to.hint=配置要显示输出流的容器
DockerComposeDeploymentEditor.up.group.attach.to.default=所选服务
DockerComposeDeploymentEditor.up.group.attach.to.default.hint=不附加到依赖的容器，而是附加到所有已启动的容器
DockerComposeDeploymentEditor.up.group.build=构建
DockerComposeDeploymentEditor.up.group.build.hint=在启动容器前配置要构建的镜像
DockerComposeDeploymentEditor.up.group.build.default=仅缺失镜像
DockerComposeDeploymentEditor.up.group.build.default.hint=仅构建不可用的镜像
DockerComposeDeploymentEditor.up.group.recreate=重新创建容器
DockerComposeDeploymentEditor.up.group.recreate.hint=配置要停止的容器并替换为新容器
DockerComposeDeploymentEditor.up.group.recreate.default=更改的配置
DockerComposeDeploymentEditor.up.group.recreate.default.hint=如果配置或镜像更改，则替换容器
DockerComposeDeploymentEditor.up.group.stop.containers=停止容器
DockerComposeDeploymentEditor.up.group.stop.containers.hint=配置容器停止方式
DockerComposeDeploymentEditor.up.group.stop.containers.default=手动
DockerComposeDeploymentEditor.up.group.stop.containers.default.hint=手动停止容器
DockerComposeDeploymentEditor.up.no.start.name=启动: 无
DockerComposeDeploymentEditor.up.no.start.desc=--no-start
DockerComposeDeploymentEditor.up.no.start.actionHint=创建服务后不启动它们
DockerComposeDeploymentEditor.up.abort.on.exit.name=停止容器: 容器退出时
DockerComposeDeploymentEditor.up.abort.on.exit.desc=--abort-on-container-exit
DockerComposeDeploymentEditor.up.abort.on.exit.actionHint=如果任何一个容器停止，则停止所有容器
DockerComposeDeploymentEditor.up.attach.deps.name=附加到: 所选部署和依赖项
DockerComposeDeploymentEditor.up.attach.deps.desc=--attach-dependencies
DockerComposeDeploymentEditor.up.attach.deps.actionHint=附加到所有启动的容器及其依赖项
DockerComposeDeploymentEditor.up.renew.anon.volumes.name=重新创建匿名卷
DockerComposeDeploymentEditor.up.renew.anon.volumes.desc=--renew-anon-volumes
DockerComposeDeploymentEditor.up.renew.anon.volumes.actionHint=重新创建匿名卷，而不是从以前的容器中检索数据
DockerComposeDeploymentEditor.up.remove.orphans.name=移除孤立项
DockerComposeDeploymentEditor.up.remove.orphans.desc=--remove-orphans
DockerComposeDeploymentEditor.up.remove.orphans.actionHint=移除 Compose 文件中未定义的服务的容器
DockerComposeDeploymentEditor.group.up=docker-compose up
DockerComposeDeploymentEditor.group.up.actionHint=通过附加的 'docker-compose up' 选项运行
DockerComposeDeploymentEditor.group.up.name=应用 `up` 选项
DockerComposeDeploymentEditor.group.up.childrenGroupName=docker-compose up 选项
DockerComposeDeploymentEditor.up.timeout.label=超时:
DockerComposeDeploymentEditor.up.timeout.suffix=秒
DockerComposeDeploymentEditor.up.exit.code.label=退出代码:
DockerComposeDeploymentEditor.up.exit.code.suffix=返回所选服务的退出代码
#
DockerComposeDeploymentEditor.enable.compatibility.mode=启用兼容性模式
DockerComposeDeploymentEditor.enable.compatibility.mode.hint=启用后，docker-compose 将读取每个服务定义的 deploy 部分，并尝试将其转换为等效的第 2 版参数。
DockerComposeDeploymentEditor.down.remove.volumes=`down` 时移除卷
DockerComposeDeploymentEditor.down.remove.volumes.actionHint=使用 --volumes 选项执行 `docker-compose down`，在终止时同时删除已命名卷和匿名卷
DockerComposeDeploymentEditor.down.remove.images.group=`down` 时移除镜像
DockerComposeDeploymentEditor.down.remove.images.group.hint=配置终止时应移除的镜像
DockerComposeDeploymentEditor.down.remove.images.default=无
DockerComposeDeploymentEditor.down.remove.images.default.hint=不移除镜像
DockerComposeDeploymentEditor.down.remove.images.all=`down` 时移除镜像: 全部
DockerComposeDeploymentEditor.down.remove.images.all.hint=移除任何服务使用的所有镜像
DockerComposeDeploymentEditor.down.remove.images.all.desc=--rmi all
DockerComposeDeploymentEditor.down.remove.images.local=`down` 时移除镜像: 本地
DockerComposeDeploymentEditor.down.remove.images.local.hint=仅移除没有自定义标记的镜像
DockerComposeDeploymentEditor.down.remove.images.local.desc=--rmi local
DockerComposeDeploymentEditor.incompatible.error.mask="{0}" 与{1}不兼容
DockerComposeDeploymentEditor.env.file.label=环境变量文件:
DockerComposeDeploymentEditor.env.file.name=环境变量文件
DockerComposeDeploymentEditor.env.file.actionHint=指定用于设置环境变量的文件
DockerComposeDeploymentEditor.env.file.browse.title=选择环境变量文件
DockerComposeDeploymentEditor.services.name=指定服务
DockerComposeDeploymentEditor.run=运行
DockerComposeDeploymentEditor.up.timeout.dialog.message.not.valid.integer={0} 不是有效的整数
DockerComposeDeploymentEditor.up.timeout.dialog.message.timeout.cannot.be.less=超时不能小于 0
DockerComposeDeploymentEditor.up.timeout.dialog.message.timeout.cannot.be.greater=超时不能超过 1000
DockerComposeServicesField.empty.text=留空将运行所有服务
DockerComposeServiceScalePairPanel.dialog.ok.text=保存
DockerComposeServiceScaleDialog.dialog.title=选择要扩展的服务
DockerComposeServiceScaleDialog.column.name.service=服务
DockerComposeServiceScaleDialog.column.name.scale=扩展到
DockerComposeServiceScaleDialog.service.label=服务:
DockerComposeServiceScaleDialog.scale.to.label=扩展到:
DockerComposeServiceScaleDialog.title=设置要为每个服务运行的容器数(如果有 compose 文件，则重写该文件中的扩展):
DockerComposeServiceScaleDialog.service.does.not.exist.error=指定的 docker-compose 文件中不存在“{0}”服务
DockerComposeServiceScaleDialog.services.does.not.exist.error=指定的 docker-compose 文件中不存在 {0} 服务
#
configurable.DockerConsoleConfigurable.display.name=控制台
configurable.DockerConsoleConfigurable.enable.folding.checkbox.text=在日志控制台中折叠以前的会话
configurable.DockerLinkConfigurable.display.name=链接
configurable.DockerLinkConfigurable.ContainerNamesLoader.task.title=正在加载容器名称…
configurable.DockerLinkConfigurable.name.text=名称:
configurable.DockerLinkConfigurable.alias.text=别名：
configurable.DockerMachineConfigurable.display.name=Docker
configurable.DockerEnvVarConfigurable.display.name=环境变量
configurable.DockerEnvVarConfigurable.name.text=名称:
configurable.DockerEnvVarConfigurable.value.text=值:
configurable.DockerPortBindingConfigurable.display.name=端口绑定
configurable.DockerPortBindingConfigurable.container.port.text=容器端口:
configurable.DockerPortBindingConfigurable.protocol.text=协议:
configurable.DockerPortBindingConfigurable.host.ip.text=主机 IP:
configurable.DockerPortBindingConfigurable.host.port.text=主机端口:
configurable.DockerRegistryListConfigurable.empty.selection.string=要配置 Docker 注册表，请点击 '+'
configurable.DockerRegistryListConfigurable.display.name=Docker 注册表
configurable.DockerRegistryListConfigurable.AddRegistryAction.text=添加
configurable.DockerRemoteServerConfigurable.display.name=Docker
configurable.DockerVolumeBindingConfigurable.display.name=卷绑定
configurable.PushImageConfigurable.display.name=推送镜像
configurable.PushImageConfigurable.registry.text=注册表:
configurable.PushImageConfigurable.repository.text=仓库:
configurable.PushImageConfigurable.tag.text=标签:
settings.docker.executable=Docker 可执行文件:
settings.docker.machine.executable=Docker 机器可执行文件：
settings.docker.compose.executable=Docker Compose 可执行文件:
settings.select.docker.machine.executable=选择 Docker 机器可执行文件:
settings.choose.docker.compose.executable.location=选择 Docker Compose 可执行文件位置
settings.choose.docker.executable.location=选择 Docker 可执行文件位置
checkbox.wait.for.healthcheck=等待 HEALTHCHECK
DockerRemoteDebugRunConfigurationExtension.editorTitle=Java 远程调试
DockerComposeCredentialsEditor.validate.server.not.selected=未选择 Docker 服务器
DockerComposeCredentialsEditor.validate.files.not.chosen=未选择配置文件
DockerComposeCredentialsEditor.validate.no.services.defined=配置文件中未定义任何服务
DockerComposeCredentialsEditor.validate.service.name.not.selected=未选择服务名称
DockerComposeCredentialsEditor.server.text=服务器:
DockerComposeCredentialsEditor.configuration.files.text=配置文件:
DockerComposeCredentialsEditor.service.text=服务:
DockerComposeCredentialsEditor.environment.variables.text=环境变量(&E)
DockerComposeCredentialsEditor.processing=正在处理 Docker Compose 配置…
DockerComposeCredentialsEditor.no.service.placeholder=<Select service>
DockerComposeCredentialsEditor.getting.services.from.compose.configuration=正在从 Docker Compose 配置文件获取服务列表…
DockerComposeSettingsEditor.form.name=Docker Compose
DockerComposeSettingsEditor.form.command=命令和选项: 
DockerComposeSettingsEditor.form.command.preview=命令预览:
DockerComposeCredentialsType.name=Docker Compose
DockerCredentialsEditor.validate.server.not.selected=未选择 Docker 服务器
DockerCredentialsEditor.validate.image.not.specified=未指定 Docker 镜像名称
DockerCredentialsEditor.StartDockerMachineDialog.message=启动 Docker 机器 ''{0}''?
DockerCredentialsEditor.StartDockerMachineDialog.title=Docker 机器未运行
DockerCredentialsEditor.server.text=服务器:
DockerCredentialsEditor.image.name.text=镜像名称:
DockerCredentialsType.name=Docker
DockerInterpreterContainerSettingsEditorDialog.title=编辑 Docker 容器设置
DockerInterpreterContainerSettingsEditor.disable.networking.text=禁用网络
DockerInterpreterContainerSettingsEditor.network.mode.text=网络模式:
DockerInterpreterContainerSettingsEditor.publish.all.ports.text=发布所有端口
DockerInterpreterContainerSettingsEditor.run.options.text=运行选项:
DockerTargetMainStep.step.description=创建新的 Docker 目标
DockerTargetBuildImageStep.description=正在构建 Docker 镜像…
DockerTargetPullImageStep.description=正在拉取 Docker 镜像…
DockerTargetConfigurable.section.title=Docker 容器
DockerTargetConfigurable.server.row.label=Docker 服务器:
DockerTargetConfigurable.build.radio.text=构建
DockerTargetConfigurable.pull.radio.text=拉取
DockerTargetConfigurable.image.row.label=镜像文件:
DockerTargetConfigurable.dockerfile.row.label=Dockerfile:
DockerTargetConfigurable.context.folder.row.label=上下文文件夹:
DockerTargetConfigurable.optional.row.title=可选
DockerTargetConfigurable.build.options.row.label=构建选项:
DockerTargetConfigurable.build.args.row.label=构建实参:
DockerTargetConfigurable.rebuild.automatically.checkbox.text=每次运行代码之前自动重新构建镜像
DockerTargetConfigurable.image.tag.row.label=镜像标记:
DockerTargetConfigurable.run.options.row.label=运行选项:
DockerTargetConfigurable.run.options.comment.text=Docker 运行命令的参数。\n例如，用于公开端口 8080 的 -p 8080:8080。
AddDockerConnectionAction.title=Docker 连接
ComposeScaleAction.Dialog.message=容器数量:
ComposeScaleAction.Dialog.title=扩展
DockerBeforeRunTaskUI.ports.table.title=端口转发:
DockerBeforeRunTaskUI.command.field.title=自定义命令:
DockerBeforeRunTaskUI.options.field.title=自定义选项:
DockerComposeExecutionFailed.notification.action.title=显示设置…
DockerMachineUtil.starting.machine.template=正在启动 Docker 机器 ''{0}''
DockerMachineUtil.starting.machine.title=正在启动 docker machine
DockerRegistryConfigurable.ConnectionTester.task.title=连接中...
DockerRegistryConfigurable.address.text=地址:
DockerRegistryConfigurable.username.text=用户名：
DockerRegistryConfigurable.password.text=密码:
DockerRegistryConfigurable.test.connection.text=测试连接
DockerRegistryConfigurable.server.text=服务器:
DockerRuntimeEditorBase.save.button.title=正在保存…
DockerServiceViewContributor.contributor.descriptor.name=Docker
ContainerLogTab.title=日志
DockerBuildLogTab.title=构建日志
DockerComposeDetails.ComposeDeployLogTab.title=部署日志
ExecInContainerAction.Case.Dialog.message=命令:
ExecInContainerAction.Case.Dialog.title=Exec
ExecInContainerAction.ListPopup.title=在容器中运行命令
ExecInContainerAction.ListPopup.textFor.create=创建并运行…
ExecInContainerAction.ManageExecCommandsDialog.column.title=命令
ExecInContainerAction.ManageExecCommandsDialog.column.no.commands=无命令
ExecInContainerAction.ManageExecCommandsDialog.command.is.empty=命令为空
ExecInContainerAction.ListPopup.textFor.manage=管理…
ExecInContainerAction.tab.title=执行: {0}
DockerImageGroupDetails.ImagePullTab.title=镜像控制台
ImagePullPanel.image.to.pull.label=要拉取的镜像:
ImagePullPanel.image.to.pull.comment=按 {0} 启动
ImagePullPanel.action.pull=拉取选定项
ImagePullPanel.terminal.name=Docker 镜像
ImagePullPanel.terminal.info.using.default.tag=正在使用默认标记: 最新
ImagePullPanel.terminal.error.reference.format=引用格式无效: {0}
ImagePullPanel.queue.label=镜像在队列中拉取: {0}
ToolBasedDockerComposeConfigurationParser.progress.title=正在处理 Docker Compose 配置…
DockerSearchContext.BadResponseException.message=响应代码: 来自 URL 的 {0}: {1}
DockerRemoteDebugExtensionEditor.port.text=端口:
DockerExtraHostConfigurable.hostname.text=主机名:
DockerExtraHostConfigurable.ip.text=IP:
DockerComposeDeploymentEditor.services.popup.title=切换服务
DockerComposeDeploymentEditor.compose.files.text=Compose 文件:
DockerComposeDeploymentEditor.services.text=服务:
DockerDeploymentEditor.image.id.text=镜像 ID 或名称:
DockerDeploymentEditor.run.built.image.text=运行构建的镜像
DockerDeploymentEditor.container.name.text=容器名称:
DockerDeploymentEditor.command.preview.text=命令预览:
DockerFileDeploymentEditor.group.run.title=运行
DockerFileDeploymentEditor.group.run.option.name=运行选项
DockerFileDeploymentEditor.group.run.actionHint=启动构建镜像的容器
DockerFileDeploymentEditor.group.build.title=构建
DockerPreviewFragments.group.preview=命令预览
DockerPreviewFragments.preview.label=预览:
DockerPreviewFragments.preview.action.text=显示命令预览
DockerPreviewFragments.preview.action.description=显示要执行的命令的预览
DockerRunConfigurationPanel.configuration.text=Docker 配置:
DockerRunConfigurationPanel.service.text=服务:
DockerRuntimeEditor.save.text=保存
RegistrySelectionEditor.new.text=新...
progress.text.preparing.volumes=正在准备卷…
progress.text.docker.upload.volume.progress.message=来自 {0} 的上传将挂载为 {1}
progress.text.docker.download.volume.progress.message=来自 {1} 的下载将保存到 {0}
#
DockerMissingShellPluginNotificationProvider.text=需要 `Shell Script` 插件才能提供完整的 Dockerfile 支持
DockerMissingShellPluginNotificationProvider.install.plugin=安装 `Shell Script` 插件
DockerMissingShellPluginNotificationProvider.do.not.show.again=不再显示
DockerMissingShellPluginNotificationProvider.enable.plugin=启用 `Shell Script` 插件
#
ComposeServiceRuntime.status.stopped=已停止
ComposeServiceRuntime.status.service.not.exit=在 ''{1}'' {2,choice,1#文件|2#文件}中找不到 ''{0}'' 服务
ComposeServiceRuntime.status.files.not.exists=从中创建此服务的 ''{1}'' {0,choice,1#文件|2#文件}{0,choice,1#不存在|2#不存在}
#
DockerDeploymentStatus.image=镜像
DockerDeploymentStatus.paused=已暂停
DockerDeploymentStatus.stopped=已停止
DockerDeploymentStatus.created=已创建
DockerDeploymentStatus.starting=正在启动
DockerDeploymentStatus.started=已启动
DockerDeploymentStatus.stopping=正在停止
DockerDeploymentStatus.deleting=正在删除
DockerDeploymentStatus.deleted=已删除
AbstractDockerProcessConnectionData.docker.account.specified=未指定 Docker 帐户
AbstractDockerProcessConnectionData.docker.account.found=找不到 Docker 帐户
DockerBeforeRunComposeLauncher.target.service.name.required=“目标服务名称”为必填项
DockerBeforeRunTaskLauncherBase.error.cant.find.docker=找不到 docker {0}
DockerComposeServiceStarter.starting.docker.compose=正在启动 docker-compose…
ConfigurationHelpAreaWrapper.run.remote.jvm.with.following.command.line.arguments=<html><body>使用以下命令行实参运行远程 JVM:</body></html>
DockerEnvironment.cant.run.process=无法运行进程: {0}
DockerEnvVarConfigurable.name.required=“名称”为必填项
DockerExtraHostConfigurable.error.hostname.required=主机名为必填项
DockerExtraHostConfigurable.error.ip.required=IP 为必填项
DockerLinkConfigurable.error.name.required=“名称”为必填项
DockerPortBindingConfigurable.error.container.port.required=容器端口为必填项
DockerPortBindingConfigurable.error.container.port.should.be.number=容器端口应为数字
DockerPortBindingConfigurable.error.host.port.should.be.number=主机端口应为数字
DockerRegistryConfigurable.error.address.required=地址为必填项
DockerRegistryConfigurable.error.username.required=用户名必填
DockerRegistryConfigurable.error.password.required=密码为必填项
DockerRemoteDebugExtensionEditor.error.invalid.port.number=端口号无效
DockerSingletonDeploymentSourceType.unknown.node.text=<unknown>
DockerTargetStepBase.title=Docker
DockerTargetType.VolumeContributionUI.mount.as.volume=作为卷安装
DockerTargetType.error.cant.find.server=找不到 Docker 服务器 {0}
DockerEnvironmentFactory.error.cant.find.image=找不到镜像: {0}
DockerEnvironmentFactory.progress.text.preparing.docker.target=正在准备 Docker 目标…
DockerUtil.error.docker.image.could.be.found=找不到 Docker 镜像“{0}”
DockerVolumeBindingConfigurable.error.container.path.required=容器路径为必填项
PushImageConfigurable.error.registry.required=注册表为必填项
PushImageConfigurable.error.repository.required=仓库为必填项
PushImageConfigurable.error.tag.required=标记为必填项
DockerComposeCli.error.version.command.time.out=docker-compose 版本命令超时
DockerComposeCli.error.version.command.nonzero.exit.code=docker-compose 版本命令以非零退出代码 {0} 完成
DockerComposeCli.error.cant.find.version.in.output=在 docker-compose 输出中找不到版本: {0}
DockerComposeProcessUtil.error.container.not.found=找不到 Docker Compose 容器 {0}
ComposeServiceExecCmd.error.path.required=Docker Compose 配置路径未定义
ComposeServiceExecCmd.error.service.name.required=Docker Compose 服务名称未定义
ComposeServiceExecCmd.error.command.required=命令未定义
ComposeServiceRunCmd.error.path.required=Docker Compose 配置路径未定义
ComposeServiceRunCmd.error.service.required=Docker Compose 服务名称未定义
ComposeServiceUpCmd.error.path.required=Docker Compose 配置路径未定义
ComposeServiceUpCmd.error.service.required=Docker Compose 服务名称未定义
DockerPullToTerminal.error.operation.failed=操作失败: {0}，有关详细信息，请参阅日志
ComposeApplicationRuntime.notification.group=docker-compose
RegistryRuntimeTask.notification.group=Docker
DockerMachineCommandException.exited.with.error.code=Docker Machine 退出，错误代码为 {0}
DockerMachineCommandException.exited.with.error.code.and.output=Docker Machine 退出，错误代码为 {0}: {1}
DockerMachineNotStartedException.start.docker.machine.and.refresh.skeletons=<a href="#">启动 Docker Machine ''{0}'' 并刷新框架</a>
DockerMachine.timeout.exceeded=已超时
DockerLinksEditor.NameColumn.title=名称
DockerLinksEditor.AliasColumn.title=别名
DockerVolumeBindingsEditor.ContainerPath.title=容器路径
DockerVolumeBindingsEditor.HostPath.title=主机路径
DockerVolumeBindingsEditor.ReadOnly.title=只读
DockerPropertiesRuntimeEditor.NameColumn.title=名称
DockerPropertiesRuntimeEditor.ValueColumn.title=值
DockerBeforeRunTaskUI.DescriptionColumn.title=端口
DockerBeforeRunTaskUI.LocalPortColumn.title=本地端口
DockerBeforeRunTaskUI.ContainerPortColumn.title=容器端口
DockerExtraHostsEditor.HostnameColumn.title=主机名
DockerExtraHostsEditor.IPColumn.title=IP
DockerEnvVarsEditor.ValueColumn.title=值
DockerEnvVarsEditor.NameColumn.title=名称
DockerComposeCliUtil.error.compose.execution.failed=Docker Compose 执行失败
DockerComposeIntegrationService.progress.title.updating.volume=正在更新 {0} 卷
DockerBeforeRunTaskProvider.error.unable.to.locate.started.container=无法定位已启动的容器
DockerBeforeRunTaskProvider.error.configuration.error=配置错误: {0}
DockerBeforeRunTaskProvider.error.launch.error=启动错误: {0}
DockerComposeCredentialsEditor.error.base.configuration.file.does.not.exist=基础配置文件“{0}”不存在
DockerInterpreterContainerSettingsEditor.port.bindings=端口绑定
DockerInterpreterContainerSettingsEditor.links=链接
DockerInterpreterContainerSettingsEditor.extra.hosts=额外主机
DockerInterpreterContainerSettingsEditor.volume.bindings=卷绑定
DockerInterpreterContainerSettingsEditor.environment.variables=环境变量
DockerTargetTerminalStepBase.terminal.title.docker=Docker
DockerTargetTerminalStepBase.status.connecting.to.docker.daemon=正在连接到 Docker 守护进程…
DockerTargetTerminalStepBase.error.cannot.connect.to.daemon.at.0=无法连接到 {0} 处的 Docker 守护程序。该 docker 守护程序是否正在运行?
DockerTargetTerminalStepBase.error.cannot.connect.to.daemon=无法连接到 Docker 守护进程。该 docker 守护进程是否正在运行?
RemoteDockerRuntime.progress.title.pulling.image=正在拉取“{0}”镜像…
RegistryRuntimeTask.current.of.total={0}/{1}
RegistrySelectionEditor.default.name.docker.registry=Docker 注册表
DockerCredentialsEditor.listing.docker.images=正在列出 Docker 镜像…
DockerApplicationRuntime.progress.message.pushing=正在推送 {0}
DockerApplicationRuntime.progress.message.pushed.successfully={0} 已成功推送
AttachedConsoleTab.name=附加的控制台
#
DockerTargetIntrospectable.launching.introspection.container=正在启动内省容器…
DockerTargetIntrospectable.introspection.container.launched=完成，容器已启动: {0}
DockerTargetIntrospectable.removing.introspection.container=正在移除内省容器
DockerTargetIntrospectable.introspecting.variable.not.found=正在内省 ${0}: 未找到
DockerTargetIntrospectable.introspecting.variable.result=正在内省 ${0}: {1}
DockerTargetIntrospectable.introspecting.introspecting.image.environment.variables=正在内省镜像环境变量…
DockerTargetIntrospectable.introspecting.image.done=完成，在检查结果中找到 {0} 个变量
DockerDownloadVolume.progress.message.executing.command=正在执行: `{0}`
PrepareImageOperation.unable.to.find.an.image.for.introspection=找不到用于内省的镜像
PrepareImageOperation.failed.to.find.image.for.introspection=找不到用于内省的镜像: {0}
BuildImageOperation.build.completed=构建已完成
BuildImageOperation.waiting.for.build.operation=正在等待构建运算…
BuildImageOperation.connected=已连接
PrepareImageOperation.introspection.completed.with.error=内省完成但有错误: {0}
PrepareImageOperation.introspection.completed=内省完成
PullImageOperation.pull.completed=拉取完成项
PullImageOperation.waiting.for.pull.operation=正在等待拉取运算…
PullImageOperation.connected=已连接
ProjectPathOnRootRow.row.project.path.on.target=目标的项目路径:
ProjectPathOnRootRow.row.project.path.on.target.comment=默认情况下，运行配置将在有关复制必要文件的设置中使用此路径
DockerTargetConfigurable.button.rebuild.image=重新构建镜像
DockerTargetConfigurable.wizard.title.rebuild.image=重新构建镜像
DockerTargetConfigurable.language.runtime.label=语言运行时:
DockerConfigureLanguageStep.title.label=项目目录和语言运行时配置
DockerTargetMainStep.error.cant.finish.now=现在无法完成
DockerTargetMainStep.error.dockerfile.must.be.selected=未选择 Dockerfile
DockerTargetMainStep.error.image.tag.is.required=未指定镜像标记
DockerTargetEnvironmentConfiguration.error.connection.to.docker.required=未连接到 Docker
DockerTargetEnvironmentConfiguration.error.path.to.dockerfile.to.build.required=未指定要构建的 Dockerfile 的路径
DockerTargetEnvironmentConfiguration.error.image.tag.to.pull.required=未指定要拉取的镜像标记
DockerTargetEnvironmentConfiguration.error.container.options.error=容器选项错误: {0}
DockerTargetEnvironmentConfiguration.error.build.image.options.error=构建镜像选项错误: {0}
DockerMachineConfigurable.message.not.valid.executable={0} 不是有效的 {1} 可执行文件
DockerMachineConfigurable.message.does.not.exists={0} 不存在
DockerMachineConfigurable.message.not.executable={0} 不是可执行文件
DockerMachineConfigurable.message.executable.not.specified=可执行文件未指定
DockerMachineConfigurable.message.can't.find.executable=找不到可执行文件
CreateTerminalAction.tab.title=终端({0})
DockerCliImageBuilder.image.build.failed.message=镜像构建失败，退出代码为 {0}。
ComposeDeploymentRuntime.process.finished.error.message=`docker-compose` 进程结束，退出代码为 {0}\n\n
RemoteDockerApplicationRuntime.untagged.image=未标记的镜像
RemoteDockerApplicationRuntime.untagged.container=未标记的容器
#
DockerfileDocumentationProvider.online.documentation=在线文档
DockerLogConsoleView.checkbox.show.previous.sessions.lines=显示以前的会话
DockerLogConsoleView.checkbox.show.timestamps=显示时间戳
DockerLogConsoleView.label.folding.for.previous.sessions.lines.by=折叠深度:
#
DockerComposeActions.UpOneServiceAsTemporaryAction.text=在 ''{0}'' 上 up
ComposeDeleteServiceAction.confirmation=删除 `{1}` 服务中的 {0}?
DockerVolumeDetails.VolumePropertiesEditor.property.name=名称
DockerVolumeDetails.VolumePropertiesEditor.property.driver=驱动程序
DockerVolumeDetails.VolumePropertiesEditor.property.mount.point=装入点
DockerVolumeDetails.VolumePropertiesEditor.property.attached.to=已附加到
DockerVolumeDetails.VolumePropertiesEditor.property.not.attached=未附加
DockerNetworkDetails.NetworkPropertiesEditor.property.name=名称
DockerNetworkDetails.NetworkPropertiesEditor.property.id=网络 ID
DockerNetworkDetails.NetworkPropertiesEditor.property.scope=范围
DockerNetworkDetails.NetworkPropertiesEditor.property.driver=驱动程序
DockerNetworkDetails.NetworkPropertiesEditor.property.ipv6.enabled=已启用 IPv6
DockerNetworkDetails.NetworkPropertiesEditor.property.internal=内部
DockerNetworkDetails.NetworkPropertiesEditor.property.attachable=可附加
DockerNetworkDetails.ContainersEditor.title=容器
DockerNetworkDetails.ContainersEditor.header.container=容器
DockerNetworkDetails.ContainersEditor.header.ipv4=IPv4
DockerNetworkDetails.ContainersEditor.header.ipv6=IPv6
DockerNetworkDetails.IpamPropertiesEditor.title=IPAM
DockerNetworkDetails.IpamPropertiesEditor.property.driver=驱动程序
DockerNetworkDetails.IpamPropertiesEditor.property.network.id=网络 ID
DockerNetworkDetails.IpamPropertiesEditor.property.subnet=子网
DockerNetworkDetails.IpamPropertiesEditor.property.gateway=网关
DockerNetworkDetails.IpamPropertiesEditor.property.ip.range=IP 范围





DockerComposeApplication.unsupported.version.message=具有不受支持的 compose 版本的服务
DockerComposeService.unsupported.version.message=将 compose 更新到 1.25.0 或最新版本，然后重新创建此服务以获得完整的插件支持
DockerComposeDetails.system.log=系统日志
DockerDeleteProvider.dialog.hint=\n您可以删除一个元素和所有依赖项，也可以删除一些依赖项并保留该元素，但不能保留依赖项并删除元素。
DockerDeleteProvider.button.expand.all=全部展开
DockerDeleteProvider.button.collapse.all=全部收起
DockerDeleteProvider.button.select.all=全选
DockerDeleteProvider.button.deselect.all=取消全选
ConnectNetworkDialog.specify.container=指定容器
ConnectNetworkDialog.title=连接网络
ConnectNetworkDialog.popup.title=连接网络选项
ConnectNetworkDialog.ok.button.text=连接
ConnectNetworkDialog.validation.empty.container.name=容器名称不能为空
ConnectNetworkDialog.validation.container.not.exist=不存在使用此名称的容器
CreateVolumeAction.dialog.title=创建卷
CreateVolumeAction.dialog.popup.title=创建卷选项
CreateVolumeAction.dialog.name.field.empty.text=指定卷名
CreateVolumeAction.dialog.name.field.validation.already.exists=已存在使用此名称的卷
CreateNetworkAction.dialog.title=创建网络
CreateNetworkAction.dialog.popup.title=创建网络选项
CreateNetworkAction.dialog.name.field.empty.text=指定网络名称
CreateNetworkAction.dialog.name.field.validation.empty=网络名称不能为空
CreateNetworkAction.dialog.name.field.validation.already.exists=已存在使用此名称的网络
CreateNetworkAction.dialog.driver.field.popup.description=用于管理网络的驱动程序(默认为“网桥”)
CreateNetworkAction.dialog.driver.field.validation.not.in.swarm.mode=此客户端不是 Swarm 管理器。使用 "docker swarm init" 或 "docker swarm join"
CreateNetworkAction.dialog.attachable.field.popup.description=启用手动附加容器
CreateNetworkAction.dialog.internal.field.popup.description=限制对网络的外部访问
action.Docker.RemoteServers.Rerun.text=重新运行
DockerComposeDeploymentEditor.dialog.message.not.valid.project.name="{0}" 不是有效的项目名称
ConnectNetworkDialog.validation.container.not.running=容器未运行
DockerPortBindingDialog.validation.not.valid.port=''{0}'' 不是有效的端口号
DockerPortBindingDialog.validation.not.valid.port.range=端口号不能小于 0 和大于 65335
DockerPortBindingDialog.host.ip.popup.description=(如未指定，将使用 0.0.0.0)
DockerPortBindingDialog.host.port.popup.description=(如未指定，将使用第一个可用端口)
PruneAction.dialog.containers.message=移除所有停止的容器?
PruneAction.dialog.images.message=移除所有未使用的镜像?
PruneAction.dialog.volumes.message=移除所有未使用的卷?
PruneAction.dialog.networks.message=移除所有未使用的网络?