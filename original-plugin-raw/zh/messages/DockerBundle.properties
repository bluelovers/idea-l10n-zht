AbstractDockerProcessConnectionData.docker.account.found=找不到 Docker 帐户
AbstractDockerProcessConnectionData.docker.account.specified=未指定 Docker 帐户
AddBacklashesQuickFix.intention.family=添加反斜杠
AddContainerManagementToolActionGroup.text=添加容器工具
AddDockerConnectionAction.title=连接…
AddDockerRegistryAction.title=Docker 注册表…
AttachedConsoleTab.name=附加的控制台
BuildImageOperation.build.completed=构建已完成
BuildImageOperation.connected=已连接
BuildImageOperation.waiting.for.build.operation=正在等待构建运算…
CommitContainerAction.ok.button=提交
CommitContainerAction.placeholder=新镜像名称
CommitContainerAction.task.name=提交容器
CommitContainerAction.title=提交容器
CommitContainerAction.validation.image.name.exists=使用此名称的镜像已存在
CommitContainerAction.validation.validate.name=''{0}'' 不是有效的镜像名称
CommitContainerAction.validation.validate.tag=''{0}'' 不是有效的镜像标记
CommitContainerAction.windows.running.container.error=Windows 不支持提交正在运行的 Windows 容器
CommitContainerAction.windows.running.container.stop.button=停止容器并显示提交对话框
ComposeApplicationRuntime.notification.group=docker-compose
ComposeDeleteServiceAction.confirmation=删除 `{1}` 服务中的 {0}?
ComposeDeploymentRuntime.process.finished.error.message=`docker-compose` 进程结束，退出代码为 {0}\n\n
ComposeRemoveOrphansAction.dialog.message=删除所有无效服务?
ComposeScaleAction.Dialog.message=容器数量\:
ComposeScaleAction.Dialog.title=扩展
ComposeServiceExecCmd.error.command.required=命令未定义
ComposeServiceExecCmd.error.path.required=Docker Compose 配置路径未定义
ComposeServiceExecCmd.error.service.name.required=Docker Compose 服务名称未定义
ComposeServiceRunCmd.error.path.required=Docker Compose 配置路径未定义
ComposeServiceRunCmd.error.service.required=Docker Compose 服务名称未定义
ComposeServiceRuntime.status.files.not.exists=从中创建此服务的 ''{1}'' {0,choice,1\#文件|2\#文件}{0,choice,1\#不存在|2\#不存在}
ComposeServiceRuntime.status.service.not.exit=在 ''{1}'' {2,choice,1\#文件|2\#文件}中找不到 ''{0}'' 服务
ComposeServiceRuntime.status.stopped=已停止
ComposeServiceUpCmd.error.path.required=Docker Compose 配置路径未定义
ComposeServiceUpCmd.error.service.required=Docker Compose 服务名称未定义
ConnectNetworkDialog.ok.button.text=连接
ConnectNetworkDialog.popup.title=连接网络选项
ConnectNetworkDialog.specify.container=指定容器
ConnectNetworkDialog.title=连接网络
ConnectNetworkDialog.validation.container.not.exist=不存在使用此名称的容器
ConnectNetworkDialog.validation.container.not.running=容器未运行
ConnectNetworkDialog.validation.empty.container.name=容器名称不能为空
ConnectNetworkDialog.validation.endpoint.already.exists=网络 ''{1}'' 中已有名称为 ''{0}'' 的端点
ConsoleTab.title=控制台
Container.check.health.status.tooltip=检查运行状况
Container.health.status.healthy=正常
Container.health.status.starting=运行状况\: 正在启动…
Container.health.status.unhealthy=不正常
Container.healthy.status.tooltip=正常
Container.paused.status.tooltip=已暂停
Container.running.status.tooltip=正在运行
Container.stopped.status.tooltip=已停止
Container.unhealthy.status.tooltip=不正常
ContainerLogTab.title=日志
CreateContainerAction.popup.defaultAction=创建…
CreateContainerAction.popup.title=创建容器
CreateNetworkAction.dialog.attachable.field.popup.description=启用手动附加容器
CreateNetworkAction.dialog.driver.field.popup.description=用于管理网络的驱动程序(默认为“网桥”)
CreateNetworkAction.dialog.driver.field.validation.not.in.swarm.mode=此客户端不是 Swarm 管理器。使用 "docker swarm init" 或 "docker swarm join"。
CreateNetworkAction.dialog.internal.field.popup.description=限制对网络的外部访问
CreateNetworkAction.dialog.name.field.empty.text=指定网络名称
CreateNetworkAction.dialog.name.field.validation.already.exists=已存在使用此名称的网络
CreateNetworkAction.dialog.name.field.validation.empty=网络名称不能为空
CreateNetworkAction.dialog.popup.title=创建网络选项
CreateNetworkAction.dialog.tags.group.driver.name=驱动程序
CreateNetworkAction.dialog.title=创建网络
CreateTerminalAction.tab.title=终端({0})
CreateVolumeAction.dialog.name.field.empty.text=指定卷名
CreateVolumeAction.dialog.name.field.validation.already.exists=已存在使用此名称的卷
CreateVolumeAction.dialog.popup.title=创建卷选项
CreateVolumeAction.dialog.title=创建卷
Docker.openProject.progress=正在打开项目…
Docker.running.state=正在运行\: ({0}/{1})
DockerAbstractDashboardTab.action.add=添加…
DockerAbstractDashboardTab.action.edit.hint=编辑
DockerAbstractDashboardTab.action.remove.hint=移除
DockerAgentDeploymentImpl.deployed.successfully=已成功部署 ''{0}''。
DockerAgentDeploymentImpl.deploying=正在部署 ''{0}''…
DockerAgentDeploymentImpl.failed.to.deploy=无法部署 ''{0}''\: {1}
DockerAgentDeploymentImpl.interrupted.by.user=已被用户中断…
DockerApplicationRuntime.progress.message.pushed.successfully={0} 已成功推送
DockerApplicationRuntime.progress.message.pushing=正在推送 {0}
DockerAsyncAction.progress.title=正在执行 ''{0}'' 操作
DockerBuildLogTab.title=构建日志
DockerBuildSettingsFragments.build.args.fragment=构建实参
DockerBuildSettingsFragments.build.options.actionHint=为 `docker build` 命令指定其他选项
DockerBuildSettingsFragments.build.options.fragment=构建选项
DockerBuildSettingsFragments.context.folder.actionHint=指定要在构建期间发送到守护程序的文件夹
DockerBuildSettingsFragments.context.folder.fragment=上下文文件夹
DockerBuildSettingsUI.BuildArgsField.dialogEmptyText=无构建实参
DockerBuildSettingsUI.BuildArgsField.dialogTitle=构建实参
DockerBuildSettingsUI.DockerBuildOptionsField.onParseError=无法解析构建 CLI 选项\: {0}
DockerBuildSettingsUI.build.args.text=构建实参\:
DockerBuildSettingsUI.build.options.text=构建选项\:
DockerBuildSettingsUI.context.folder.text=上下文文件夹\:
DockerBuildSettingsUI.dockerfile.text=Dockerfile\:
DockerBuildSettingsUI.image.tag.text=镜像标记\:
DockerCliOptionsField.onParseError=无法解析命令行选项\: {0}
DockerCloudConfigurable.certificates.folder.text=证书文件夹\:
DockerCloudConfigurable.chooser.certificates.title=选择证书位置
DockerCloudConfigurable.connect.daemon.text=使用以下方式连接到 Docker 守护进程\:
DockerCloudConfigurable.docker.for.mac.radio.title=Docker for Mac
DockerCloudConfigurable.docker.for.windows.radio.title=Docker for Windows
DockerCloudConfigurable.engine.url.text=引擎 API URL\:
DockerCloudConfigurable.error.apiUrlRequired=需要 API URL
DockerCloudConfigurable.error.certificatesFolder.missing={0} 下没有证书文件夹
DockerCloudConfigurable.error.connectionNotSpecified=指定连接类型
DockerCloudConfigurable.tcp.socket.text=TCP 套接字
DockerCloudConfigurable.unix.socket.text=Unix 套接字\:
DockerCloudType.presentable.name=Docker
DockerCloudType.run.configuration.type.presentable.name=Docker
DockerColorAnnotator.unresolvedVariableRef=无法解析变量 ''{0}''
DockerCompose.failed.to.change.ownership.of.docker.volume=无法更改卷的所有权
DockerCompose.service.user.uid.0=Compose 服务中用户的 UID\: {0}
DockerComposeActions.UpOneServiceAsTemporaryAction.text=在 ''{0}'' 上 up
DockerComposeApplication.unsupported.version.message=具有不受支持的 Docker Compose 版本的服务
DockerComposeCli.error.cant.find.version.in.output=在 `docker compose version` 输出中找不到版本\: {0}
DockerComposeCli.error.version.command.nonzero.exit.code=`docker compose version` 命令以非零退出代码 {0} 完成
DockerComposeCli.error.version.command.time.out=`docker compose version` 命令超时
DockerComposeCliUtil.error.compose.execution.failed=Docker Compose 执行失败
DockerComposeCredentialsEditor.configuration.files.text=配置文件\:
DockerComposeCredentialsEditor.environment.variables.text=环境变量(&E)
DockerComposeCredentialsEditor.error.base.configuration.file.does.not.exist=基础配置文件“{0}”不存在
DockerComposeCredentialsEditor.getting.services.from.compose.configuration=正在从 Docker Compose 配置文件获取服务列表…
DockerComposeCredentialsEditor.no.service.placeholder=<Select service>
DockerComposeCredentialsEditor.processing=正在处理 Docker Compose 配置…
DockerComposeCredentialsEditor.project.name.text=项目名称\:
DockerComposeCredentialsEditor.project.name.validate.lowercase=项目名称必须为小写。
DockerComposeCredentialsEditor.project.name.validate.symbol=项目名称中不允许使用“{0}”。
DockerComposeCredentialsEditor.server.text=服务器\:
DockerComposeCredentialsEditor.service.text=服务\:
DockerComposeCredentialsEditor.validate.files.not.chosen=未选择配置文件
DockerComposeCredentialsEditor.validate.no.services.defined=配置文件中未定义任何服务
DockerComposeCredentialsEditor.validate.server.not.selected=未选择 Docker 服务器
DockerComposeCredentialsEditor.validate.service.name.not.selected=未选择服务名称
DockerComposeCredentialsType.name=Docker Compose
DockerComposeDeploymentEditor.compose.files.text=Compose 文件\:
DockerComposeDeploymentEditor.dialog.message.not.valid.project.name=“{0}”不是有效的项目名称
DockerComposeDeploymentEditor.down.remove.images.all=所有
DockerComposeDeploymentEditor.down.remove.images.all.desc=--rmi all
DockerComposeDeploymentEditor.down.remove.images.all.hint=移除任何服务使用的所有镜像
DockerComposeDeploymentEditor.down.remove.images.default=无
DockerComposeDeploymentEditor.down.remove.images.default.hint=不移除镜像
DockerComposeDeploymentEditor.down.remove.images.group=`down` 时移除镜像
DockerComposeDeploymentEditor.down.remove.images.group.hint=配置终止时应移除的镜像
DockerComposeDeploymentEditor.down.remove.images.local=局部
DockerComposeDeploymentEditor.down.remove.images.local.desc=--rmi local
DockerComposeDeploymentEditor.down.remove.images.local.hint=仅移除没有自定义标记的镜像
DockerComposeDeploymentEditor.down.remove.orphans=`down` 时移除孤立项
DockerComposeDeploymentEditor.down.remove.orphans.actionHint=使用 --remove-orphans 选项执行 `docker-compose down` 以移除在 Compose 文件中未定义的服务所对应的容器。
DockerComposeDeploymentEditor.down.remove.volumes=`down` 时移除卷
DockerComposeDeploymentEditor.down.remove.volumes.actionHint=使用 --volumes 选项执行 `docker-compose down`，在终止时同时删除已命名卷和匿名卷
DockerComposeDeploymentEditor.enable.compatibility.mode=启用兼容性模式
DockerComposeDeploymentEditor.enable.compatibility.mode.hint=启用后，docker-compose 将读取每个服务定义的 deploy 部分，并尝试将其转换为等效的第 2 版形参。
DockerComposeDeploymentEditor.env.file.actionHint=指定用于设置环境变量的文件
DockerComposeDeploymentEditor.env.file.browse.title=选择环境变量文件
DockerComposeDeploymentEditor.env.file.does.not.exist=''{0}'' 中没有环境变量文件
DockerComposeDeploymentEditor.env.file.label=环境变量文件\:
DockerComposeDeploymentEditor.env.file.name=环境变量文件
DockerComposeDeploymentEditor.env.file.not.valid=无法从 ''{0}'' 读取环境变量文件
DockerComposeDeploymentEditor.environment.variables=环境变量
DockerComposeDeploymentEditor.environment.variables.actionHint=设置 Docker Compose 进程的环境变量。这些变量不对任何容器提供。
DockerComposeDeploymentEditor.group.up=docker-compose up
DockerComposeDeploymentEditor.group.up.actionHint=通过附加的 'docker-compose up' 选项运行
DockerComposeDeploymentEditor.group.up.childrenGroupName=docker-compose up 选项
DockerComposeDeploymentEditor.group.up.name=应用 `up` 选项
DockerComposeDeploymentEditor.group.up.v2=docker compose up
DockerComposeDeploymentEditor.incompatible.error.mask=“{0}”与{1}不兼容
DockerComposeDeploymentEditor.no.deps.actionHint=不启动链接的服务
DockerComposeDeploymentEditor.no.deps.desc=--no-deps
DockerComposeDeploymentEditor.no.deps.name=所选服务
DockerComposeDeploymentEditor.profiles.actionHint=配置文件允许通过选择性地启用服务来针对各种用法和环境调整 Compose 应用程序模型。
DockerComposeDeploymentEditor.profiles.emptyText=指定以逗号分隔的配置文件列表
DockerComposeDeploymentEditor.profiles.label=配置文件\:
DockerComposeDeploymentEditor.profiles.name=配置文件
DockerComposeDeploymentEditor.project.name=项目名称\:
DockerComposeDeploymentEditor.project.name.name=指定项目名称
DockerComposeDeploymentEditor.run=运行
DockerComposeDeploymentEditor.services.name=指定服务
DockerComposeDeploymentEditor.services.popup.title=切换服务
DockerComposeDeploymentEditor.services.text=服务\:
DockerComposeDeploymentEditor.up.abort.on.exit.actionHint=如果任何一个容器停止，则停止所有容器
DockerComposeDeploymentEditor.up.abort.on.exit.desc=--abort-on-container-exit
DockerComposeDeploymentEditor.up.abort.on.exit.name=容器退出时
DockerComposeDeploymentEditor.up.always.recreate.actionHint=重新创建依赖的容器
DockerComposeDeploymentEditor.up.always.recreate.desc=--always-recreate-deps
DockerComposeDeploymentEditor.up.always.recreate.name=重新创建依赖项
DockerComposeDeploymentEditor.up.attach.deps.actionHint=附加到所有启动的容器及其依赖项
DockerComposeDeploymentEditor.up.attach.deps.desc=--attach-dependencies
DockerComposeDeploymentEditor.up.attach.deps.name=所选部署和依赖项
DockerComposeDeploymentEditor.up.build.actionHint=在启动容器之前构建镜像
DockerComposeDeploymentEditor.up.build.desc=--build
DockerComposeDeploymentEditor.up.build.name=始终
DockerComposeDeploymentEditor.up.detach.actionHint=在分离模式下运行
DockerComposeDeploymentEditor.up.detach.desc=--detach
DockerComposeDeploymentEditor.up.detach.name=无
DockerComposeDeploymentEditor.up.exit.code.from=服务退出代码
DockerComposeDeploymentEditor.up.exit.code.from.actionHint=返回所选服务容器的退出代码。在指定服务中的容器停止时停止所有容器。
DockerComposeDeploymentEditor.up.exit.code.from.desc=--exit-code-from
DockerComposeDeploymentEditor.up.exit.code.from.name=返回退出代码
DockerComposeDeploymentEditor.up.exit.code.label=退出代码\:
DockerComposeDeploymentEditor.up.exit.code.suffix=返回所选服务的退出代码
DockerComposeDeploymentEditor.up.force.recreate.actionHint=即使容器的配置和镜像并未更改，也重新创建所有容器
DockerComposeDeploymentEditor.up.force.recreate.desc=--force-recreate
DockerComposeDeploymentEditor.up.force.recreate.name=所有
DockerComposeDeploymentEditor.up.group.attach.to=附加到
DockerComposeDeploymentEditor.up.group.attach.to.default=所选服务
DockerComposeDeploymentEditor.up.group.attach.to.default.hint=不附加到依赖的容器，而是附加到所有已启动的容器
DockerComposeDeploymentEditor.up.group.attach.to.hint=配置要显示输出流的容器
DockerComposeDeploymentEditor.up.group.build=构建
DockerComposeDeploymentEditor.up.group.build.default=仅缺失镜像
DockerComposeDeploymentEditor.up.group.build.default.hint=仅构建不可用的镜像
DockerComposeDeploymentEditor.up.group.build.hint=在启动容器前配置要构建的镜像
DockerComposeDeploymentEditor.up.group.recreate=重新创建容器
DockerComposeDeploymentEditor.up.group.recreate.default=更改的配置
DockerComposeDeploymentEditor.up.group.recreate.default.hint=如果配置或镜像更改，则替换容器
DockerComposeDeploymentEditor.up.group.recreate.hint=配置要停止的容器并替换为新容器
DockerComposeDeploymentEditor.up.group.start=启动
DockerComposeDeploymentEditor.up.group.start.default=所选部署和依赖项
DockerComposeDeploymentEditor.up.group.start.default.hint=启动指定服务和链接服务
DockerComposeDeploymentEditor.up.group.start.hint=配置要启动的服务
DockerComposeDeploymentEditor.up.group.stop.containers=停止容器
DockerComposeDeploymentEditor.up.group.stop.containers.default=手动
DockerComposeDeploymentEditor.up.group.stop.containers.default.hint=手动停止容器
DockerComposeDeploymentEditor.up.group.stop.containers.hint=配置容器停止方式
DockerComposeDeploymentEditor.up.no.build.actionHint=不构建镜像。如果缺失，则以错误停止。
DockerComposeDeploymentEditor.up.no.build.desc=--no-build
DockerComposeDeploymentEditor.up.no.build.name=从不
DockerComposeDeploymentEditor.up.no.recreate.actionHint=即使配置更改，也不重新创建现有容器
DockerComposeDeploymentEditor.up.no.recreate.desc=--no-recreate
DockerComposeDeploymentEditor.up.no.recreate.name=无
DockerComposeDeploymentEditor.up.no.start.actionHint=创建服务后不启动它们
DockerComposeDeploymentEditor.up.no.start.desc=--no-start
DockerComposeDeploymentEditor.up.no.start.name=无
DockerComposeDeploymentEditor.up.noLogPrefix.actionHint=不在日志中打印前缀
DockerComposeDeploymentEditor.up.noLogPrefix.desc=--no-log-prefix
DockerComposeDeploymentEditor.up.noLogPrefix.name=不在日志中打印前缀
DockerComposeDeploymentEditor.up.remove.orphans.actionHint=移除 Compose 文件中未定义的服务的容器
DockerComposeDeploymentEditor.up.remove.orphans.desc=--remove-orphans
DockerComposeDeploymentEditor.up.remove.orphans.name=移除孤立项
DockerComposeDeploymentEditor.up.renew.anon.volumes.actionHint=重新创建匿名卷，而不是从以前的容器中检索数据
DockerComposeDeploymentEditor.up.renew.anon.volumes.desc=--renew-anon-volumes
DockerComposeDeploymentEditor.up.renew.anon.volumes.name=重新创建匿名卷
DockerComposeDeploymentEditor.up.scale.desc=--scale
DockerComposeDeploymentEditor.up.scale.hint=设置服务的容器数
DockerComposeDeploymentEditor.up.scale.name=重写扩展
DockerComposeDeploymentEditor.up.timeout.desc=--timeout
DockerComposeDeploymentEditor.up.timeout.dialog.message.not.valid.integer={0} 不是有效的整数
DockerComposeDeploymentEditor.up.timeout.dialog.message.timeout.cannot.be.greater=超时不能超过 1000
DockerComposeDeploymentEditor.up.timeout.dialog.message.timeout.cannot.be.less=超时不能小于 0
DockerComposeDeploymentEditor.up.timeout.hint=以秒为单位设置终止容器的超时。容器首先会收到 SIGTERM，然后在指定的超时后收到 SIGKILL。
DockerComposeDeploymentEditor.up.timeout.label=超时\:
DockerComposeDeploymentEditor.up.timeout.name=SIGKILL 超时
DockerComposeDeploymentEditor.up.timeout.suffix=秒
DockerComposeDeploymentSourceType.deploymentName=Compose\: {0}
DockerComposeDeploymentSourceType.error.file.does.not.exist=''{0}'' 下没有 Compose 文件
DockerComposeDeploymentSourceType.error.path.required=需要 Compose 文件的路径
DockerComposeDeploymentSourceType.name=Docker Compose
DockerComposeDeploymentSourceType.suggestRunConfigurationName={0}\: Compose 部署
DockerComposeExecutionFailed.notification.action.title=显示设置…
DockerComposeFilesTextField.DockerComposeFileDialog.title=Docker Compose 配置文件
DockerComposeFilesTextField.DockerComposeFileDialog.title.chooser.fileOnly=选择配置文件
DockerComposeFilesTextField.DockerComposeFileDialog.title.chooser.fileOrFolder=选择配置文件或文件夹
DockerComposeInspection.groupKey=Docker-compose
DockerComposeIntegrationService.progress.title.updating.volume=正在更新 {0} 卷
DockerComposeProcessUtil.error.container.not.found=找不到 Docker Compose 容器 {0}
DockerComposeService.unsupported.version.message=将 Docker Compose 更新到 1.25.0 或更高版本，然后重新创建此服务以获得完整的插件支持
DockerComposeServiceScaleDialog.column.name.scale=扩展到
DockerComposeServiceScaleDialog.column.name.service=服务
DockerComposeServiceScaleDialog.dialog.title=选择要扩展的服务
DockerComposeServiceScaleDialog.scale.to.label=扩展到\:
DockerComposeServiceScaleDialog.service.does.not.exist.error=指定的 docker-compose 文件中不存在“{0}”服务
DockerComposeServiceScaleDialog.service.label=服务\:
DockerComposeServiceScaleDialog.services.does.not.exist.error=指定的 docker-compose 文件中不存在 {0} 服务
DockerComposeServiceScaleDialog.title=设置要为每个服务运行的容器数(如果有 compose 文件，则重写该文件中的扩展)\:
DockerComposeServiceScalePairPanel.dialog.ok.text=保存
DockerComposeServiceStarter.starting.docker.compose=正在启动 docker-compose…
DockerComposeServicesField.empty.text=留空将运行所有服务
DockerComposeSettingsEditor.form.command=命令和选项\: 
DockerComposeSettingsEditor.form.command.preview=命令预览\:
DockerComposeSettingsEditor.form.name=Docker Compose
DockerComposeTargetMainStep.error.service.must.be.selected=未选择服务
DockerComposeTargetMainStep.step.description=创建一个新的 Docker Compose 目标
DockerConfigureLanguageStep.title.label=项目目录和语言运行时配置
DockerConnectionConfigurable.checkbox.detect.executable.paths.automatically=自动检测可执行文件路径
DockerConnectionsListConfigurable.AddActionGroup.text=添加容器工具
DockerContainer.settings=容器设置\:
DockerContainerBrowser.DownloadAction.description=将文件从 Docker 容器下载到临时文件
DockerContainerBrowser.DownloadAction.text=下载到临时目录
DockerContainerBrowser.ViewInEditorAction.description=在编辑器中查看 Docker 容器中的文件
DockerContainerBrowser.ViewInEditorAction.text=在编辑器中查看
DockerContainerBrowser.downloadTask.title=从 Docker 容器下载文件
DockerContainerBrowserTab.displayName=文件
DockerContainerBrowserTab.emptyText=启动容器以浏览文件
DockerContainerDashboardTab.button.restart=重启
DockerContainerDashboardTab.button.start=启动
DockerContainerDashboardTab.button.stop=停止
DockerContainerDashboardTab.button.terminal=终端
DockerContainerDashboardTab.confirm.deletion.message=是否要移除此元素并重新创建容器?
DockerContainerDashboardTab.confirm.deletion.title=确认删除
DockerContainerDashboardTab.port.read.and.write=读/写
DockerContainerDashboardTab.port.read.only=只读
DockerContainerDashboardTab.recreate.container=重新创建容器
DockerContainerDashboardTab.segment.env.var=环境变量
DockerContainerDashboardTab.segment.ports=端口
DockerContainerDashboardTab.segment.volumes=卷
DockerContainerSettingsFragments.all.ports.actionHint=将所有暴露端口发布到随机端口
DockerContainerSettingsFragments.all.ports.fragment=随机发布所有暴露端口
DockerContainerSettingsFragments.attach.to.container.name=附加到容器
DockerContainerSettingsFragments.attach.to.container.tooltip=附加到容器并在启动时打开 `Attached Console`
DockerContainerSettingsFragments.bind.mounts.actionHint=将主机目录或命名卷绑定挂载到容器
DockerContainerSettingsFragments.bind.mounts.fragment=绑定挂载
DockerContainerSettingsFragments.bind.ports.actionHint=将容器端口映射到主机端口
DockerContainerSettingsFragments.bind.ports.fragment=绑定端口
DockerContainerSettingsFragments.command.actionHint=要在新容器中运行的命令
DockerContainerSettingsFragments.command.fragment=命令
DockerContainerSettingsFragments.entrypoint.actionHint=覆盖镜像的默认 NTRYPOINT
DockerContainerSettingsFragments.entrypoint.fragment=入口点
DockerContainerSettingsFragments.environment.variables.actionHint=设置容器环境变量
DockerContainerSettingsFragments.environment.variables.fragment=环境变量
DockerContainerSettingsFragments.run.options.actionHint=为 `docker run` 命令指定其他选项
DockerContainerSettingsFragments.run.options.fragment=运行选项
DockerContainerSettingsUI.DockerRunOptionsField.onParseError=无法解析运行 CLI 选项\: {0}
DockerContainerSettingsUI.EnvVarsField.dialogEmptyText=无变量
DockerContainerSettingsUI.EnvVarsField.dialogTitle=环境变量
DockerContainerSettingsUI.all.text=所有
DockerContainerSettingsUI.bind.mounts.text=绑定挂载\:
DockerContainerSettingsUI.bind.ports.text=绑定端口\:
DockerContainerSettingsUI.command.text=命令\:
DockerContainerSettingsUI.entrypoint.text=入口点\:
DockerContainerSettingsUI.environment.variables.text=环境变量\:
DockerContainerSettingsUI.executable.panel.title=可执行文件
DockerContainerSettingsUI.exposedPortsHyperlink=<html>将公开端口发布到主机接口\:</html>
DockerContainerSettingsUI.run.options.text=运行选项\:
DockerContainerSettingsUI.specify.text=指定
DockerContainersGroupDetailsProvider.node.tooltip=从镜像 `{1}` 创建的 `{0}`
DockerConverterProvider.conversion.description=Docker 运行配置将转换为新格式
DockerCredentialsEditor.image.name.text=镜像名称\:
DockerCredentialsEditor.listing.docker.images=正在列出 Docker 镜像…
DockerCredentialsEditor.server.text=服务器\:
DockerCredentialsEditor.validate.image.not.specified=未指定 Docker 镜像名称
DockerCredentialsEditor.validate.server.not.selected=未选择 Docker 服务器
DockerCredentialsType.name=Docker
DockerDashboardTab.title=仪表板
DockerDeleteProvider.background.message=正在删除…
DockerDeleteProvider.button.collapse.all=全部收起
DockerDeleteProvider.button.deselect.all=取消全选
DockerDeleteProvider.button.expand.all=全部展开
DockerDeleteProvider.button.select.all=全选
DockerDeleteProvider.buttons.cancel=取消
DockerDeleteProvider.buttons.force.delete=全部删除
DockerDeleteProvider.buttons.smart.delete=选择并删除…
DockerDeleteProvider.confirmation.container.many={0} 个容器
DockerDeleteProvider.confirmation.container.one=1 个容器
DockerDeleteProvider.confirmation.dialog.text=由于存在依赖项，无法删除。删除依赖项以完成此操作。
DockerDeleteProvider.confirmation.image.many={0} 个镜像
DockerDeleteProvider.confirmation.image.one=1 个镜像
DockerDeleteProvider.confirmation.text.both.types=删除 {0} 和 {1}?
DockerDeleteProvider.confirmation.text.single.type=删除 {0}?
DockerDeleteProvider.confirmation.text.unspecified.type.many=删除 {0} 个条目?
DockerDeleteProvider.confirmation.text.unspecified.type.one=删除条目?
DockerDeleteProvider.confirmation.title=确认删除
DockerDeleteProvider.dialog.hint=\n只有删除一个元素的所有依赖项后，才能删除该元素。
DockerDeleteProvider.smart.delete.compose=Compose\: {0}
DockerDeleteProvider.smart.delete.dialog.ok.text=删除所选项
DockerDeleteProvider.smart.delete.dialog.title=检测到的依赖项
DockerDeploymentEditor.command.preview.text=命令预览\:
DockerDeploymentEditor.container.name.text=容器名称\:
DockerDeploymentEditor.image.id.text=镜像 ID 或名称\:
DockerDeploymentEditor.run.built.image.text=运行构建的镜像
DockerDeploymentSourcePathCombo.dialogDescription=指定要构建和运行的 Dockerfile 
DockerDeploymentSourcePathCombo.dialogTitle=Dockerfile
DockerDeploymentStatus.deleting=正在删除
DockerDeploymentStatus.starting=正在启动
DockerDeploymentStatus.stopping=正在停止
DockerDownloadVolume.progress.message.executing.command=正在执行\: `{0}`
DockerEnvVarConfigurable.name.required=“名称”为必填项
DockerEnvVarsEditor.NameColumn.title=名称
DockerEnvVarsEditor.ValueColumn.title=值
DockerEnvironment.cant.run.process=无法运行进程\: {0}
DockerEnvironment.changing.the.ownership.of.the.named.volume.0=正在更改命名卷 {0} 的所有权
DockerEnvironment.docker.image.user.0=Docker 镜像用户\: {0}
DockerEnvironment.failed.to.change.ownership.of.volume=无法更改 Docker 镜像“{0}”的卷的所有权
DockerEnvironmentFactory.error.cant.find.image=找不到镜像\: {0}
DockerEnvironmentFactory.progress.text.preparing.docker.target=正在准备 Docker 目标…
DockerExtraHostConfigurable.error.hostname.required=主机名为必填项
DockerExtraHostConfigurable.error.ip.required=IP 为必填项
DockerExtraHostConfigurable.hostname.text=主机名\:
DockerExtraHostConfigurable.ip.text=IP\:
DockerExtraHostsEditor.HostnameColumn.title=主机名
DockerExtraHostsEditor.IPColumn.title=IP
DockerFileAddOrCopySemanticInspection.display.name='ADD'/'COPY' 命令的无效目标
DockerFileAddOrCopySemanticInspection.error.quick.fix=添加尾随的 '/'
DockerFileAddOrCopySemanticInspection.error.target.must.be.folder=目标必须是目录，并以 '/' 结尾
DockerFileAndContextFolderUI.ContextFolderField.dialogDescription=指定上下文文件夹或默认留空
DockerFileAndContextFolderUI.ContextFolderField.dialogTitle=上下文文件夹
DockerFileArgumentCountInspection.display.name=实参数量错误
DockerFileArgumentCountInspection.error.at.least.N.arguments.required=至少需要 {0} 个实参
DockerFileArgumentCountInspection.error.exactly.one.argument.required=只需要一个实参
DockerFileAssignmentsInspection.display.name='key\=value' 对中无效的空格
DockerFileAssignmentsInspection.error.spacing.not.allowed=此处不允许空格
DockerFileAssignmentsInspection.remove.spaces=移除空格
DockerFileChooser.RefreshAction.description=刷新 Docker 容器文件系统树
DockerFileChooser.RefreshAction.text=刷新
DockerFileChooser.emptyPathText=选择要查看路径的项目
DockerFileChooser.emptyText=无法访问文件系统根。可能尚不支持这种 Docker 容器。
DockerFileChooser.loadingText=正在获取文件系统根…
DockerFileCopyHeredocInspection.display.name=heredoc 作为 ADD/COPY 的最后一个实参(目标)
DockerFileCopyHeredocInspection.problem={0} 目标实参不能是 heredoc
DockerFileDeploymentEditor.group.build.title=构建
DockerFileDeploymentEditor.group.run.actionHint=启动构建镜像的容器
DockerFileDeploymentEditor.group.run.option.name=运行选项
DockerFileDeploymentEditor.group.run.title=运行
DockerFileDeploymentSourceType.deploymentName={0} Dockerfile\: {1}
DockerFileDeploymentSourceType.error.dockerfile.does.not.exist=''{0}'' 下没有 Dockerfile
DockerFileDeploymentSourceType.error.path.required=需要 Dockerfile 文件的路径
DockerFileDeploymentSourceType.name=Dockerfile
DockerFileDeploymentSourceType.suggestRunConfigurationName={0}
DockerFileDetector.Notifier.disable=不再询问
DockerFileDetector.Notifier.message.full=您可以为以下文件创建 Docker 运行配置\:
DockerFileDetector.Notifier.message.limited=您可以为 {0} 个文件创建 Docker 运行配置，其中包括以下文件\:
DockerFileDetector.Notifier.message.one=您可以为以下文件创建 Docker 运行配置\:
DockerFileDetector.Notifier.title=检测到 {0,choice,1\#Dockerfile|2\#Dockerfile}
DockerFileDetector.notification.group=Docker\: Dockerfile 检测
DockerFileDuplicatedStageNameInspection.display.name=重复的暂存名称
DockerFileDuplicatedStageNameInspection.problem=重复的暂存名称\: {0}
DockerFileEntrypointWithoutExecInspection.display.name=入口点 shell 形式缺少 'exec'
DockerFileEntrypointWithoutExecInspection.problem=ENTRYPOINT shell 命令缺少 'exec'
DockerFileEntrypointWithoutExecInspection.quickfix=在命令前添加 'exec'
DockerFileFindUsagesProvider.usageType.argVar=ARG 变量
DockerFileFindUsagesProvider.usageType.envVar=ENV 变量
DockerFileFindUsagesProvider.usageType.stage=阶段声明
DockerFileFindUsagesProvider.usageType.unknown=声明
DockerFileHeredocDelimitersInspection.display.name=heredoc 分隔符不匹配
DockerFileHeredocDelimitersInspection.problem=未闭合的 heredoc 分隔符\: {0}
DockerFileHeredocDelimitersInspection.quickfix=追加缺失的 heredoc 分隔符
DockerFileRunCommandMissingContinuationInspection.description=缺少连续字符
DockerFileRunCommandMissingContinuationInspection.display.name='RUN' 命令缺少连续字符
DockerFileRunLineMarkerProvider.BuildAsTemporaryRunConfig.text=在 ''{0}'' 上构建镜像
DockerFileRunLineMarkerProvider.BuildExistingRunConfig.text=为 ''{0}'' 构建镜像
DockerFileRunLineMarkerProvider.action.group.build=构建镜像
DockerFileRunLineMarkerProvider.action.group.run=运行
DockerFileSystem.error.can.not.get.contents=无法获取 {0} 的内容
DockerFileSystem.error.modification.not.supported=Docker 容器文件系统不支持修改\: {0}
DockerGroupRuntime.ContainersGroup.groupName=容器
DockerGroupRuntime.DevcontainersGroup.groupName=Dev Container
DockerGroupRuntime.ImagesGroup.groupName=镜像
DockerGroupRuntime.NetworksGroup.groupName=网络
DockerGroupRuntime.VolumesGroup.groupName=卷
DockerImageDashboardTab.action.create.container=创建容器
DockerImageDashboardTab.action.push.image=推送镜像
DockerImageDashboardTab.action.show.labels=显示标签
DockerImageDashboardTab.segment.containers=容器
DockerImageDashboardTab.segment.tags=标签
DockerImageDashboardTab.tag.image.dialog.button=标签
DockerImageDashboardTab.tag.image.dialog.field.repository=仓库
DockerImageDashboardTab.tag.image.dialog.field.tag=标签
DockerImageDashboardTab.tag.image.dialog.title=标记镜像
DockerImageDashboardTab.tag.main=主
DockerImageDeploymentEditor.pull.image=拉取镜像
DockerImageDeploymentEditor.pull.image.always=始终
DockerImageDeploymentEditor.pull.image.missing=缺少
DockerImageDeploymentEditor.pull.image.never=从未
DockerImageDeploymentSourceType.deploymentName={0} 镜像 ID\: {1}
DockerImageDeploymentSourceType.error.image.id.required=需要镜像 ID 或名称
DockerImageDeploymentSourceType.name=Docker 镜像
DockerImageDeploymentSourceType.suggestRunConfigurationName=Docker 镜像
DockerImageGroupDetails.ImagePullTab.title=镜像控制台
DockerImageLayersTab.analyzing=正在分析…
DockerImageLayersTab.analyzing.task=正在分析 {0} 的 Docker 镜像层…
DockerImageLayersTab.column.command=命令
DockerImageLayersTab.column.size=大小
DockerImageLayersTab.element.command=命令
DockerImageLayersTab.element.comment=注释
DockerImageLayersTab.element.created=已创建
DockerImageLayersTab.element.digest=摘要
DockerImageLayersTab.element.id=ID
DockerImageLayersTab.element.openable=可打开
DockerImageLayersTab.element.size=大小
DockerImageLayersTab.reproducible.image.tooltip=此镜像的日期已被省略。这对于“可重现的构建”是必要的。
DockerImageLayersTab.sort.by=排序依据
DockerImageLayersTab.sort.by.name=名称
DockerImageLayersTab.sort.by.size=大小
DockerImageLayersTab.status.empty.layer=空层
DockerImageLayersTab.status.layer.not.selected1=选择层以查看详细信息
DockerImageLayersTab.status.need.analyze=分析镜像以获得更多信息
DockerImageLayersTab.title=层
DockerImageLayersTab.value.missing=(缺少)
DockerInlayHintsProvider.name=Docker 运行已命名的阶段
DockerInlayHintsProvider.popup.title=“{0}”的操作
DockerInlayHintsProvider.tooltip.all=显示所有已命名的阶段配置
DockerInlayHintsProvider.tooltip.build=构建“{0}”暂存
DockerInlayHintsProvider.tooltip.run=运行“{0}”暂存
DockerInterpreterContainerSettingsEditor.disable.networking.text=禁用网络
DockerInterpreterContainerSettingsEditor.environment.variables=环境变量
DockerInterpreterContainerSettingsEditor.extra.hosts=额外主机
DockerInterpreterContainerSettingsEditor.links=链接
DockerInterpreterContainerSettingsEditor.network.mode.text=网络模式\:
DockerInterpreterContainerSettingsEditor.port.bindings=端口绑定
DockerInterpreterContainerSettingsEditor.publish.all.ports.text=发布所有端口
DockerInterpreterContainerSettingsEditor.run.options.text=运行选项\:
DockerInterpreterContainerSettingsEditor.volume.bindings=卷绑定
DockerInterpreterContainerSettingsEditorDialog.title=编辑 Docker 容器设置
DockerJsonFormStringLiteralsInspection.display.name=JSON 数组格式的带单引号的字符串
DockerJsonFormStringLiteralsInspection.problem=应为带双引号的字符串字面量
DockerJsonFormStringLiteralsInspection.quickfix=使用双引号包装
DockerLinkConfigurable.error.name.required=“名称”为必填项
DockerLinksEditor.AliasColumn.title=别名
DockerLinksEditor.NameColumn.title=名称
DockerLogConsoleView.checkbox.show.previous.sessions.lines=显示以前的会话
DockerLogConsoleView.checkbox.show.timestamps=显示时间戳
DockerLogConsoleView.folding.action.title=折叠
DockerLogConsoleView.folding.policy.days=天
DockerLogConsoleView.folding.policy.hours=小时
DockerLogConsoleView.folding.policy.minutes=分钟
DockerLogConsoleView.folding.policy.months=个月
DockerLogConsoleView.folding.policy.none=无
DockerLogConsoleView.folding.policy.seconds=秒
DockerLogConsoleView.folding.policy.years=年
DockerLogConsoleView.label.folding.for.previous.sessions.lines.by=折叠深度
DockerMappingConfigurable.browse.description=选择共享文件夹路径
DockerMappingConfigurable.browse.title=共享文件夹路径
DockerMappingConfigurable.displayName=路径映射
DockerMappingConfigurable.error.local.path.required=需要本地路径
DockerMappingConfigurable.error.remote.path.required=需要虚拟机路径
DockerMappingConfigurable.local.path.text=本地路径\:
DockerMappingConfigurable.virtual.machine.path.text=虚拟机路径\:
DockerMissingShellPluginNotificationProvider.do.not.show.again=不再显示
DockerMissingShellPluginNotificationProvider.enable.plugin=启用 `Shell Script` 插件
DockerMissingShellPluginNotificationProvider.install.plugin=安装 `Shell Script` 插件
DockerMissingShellPluginNotificationProvider.text=需要 `Shell Script` 插件才能提供完整的 Dockerfile 支持
DockerNetworkDetails.ContainersEditor.title=容器
DockerNetworkDetails.DockerNetworkDashboardTab.disconnect=断开连接
DockerNetworkDetails.DockerNetworkDashboardTab.driver=驱动程序
DockerNetworkDetails.DockerNetworkDashboardTab.gateway=网关
DockerNetworkDetails.DockerNetworkDashboardTab.ip.range=IP 范围
DockerNetworkDetails.DockerNetworkDashboardTab.ipv6.disabled=IPv6 已禁用
DockerNetworkDetails.DockerNetworkDashboardTab.network=网络
DockerNetworkDetails.DockerNetworkDashboardTab.subnet=子网
DockerNetworkDetails.IpamPropertiesEditor.title=IPAM
DockerNetworkDetails.NetworkPropertiesEditor.property.attachable=可附加
DockerNetworkDetails.NetworkPropertiesEditor.property.driver=驱动程序
DockerNetworkDetails.NetworkPropertiesEditor.property.id=网络 ID
DockerNetworkDetails.NetworkPropertiesEditor.property.internal=内部
DockerNetworkDetails.NetworkPropertiesEditor.property.ipv6.enabled=已启用 IPv6
DockerNetworkDetails.NetworkPropertiesEditor.property.scope=作用域
DockerPortBindingDialog.container.port.placeholder=指定容器端口
DockerPortBindingDialog.container.port.tooltip=容器端口
DockerPortBindingDialog.host.ip.name=主机 IP
DockerPortBindingDialog.host.ip.placeholder=指定主机 IP
DockerPortBindingDialog.host.ip.popup.description=(如未指定，将使用 0.0.0.0)
DockerPortBindingDialog.host.port.name=主机端口
DockerPortBindingDialog.host.port.placeholder=指定主机端口
DockerPortBindingDialog.host.port.popup.description=(如未指定，将使用第一个可用端口)
DockerPortBindingDialog.ports.binding.options=端口绑定选项
DockerPortBindingDialog.protocol.group.name=协议
DockerPortBindingDialog.protocol.group.popup.description=(默认 tcp)
DockerPortBindingDialog.validation.container.port.cant.be.empty=容器端口不能为空
DockerPortBindingDialog.validation.not.valid.ip=''{0}'' 不是有效的 IP
DockerPortBindingDialog.validation.not.valid.port=''{0}'' 不是有效的端口号
DockerPortBindingDialog.validation.not.valid.port.range=端口号不能小于 0 和大于 65335
DockerPortBindingDialog.validation.port.already.allocated=''{0}\:{1}'' 端口已被分配
DockerPortBindingsEditor.containerPort=容器端口
DockerPortBindingsEditor.hostIP=主机 IP
DockerPortBindingsEditor.hostPort=主机端口
DockerPortBindingsEditor.protocol=协议
DockerPortBindingsField.PortBindingsTable.containerPort=容器端口
DockerPortBindingsField.PortBindingsTable.hostIP=主机 IP
DockerPortBindingsField.PortBindingsTable.hostPort=主机端口
DockerPortBindingsField.PortBindingsTable.protocol=协议
DockerPortBindingsField.dialogEmptyText=无端口绑定
DockerPortBindingsField.dialogTitle=端口绑定
DockerPreviewFragments.group.preview=命令预览
DockerPreviewFragments.preview.action.description=显示要执行的命令的预览
DockerPreviewFragments.preview.action.text=显示命令预览
DockerPreviewFragments.preview.label=预览\:
DockerPropertiesRuntimeEditor.NameColumn.title=名称
DockerPropertiesRuntimeEditor.ValueColumn.title=值
DockerPropertiesRuntimeEditor.action.copy.to.clipboard.name=复制到剪贴板
DockerPullIntention.missing.docker.configuration.error=找不到已配置的 Docker 连接。
DockerPullIntention.text=拉取 Docker 镜像
DockerPullToTerminal.error.operation.failed=操作失败\: {0}，有关详细信息，请参阅日志
DockerRegistryConfigurable.address.text=地址\:
DockerRegistryConfigurable.error.address.required=地址为必填项
DockerRegistryConfigurable.error.invalid.address=地址无效
DockerRegistryConfigurable.error.password.required=密码为必填项
DockerRegistryConfigurable.error.unsupporded.registry=不支持的注册表
DockerRegistryConfigurable.error.username.required=用户名必填
DockerRegistryConfigurable.password.text=密码\:
DockerRegistryConfigurable.registry.text=注册表\:
DockerRegistryConfigurable.test.connection.text=测试连接
DockerRegistryConfigurable.token.text=令牌\:
DockerRegistryConfigurable.username.text=用户名\:
DockerRegistryServiceViewContributor.connecting.message=正在连接到 Docker 服务器…
DockerRegistryServiceViewContributor.contributor.descriptor.name=Docker 注册表
DockerRegistryServiceViewContributor.dialog.label=拉取到
DockerRegistryServiceViewContributor.dialog.ok=拉取
DockerRegistryServiceViewContributor.dialog.title=拉取 Docker 镜像
DockerRegistryServiceViewContributor.error.node.label=错误
DockerRegistryServiceViewContributor.login.operation=正在登录…
DockerRegistryServiceViewContributor.pull.repository.action=拉取仓库…
DockerRegistryServiceViewContributor.pull.repository.action.description=从仓库中拉取所有带标签的镜像
DockerRegistryServiceViewContributor.pull.repository.task=正在从仓库中拉取所有 Docker 镜像…
DockerRegistryServiceViewContributor.registryNode.statusText=错误\: {0}
DockerRootType.displayName=Docker 文件
DockerRunConfigActions.RunOrBuildExistingConfig.text.build=构建 ''{0}''
DockerRunConfigurationCreator.editConfiguration.title.new=创建 Docker 配置
DockerRunLineMarkerProviderBase.ConfigureNewRunConfig.dialogTitle=编辑运行配置
DockerRunLineMarkerProviderBase.ConfigureNewRunConfig.text=新建运行配置…
DockerRunLineMarkerProviderBase.EditExistingRunConfig.dialogTitle=编辑运行配置
DockerRunLineMarkerProviderBase.EditExistingRunConfig.text=编辑 ''{0}''…
DockerRunLineMarkerProviderBase.RunAsTemporaryRunConfig.text=在 ''{0}'' 上运行
DockerRunLineMarkerProviderBase.RunExistingRunConfig.compose.project=(项目\: {0})
DockerRunLineMarkerProviderBase.RunExistingRunConfig.text=运行 ''{0}''
DockerRunLineMarkerProviderBase.tooltip=在 Docker 上运行
DockerRuntimeLabelsTab.tab.title=标签
DockerServiceViewContributor.contributor.descriptor.name=Docker
DockerServiceViewContributor.empty.tree.suggestion.connect.to.docker=连接到 Docker 或 Podman
DockerSingletonDeploymentSourceType.unknown.node.text=<unknown>
DockerSshConnectionConfigurator.label=SSH\:
DockerSshConnectionConfigurator.preparing.environment=正在准备 Docker SSH 环境…
DockerTargetBuildImageStep.description=正在构建 Docker 镜像…
DockerTargetConfigurable.build.args.row.label=构建实参\:
DockerTargetConfigurable.build.options.row.label=构建选项\:
DockerTargetConfigurable.build.radio.text=构建
DockerTargetConfigurable.button.rebuild.image=重新构建镜像
DockerTargetConfigurable.context.folder.row.label=上下文文件夹\:
DockerTargetConfigurable.dockerfile.row.label=Dockerfile\:
DockerTargetConfigurable.image.row.label=镜像文件\:
DockerTargetConfigurable.image.tag.row.label=镜像标记\:
DockerTargetConfigurable.language.runtime.label=语言运行时\:
DockerTargetConfigurable.optional.row.title=可选
DockerTargetConfigurable.pull.radio.text=拉取或使用现有镜像
DockerTargetConfigurable.rebuild.automatically.checkbox.text=每次运行代码之前自动重新构建镜像
DockerTargetConfigurable.run.options.comment.text=Docker 运行命令的形参。\n例如，用于公开端口 8080 的 -p 8080\:8080。
DockerTargetConfigurable.run.options.row.label=运行选项\:
DockerTargetConfigurable.section.title=Docker 容器
DockerTargetConfigurable.server.row.label=Docker 服务器\:
DockerTargetConfigurable.wizard.title.rebuild.image=重新构建镜像
DockerTargetEnvironmentConfiguration.error.build.image.options.error=构建镜像选项错误\: {0}
DockerTargetEnvironmentConfiguration.error.connection.to.docker.required=未连接到 Docker
DockerTargetEnvironmentConfiguration.error.container.options.error=容器选项错误\: {0}
DockerTargetEnvironmentConfiguration.error.image.tag.to.pull.required=未指定要拉取的镜像标记
DockerTargetEnvironmentConfiguration.error.path.to.dockerfile.to.build.required=未指定要构建的 Dockerfile 的路径
DockerTargetIntrospectable.failed.to.execute.command.in.running.container=无法在正在运行的容器中执行命令\: {0}
DockerTargetIntrospectable.introspecting.image.done=完成，在检查结果中找到 {0} 个变量
DockerTargetIntrospectable.introspecting.introspecting.image.environment.variables=正在内省镜像环境变量…
DockerTargetIntrospectable.introspecting.variable.not.found=正在内省 ${0}\: 未找到
DockerTargetIntrospectable.introspecting.variable.result=正在内省 ${0}\: {1}
DockerTargetIntrospectable.introspection.container.launched=完成，容器已启动\: {0}
DockerTargetIntrospectable.launching.introspection.container=正在启动内省容器…
DockerTargetIntrospectable.removing.introspection.container=正在移除内省容器
DockerTargetMainStep.error.cant.finish.now=现在无法完成
DockerTargetMainStep.error.dockerfile.must.be.selected=未选择 Dockerfile
DockerTargetMainStep.error.image.tag.is.required=未指定镜像标记
DockerTargetMainStep.step.description=创建一个新的 Docker 目标
DockerTargetPullImageStep.description=正在拉取 Docker 镜像…
DockerTargetStepBase.title=Docker
DockerTargetTerminalStepBase.error.cannot.connect.to.daemon=无法连接到 Docker 守护进程。该 docker 守护进程是否正在运行?
DockerTargetTerminalStepBase.error.cannot.connect.to.daemon.at.0=无法连接到 {0} 处的 Docker 守护程序。该 docker 守护程序是否正在运行?
DockerTargetTerminalStepBase.status.connecting.to.docker.daemon=正在连接到 Docker 守护进程…
DockerTargetTerminalStepBase.terminal.title.docker=Docker
DockerTargetType.VolumeContributionUI.mount.as.volume=作为卷安装
DockerTargetType.error.cant.find.server=找不到 Docker 服务器 {0}
DockerToolsConfigurable.compose.move.to.v2.comment=Docker Compose V1 已弃用。<a href\='click'>迁移到 Docker Compose V2</a>
DockerToolsConfigurable.message.can't.find.executable=找不到可执行文件
DockerToolsConfigurable.message.compose.v1.deprecated=Docker Compose V1 已弃用，请使用 Docker Compose V2。
DockerToolsConfigurable.message.does.not.exists={0} 不存在
DockerToolsConfigurable.message.not.executable={0} 不是可执行文件
DockerToolsConfigurable.message.not.valid.executable={0} 不是有效的可执行文件
DockerTransferImageAction.background.task=将 {0} 复制到 {1}
DockerTransferImageAction.command=复制到
DockerTransferImageAction.notification=镜像 ''{0}'' 已成功从 {1} 复制到 {2}
DockerTransferImageAction.ok.text=复制
DockerUtil.error.docker.image.could.be.found=找不到 Docker 镜像“{0}”
DockerVolumeBindingConfigurable.BrowseFolderAction.description=选择卷主机路径
DockerVolumeBindingConfigurable.BrowseFolderAction.title=主机路径
DockerVolumeBindingConfigurable.container.path.text=容器路径\:
DockerVolumeBindingConfigurable.error.container.path.required=容器路径为必填项
DockerVolumeBindingConfigurable.host.path.text=主机路径\:
DockerVolumeBindingConfigurable.mapping.warning.message=在 Docker 设置中配置路径映射
DockerVolumeBindingConfigurable.mapping.warning.title=警告
DockerVolumeBindingConfigurable.read.only.text=只读
DockerVolumeBindingDialog.commandline.title=--卷
DockerVolumeBindingDialog.containers.tooltip=为文件或目录在容器中的挂载路径
DockerVolumeBindingDialog.containers.validation=容器路径应为绝对路径
DockerVolumeBindingDialog.host.tooltip=为主机上文件或目录的路径
DockerVolumeBindingDialog.ro.tooltip=如果存在只读选项，则会将绑定挂载以只读方式挂载到容器中
DockerVolumeBindingDialog.ro.validation=主机路径不能为空
DockerVolumeBindingsEditor.ContainerPath.title=容器路径
DockerVolumeBindingsEditor.ContainerPath.validation.mount.point.already.used=已为此容器指定此挂载点
DockerVolumeBindingsEditor.HostPath.title=主机路径
DockerVolumeBindingsEditor.HostPath.validation.invalid.name=“{0}”包含本地卷名的无效字符，仅允许 "[a-zA-Z0-9][a-zA-Z0-9_.-]"。如果您打算传递主机目录，请使用j绝对路径
DockerVolumeBindingsEditor.ReadOnly.title=只读
DockerVolumeBindingsField.VolumeBindingsTable.destination=容器路径
DockerVolumeBindingsField.VolumeBindingsTable.readOnly=只读
DockerVolumeBindingsField.VolumeBindingsTable.source=主机路径
DockerVolumeBindingsField.dialogEmptyText=无绑定挂载
DockerVolumeBindingsField.dialogTitle=绑定挂载
DockerVolumeDashboardTab.in.use=使用中
DockerVolumeDashboardTab.in.use.count=使用中\: ({0}/{1})
DockerVolumeDetails.VolumePropertiesEditor.property.driver=驱动程序
DockerVolumesGroupDetailsProvider.node.tooltip=附加到容器 `{1}` 的 `{0}`
DockerWritingAccessProvider.readOnlyMessage=Docker 容器中的文件为只读文件
DockerWslConnectionConfigurator.distribution.error=分发 {0} 不存在
DockerWslConnectionConfigurator.label=WSL\:
DockerfileDocumentationProvider.online.documentation=在线文档
ExecInContainerAction.Case.Dialog.message=命令\:
ExecInContainerAction.Case.Dialog.title=Exec
ExecInContainerAction.ListPopup.textFor.create=创建并运行…
ExecInContainerAction.ListPopup.textFor.manage=管理…
ExecInContainerAction.ListPopup.title=在容器中运行命令
ExecInContainerAction.ManageExecCommandsDialog.column.no.commands=无命令
ExecInContainerAction.ManageExecCommandsDialog.column.title=命令
ExecInContainerAction.ManageExecCommandsDialog.command.is.empty=命令为空
ExecInContainerAction.tab.title=执行\: {0}
ExternalTool.exited.with.error.code={0} 退出，错误代码为 {1}
ExternalTool.timeout.exceeded=超时
GeneratedComposeFile.header=这是一个生成的文件。不用于手动编辑。
Ijent.computing.target.platform=正在计算目标平台…
Ijent.copying.remote.agent.binary=正在复制远程代理二进制文件…
Ijent.executing.remote.agent.process=正在执行远程代理进程…
Ijent.setting.executable.permissions=正在设置可执行文件权限…
ImagePullPanel.action.pull=拉取选定项
ImagePullPanel.image.to.pull.comment=或按 {0} 启动
ImagePullPanel.image.to.pull.label=要拉取的镜像\:
ImagePullPanel.queue.label=镜像在队列中拉取\: {0}
ImagePullPanel.terminal.error.reference.format=引用格式无效\: {0}
ImagePullPanel.terminal.info.using.default.tag=正在使用默认标记\: 最新
ImagePullPanel.terminal.name=Docker 镜像
InspectDockerAction.description.container=检查所选容器
InspectDockerAction.description.image=检查选定镜像
InspectDockerAction.description.network=检查所选网络
InspectDockerAction.description.volume=检查所选卷
InspectDockerAction.tab.title=检查
Loading.label=正在加载…
Minikube.tool.name=Minikube
MinikubeConnectionConfigurator.minikube.not.available=Minikube 不可用
OpenProjectAction.FromLabelPath.action.project.path.text=Docker 项目路径\: {0}
PodmanConnectionConfigurator.checkbox.detect.executable.paths.automatically=自动检测可执行文件路径
PodmanConnectionConfigurator.label.podman.connection=Podman 连接\:
PodmanConnectionConfigurator.podman.label=Podman
PodmanConnectionExecutableEditor.choose.podman.executable.location=选择 Podman可执行文件位置
PodmanConnectionExecutableEditor.connection.must.be.set=必须为 {0} 上的配置设置 Podman 连接
PodmanConnectionExecutableEditor.connection.to.podman.socket.failed=找到了 Podman 可执行文件，但到 Podman 套接字的连接失败，{0, choice, 0\#.|1\# 出现以下错误\:“{1}”}<br><small><b>注意</b>\: 在 IDE 中集成 Podman 需要 Podman 套接字。请确保 Podman 系统服务正在运行。<a href\="helpInstance\:reference.podman.system.service">了解详情 ↗</a></small>
PodmanConnectionExecutableEditor.podman.executable=Podman 可执行文件\:
PrepareImageOperation.failed.to.find.image.for.introspection=找不到用于内省的镜像\: {0}
PrepareImageOperation.introspection.completed=内省完成
PrepareImageOperation.introspection.completed.with.error=内省完成但有错误\: {0}
PrepareImageOperation.unable.to.find.an.image.for.introspection=找不到用于内省的镜像
ProjectPathOnRootRow.row.project.path.on.target=目标的项目路径\:
ProjectPathOnRootRow.row.project.path.on.target.comment=默认情况下，运行配置将在有关复制必要文件的设置中使用此路径
PruneAction.dialog.all.message=移除所有停止的容器、未使用的卷、网络、悬空镜像和所有构建缓存?
PruneAction.dialog.containers.message=移除所有停止的容器?
PruneAction.dialog.images.message=移除所有未使用的镜像?
PruneAction.dialog.networks.message=移除所有未使用的网络?
PruneAction.dialog.volumes.message=移除所有未使用的卷?
PullImageOperation.connected=已连接
PullImageOperation.pull.completed=拉取完成项
PullImageOperation.waiting.for.pull.operation=正在等待拉取运算…
PushImageConfigurable.error.repository.required=仓库为必填项
PushImageConfigurable.error.tag.required=标记为必填项
RegistryRuntimeTask.current.of.total={0}/{1}
RegistryRuntimeTask.notification.group=Docker
RegistrySelectionEditor.default.name.docker.registry=Docker 注册表
RegistrySelectionEditor.default.registry=<默认\: Docker Hub>
RemoteDockerRuntime.progress.title.pulling.image=正在拉取“{0}”镜像…
ShowContainerProcessesAction.tab.title=进程
ShowFiles.action.delete.file.text=删除文件
ShowFiles.action.download.file.text=下载文件
ShowFiles.action.progress=显示文件…
ShowFiles.action.refresh.file.tree.description=刷新文件树
ShowFiles.action.refresh.text=刷新
ShowFiles.action.rename.file.text=重命名文件
ShowFiles.dialog.message.file.name.cannot.be.empty=文件名不能为空
ShowFiles.dialog.title.invalid.file.name=无效的文件名
ShowFiles.dialog.title.rename.file=重命名文件
ShowFiles.notification.content.could.not.resolve.new.file.name=无法解析新文件名
ShowFiles.notification.content.drop.location.invalid=放置位置无效
ShowFiles.notification.content.error.occurred.while.downloading.file=下载文件时出错
ShowFiles.notification.content.error.occurred.while.moving.file=移动文件时出错\: {0}
ShowFiles.notification.content.error.occurred.while.reading.content.for.file=读取文件 {0} 的内容时出错
ShowFiles.notification.content.error.occurred.while.renaming.file=重命名文件 {0} 时出错
ShowFiles.notification.content.failed.to.commit.changes.to.remote.environment=无法将更改提交到远程环境\: {0}
ShowFiles.progress.title.moving.file=正在移动文件
ShowFiles.progress.title.opening.file=正在打开文件
ShowFiles.rename.file.to=将“{0}”重命名为\:
SingletonDeploymentSourceType.error.container.name.format=容器名称无效\: 应为 `[a-zA-Z0-9][a-zA-Z0-9_.-]*`
SingletonDeploymentSourceType.error.image.tag.atMaxOne=最多允许一个标记
SingletonDeploymentSourceType.error.image.tag.format=镜像标记格式无效
ToolBasedDockerComposeConfigurationParser.progress.title=正在处理 Docker Compose 配置…
action.Docker.AddDockerConnection.description=添加 Docker 连接
action.Docker.AddDockerConnection.text=Docker 连接
action.Docker.AddDockerRegistry.text=新建 Docker 注册表
action.Docker.EditRegistryConfigAction.text=编辑
action.Docker.FilterDevContainers.text=Dev Container
action.Docker.FilterStoppedContainers.text=已停止容器
action.Docker.FilterUntaggedImages.text=无标记的镜像
action.Docker.ImageDownloadNonOpenableFile.text=下载文件
action.Docker.ImageLayerOpenFileAction.text=打开文件
action.Docker.ImportContexts.text=来自上下文的连接
action.Docker.RemoteServer.DisconnectServer.text=断开连接
action.Docker.RemoteServers.Attach2Container.description=附加到所选容器
action.Docker.RemoteServers.Attach2Container.text=附加
action.Docker.RemoteServers.CommitContainer.text=另存为新镜像
action.Docker.RemoteServers.ConnectServer.text=连接
action.Docker.RemoteServers.CopyContainerId.description=将所选容器的 ID 复制到剪贴板
action.Docker.RemoteServers.CopyContainerId.text=复制容器 ID
action.Docker.RemoteServers.CopyContainerImageId.description=将所选容器的镜像 ID 或标记复制到剪贴板
action.Docker.RemoteServers.CopyContainerImageId.text=复制镜像 ID
action.Docker.RemoteServers.CopyImageId.description=将所选镜像的 ID 复制到剪贴板
action.Docker.RemoteServers.CopyImageId.text=复制镜像 ID
action.Docker.RemoteServers.CreateContainer.description=为所选镜像创建并运行容器
action.Docker.RemoteServers.CreateContainer.text=创建容器
action.Docker.RemoteServers.CreateNetwork.text=创建网络
action.Docker.RemoteServers.CreateTerminal.AsContainerUser.text=作为容器用户
action.Docker.RemoteServers.CreateTerminal.AsRootUser.text=作为 Root 用户
action.Docker.RemoteServers.CreateVolume.text=创建卷
action.Docker.RemoteServers.DeleteConnection.text=删除连接
action.Docker.RemoteServers.DeleteContainer.description=删除所选容器
action.Docker.RemoteServers.DeleteContainer.text=删除容器
action.Docker.RemoteServers.DeleteFailedNode.text=删除
action.Docker.RemoteServers.DeleteImage.description=删除所选镜像
action.Docker.RemoteServers.DeleteImage.text=删除镜像
action.Docker.RemoteServers.DeleteNetwork.description=删除所选网络
action.Docker.RemoteServers.DeleteNetwork.text=删除网络
action.Docker.RemoteServers.DeleteService.text=删除服务
action.Docker.RemoteServers.DeleteVolume.description=删除所选卷
action.Docker.RemoteServers.DeleteVolume.text=删除卷
action.Docker.RemoteServers.DownComposeApp.description=停止并移除容器以及关联的网络、卷和镜像
action.Docker.RemoteServers.DownComposeApp.text=下
action.Docker.RemoteServers.EditDeploymentConfig.text=编辑配置
action.Docker.RemoteServers.EditServerConfig.description=编辑所选 Docker 配置
action.Docker.RemoteServers.EditServerConfig.text=编辑配置
action.Docker.RemoteServers.ExecInContainer.description=在所选容器中运行命令
action.Docker.RemoteServers.ExecInContainer.text=Exec
action.Docker.RemoteServers.InspectContainerOrImage.text=检查
action.Docker.RemoteServers.OpenProject.SelectDirectory.text=选择目录…
action.Docker.RemoteServers.PauseContainer.description=暂停所选容器中的所有进程
action.Docker.RemoteServers.PauseContainer.text=暂停容器
action.Docker.RemoteServers.Prune.description=移除所有未使用的元素
action.Docker.RemoteServers.Prune.text=清理
action.Docker.RemoteServers.PullImage.description=从仓库中拉取镜像
action.Docker.RemoteServers.PullImage.text=拉取镜像…
action.Docker.RemoteServers.PushImage.description=将所选镜像推送到仓库
action.Docker.RemoteServers.PushImage.text=推送镜像…
action.Docker.RemoteServers.RecreateContainer.description=重新创建并运行所选容器
action.Docker.RemoteServers.RecreateContainer.text=重新创建容器
action.Docker.RemoteServers.Redeploy.text=重新运行
action.Docker.RemoteServers.RemoveOrphans.text=移除孤立项
action.Docker.RemoteServers.RestartComposeApp.description=重启所有正在运行的 Compose 服务
action.Docker.RemoteServers.RestartComposeApp.text=重启
action.Docker.RemoteServers.RestartContainer.description=重启所选容器
action.Docker.RemoteServers.RestartContainer.text=重启容器
action.Docker.RemoteServers.ScaleComposeService.description=扩展服务
action.Docker.RemoteServers.ScaleComposeService.text=Scale
action.Docker.RemoteServers.SelectContainerImage.description=在服务工具窗口中显示所选容器的镜像
action.Docker.RemoteServers.SelectContainerImage.text=显示镜像
action.Docker.RemoteServers.ShowContainerFiles.text=显示文件
action.Docker.RemoteServers.ShowContainerProcesses.description=显示所选容器的进程列表
action.Docker.RemoteServers.ShowContainerProcesses.text=显示进程
action.Docker.RemoteServers.ShowImageLayers.text=显示层
action.Docker.RemoteServers.StartAllComposeApp.description=启动所有 Compose 服务
action.Docker.RemoteServers.StartAllComposeApp.text=全部启动
action.Docker.RemoteServers.StartComposeService.description=启动服务
action.Docker.RemoteServers.StartComposeService.text=启动
action.Docker.RemoteServers.StartContainer.description=启动所选容器
action.Docker.RemoteServers.StartContainer.text=启动容器
action.Docker.RemoteServers.StopComposeApp.description=停止所有服务
action.Docker.RemoteServers.StopComposeApp.text=停止
action.Docker.RemoteServers.StopComposeService.description=停止服务
action.Docker.RemoteServers.StopComposeService.text=停止
action.Docker.RemoteServers.StopContainer.description=停止所选容器
action.Docker.RemoteServers.StopContainer.text=停止容器
action.Docker.RemoteServers.StopDeploy.description=停止所选部署
action.Docker.RemoteServers.StopDeploy.text=停止部署
action.Docker.RemoteServers.TransferImage.text=复制 Docker 镜像
action.Docker.RemoteServers.UnpauseContainer.description=取消暂停所选容器中的所有进程
action.Docker.RemoteServers.UnpauseContainer.text=取消暂停容器
action.Docker.RemoveDockerRegistry.text=删除注册表
action.NewDockerfile.description=创建 Dockerfile
action.NewDockerfile.text=Dockerfile
advanced.setting.docker.connect.automatically=重启时自动连接到 Docker
advanced.setting.docker.container.log.is.first.tab=日志标签页应该是 Docker 容器的第一个标签页。
advanced.setting.docker.periodical.check.delay=用于自动重新连接的定期 Docker 状态检查之间的延迟
advanced.setting.docker.periodical.check.delay.description=如果要禁用 Docker 状态的定期检查，请将该值设置为 0。
advanced.setting.docker.registry.loading.limit=镜像注册表实体加载限制
advanced.setting.docker.selinux.label.volumes=将 \:z 挂载选项应用于 SELinux 系统的几乎所有绑定卷。
advanced.setting.docker.selinux.label.volumes.description=这可能会很危险，您应该明白自己在做什么，并首先阅读这篇文章\: <a href\="https\://github.com/moby/moby/issues/30934">https\://github.com/moby/moby/issues/30934</a>
advanced.settings.docker=Docker
an.icon.to.quickly.build=用于在 Dockerfile 中快速构建或运行特定已命名阶段的图标。
colima.tool.name=Colima
configurable.DockerConsoleConfigurable.display.name=控制台
configurable.DockerConsoleConfigurable.enable.folding.checkbox.text=在日志控制台中折叠以前的会话
configurable.DockerEnvVarConfigurable.display.name=环境变量
configurable.DockerEnvVarConfigurable.name.text=名称\:
configurable.DockerEnvVarConfigurable.value.text=值\:
configurable.DockerLinkConfigurable.ContainerNamesLoader.task.title=正在加载容器名称…
configurable.DockerLinkConfigurable.alias.text=别名\:
configurable.DockerLinkConfigurable.display.name=链接
configurable.DockerLinkConfigurable.name.text=名称\:
configurable.DockerPortBindingConfigurable.display.name=端口绑定
configurable.DockerRegistryListConfigurable.AddRegistryAction.text=添加
configurable.DockerRegistryListConfigurable.display.name=Docker 注册表
configurable.DockerRegistryListConfigurable.empty.selection.string=要配置 Docker 注册表，请点击 '+'
configurable.DockerRemoteServerConfigurable.display.name=Docker
configurable.DockerToolsConfigurable.display.name=Docker
configurable.DockerVolumeBindingConfigurable.display.name=卷绑定
configurable.PushImageConfigurable.display.name=推送镜像
configurable.PushImageConfigurable.namespace.text=命名空间\:
configurable.PushImageConfigurable.registry.text=注册表\:
configurable.PushImageConfigurable.repository.text=镜像\:
configurable.PushImageConfigurable.tag.text=标签\:
docker.container.settings.label.text=Docker 容器设置\:
docker.intention.category=Docker
docker.path.mapping.editor.table.local.path.header=本地路径
docker.path.mapping.editor.table.virtual.machine.path.header=虚拟机路径
docker.periodical.check.delay.milliseconds=毫秒
docker.registry.configurable.connection.status.cannot.connect=无法连接\: {0}
docker.registry.configurable.connection.status.connecting=正在连接…
docker.registry.configurable.connection.status.successful=连接成功
docker.tool.name=Docker
dockerConsole.name=控制台
dockerTools.name=工具
dockerfile.brackets=中括号
dockerfile.comma=逗号
dockerfile.comments=注释
dockerfile.displayName=Dockerfile
dockerfile.dot=点
dockerfile.keyword=关键字
dockerfile.number=数字
dockerfile.parenths=圆括号
dockerfile.string=字符串
dockerfile.variable=变量
group.Docker.Filter.text=Docker
group.Docker.RemoteServers.CreateTerminal.description=在所选容器中启动 Shell
group.Docker.RemoteServers.CreateTerminal.text=创建终端
group.Docker.RemoteServers.OpenProject.Recent.text=最近的项目…
group.Docker.RemoteServers.OpenProject.text=打开项目
group.Docker.RemoteServersViewPopup.Image.text=镜像
group.Docker.RemoteServersViewToolbar.text=Docker
group.Docker.Services.Add.text=Docker
minikube.tool.name=Minikube
podman.tool.name=Podman
progress.text.docker.upload.volume.progress.message=来自 {0} 的上传将挂载为 {1}
progress.text.preparing.volumes=正在准备卷…
progress.title.loading.namespaces.for=正在加载以下对象的命名空间\: {0}
progress.title.loading.repositories.for=正在加载以下对象的仓库\: {0}
progress.title.loading.tags.for=正在加载以下对象的标记\: {0}
separator.Docker.Filter=显示
settings.choose.docker.compose.executable.location=选择 Docker Compose 可执行文件位置
settings.choose.docker.executable.location=选择 Docker 可执行文件位置
settings.docker.compose.executable=Docker Compose 可执行文件\:
settings.docker.executable=Docker 可执行文件\:
