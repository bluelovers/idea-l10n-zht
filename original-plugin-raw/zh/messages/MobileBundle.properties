build=构建
build.something=构建 {0}
generate.xcodeproj=生成 Xcode 项目
run.configuration.name=Kotlin Mobile
run.configuration.description=iOS/Android 应用
run.configuration.test.name=Kotlin Mobile 测试
run.configuration.test.description=XCTest/JUnit 测试
run.configuration.editor.module=模块:
run.android.started=会话以进程 {0} 开始
run.android.finished=进程已完成
run.waiting=正在等待设备…
run.preparing=正在准备应用程序…
run.installing=正在安装应用程序…
run.installing.tests=正在安装测试运行程序…
run.starting=正在启动应用程序…
run.starting.tests=正在开始测试…
run.configuration.name.common.tests=通用测试
run.configuration.name.apple=iOS 应用
run.configuration.name.apple.tests=iOS 库测试
run.configuration.name.apple.tests.xctest=iOS 应用测试
run.configuration.name.android=Android 应用
run.configuration.name.android.tests=Android 库测试
run.configuration.device.not.selected=未选择目标设备

device.host=本地设备
device.not.selected=未选择设备
notification.group.id=移动
xcodeproj.changed.manually=Xcode 项目已手动修改
xcodeproj.changed.manually.description=对 Xcode 项目的变更没有效果。\n请使用 Gradle 配置项目设置。
sdk.sync.missing.sdk.title=Android SDK
sdk.sync.missing.sdk.content=找不到 Android SDK。请安装 SDK 并在 local.properties 中设置 sdk.dir。
run.configuration.name.android.app.tests=Android 应用测试
android.emulator.launch.timeout=无法启动模拟器: 超时
android.aapt.empty=AAPT 没有为 ''{0}'' 返回数据
android.aapt.no.package=AAPT 未返回软件包名称
android.aapt.no.main=AAPT 没有为 ''{0}'' 返回主 Activity 名称
gradle.loading=正在加载 Gradle Apple 项目…
import.build.view.name=导入
import.event.start.message=导入…
import.event.warning.build.target.not.found.message=目标 {0}: 找不到({1}, {2}, {3})的构建目标
import.event.warning.xcframework.slice.not.found.message=目标 {0}: 找不到({2}, {3})的 {1} 切片
import.event.finish.success.message=已完成
import.event.finish.failure.message=已失败
import.event.finish.skipped.message=已跳过
android.migration.notification.title=Kotlin Android 模块迁移
android.migration.notification.suggest=该项目使用 Kotlin Android 插件。迁移到 Kotlin Multiplatform 插件，即可从 Kotlin Multiplatform Mobile 开发的所有功能中获益。
android.migration.action.name=将项目从 Kotlin Android 迁移到 Kotlin Multiplatform
android.migration.command.name=从 Kotlin Android 迁移到 Kotlin Multiplatform
android.migration.not.possible.warning.notification.title=无法从 Kotlin Android 插件迁移
android.migration.not.possible.warning.notification.message=模块 ''{0}'' 使用的是旧式 KMM 项目配置，无法自动更新。\n请考虑手动将 Kotlin Android 插件替换为 Kotlin MultiPlatform。
android.migration.action.module.name=将模块 ''{0}'' 从 Kotlin Android 迁移到 Kotlin Multiplatform
android.migration.force.action.name=强制将项目从 Kotlin Android 迁移到 Kotlin Multiplatform。这可能会导致重新加载 Gradle 项目时出错。
android.migration.force.action.module.name=强制将模块 ''{0}'' 从 Kotlin Android 迁移到 Kotlin MultiPlatform。这可能会导致重新加载 Gradle 项目时出错。
android.migration.title=将模块 ''{0}'' 从 Kotlin Android 迁移到 Kotlin Multiplatform
android.migration.dialog.confirm.button.migrate=迁移
android.migration.dialog.confirm.text.intro=迁移后不会移动以下 ''{0}'' 模块依赖项:
android.migration.dialog.confirm.text.explanation=使用这些依赖项的代码可能会以红色高亮显示，但项目将正确编译。
android.migration.dialog.confirm.text.question=继续?
android.migration.step.create.sourceset.progress=创建 ''{0}'' 源集
android.migration.step.create.kotlin.config.progress=创建 Kotlin 配置
android.migration.step.delete.kotlin.options.progress=删除 Kotlin 选项
android.migration.step.remove.unused.dependencies.progress=从主范围中删除迁移的依赖项
android.migration.step.clean.dependencies.progress=清除顶级依赖项
android.migration.step.replace.plugin.progress=替换插件
android.migration.step.add.kotlin.config.progress=添加 Kotlin 配置
android.migration.intention.action.name=迁移项目
android.migration.highlighting.pass.description=该项目使用 Kotlin Android 插件。迁移到 Kotlin Multiplatform 插件，即可从 Kotlin Multiplatform Mobile 开发的所有功能中获益。
android.migration.highlighting.pass.tooltip=运行构建文件的自动迁移，并开始在 Android 项目模块中使用 Kotlin Multiplatform 插件。您将能够使用 Android 模块中的所有 AppCode 功能。
android.migration.highlighting.action.name=迁移
android.migration.kotlin.module.0.uses.kotlin.1.message=模块 ''{0}'' 使用 Kotlin 插件版本 {1}。
android.migration.kotlin.modules.0.uses.kotlin.1.message=模块 {0} 使用 Kotlin 插件版本 {1}。
android.migration.kotlin.plugin.suggest.update.to.0.message=请考虑手动将插件升级到版本 {0} 或更高版本，以避免在重新加载迁移的 Gradle 项目时可能出现的错误。