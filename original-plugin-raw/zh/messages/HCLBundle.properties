AddVariableFix.family.name=添加变量
AddVariableFix.text=添加变量 ''{0}''
HCLFileType.description=HashiCorp 配置语言文件
HCLFindUsagesProvider.type.backend.configuration=后端配置
HCLFindUsagesProvider.type.data.source=数据源
HCLFindUsagesProvider.type.dynamic.iterator=动态迭代器
HCLFindUsagesProvider.type.for.loop.variable=for 循环变量
HCLFindUsagesProvider.type.local.value=局部值
HCLFindUsagesProvider.type.local.values=局部值
HCLFindUsagesProvider.type.module=模块
HCLFindUsagesProvider.type.named.block=块({0})
HCLFindUsagesProvider.type.output.value=输出值
HCLFindUsagesProvider.type.property=属性
HCLFindUsagesProvider.type.provider=提供程序
HCLFindUsagesProvider.type.resource=资源
HCLFindUsagesProvider.type.terraform.configuration=terraform 配置
HCLFindUsagesProvider.type.untyped.named.element=<未指定类型的 PsiNamedElement {0}>
HCLFindUsagesProvider.type.untyped.non.psi.named.element=<未指定类型的非 PsiNamedElement {0}>
HCLFindUsagesProvider.type.variable=输入变量
HILFileType.description=HashiCorp 插值语言文件
TerraformFileType.description=Terraform 配置文件
TfExecutor.failed.to.run.notification.text=无法运行
TfExecutor.finished.successfully.notification.text=成功完成
TfExecutor.interrupted.notification.text=已中断
TfExecutor.unknown.error.notification.text=未知错误，有关详细信息，请参阅日志
action.AddProviderAction.text=添加捆绑的资源提供程序
action.NewTerraformFile.text=Terraform 文件
action.OtApplyConfigAction.description=创建或更新基础架构
action.OtApplyConfigAction.text=OpenTofu Apply
action.OtDestroyConfigAction.description=销毁之前创建的基础架构
action.OtDestroyConfigAction.text=OpenTofu Destroy
action.OtInitConfigAction.description=初始化 OpenTofu 工作目录
action.OtInitConfigAction.text=OpenTofu Init
action.OtPlanConfigAction.description=显示当前配置所需的更改
action.OtPlanConfigAction.text=OpenTofu Plan
action.OtValidateConfigAction.description=检查配置是否有效
action.OtValidateConfigAction.text=OpenTofu Validate
action.Terraform.InstallTerraform.description=下载并安装 Terraform 的最新稳定版本
action.Terraform.InstallTerraform.text=安装 Terraform
action.TfApplyConfigAction.description=创建或更新基础架构
action.TfApplyConfigAction.text=Terraform Apply
action.TfDestroyConfigAction.description=销毁之前创建的基础架构
action.TfDestroyConfigAction.text=Terraform Destroy
action.TfFmtFileAction.description=使用 'terraform/tofu fmt' 实用工具设置所选文件的格式
action.TfFmtFileAction.text=设置文件格式
action.TfGenerateLocalMetadataAction.description=使用 `terraform / tofu providers schema -json` 命令生成元数据
action.TfGenerateLocalMetadataAction.text=生成提供程序元数据
action.TfInitAction.description=在模块目录中运行 'terraform/tofu init' 实用工具
action.TfInitAction.text=初始化
action.TfInitConfigAction.description=初始化 Terraform 工作目录
action.TfInitConfigAction.text=Terraform Init
action.TfInitRequiredAction.description=运行 'terraform/tofu init' 以正确初始化模块目录
action.TfInitRequiredAction.text=初始化模块目录
action.TfPlanConfigAction.description=显示当前配置所需的更改
action.TfPlanConfigAction.text=Terraform Plan
action.TfValidateConfigAction.description=检查配置是否有效
action.TfValidateConfigAction.text=Terraform Validate
action.create.terraform.file=创建 Terraform 文件 {0}
action.create.terraform.file.title=新建 Terraform 文件
action.new.empty.terraform.file.description=空文件
action.new.outputs.terraform.file.description=输出
action.new.template.terraform.file.description=主要
action.new.variables.terraform.file.description=变量
advanced.setting.org.intellij.terraform.code.vision.usages.limit=嵌入提示中显示的最大用法数
advanced.setting.org.intellij.terraform.config.build.metadata.auto=自动构建本地元数据
advanced.setting.org.intellij.terraform.config.build.metadata.eagerly=提前构建本地元数据
advanced.setting.org.intellij.terraform.config.documentation.download=自动下载 Terraform 文档
advanced.setting.org.intellij.terraform.config.variables.deep.search=变量的深度搜索
advanced.setting.org.intellij.terraform.use.global.meta=使用全局元数据
advanced.setting.org.intellij.terraform.variables.search.fallback=变量的回退搜索
advanced.setting.terraform=Terraform
binary.installation.calculating.hash.progress.title=正在计算下载的二进制文件的校验和…
binary.installation.download.failed=无法下载 {0}''
binary.installation.downloading.binary.progress.title=正在从 ''{0}'' 下载二进制文件…
binary.installation.failed=二进制文件安装失败
binary.installation.make.executable.failed=无法将 ''{0}'' 设为可执行
binary.installation.move.to.installation.dir=正在将二进制文件移至 ''{0}''
binary.installation.move.to.installation.dir.failed=无法将二进制文件移至安装目录\: ''{0}''
binary.installation.progress.title=正在安装二进制文件…
binary.installation.search.failed=找不到下载的具有预期名称的二进制文件\: ''{0}''
binary.installation.succeeded=二进制文件 ''{0}'' 已成功安装到 ''{1}''
binary.installation.verification.failed=无法验证下载。预期校验和与实际校验和不匹配
block.name.validness.inspection.add.name.quick.fix.name=添加名称元素
block.name.validness.inspection.block.name.should.not.be.empty.error.message=块名称不应为空
block.name.validness.inspection.display.name=无效块名称
block.name.validness.inspection.extra.block.name.error.message=块名称元素过多
block.name.validness.inspection.invalid.name.error.message=名称必须以字母或下划线开头，并且只能包含字母、数字、下划线和短划线。
block.name.validness.inspection.missing.block.name.error.message=还要求 {0} 个名称元素
block.name.validness.inspection.remove.name.quick.fix.name=移除额外名称元素
block.name.validness.inspection.rename.block.quick.fix.name=重命名
code.style.align.properties.do.not.align=不对齐
code.style.align.properties.on.equals=等号
code.style.align.properties.on.value=值
code.style.align.properties.title=设置格式时对齐属性\:
code.style.import.provider.automatically=补全时自动导入提供程序
code.style.import.provider.header=补全时添加 'required_providers'
code.style.import.provider.text=补全资源名称时，将提供程序要求插入当前文件。如果缺少 <code>required_providers</code> 块，请添加。
code.style.line.commenter.character.title=行注释器符号\:
code.style.line.commenter.double.slashes=双斜杠 (//)
code.style.line.commenter.pound.sign=井号 (\#)
code.style.run.tf.fmt.comment=<html>当您调用“重新设置文件格式”操作时，'terraform/tofu fmt' 将用作格式设置工具，而不是插件的格式化程序。<br><br>请注意，'terraform fmt' 仅支持 <code>.tf</code>、<code>.tfvars</code> 和 <code>.tftest.hcl</code> 文件。<br><br>'tofu fmt' 命令支持 terraform 文件和 <code>.tofu</code> 文件</html>
code.style.run.tf.fmt.header=使用 'terraform/tofu fmt' 代替内置格式化程序
code.style.run.tf.fmt.title=调用 'terraform/tofu fmt' 进行格式设置
conflicting.resource.property.inspection.display.name=属性冲突
conflicting.resource.property.inspection.error.message=与之冲突\: {0}
deprecated.element.inspection.deprecated.block.error.message=弃用的块\: {0}{2, choice, 0\# \: {1}|1\#}
deprecated.element.inspection.deprecated.property.error.message=弃用的属性\: {0}{2, choice, 0\# \: {1}|1\#}
deprecated.element.inspection.display.name=弃用的块/属性
dialog.message.failed.to.get.output.terraform.providers.command.for=无法获取 {0} 的 `{2} providers` 命令的输出，退出代码为 {1}
disable.deep.variable.search=禁用嵌套目录中的变量搜索
documentation.for.0.1.on.terraform.website=Terraform 网站上的 {0}{1} 文档
duplicated.block.property.inspection.display.name=重复的属性
duplicated.block.property.inspection.duplicate.property.error.message=在一个块内多次声明属性 ''{0}''
duplicated.inspection.base.navigate.to.duplicate.quick.fix.name=导航到{0}重复项
duplicated.inspection.base.navigate.to.duplicate.quick.fix.name.first=第一个
duplicated.inspection.base.show.other.duplicates.quick.fix.name=查看与此相似的所有重复项
duplicated.output.inspection.delete.output.quick.fix.name=删除输出
duplicated.output.inspection.display.name=重复的输出
duplicated.output.inspection.output.declared.multiple.times.error.message=多次声明了输出 ''{0}''
duplicated.output.inspection.rename.output.quick.fix=重命名输出
duplicated.provider.inspection.display.name=重复的提供程序
duplicated.provider.inspection.display.name.add.provider.alias.quick.fix.name=添加提供程序别名
duplicated.provider.inspection.display.name.change.provider.alias.quick.fix.name=更改提供程序别名
duplicated.provider.inspection.display.name.multiple.declaration.error.message=多次声明了提供程序 ''{0}''
duplicated.variable.inspection.delete.variable.quick.fix.name=删除变量
duplicated.variable.inspection.display.name=重复的变量
duplicated.variable.inspection.multiple.declaration.error.message=多次声明了变量 ''{0}''
duplicated.variable.inspection.rename.variable.quick.fix.name=重命名变量
group.OpenTofuRunConfigurationActions.description=在项目中管理和运行 OpenTofu 配置
group.OpenTofuRunConfigurationActions.text=OpenTofu 运行配置
group.TfRunConfigurationActions.description=在项目中管理和运行 Terraform 配置
group.TfRunConfigurationActions.text=Terraform 运行配置
group.TfTools.description=Terraform 外部工具
group.TfTools.text=Terraform 工具
hcl.code.style.settings.arrays=数组
hcl.code.style.settings.braces=大括号
hcl.code.style.settings.equals=等号
hcl.code.style.settings.objects=对象
hcl.color.settings.block.first.type=块//第一类型块
hcl.color.settings.block.name=块//块名称
hcl.color.settings.block.only.name.type=块//仅类型块
hcl.color.settings.block.other.types=块//其他类型块
hcl.color.settings.block.second.type=块//第二类型块
hcl.color.settings.braces.and.operators.braces=大括号和运算符//大括号
hcl.color.settings.braces.and.operators.brackets=大括号和运算符//中括号
hcl.color.settings.braces.and.operators.comma=大括号和运算符//逗号
hcl.color.settings.braces.and.operators.operation.sign=大括号和运算符//运算符号
hcl.color.settings.comments.block.comment=注释//块注释
hcl.color.settings.comments.line.comment=注释//行注释
hcl.color.settings.identifier=标识符
hcl.color.settings.keyword=关键字
hcl.color.settings.number=数字
hcl.color.settings.property.name=属性名称
hcl.color.settings.string.invalid.escape.sequence=字符串//无效转义序列
hcl.color.settings.string.text=字符串//字符串文本
hcl.color.settings.string.valid.escape.sequence=字符串//有效转义序列
hcl.literal.annotator.block.name.identifier=块名称标识符
hcl.literal.annotator.block.only.name.identifier=块单一名称标识符
hcl.literal.annotator.block.type.1.element=块类型 1 元素
hcl.literal.annotator.block.type.2.element=块类型 2 元素
hcl.literal.annotator.block.type.3.element=块类型 3+ 元素
hcl.literal.annotator.property.key=属性键
hcl.literal.inspection.add.closing.quote.quick.fix.text=添加右引号
hcl.literal.inspection.argument.names.must.not.be.quoted=实参名称不得加引号
hcl.literal.inspection.display.name=无效的字符串和数字字面量
hcl.literal.inspection.illegal.escape.sequence=非法转义序列
hcl.literal.inspection.illegal.hex.escape.sequence=非法十六进制转义序列
hcl.literal.inspection.illegal.number.literal=非法数字字面量
hcl.literal.inspection.illegal.octal.escape.sequence=非法八进制转义序列
hcl.literal.inspection.illegal.unicode.escape.sequence=非法 Unicode 转义序列
hcl.literal.inspection.invalid.quotes=Terraform 文件中应使用双引号
hcl.literal.inspection.missing.closing.quote=缺少右引号
hcl.literal.inspection.replace.quotes.quick.fix.text=替换为双引号
hcl.simplify.expression.inspection.could.be.replaced.with.list.indexing.message=可被替换为列表索引(可能会改变语义)
hcl.simplify.expression.inspection.display.name=次优表达式
hcl.simplify.expression.inspection.replace.with.list.indexing.quick.fix.family.name=简化表达式
hcl.simplify.expression.inspection.replace.with.list.indexing.quick.fix.text=替换为列表索引
hil.annotator.provider.defined.function.keyword=提供程序定义的函数开头应具有关键字 'provider'
hil.color.settings.braces.operators.braces=大括号和运算符//大括号
hil.color.settings.braces.operators.brackets=大括号和运算符//中括号
hil.color.settings.braces.operators.comma=大括号和运算符//逗号
hil.color.settings.braces.operators.dot=大括号和运算符//点
hil.color.settings.braces.operators.operation.sign=大括号和运算符//运算符号
hil.color.settings.braces.operators.parentheses=大括号和运算符//圆括号
hil.color.settings.identifier=标识符
hil.color.settings.invalid.escape.sequence=无效转义序列
hil.color.settings.keyword=关键字
hil.color.settings.number=数字
hil.color.settings.predefined.scope=预定义作用域
hil.color.settings.property.reference=属性引用
hil.color.settings.resource.instance.reference=资源实例引用
hil.color.settings.resource.type.reference=资源类型引用
hil.color.settings.string=字符串
hil.color.settings.template.background=模板段背景
hil.color.settings.valid.escape.sequence=有效转义序列
hil.convert.to.hcl.inspection.convert.to.hcl2.quick.fix.text=转换为 HCL2 表达式
hil.convert.to.hcl.inspection.display.name=HIL 表达式可转化为 HCL2
hil.convert.to.hcl.inspection.interpolation.could.be.replaced.with.hcl2.message=插值可被替换为 HCL2 表达式
hil.inplace.variable.introducer.title=引入变量
hil.introduce.variable.handler.dialog.caption=引入变量
hil.literal.annotator.unwrap.string.quick.fix.text=转换为标识符
hil.operation.types.mismatch.inspection.boolean.expected.error.message=应为布尔值，而不是 {0}
hil.operation.types.mismatch.inspection.boolean.or.string.expected.error.message=条件应为布尔值或包含布尔值的字符串
hil.operation.types.mismatch.inspection.both.branches.must.have.same.type.error.message=两个分支的类型应相同。''then'' 为 {0}，''else'' 为 {1}
hil.operation.types.mismatch.inspection.display.name=操作实参类型不匹配
hil.operation.types.mismatch.inspection.number.expected.error.message=应为数字，而不是 {0}
hil.scope.not.available.in.context.inspection.display.name=不可用的作用域
hil.scope.not.available.in.context.inspection.illegal.self.use.message=仅允许在资源定义内部的 'provisioner' 和 'connection' 块中引用 'self'
hil.unknown.resource.type.inspection.display.name=引用了未知资源类型
hil.unknown.resource.type.inspection.unknown.resource.type.error.message=未知资源类型
hil.unresolved.reference.inspection.display.name=未解析的引用
hil.unresolved.reference.inspection.unresolved.reference.error.message=未解析的引用 {0}
hil.variable.annotator.expanded.function.argument.must.be.immediately.followed.by.closing.parentheses=展开的函数实参后应紧跟右圆括号
hil.variable.annotator.expression.start.expected=应为表达式开头
illegal.interpolations.inspection.depends.on.error.message={0} 中不允许使用插值
illegal.interpolations.inspection.display.name=非法插值
illegal.interpolations.inspection.in.variable.error.message=变量中不允许使用插值
illegal.interpolations.inspection.no.double.quotes.error.message=模块源应为带双引号的字符串
illegal.interpolations.inspection.no.function.calls.error.message=只需要一个静态变量引用\: 仅特性访问和包含常量键的索引(无计算、函数调用、模板表达式等)。
incorrect.variable.type.inspection.change.type.quick.fix.name=将变量类型更改为 {0}
incorrect.variable.type.inspection.display.name=变量类型不正确
incorrect.variable.type.inspection.legacy.variable.error.message=''旧表单'' (Terraform 0.12 前)中的变量类型不正确，应为 {0}
incorrect.variable.type.inspection.type.mismatch.error.message=变量值类型 ''{0}'' 与默认值类型 ''{1}'' 不匹配
incorrect.variable.type.inspection.type.mismatch.simplified.error.message=变量值类型与默认值类型 ''{0}'' 不匹配
introduce.dialogs.replace.all.checkbox.title={0} ({1} 个匹配项)
introduce.variable.title=引入变量
label.runs.terraform.fmt="在与 HCL 兼容的配置文件上运行 `terraform/tofu fmt`"
missing.module.inspection.display.name=未解析的模块
missing.module.inspection.missing.module.error.message=无法在本地定位模块\: {0}
missing.module.inspection.run.terraform.get.quick.fix.failure.message=无法运行 ''{1} get''\: {0}
missing.module.inspection.run.terraform.get.quick.fix.failure.title=提取 {0} 模块失败
missing.module.inspection.run.terraform.get.quick.fix.family.name=运行 ''{0} get''
missing.module.inspection.run.terraform.get.quick.fix.name=在 {0} 中运行 ''{1} get''
missing.resource.property.inspection.add.properties.quick.fix.name=添加缺失的属性
missing.resource.property.inspection.display.name=缺少必需属性
missing.resource.property.inspection.required.properties.error.message=缺少必需属性\: {0}
module.detection.error.failed.parse.modules.json=无法解析 .terraform/modules/modules.json，请初始化模块或运行 `{0} get`
module.detection.error.name.not.defined=未定义模块名称
module.detection.error.no.containing.directory=文件 `{0}` 没有包含它的目录
module.detection.error.no.dir.found=在 `{1}` 文件夹下找不到 .terraform，请将其初始化或在此文件夹中运行 `{0} get`
module.detection.error.no.module.dir.found=在 `{0}/.terraform/modules` 中找不到模块目录
module.detection.error.no.module.source=无法获取模块源值
module.detection.error.no.modules.json.found=在 .terraform 目录中找不到 modules/modules.json，请初始化模块或运行 `{0} get`
module.detection.error.no.path.found=在模块中找不到路径 `.terraform/{0}`，请初始化模块或运行 `{1} get`。此外，它可能是未引用的模块，例如某个模块的子目录
module.detection.error.no.psi.dir=找不到 {0} 的 PsiDirectory
module.detection.error.no.relative.dir.in.manifest=在 `{1}` 中找不到相对目录 `{0}`
module.detection.error.no.relative.path.found=在模块中找不到路径 `{0}`，请初始化模块或运行 `{1} get`。此外，它可能是未引用的模块，例如某个模块的子目录
module.detection.error.no.source.property="无 'source' 属性"
not.initialized.inspection.display.name=模块目录未初始化
not.initialized.inspection.error.message=模块目录未初始化
notification.action.TfFmtFileAction.finished={1} 的 ''{0} fmt'' 已完成
notification.content.cannot.find.directory=找不到目录 {0}
notification.content.local.model.has.been.generated.successfully=已为 {0} 成功生成本地模型
notification.content.terraform.init.failed={1} 的 ''{0} init'' 失败
notification.content.terraform.init.succeed={1} 的 ''{0} init'' 成功
notification.content.there.no.terraform.lock.hcl.found.please.run.terraform.init=找不到 ''.terraform.lock.hcl''，请初始化模块目录 ''{0}''
notification.group.terraform.execution=Terraform 执行已完成
notification.title.cant.generate.model=无法生成模型
opentofu.display.name=OpenTofu
opentofu.files.inspection.group.display.name=OpenTofu
opentofu.filetype.description=OpenTofu 配置文件
opentofu.key_provider.aws_kms.key_spec.description=密钥规范是表示密钥加密配置的属性。密钥规范的含义因密钥类型而异。
opentofu.key_provider.aws_kms.kms_key_id.description=密钥标识符类似您的 KMS 密钥的名称。
opentofu.key_provider.gcp_kms.key_length.description=生成的密钥的字节数，{0} 到 {1} 字节。
opentofu.key_provider.gcp_kms.kms_encryption_key.description=Cloud KMS 密钥是一个命名对象，包含一个或多个密钥版本以及密钥的元数据。一个密钥只存在于一个与特定位置绑定的密钥环上。
opentofu.key_provider.pbkdf2.hash_function.description=哈希函数，sha256 或 sha512
opentofu.key_provider.pbkdf2.iterations.description=迭代次数，从 200,000 到 600,000
opentofu.key_provider.pbkdf2.key_length.description=生成的密钥的字节数，{0} 到 {1} 字节
opentofu.key_provider.pbkdf2.passphrase.description=长且复杂的密码短语，最少 16 个字符
opentofu.key_provider.pbkdf2.salt_length.description=密钥派生的盐的长度从 1 到 32 个字节
opentofu.name=OpenTofu
opentofu.unknown.encryption.method.inspection.display.name=未知加密方法
opentofu.unknown.encryption.method.inspection.message=未知加密方法\: {0}
opentofu.unknown.key.provider.inspection.display.name=未知加密密钥提供程序
opentofu.unknown.key.provider.inspection.message=未知加密密钥提供程序\: {0}
parsing.error.empty.tags.not.allowed=不允许使用空标签
parsing.error.recover.to.token=应为 {0} 令牌，但实际为 {1}
popup.advertisement.press.to.show.partner.community.providers=按{0}显示合作伙伴和社区提供商
popup.content.could.not.find.bundled.provider.for=找不到 {0}“<b>{1}</b>”的捆绑提供程序<p>请参阅 <a href\="https\://registry.terraform.io/search/providers?q\={2}" target\="_blank">Terraform 注册表</a>，了解提供程序信息</p>
progress.text.loading.documentation=正在加载文档
progress.title.adding.required.properties=正在添加必需属性
progress.title.detecting.terraform.executable=正在检测 {0} 可执行文件…
progress.title.opening.terraform.documentation=正在打开 Terraform 文档
progress.title.processing=正在处理…
progress.title.removing.unused.metadata=正在移除未使用的元数据
progress.title.terraform.init=正在初始化工作目录
rebuilding.local.schema=正在重新构建本地架构
refactoring.introduce.anchor.error=找不到存放结果的位置
refactoring.introduce.error=引入错误
refactoring.introduce.name.error=名称不正确
refactoring.introduce.selection.error=无法使用所选元素执行重构
refactoring.introduce.variable.scope.error=与现有变量的名称冲突
run.configuration.no.working.directory.specified=未指定工作目录
run.configuration.terraform.path.detected=检测到的路径\: ''{0}''
run.configuration.terraform.path.detected.title=已找到 {0}
run.configuration.terraform.path.incorrect=在指定路径下找不到 {1} 可执行文件\: ''{0}''
run.configuration.terraform.path.title={0} 可执行文件路径错误
run.configuration.working.directory.doesnt.exist=工作目录不存在\: {0}
suppress.inspection.block.action.name=对块禁止
suppress.inspection.property.action.name=对属性禁止
terraform.add.provider.dialog.title=添加{0}
terraform.add.required.properties.command.name=添加必需属性
terraform.configuration.type.description=使用指定形参运行 {0}
terraform.display.name=Terraform/OpenTofu
terraform.doc.argument.0.1=实参 {0}.{1}
terraform.doc.argument.0.1.br.2=实参“<b>{0}.{1}</b>”<br>{2}
terraform.doc.block.0.br.1=块 <b>{0}</b><br>{1}
terraform.doc.block.type.0={0} {1}
terraform.doc.block.type.0.br.1=块类型 <b>{0}</b><br>{1}
terraform.doc.data.source.0.of.type.1={1} 类型的数据源“{0}”
terraform.doc.generic.block=块
terraform.doc.hcl.datasource.0.of.type.1=<b>{1}</b> 类型的数据源“<b>{0}</b>”<br> {2}
terraform.doc.hcl.output.0.of.type.1=输出“<b>{0}</b>”<br>{1}
terraform.doc.hcl.provider.0.of.type.1=提供程序“<b>{0}</b>”<br>{1}
terraform.doc.hcl.resource.0.of.type.1=<b>{1}</b> 类型的资源“<b>{0}</b>”<br> {2}
terraform.doc.input.variable.0=输入变量“{0}”
terraform.doc.label.local.value.0=局部值 {0}
terraform.doc.local.value.0=局部值 {0}
terraform.doc.local.values=局部值
terraform.doc.module.0=模块“{0}”
terraform.doc.output.value.0=输出值“{0}”
terraform.doc.property.0=属性 {0}
terraform.doc.property.0.1.br.2=<p>属性 <b>{0}</b> ({1})</p>{2}
terraform.doc.provider.0=提供程序 {0}
terraform.doc.provider.function={1} 提供程序的函数 "{0}"
terraform.doc.resource.0.of.type.1={1} 类型的资源“{0}”
terraform.doc.terraform.configuration=Terraform 配置
terraform.doc.variable.0.1.2.3=<p>变量 <b>{0}</b></p> {1} {2} {3}
terraform.documentation.download.enabled=允许自动下载 Terraform 文档。如果禁用，将使用内置元数据描述。
terraform.executable.macro.description=Terraform 可执行文件路径
terraform.files.duplicates.inspection.group.display.name=重复项
terraform.files.inspection.group.display.name=Terraform/OpenTofu
terraform.fmt.commit.error.message=无法对所选文件应用 'terraform fmt'
terraform.formatter.error.message=无法在 {0} 上运行 ''{1} fmt''
terraform.formatter.error.title=''{0} fmt'' 错误
terraform.inlay.hints.indefinite.usages.text=* 用法
terraform.inlay.hints.usages.text={0,choice, 0\#无用法|1\#1 个用法|2\#{0,number}'{1,choice, |1\#+}' 用法}
terraform.metadata.build.auto=通过为每个已初始化的项目运行 `terraform providers schema -json` 来自动构建 Terraform 本地元数据。
terraform.metadata.build.eagerly=启用后，当更改任何相关文件或将其添加到项目中时，将重新构建本地元数据。禁用后，仅在请求时构建元数据。
terraform.name=Terraform
terraform.name.lowercase=terraform
terraform.open.settings=打开设置
terraform.opentofu.settings.label=Terraform 和 OpenTofu
terraform.run.configuration.apply.name.suffix=Apply
terraform.run.configuration.arguments.empty.validation.text=选择“自定义”时，“程序实参”不应为空。请提供有效的 Terraform 命令或选项
terraform.run.configuration.arguments.label=程序实参\:
terraform.run.configuration.command.combobox.none.item=自定义
terraform.run.configuration.command.label=主命令\:
terraform.run.configuration.custom.name.suffix=自定义
terraform.run.configuration.destroy.name.suffix=Destroy
terraform.run.configuration.global.options.fragment=全局选项\:
terraform.run.configuration.global.options.label=全局选项\:
terraform.run.configuration.init.name.suffix=Init
terraform.run.configuration.name={0} 运行
terraform.run.configuration.plan.name.suffix=Plan
terraform.run.configuration.validate.name.suffix=Validate
terraform.run.text=运行 {0}
terraform.use.global.meta=启用后，将加载来自 `terraform.d` 目录的元数据
terraform.variables.deep.search=启用后，将在嵌套目录中查找变量。禁用后，将仅在当前目录中查找变量
terraform.variables.search.fallback=启用后，将使用旧的变量搜索策略(2024.3 版本之前)
tfvars.unsupported.element.inspection.convert.to.double.quoted.string.quick.fix.name=转换为带双引号的字符串
tfvars.unsupported.element.inspection.display.name=.tfvars 内容不正确
tfvars.unsupported.element.inspection.illegal.value.type.error.message=属性值应为数字、带双引号的字符串、列表或对象
tfvars.unsupported.element.inspection.incorrect.variable.type.error.message=变量值类型不正确。应为 {0}
tfvars.unsupported.element.inspection.incorrect.variable.type.error.message.string.expected=简单值(字符串或数字)
tfvars.unsupported.element.inspection.no.quotes.in.argument.name.error.message=实参名称不得加引号
tfvars.unsupported.element.inspection.only.key.values.allowed.error.message=仅允许 'key\=value' 元素
tfvars.unsupported.element.inspection.undefined.variable.error.message=未定义的变量 ''{0}''
tool.detectAndTestButton.text=检测和测试
tool.executor.invalid.path=指定的路径不存在
tool.executor.unknown.error=未知的安装错误
tool.executor.unrecognized.version=无法识别的 {0} 版本
tool.executor.version=正在获取 {0} 版本
tool.format.display={0} fmt
tool.installButton.text=安装
tool.settings.executable.path.label={0} 可执行文件路径\:
tool.testButton.text=测试
tool.testResultLabel.download.progress.title=正在下载 {0}…
tool.testResultLabel.installed={0} 已安装
tool.testResultLabel.not.found=找不到 {0}
tool.testResultLabel.not.installed=无法安装 {0}
tool.testResultLabel.progressTitle=测试…
type.specification.validator.block.not.allowed.error.message=不允许块，仅允许属性
type.specification.validator.collection.argument.required.error.message={0} 类型构造函数需要一个指定元素类型的实参
type.specification.validator.exact.type.required.error.message=关键字 {0} 不能在此类型规范中使用\: 需要确切的类型
type.specification.validator.illegal.type.specification.error.message=类型规范可以是基元类型关键字(布尔、数字、字符串)，也可以是列表(字符串)等复杂类型构造函数调用
type.specification.validator.invalid.type.constructor.error.message=关键字 {0} 不是有效的类型构造函数
type.specification.validator.invalid.type.specification.error.message=关键字 {0} 不是有效的类型规范
type.specification.validator.no.argument.expected.error.message=基元类型关键字 {0} 不应有实参
type.specification.validator.object.argument.map.required.error.message=对象类型构造函数需要一个键为特性名称、值为对应特性类型的映射
type.specification.validator.object.argument.required.error.message=对象类型构造函数需要一个指定特性类型和值作为映射的实参
type.specification.validator.object.constructor.map.keys.must.be.attribute.names.error.message=对象构造函数映射键必须为特性名称
type.specification.validator.optional.argument.required.error.message=可选类型构造函数需要一个或两个指定元素类型和默认值的实参
type.specification.validator.tuple.argument.required.error.message=元组类型构造函数需要一个指定元素类型作为列表的实参
unknown.block.0=未知块 {0}
unknown.block.type.inspection.add.closing.brace.quick.fix.test=在元素前添加右大括号
unknown.block.type.inspection.display.name=未知块类型
unknown.block.type.inspection.missing.closing.brace.error.message=上一行缺少右大括号
unknown.block.type.inspection.quick.fix.name=移除未知块
unknown.block.type.inspection.unknown.block.type.error.message=未知块类型 {0}
unknown.property.in.block.inspection.display.name=未知属性
unknown.property.in.block.inspection.error.message=未知属性 {0}
unknown.property.in.block.inspection.quick.fix.name=移除未知属性
unknown.resource.identifier.for.known.provider=对于提供程序“{2}”，未定义 {0}“{1}”
unknown.resource.identifier.inspection.display.name=未知资源类型
unknown.resource.identifier.inspection.error.message=未知{0}\:“{1}”
unused.data.source.inspection.error.message=数据源 ''{0}'' 从未使用
unused.data.source.inspection.quick.fix.name=移除未使用的数据源
unused.local.inspection.display.name=未使用的元素
unused.local.inspection.error.message=局部 ''{0}'' 从未使用
unused.local.inspection.quick.fix.name=移除未使用的局部
unused.variable.inspection.error.message=变量 ''{0}'' 从未使用
unused.variable.inspection.quick.fix.name=移除未使用的变量
