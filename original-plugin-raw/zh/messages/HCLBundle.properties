missing.resource.property.inspection.display.name=缺少必需属性
missing.resource.property.inspection.required.properties.error.message=缺少必需属性: {0}
missing.resource.property.inspection.add.properties.quick.fix.name=添加属性: {0}
missing.resource.property.inspection.add.properties.quick.fix.family.name=添加缺失的属性

conflicting.resource.property.inspection.display.name=属性冲突
conflicting.resource.property.inspection.error.message=与之冲突: {0}

deprecated.element.inspection.display.name=弃用的块/属性
deprecated.element.inspection.deprecated.property.error.message=弃用的属性: {0}{2, choice, 0# : {1}|1#}
deprecated.element.inspection.deprecated.block.error.message=弃用的块: {0}{2, choice, 0# : {1}|1#}

unknown.block.type.inspection.display.name=未知块类型
unknown.block.type.inspection.unknown.block.type.error.message=未知块类型 {0}
unknown.block.type.inspection.missing.closing.brace.error.message=上一行缺少右大括号
unknown.block.type.inspection.add.closing.brace.quick.fix.test=在元素前添加右大括号

block.name.validness.inspection.display.name=无效块名称
block.name.validness.inspection.block.name.should.not.be.empty.error.message=块名称不应为空
block.name.validness.inspection.invalid.name.error.message=名称必须以字母或下划线开头，并且只能包含字母、数字、下划线和短划线。
block.name.validness.inspection.missing.block.name.error.message=还要求 {0} 个名称元素
block.name.validness.inspection.extra.block.name.error.message=块名称元素过多
block.name.validness.inspection.add.name.quick.fix.name=添加名称元素
block.name.validness.inspection.remove.name.quick.fix.name=移除额外名称元素
block.name.validness.inspection.rename.block.quick.fix.name=重命名

terraform.files.duplicates.inspection.group.display.name=重复项

duplicated.block.property.inspection.display.name=重复的属性
duplicated.block.property.inspection.duplicate.property.error.message=在一个块内多次声明属性 ''{0}''

duplicated.inspection.base.navigate.to.duplicate.quick.fix.name=导航到{0}重复项
duplicated.inspection.base.navigate.to.duplicate.quick.fix.name.first=第一个
duplicated.inspection.base.show.other.duplicates.quick.fix.name=查看与此相似的所有重复项

duplicated.output.inspection.display.name=重复的输出
duplicated.output.inspection.output.declared.multiple.times.error.message=多次声明了输出 ''{0}''
duplicated.output.inspection.delete.output.quick.fix.name=删除输出
duplicated.output.inspection.rename.output.quick.fix=重命名输出

duplicated.provider.inspection.display.name=重复的提供程序
duplicated.provider.inspection.display.name.multiple.declaration.error.message=多次声明了提供程序 ''{0}''
duplicated.provider.inspection.display.name.add.provider.alias.quick.fix.name=添加提供程序别名
duplicated.provider.inspection.display.name.change.provider.alias.quick.fix.name=更改提供程序别名

duplicated.variable.inspection.display.name=重复的变量
duplicated.variable.inspection.multiple.declaration.error.message=多次声明了变量 ''{0}''
duplicated.variable.inspection.delete.variable.quick.fix.name=删除变量
duplicated.variable.inspection.rename.variable.quick.fix.name=重命名变量

incorrect.variable.type.inspection.display.name=变量类型不正确
incorrect.variable.type.inspection.legacy.variable.error.message=''旧表单'' (Terraform 0.12 前)中的变量类型不正确，应为 {0}
incorrect.variable.type.inspection.type.mismatch.error.message=变量值类型 ''{0}'' 与默认值类型 ''{1}'' 不匹配
incorrect.variable.type.inspection.type.mismatch.simplified.error.message=变量值类型与默认值类型 ''{0}'' 不匹配
incorrect.variable.type.inspection.change.type.quick.fix.name=将变量类型更改为 {0}

missing.module.inspection.display.name=未解析的模块
missing.module.inspection.missing.module.error.message=无法在本地定位模块: {0}
missing.module.inspection.ru.terraform.get.quick.fix.name=在 {0} 中运行 ''terraform get''
missing.module.inspection.ru.terraform.get.quick.fix.family.name=运行 'terraform get'
missing.module.inspection.ru.terraform.get.quick.fix.failure.message=无法运行 ''terraform get'': {0}
missing.module.inspection.ru.terraform.get.quick.fix.failure.title=无法提取 Terraform 模块

illegal.interpolations.inspection.display.name=非法插值
illegal.interpolations.inspection.no.double.quotes.error.message=模块源应为带双引号的字符串
illegal.interpolations.inspection.in.variable.error.message=变量中不允许使用插值
illegal.interpolations.inspection.no.function.calls.error.message=只需要一个静态变量引用: 仅特性访问和包含常量键的索引(无计算、函数调用、模板表达式等)。
illegal.interpolations.inspection.depends.on.error.message={0} 中不允许使用插值

tfvars.unsupported.element.inspection.display.name=.tfvars 内容不正确
tfvars.unsupported.element.inspection.only.key.values.allowed.error.message=仅允许 'key=value' 元素
tfvars.unsupported.element.inspection.illegal.value.type.error.message=属性值应为数字、带双引号的字符串、列表或对象
tfvars.unsupported.element.inspection.no.quotes.in.argument.name.error.message=实参名称不得加引号
tfvars.unsupported.element.inspection.undefined.variable.error.message=未定义的变量 ''{0}''
tfvars.unsupported.element.inspection.incorrect.variable.type.error.message=变量值类型不正确。应为 {0}
tfvars.unsupported.element.inspection.incorrect.variable.type.error.message.string.expected=简单值(字符串或数字)
tfvars.unsupported.element.inspection.convert.to.double.quoted.string.quick.fix.name=转换为带双引号的字符串

type.specification.validator.illegal.type.specification.error.message=类型规范可以是基元类型关键字(布尔、数字、字符串)，也可以是列表(字符串)等复杂类型构造函数调用
type.specification.validator.exact.type.required.error.message=关键字 {0} 不能在此类型规范中使用: 需要确切的类型
type.specification.validator.collection.argument.required.error.message={0} 类型构造函数需要一个指定元素类型的实参
type.specification.validator.object.argument.required.error.message=对象类型构造函数需要一个指定特性类型和值作为映射的实参
type.specification.validator.tuple.argument.required.error.message=元组类型构造函数需要一个指定元素类型作为列表的实参
type.specification.validator.invalid.type.specification.error.message=关键字 {0} 不是有效的类型规范
type.specification.validator.simple.keyword.required.for.call.error.message=方法名称必须为简单关键字
type.specification.validator.no.argument.expected.error.message=基元类型关键字 {0} 不应有实参
type.specification.validator.object.argument.map.required.error.message=对象类型构造函数需要一个键为特性名称、值为对应特性类型的映射
type.specification.validator.block.not.allowed.error.message=不允许块，仅允许属性
type.specification.validator.object.constructor.map.keys.must.be.attribute.names.error.message=对象构造函数映射键必须为特性名称
type.specification.validator.invalid.type.constructor.error.message=关键字 {0} 不是有效的类型构造函数

terraform.files.inspection.group.display.name=Terraform 配置

hil.scope.not.available.in.context.inspection.display.name=不可用的范围
hil.scope.not.available.in.context.inspection.illegal.self.use.message=仅允许在资源定义内部的 'provisioner' 和 'connection' 块中引用 'self'

hil.unknown.resource.type.inspection.display.name=引用了未知资源类型
hil.unknown.resource.type.inspection.unknown.resource.type.error.message=未知资源类型

hil.unresolved.reference.inspection.display.name=未解析的引用
hil.unresolved.reference.inspection.unresolved.reference.error.message=未解析的引用 {0}

hil.operation.types.mismatch.inspection.display.name=操作实参类型不匹配
hil.operation.types.mismatch.inspection.number.expected.error.message=应为数字，而不是 {0}
hil.operation.types.mismatch.inspection.boolean.expected.error.message=应为布尔值，而不是 {0}
hil.operation.types.mismatch.inspection.boolean.or.string.expected.error.message=条件应为布尔值或包含布尔值的字符串
hil.operation.types.mismatch.inspection.both.branches.must.have.same.type.error.message=这两个分支的类型应相同。''then'' 为 {0}，''else'' 为 {1}

hil.convert.to.hcl.inspection.display.name=HIL 表达式可转化为 HCL2
hil.convert.to.hcl.inspection.interpolation.could.be.replaced.with.hcl2.message=插值可以替换为 HCL2 表达式
hil.convert.to.hcl.inspection.convert.to.hcl2.quick.fix.text=转换为 HCL2 表达式

hcl.simplify.expression.inspection.display.name=次优表达式
hcl.simplify.expression.inspection.could.be.replaced.with.list.indexing.message=可以替换为列表索引(可能会改变语义)
hcl.simplify.expression.inspection.replace.with.list.indexing.quick.fix.text=替换为列表索引
hcl.simplify.expression.inspection.replace.with.list.indexing.quick.fix.family.name=简化表达式

terraform.name=Terraform
terraform.name.lowercase=terraform
terraform.configuration.title=Terraform
terraform.configuration.type.description=使用指定形参运行 Terraform
run.configuration.no.working.directory.specified=未指定工作目录
run.configuration.no.terraform.specified=Terraform 可执行文件的路径未设置
run.configuration.terraform.path.incorrect=Terraform 可执行文件的路径不正确

introduce.variable.title=引入变量
refactoring.introduce.selection.error=无法使用所选元素执行重构
refactoring.introduce.variable.scope.error=名称与现有变量冲突
refactoring.introduce.name.error=名称错误
refactoring.introduce.anchor.error=无法找到结果的位置
refactoring.introduce.error=引入错误

label.runs.terraform.fmt="对 Terraform HCL 配置文件运行 `terraform fmt`"

inspection.suppressor.suppress.for.property.action.name=对属性禁止
inspection.suppressor.suppress.for.element.action.name=对{0}禁止
terraform.fmt.commit.error.details.caption=详细信息(&D)…
terraform.fmt.commit.error.message=<html><body>'terraform fmt' 在某些文件中返回非零代码。<br/>仍要提交吗?</body></html>

AddVariableFix.family.name=添加变量
AddVariableFix.text=添加变量 ''{0}''

HCLFileType.description=HashiCorp 配置语言文件
HILFileType.description=HashiCorp 插值语言文件
TerraformFileType.description=Terraform 配置文件

code.style.align.properties.title=对齐属性
code.style.formatting.options.group.name=格式化选项
code.style.line.commenter.character.title=单行注释样式
code.style.code.conventions.group.name=代码惯例

hcl.code.style.settings.braces=大括号
hcl.code.style.settings.equals=等号
hcl.code.style.settings.arrays=数组
hcl.code.style.settings.objects=对象

hcl.color.settings.braces.and.operators.brackets=大括号和运算符//中括号
hcl.color.settings.braces.and.operators.braces=大括号和运算符//大括号
hcl.color.settings.braces.and.operators.comma=大括号和运算符//逗号
hcl.color.settings.braces.and.operators.operation.sign=大括号和运算符//运算符号
hcl.color.settings.number=数字
hcl.color.settings.keyword=关键字
hcl.color.settings.identifier=标识符
hcl.color.settings.comments.line.comment=注释//行注释
hcl.color.settings.comments.block.comment=注释//块注释
hcl.color.settings.property.name=属性名称
hcl.color.settings.block.only.name.type=块//仅类型块
hcl.color.settings.block.first.type=块//第一类型块
hcl.color.settings.block.second.type=块//第二类型块
hcl.color.settings.block.other.types=块//其他类型块
hcl.color.settings.block.name=块//块名称
hcl.color.settings.string.text=字符串//字符串文本
hcl.color.settings.string.valid.escape.sequence=字符串//有效转义序列
hcl.color.settings.string.invalid.escape.sequence=字符串//无效转义序列

hil.color.settings.braces.operators.parentheses=大括号和运算符//圆括号
hil.color.settings.braces.operators.braces=大括号和运算符//大括号
hil.color.settings.braces.operators.brackets=大括号和运算符//中括号
hil.color.settings.braces.operators.comma=大括号和运算符//逗号
hil.color.settings.braces.operators.operation.sign=大括号和运算符//运算符号
hil.color.settings.braces.operators.dot=大括号和运算符//点
hil.color.settings.number=数字
hil.color.settings.string=字符串
hil.color.settings.keyword=关键字
hil.color.settings.identifier=标识符
hil.color.settings.predefined.scope=预定义范围
hil.color.settings.resource.type.reference=资源类型引用
hil.color.settings.resource.instance.reference=资源实例引用
hil.color.settings.property.reference=属性引用
hil.color.settings.valid.escape.sequence=有效转义序列
hil.color.settings.invalid.escape.sequence=无效的转义序列

HCLFindUsagesProvider.type.module=模块
HCLFindUsagesProvider.type.variable=输入变量
HCLFindUsagesProvider.type.output.value=输出值
HCLFindUsagesProvider.type.provider=提供程序
HCLFindUsagesProvider.type.resource=资源
HCLFindUsagesProvider.type.data.source=数据源
HCLFindUsagesProvider.type.terraform.configuration=terraform 配置
HCLFindUsagesProvider.type.local.values=局部值
HCLFindUsagesProvider.type.backend.configuration=后端配置
HCLFindUsagesProvider.type.local.value=局部值
HCLFindUsagesProvider.type.property=属性
HCLFindUsagesProvider.type.dynamic.iterator=动态迭代器
HCLFindUsagesProvider.type.for.loop.variable=for 循环变量
HCLFindUsagesProvider.type.named.block=块({0})
HCLFindUsagesProvider.type.untyped.named.element=<未指定类型的 PsiNamedElement {0}>
HCLFindUsagesProvider.type.untyped.non.psi.named.element=<未指定类型的非 PsiNamedElement {0}>

hcl.literal.annotator.property.key=属性键
hcl.literal.annotator.block.only.name.identifier=块单一名称标识符
hcl.literal.annotator.block.name.identifier=块名称标识符
hcl.literal.annotator.block.type.1.element=块类型 1 元素
hcl.literal.annotator.block.type.2.element=块类型 2 元素
hcl.literal.annotator.block.type.3.element=块类型 3+ 元素
hcl.literal.annotator.missing.closing.quote=缺少右引号
hcl.literal.annotator.illegal.octal.escape.sequence=非法八进制转义序列
hcl.literal.annotator.illegal.hex.escape.sequence=非法十六进制转义序列
hcl.literal.annotator.illegal.unicode.escape.sequence=非法 Unicode 转义序列
hcl.literal.annotator.illegal.escape.sequence=非法转义序列
hcl.literal.annotator.argument.names.must.not.be.quoted=实参名称不得加引号
hcl.literal.annotator.illegal.number.literal=非法数字文字
hcl.literal.annotator.add.closing.quote.quick.fix.text=添加右引号

hil.literal.annotator.unwrap.string.quick.fix.text=转换为标识符

hil.variable.annotator.expression.start.expected=应为表达式开头
hil.variable.annotator.expanded.function.argument.must.be.immediately.followed.by.closing.parentheses=展开的函数实参后应紧跟右圆括号

hil.introduce.variable.handler.dialog.caption=引入变量
hil.inplace.variable.introducer.title=引入变量


terraform.executable.macro.description=Terraform 可执行文件路径
terraform.settings.executable.path.label=Terraform 可执行文件路径
terraform.settings.reloading.terraform.model.progress.title=正在重新加载 Terraform 模型

terraform.run.configuration.name=Terraform 运行
terraform.run.configuration.type.plan.name.suffix=方案
terraform.run.configuration.type.apply.name.suffix=应用

introduce.dialogs.replace.all.checkbox.title={0} ({1} 个匹配项)

TFExecutor.finished.successfully.notification.text=成功完成
TFExecutor.interrupted.notification.text=已中断
TFExecutor.unknown.error.notification.text=未知错误，有关详细信息，请参阅日志
TFExecutor.failed.to.run.notification.text=无法运行
