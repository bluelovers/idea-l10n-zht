inspection.api.usage.name=受限的模块 API 用法
inspection.api.usage.no.allowed.dependencies=模块 ''{0}'' 没有允许的依赖项
inspection.api.usage.not.allowed.dependency=模块 ''{0}'' 依赖于 ''{1}''。但允许的依赖项为\: [''{2}'']
inspection.api.usage.not.exposed.dependency=模块 ''{0}'' 依赖于模块 ''{2}'' 中的非公开类型 ''{1}''
inspection.invalid.dependency.empty=模块依赖项标识符不能为空
inspection.invalid.dependency.malformed=依赖项标识符格式错误
inspection.invalid.dependency.missing.module=模块 ''{0}'' 不存在
inspection.invalid.dependency.missing.named.interface=命名接口 ''{0}'' 不存在
inspection.invalid.dependency.name=无效的依赖项声明
inspection.simplify.event.listener.declaration=事件侦听器声明可以简化
inspection.simplify.event.listener.declaration.message=可以使用 '@ApplicationModuleListener' 简化事件侦听器声明
quickfix.add.allowed.dependency=将 ''{0}'' 添加为 ''{1}'' 模块允许的依赖项
quickfix.add.allowed.dependency.command=添加允许的依赖项
quickfix.make.module.open=将 ''{0}'' 模块设为打开
quickfix.mark.class.named.interface=使用 ''@NamedInterface'' 注解 ''{0}''
quickfix.mark.class.named.interface.command=将类注解为命名接口
quickfix.move.to.base.package=将 ''{0}'' 移动到 ''{1}'' 模块基础软件包
quickfix.simplify.event.listener=使用 '@ApplicationModuleListener' 简化
spring.modulith=Spring Modulith
structure.module.allowed.dependencies=允许的依赖项
structure.module.id=ID
structure.module.open=打开
structure.modulith.modules=模块
structure.named.interfaces=命名接口
