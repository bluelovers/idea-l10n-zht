spring.boot.application.endpoints.tab.title=Actuator
spring.boot.application.endpoints.beans.tab.title=Bean
spring.boot.application.endpoints.health.tab.title=运行状况
spring.boot.application.endpoints.health.tab.configurable.name=运行状况

spring.boot.application.endpoints.refresh.action.name=刷新
spring.boot.application.endpoints.refresh.action.description=刷新应用程序端点数据

spring.boot.application.endpoints.navigate.to.bean.class.action.name=导航到 Bean 类
spring.boot.application.endpoints.navigate.to.bean.class.action.description=导航到所选 Bean 类
spring.boot.application.endpoints.show.context.action.name=显示上下文
spring.boot.application.endpoints.diagram.mode.action.name=图模式
spring.boot.application.endpoints.configure.health.tab.action.name=配置运行状况选项卡设置
spring.boot.application.endpoints.health.tab.refresh.action.name=刷新(已启用自动刷新，有 {0} 秒延迟)
spring.boot.application.endpoints.beans.diagram.provider=Spring 运行时 Bean

spring.boot.application.endpoints.root.context=根上下文
spring.boot.application.endpoints.parent.context=父上下文: {0}
spring.boot.application.endpoints.health.status=状态: {0}
spring.boot.application.endpoints.health.indicators.disabled=所有运行状况指示器均已禁用。只能了解整体状态。

spring.boot.application.endpoints.application.ready.check.failed=<html>无法检查应用程序就绪状态: {0}<br>按“刷新”按钮可重新开始就绪状态检查</html>
spring.boot.application.endpoints.application.ready.check.timeout.exceeded=已超过超时时间
spring.boot.application.endpoints.error.jmx.agent.not.loaded=未加载 JMX 代理
spring.boot.application.endpoints.error.failed.to.retrieve.jmx.service.url=无法检索应用程序 JMX 服务 URL
spring.boot.application.endpoints.error.failed.to.retrieve.application.port=无法检索应用程序端口:<br> {0}
spring.boot.application.endpoints.error.failed.to.retrieve.application.beans.snapshot=<html>无法检索应用程序 Bean 快照:<br> {0}</html>
spring.boot.application.endpoints.error.failed.to.retrieve.endpoint.data=无法检索 ''{0}'' 端点数据
spring.boot.application.endpoints.error.property.is.set.to.false=''{0}'' 属性设置为 false
spring.boot.application.endpoints.error.not.exposed=端点未通过 ''{0}'' 属性公开
spring.boot.application.endpoints.error.excluded=端点通过 ''{0}'' 属性排除
spring.boot.application.endpoints.error.bean.not.initialized=未初始化 ''{0}'' Bean
spring.boot.application.endpoints.config.file.not.found=找不到配置文件
spring.boot.application.endpoints.bean.definition.not.found=找不到 Bean 定义
spring.boot.application.endpoints.bean.class.not.found=找不到 Bean 类
spring.boot.application.endpoints.bean.not.injected=未在任何位置注入 Bean
spring.boot.application.endpoints.bean.injected.into=已注入到
spring.boot.application.endpoints.bean.depends.on=依赖于
spring.boot.application.endpoints.bean.item.group.dependent=依赖运行时 Bean
spring.boot.application.endpoints.bean.item.group.injected=注入的运行时 Bean
spring.boot.application.endpoints.bean.popup.title=运行时 Bean
spring.boot.application.endpoints.bean.auto.configuration=自动配置
spring.boot.application.endpoints.health.check=状态刷新间隔
spring.boot.application.endpoints.health.check.unit= 秒
spring.boot.application.endpoints.health.check.tooltip=自动刷新状态树

spring.boot.application.url.path.dialog.title=配置默认路径
spring.boot.application.url.path.label=默认路径:

spring.boot.choose.class.dialog.title=选择 Spring Boot 类

action.SpringBootApplicationUrlPathEditAction.text=编辑默认路径

spring.boot.application.run.configuration.main.class=主类
spring.boot.application.run.configuration.debug.output=启用调试输出(&D)
spring.boot.application.run.configuration.debug.output.tooltip=<html>通过添加虚拟机选项 <code>-Ddebug</code> 启用调试输出</html>
spring.boot.application.run.configuration.hide.banner=隐藏横幅(&H)
spring.boot.application.run.configuration.hide.banner.tooltip=<html>通过添加虚拟机选项 <code>-Dspring.main.banner-mode=OFF</code> 隐藏横幅<br>(<code>-Dspring.main.show-banner=false</code> 适用于 Spring Boot 1.4.x 或更早版本)</html>
spring.boot.application.run.configuration.launch.optimization=启用启动优化(&Z)
spring.boot.application.run.configuration.launch.optimization.tooltip=<html>添加虚拟机选项 <code>-XX:TieredStopAtLevel=1</code> 和 <code>-noverify</code> 以加快启动速度。<br>请验证这些选项不会对您的特定项目产生不利影响。</html>
spring.boot.application.run.configuration.jmx.agent=启用 JM&X 代理(&X)
spring.boot.application.run.configuration.jmx.agent.tooltip=<html>通过添加以下虚拟机选项启用 JMX 代理来显示应用程序端点数据: <code><br>-Dcom.sun.management.jmxremote <br>-Dspring.jmx.enabled=true <br>-Dspring.liveBeansView.mbeanDomain <br>-Dspring.application.admin.enabled=true</code><p>启用此选项可能会减慢启动速度。<p>要求 Spring Boot 1.3.0 或更高版本。</html>
spring.boot.application.run.configuration.on.update.action=执行“更新”操作时(&U)
spring.boot.application.run.configuration.on.frame.deactivation=切换出 IDE 时(&F)
spring.boot.application.run.configuration.do.nothing=不执行任何操作
spring.boot.application.run.configuration.active.profiles=有效配置文件
spring.boot.application.run.configuration.active.profiles.tooltip=逗号分隔的配置文件列表
spring.boot.application.run.configuration.override.parameters=重写配置属性(&P):
spring.boot.application.run.configuration.class.not.specified=未指定 Spring Boot 应用程序类
spring.boot.application.run.configuration.invalid.class=不是有效的 Spring Boot 应用程序类
spring.boot.application.run.configuration.invalid.parameter=第 {0} 行中的属性名称为空
spring.boot.application.run.configuration.policy.not.available.on.update.action=执行“更新”操作时 ''{0}'' 不可用
spring.boot.application.run.configuration.policy.not.available.on.frame.deactivation=切换出IDE时 ''{0}'' 不可用
spring.boot.application.run.configuration.environment.section=环境(&M)
spring.boot.application.run.configuration.framework.section=Spring Boot(&G)
spring.boot.jmx.setup.cant.parse.jmx.port=无法解析 JMX 远程端口 {0}
spring.boot.jmx.setup.for.remote.case.two.ports.should.match=对于远程目标，JMX 注册表端口 {0} 和 JMX RMI 服务器端口 {1} 应设置为相同的值
spring.boot.update.policy.classes.resources.name=更新类和资源
spring.boot.update.policy.classes.resources.description=<nobr>编译所有已修改和依赖文件。</nobr>
spring.boot.update.policy.classes.trigger.name=热交换类，如果失败则更新触发器文件
spring.boot.update.policy.classes.trigger.description=<i>在调试模式下:</i> <br>编译所有已修改和依赖文件、热交换类，<br>在热交换失败时更新触发器文件。<br><i>否则:</i> <br>编译所有已修改和依赖文件并更新触发器文件。<br>通过添加 VM 选项 <code>-Dspring.devtools.restart.trigger-file=.restartTriggerFile</code> 指定触发器文件名
spring.boot.update.policy.resources.name=更新资源
spring.boot.update.policy.resources.description=<nobr>编译所有已修改和依赖资源文件。</nobr>
spring.boot.update.policy.trigger.name=更新触发器文件
spring.boot.update.policy.trigger.description=更新触发器文件。<br>添加 VM 选项 <code>-Dspring.devtools.restart.trigger-file=.restartTriggerFile</code> 指定触发器文件名
spring.boot.run.config.type.name=Spring Boot
spring.boot.run.config.type.description=Spring Boot 应用程序
spring.boot.run.config.update.application=更新 ''{0}'' 应用程序
spring.boot.run.config.settings.background.compilation.enabled=已启用后台编译
spring.boot.run.config.settings.running.application.update.policies=运行应用程序更新策略
spring.boot.run.config.settings.on.update.action=执行“更新”操作时
spring.boot.run.config.settings.on.frame.deactivation=切换出IDE时
spring.boot.run.config.fragment.framework.group=Spring Boot
spring.boot.run.config.fragment.launch.optimization=禁用启动优化(&Z)
spring.boot.run.config.fragment.jmx.agent=禁用 JMX 代理(&X)
spring.boot.run.config.fragment.override.properties=覆盖配置属性(&P)