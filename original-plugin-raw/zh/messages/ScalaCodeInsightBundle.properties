### META-INF/codeInsight.xml
no.tailrec.annotation.title=无尾递归注解
group.general=常规
intention.category.scala=Scala
intention.category.scala.argument.conversion=Scala/实参转换
intention.category.scala.boolean=Scala/布尔值
intention.category.scala.control.flow=Scala/控制流
intention.category.scala.strings=Scala/字符串
intention.category.scala.strings.formatted.strings=Scala/字符串/格式化字符串
intention.category.scala.strings.interpolated.strings=Scala/字符串/内插字符串
intention.category.scala.string.string.concatenations=Scala/字符串/字符串串联
intention.category.scala.recursion=Scala/递归

### org/jetbrains/plugins/scala/codeInsight/generation/actions/ScalaGenerateCompanionObjectAction.scala
generate.companion.object.action.text=伴生对象
generate.companion.object.action.description=生成伴生对象

### org/jetbrains/plugins/scala/codeInsight/generation/actions/ScalaGenerateEqualsAction.scala
generate.equals.and.hashcode.methods.action.text=equals() 和 hashCode()
generate.equals.and.hashcode.methods.action.description=生成 equals() 和 hashCode() 方法
no.fields.to.include.in.equals.hashcode.have.been.found=未找到要包含在 equals/hashCode 中的字段

### org/jetbrains/plugins/scala/codeInsight/generation/actions/ScalaGeneratePropertyAction.scala
generate.proprty.action.text=属性(getter 和 setter)
generate.proprty.action.description=生成属性

### org/jetbrains/plugins/scala/codeInsight/generation/actions/ScalaGenerateToStringAction.scala
generate.tostring.method.action.text=toString()
generate.tostring.method.action.description=生成 toString() 方法

### org/jetbrains/plugins/scala/codeInsight/generation/ui/ScalaGenerateToStringWizard.scala
generate.ui.toString.title=生成 toString
generate.ui.toString.properties=从中生成 toString 的属性
generate.ui.toString.withNames=包含属性名称(&P)

### org/jetbrains/plugins/scala/codeInsight/hints/GeneralSettingsPanel.form
inlay.hints.respect.vertical.alignment=遵循垂直对齐
inlay.hints.limit.hint.length.to=将提示长度限制为
inlay.hints.characters=个字符

### org/jetbrains/plugins/scala/codeInsight/hints/ScalaGeneralTypeHintsSettingsModel.scala
show.types.even.if.they.are.obvious=即使类型显而易见也显示类型
general.settings=常规设置

### org/jetbrains/plugins/scala/codeInsight/hints/ScalaInlayParameterHintsProvider.scala
inlay.hints.show.parameter.hints=显示形参提示
inlay.hints.even.for.code.apply.code.and.code.update.code.methods=即使对于 <code>{0}</code> 和 <code>{1}</code> 方法也是如此
inlay.hints.even.for.non.literal.expressions=即使对于非文字表达式也是如此

### org/jetbrains/plugins/scala/codeInsight/hints/ScalaTypeHintsConfigurable.scala
method.chain.hints.action.text=方法链提示
method.chain.hints.action.description=切换方法链提示
type.hints.action.text=类型提示
type.hints.action.description=切换类型提示
configure.type.hints.text=配置…
configure.type.hints.description=配置类型提示
show.range.hints.for.to.and.until=显示 'to' 和 'until' 的 Range 提示
range.hints.for.to.and.until='to' 和 'until' 的 Range 提示

### org/jetbrains/plugins/scala/codeInsight/hints/ScalaTypeHintsSettingsModel.scala
member.variables=成员变量
method.results=方法结果
local.variables=局部变量
show.type.hints.for=显示类型提示:
type.hints=类型提示

### org/jetbrains/plugins/scala/codeInsight/hints/TypeMismatchHintsSettingsModel.scala
link.label.more.info=更多信息
show.type.mismatch.hints=显示类型不匹配提示
type.mismatch.hints=类型不匹配提示
instead.of.underlining.the.code=而不是为代码添加下划线

### org/jetbrains/plugins/scala/codeInsight/hints/methodChains/ScalaMethodChainInlayHintsSettingsModel.scala
in.a.separate.column=在单独一列中
show.method.chain.hints=显示方法链提示
method.chain.hints=方法链提示

### org/jetbrains/plugins/scala/codeInsight/hints/methodChains/ScalaMethodChainInlaySettingsPanel.form
inlay.hints.only.when.there.are.at.least=仅当至少存在
inlay.hints.unique.types=种独一无二的类型时

### org/jetbrains/plugins/scala/codeInsight/hints/rangeHints/ExclusiveRangeHintSettingsModel.scala
show.exclusive.range.hint=显示排除 Range 提示
range.exclusive.hint=Range.exclusive 提示

### org/jetbrains/plugins/scala/codeInsight/implicits/ExpandImplicitHintsAction.scala
expand.implicit.hints.action.text=展开隐式提示
expand.implicit.hints.action.description=在编辑器中展开隐式转换/参数嵌入提示

### org/jetbrains/plugins/scala/codeInsight/implicits/ImplicitHintsPass.scala
implicit.is.diverged=隐式分叉
can.t.infer.proper.types.for.type.parameters=无法推断类型形参的正确类型
no.implicits.found.for.parameter=找不到形参 {0} 的隐式项
no.implicits.found.for.parameters=找不到形参 {0} 的隐式项
ambiguous.implicits.for.parameter=形参 {0} 的模糊隐式项

### org/jetbrains/plugins/scala/codeInsight/implicits/ShowImplicitHintsAction.scala
show.implicit.hints.action.text=显示隐式提示
show.implicit.hints.action.description=在编辑器中将隐式转换/实参显示为嵌入提示

### org/jetbrains/plugins/scala/codeInsight/implicits/menu/ImplicitArgumentsPopup.scala
implicit.arguments.popup.action.text=隐式实参弹出窗口
implicit.arguments.popup.action.description=隐式实参弹出窗口

### org/jetbrains/plugins/scala/codeInsight/implicits/menu/MakeConversionExplicit.scala
make.conversion.explicit.action.text=将转换设为显式
make.conversion.explicit.action.description=将转换设为显式

### org/jetbrains/plugins/scala/codeInsight/implicits/menu/RemoveExplicitArguments.scala
remove.explicit.arguments.action.text=移除显式实参
remove.explicit.arguments.action.description=移除显式实参

### org/jetbrains/plugins/scala/codeInsight/intention/argument/AddNameToArgumentIntention.scala
family.name.use.named.arguments=使用命名实参
use.named.arguments.for.current.and.subsequent.arguments=对当前和后续的实参使用命名实参

### org/jetbrains/plugins/scala/codeInsight/intention/argument/ArgumentToBlockExpressionIntention.scala
family.name.convert.to.block.expression=转换为块表达式

### org/jetbrains/plugins/scala/codeInsight/intention/argument/BlockExpressionToArgumentIntention.scala
family.name.convert.to.argument.in.parentheses=转换为圆括号中的实参

### org/jetbrains/plugins/scala/codeInsight/intention/argument/PermuteArgumentsIntention.scala
family.name.permute.arguments=重新排列实参
permute.arguments.to.match.the.parameter.declaration.order=重新排列实参以匹配形参声明顺序

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/DeMorganLawIntention.scala
family.name.demorgan.law=应用德摩根定律
replace.refname.with.replacement=将 ''{0}'' 替换为 ''{1}''

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/ExpandBooleanIntention.scala
expand.boolean.use.to.ifelse=将布尔使用扩展为 'if else'
family.name.expand.boolean=扩展布尔

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/FlipComparisonInInfixExprIntention.scala
family.name.flip.comparison.in.infix.expression=翻转中缀表达式中的比较
flip.operation=翻转 ''{0}''
flip.operation.to.inverse=将 ''{0}'' 翻转为 ''{1}''

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/FlipComparisonInMethodCallExprIntention.scala
family.name.flip.comparison.in.method.call.expression=翻转方法调用表达式中的比较

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/NegateComparisonIntention.scala
family.name.negate.comparison=求反比较
negate.operation.to.inverse=将 ''{0}'' 求反为 ''{1}''

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/ReplaceEqualsOrEqualityInInfixExprIntention.scala
family.name.replace.equals.or.equality.in.infix.expression=替换中缀表达式中的等号或等式

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/ReplaceEqualsOrEqualityInMethodCallExprIntention.scala
family.name.replace.equals.or.equality.in.method.call.expression=替换方法调用表达式中的等号或等式
replace.operator.with.replacement=将 ''{0}'' 替换为 ''{1}''

### org/jetbrains/plugins/scala/codeInsight/intention/booleans/SimplifyBooleanExprWithLiteralIntention.scala
family.name.simplify.boolean.expression.with.a.literal=简化布尔表达式
simplify.boolean.expression=简化布尔表达式

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/InvertIfConditionIntention.scala
family.name.invert.if.condition=反转 If 条件

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/MergeElseIfIntention.scala
family.name.merge.else.if=合并 Else If
merge.elseif=合并 'else if'

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/MergeIfToAndIntention.scala
family.name.merge.nested.ifs.to.anded.condition=合并嵌套的 'if' 语句
merge.nested.ifs=合并嵌套的 'if'

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/MergeIfToOrIntention.scala
family.name.merge.equivalent.ifs.to.ored.condition=合并连续的 'if' 语句
merge.sequential.ifs=合并顺序 'if'

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/RemoveRedundantElseIntention.scala
family.name.remove.redundant.else=移除冗余的 else
remove.redundant.else=移除冗余的 'else'

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/ReplaceDoWhileWithWhileIntention.scala
family.name.replace.do.while.with.while=将 do while 替换为 while
this.action.will.cause.name.conflict=此操作将导致名称冲突。

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/ReplaceWhileWithDoWhileIntention.scala
family.name.replace.while.with.do.while=将 while 替换为 do while

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/SplitElseIfIntention.scala
family.name.split.else.if=拆分 else if
split.elseif=拆分 'else if'

### org/jetbrains/plugins/scala/codeInsight/intention/controlFlow/SplitIfIntention.scala
family.name.split.if=拆分 if
split.into.2.if.s=拆分为 2 个 'if'

### org/jetbrains/plugins/scala/codeInsight/intention/declarations/ChangeAccessModifierIntention.scala
change.access.modifier.intention=更改访问修饰符
change.access.modifier.intention.family=更改访问修饰符
make.0.1=将 ''{0}'' 设为{1}
detecting.possible.conflicts=正在检测可能的冲突
0.with.1.visibility.is.not.accessible.from.2=可见性为 {1} 的{0}无法从{2}访问
title.change.modifier=更改修饰符

### org/jetbrains/plugins/scala/codeInsight/intention/recursion/AddTailRecursionAnnotationIntention.scala
no.tailrec.annotation.fix=添加 @tailrec 注解
family.name.recursion=添加 @tailrec 注解

### org/jetbrains/plugins/scala/codeInsight/intention/stringLiteral/AddReplaceSlashRToMLStringIntention.scala
family.name.add.replace.call=添加 .replace("\\r","")
add.replace.call=添加 'replace("\\r", "")'

### org/jetbrains/plugins/scala/codeInsight/intention/stringLiteral/AddStripMarginToMLStringIntention.scala
family.name.add.stripmargin=添加 .stripMargin
add.stripmargin=添加 'stripMargin'

### org/jetbrains/plugins/scala/codeInsight/intention/stringLiteral/FormatConversionIntention.scala
convert.to.string.concatenation=转换为字符串串联
convert.to.interpolated.string=转换为插值字符串
convert.to.formatted.string=转换为格式化字符串

### org/jetbrains/plugins/scala/codeInsight/intention/stringLiteral/InsertGapIntoStringIntention.scala
family.name.insert.gap=插入间隙
insert.gap.with.concatenation=使用串联插入间隙: (" +  + ")

### org/jetbrains/plugins/scala/codeInsight/intention/stringLiteral/StringToMultilineStringIntention.scala
family.name.regular.multi.line.string.conversion=在常规/多行字符串之间转换
convert.to.normal.string=转换为 "string"
convert.to.multiline.string=转换为 """string"""

### org/jetbrains/plugins/scala/codeInsight/template/impl/ScalaBlankLineContextType.scala
element.context.type.blank.line=空行

### org/jetbrains/plugins/scala/codeInsight/template/impl/ScalaCodeContextType.scala
element.context.type.code=代码

### org/jetbrains/plugins/scala/codeInsight/template/impl/ScalaCommentContextType.scala
element.context.type.comment=注释

### org/jetbrains/plugins/scala/codeInsight/template/impl/ScalaImplicitValueClassContextType.scala
element.context.type.implicit.value.class=隐式值类

### org/jetbrains/plugins/scala/codeInsight/template/impl/ScalaStringContextType.scala
element.context.type.string=字符串

### org/jetbrains/plugins/scala/codeInsight/template/impl/ScalaXmlContextType.scala
element.context.type.xml=XML

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaAnnotatedMacro.scala
macro.annotated=annotated("annotation qname")

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaCompanionClassMacro.scala
macro.companion.class=companionClass

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaImplicitValueClassNameMacro.scala
macro.implicit.value.class.name=implicitValueClassName(TYPE_TEXT)

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaMethodReturnTypeMacro.scala
macro.method.returnType=methodReturnType()

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaPrimaryConstructorMacro.scala
macro.primaryConstructor.param.names=primaryConstructorParamNames
macro.primaryConstructor.param.types=primaryConstructorParamTypes
macro.primaryConstructor.param.instances=primaryConstructorParams

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaSubtypesMacro.scala
macro.subtypes=subtypes(TYPE)

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaSuggestVariableNameByTypeMacro.scala
macro.suggest.variable.name.by.type=suggestVariableNameByTypeText(TYPE_TEXT)

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaTypeOfVariableMacro.scala
macro.type.of.variable=typeOfVariable

### org/jetbrains/plugins/scala/codeInsight/template/macros/ScalaTypeParametersMacro.scala
marco.typeParameters=typeParams(CLASS)
marco.typeParameters.without.bounds=typeParamsWithoutBounds(CLASS)

### <unused>
intention.category.scala.type=Scala/类型
intention.category.scala.pattern.matching=Scala/模式匹配
intention.category.scala.expressions=Scala/表达式
intention.category.scala.for.comprehension=Scala/for 理解
intention.category.scala.import=Scala/导入
intention.category.scala.collections=Scala/集合
