action.RadMigrateCodeStyle.text=将代码样式设置从 CLion Classic 迁移到 Nova
action.RadResetCodeStyle.text=重置 CLion Nova 的 C/C++ 代码样式设置
action.RadShowTestList.text=显示测试列表
action.SendFeedback.text=提交反馈(_F)…
color.builtin.type.keywords=关键字//内置类型
color.concept=模板//概念
color.conditionally.non-compiled=有条件的未编译代码
color.constant=变量//常量
color.control.flow.keywords=关键字//控制流关键字
color.control.transfer.keywords=关键字//控制转移关键字
color.deduction_guide=模板//推导指南
color.dependent_code=模板//依赖代码
color.doxygen.comment=注释//Doxygen//文本
color.doxygen.tag=注释//Doxygen//命令
color.doxygen.tag.value=注释//Doxygen//命令值
color.enum.const=枚举常量
color.format.string.token=字符串//字符串实参中的格式说明符
color.function.call=函数//调用
color.function.declaration=函数//声明
color.global.variable=变量//全局变量
color.keyword=关键字//关键字
color.macro.name=宏名称
color.macro.parameter=形参//宏形参
color.namespace=命名空间
color.overloaded.operator=大括号和运算符//重载运算符
color.preprocessor.directive=预处理程序//指令
color.preprocessor.path=预处理程序//头路径
color.struct.field=结构字段
color.struct.union=类/结构/枚举/联合
color.template.non.type=模板//非类型形参
color.template.type=模板//类型形参
color.this.keywords=关键字//'this' 关键字
color.typedef=Typedef
configurable.name.c.resolve.context=C/C++ 解析上下文
formatter.item.allman.braces=Allman 大括号(无命名规则)
formatter.item.gnu=GNU (无命名规则)
formatter.item.kr.braces=K\\&R 大括号(无命名规则)
formatter.item.stroustrup.braces=Stroustrup
formatter.item.whitesmiths.braces=Whitesmiths 大括号(无命名规则)
hint.severity=提示
hint.severity.capitalized=提示
hint.severity.count.message={0} 个{0, choice, 0\#提示|1\#提示|2\#提示}
inspection.compiler.errors.description=显示来自 ReSharper 后端的编译器错误
inspection.compiler.errors.title=编译器错误
inspection.measure.resolve.description=Measures time needed to resolve all references in the project
inspection.measure.resolve.title=Measure references resolve
inspections.description.load.failed=无法加载
inspections.description.loading=正在加载…
inspections.group.bestpractice=常见做法和代码改进
inspections.group.coderedundancy=代码中的冗余
inspections.group.codesmell=潜在的代码质量问题
inspections.group.codestyleissues=语法样式
inspections.group.compilerwarnings=编译器问题
inspections.group.constraints=约束违规
inspections.group.dataflow=数据流分析
inspections.group.formattingissues=格式设置
naming.convention.header.guard.style.help=您可以使用预定义变量，例如\:<br><b>${PROJECT_NAME}</b>、 <b>${PROJECT_REL_PATH}</b>、 <b>${FILE_NAME}</b>、 <b>${EXT}</b> 和 <b>${UUID}</b>。<br>所有来自<i>编辑器/文件和代码模板</i> (<i>“文件”标签页</i>)<br>的预定义变量也可用(例如 <b>${USER}</b>、<b>${DATE}</b> 等)
naming.convention.header.guard.style.label=头文件保护符样式
project.awaiter=Awaits CLion backend activities
projectConfigurable.AggregateHints.displayName=聚合初始化
projectConfigurable.Cpp.CodeGeneration.displayName=代码生成
projectConfigurable.Cpp.General.displayName=常规
projectConfigurable.Cpp.IncludesOrder.displayName=\#include 的顺序
projectConfigurable.Cpp.Internal.displayName=内部
projectConfigurable.Other.displayName=其他
projectConfigurable.Other.languages.displayName=其他语言
projectConfigurable.ParameterNameHints.displayName=参数名称提示
projectConfigurable.RiderInlayHintsCppOptions.displayName=C/C++
projectConfigurable.TypeConversionHints.displayName=类型转换提示
projectConfigurable.TypeNameHints.displayName=Type Name Hints
refactoring.action.is.not.available.in.current.context=重构操作在当前上下文中不可用
refactoring.rename.collecting.usages.title=正在收集用法
resolve.contexts.current.file=当前 {0} 文件在 ''{1}'' 的上下文中解析
resolve.contexts.loading=正在加载解析上下文…
resolve.contexts.no.context=<无上下文>
resolve.contexts.prefix=上下文
resolve.contexts.prefix.no.context=当前文件无解析上下文
settings.completion.alwaysInsertInclude=始终添加 \#include
settings.completion.alwaysShowMenu=始终显示带有选项的菜单
settings.completion.dependingOnFileType=在 .cpp 文件中添加 '\#include'，在头文件中显示菜单
settings.completion.importBehaviour=导入条目的行为
settings.completion.insert.include.after.completion.of.member.of.incomplete.class=在补全不完整类的成员后添加 '\#include'
settings.completion.show.free.items=在成员补全中显示自由函数
settings.completion.show.import.items=在基本补全中显示导入条目
settings.completion.show.signatures=显示函数签名
test.file.is.not.source.file=文件不是源文件，测试将从源进行计数
test.framework=框架 ''{0}''\:
test.test.count=测试计数\:{0}
test.tests.in.project=''{0}'' 项目中的测试
usage.declaration=声明
usage.invocation=调用
