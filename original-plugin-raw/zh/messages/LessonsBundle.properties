### README.md strings

readme.welcome.header=认识交互式功能培训工具
readme.ift.description=此交互式课程将引导您完成许多 IDE 工作流和用例，附带许多实用的操作快捷键。您不需要全部记住这些快捷键，只需尝试并使用最实用的快捷键。在日常工作中，您可能会遇到新问题，请复习此课程并尝试其他功能。敬请关注新课目，它们可以帮助您更高效地使用 {0}。
readme.usage.header=如何使用课程
readme.toolwindow.description=`{0}` 工具窗口包含多个模块，其中包含相应的课目集合，您能够以任意顺序学习这些课目。完成一课的学习后，系统会将其标记为完成。您可以根据已完成的课目了解自己的学习进度，如果您希望回顾知识，可以重新学习。
readme.experienced.users.remark=即使您熟悉某一课，也不妨学习一下: 您可能会发现一些有用的示例和常用功能的未知快捷键!
readme.start.header=开始
readme.indexing.description=在学习项目初始化期间，您可能会阅读此 `README.md`。通常，“索引编制”是项目初始化期间最耗时的操作。IDE 需要收集与您的环境和项目{0,choice,1#, 库|2#}有关的信息，并构建内部表示。快速导航和搜索需要索引。
readme.navigation.hint=本课程中的 `{0}` 模块将显示使用方法。
readme.shortcuts.header=管理快捷键
readme.shortcuts.problem.description=此课程中的某些快捷键可能与系统或其他应用程序快捷键冲突。在这种情况下，您可以在课目的文本中点击有问题的快捷键。将打开一个弹出窗口并向您显示操作名称和替代快捷键。您将能够应用操作或分配新快捷键。
readme.bug.tracker.remark=如果遇到其他问题，请尝试重新开始课目，或者在[我们的问题跟踪器]({0})中报告。
readme.conclusion.header=返回项目
readme.exit.options=要返回欢迎屏幕，只需关闭项目窗口。或者，从主菜单中选择 `{0} | {1}`。您也可以使用 `{0}` 菜单打开或创建新项目。默认情况下，`{2}` 工具窗口处于隐藏状态。从主菜单中选择 `{3} | {4}` 可将其打开。
readme.feedback.request=欢迎提供您对此学习课程的反馈，我们将不胜感激!

### This file contains strings from lessons.

###############################################################################
## Common lessons
###############################################################################

## Essential module
essential.module.name=基本
essential.module.description=了解 {0} 最基本的功能

context.actions.lesson.name=上下文操作
context.actions.invoke.intentions.for.warning=在许多情况下，<ide/> 可以猜测您的<strong>意图</strong>或为您提供警告或错误的修正建议。我们来调用最有用的操作之一 - {0}。按 {1}。
context.actions.fix.warning=对此警告应用第一项快速修复: {0}。
context.actions.invoke.general.intentions=<ide/> 有许多意图! 每次您觉得可能是一种不错的解决方案或意图时，都可以尝试调用 {0}。这样可以节省大量时间，并使编码过程更有趣! 现在，我们来看看可以对文本光标所在的代码段应用哪些内容。再次按 {1}。
context.actions.apply.intention=我们来应用 {0} 意图。
context.actions.refactorings.promotion=请注意，许多有用的重构无法通过 {0} 使用。转到 {1} 模块了解如何调用和使用这些重构。

## Editor basics module
editor.basics.module.name=编辑器基础知识
editor.basics.module.description=使用智能快捷键添加、删除、选择、移动和复制代码。

goto.action.lesson.name=搜索操作
goto.action.mac.workaround=如果<strong>终端</strong>搜索打开，而不是{0}，请参阅<a href="{1}">本文</a>。
goto.action.use.find.action.1=最有用的快捷键之一是 {0}。通过它可以搜索所有可进行的操作，而不必了解各个快捷方式。立即使用 {1} 尝试。
goto.action.use.find.action.2=您也可以按两下 {1} 来调用 {0}。通过使用 {0}，您可以同时查找项目代码实体<strong>和</strong>其他 IDE 对象。使用何种方式由您决定。
goto.action.invoke.about.action=假设您想了解 <ide/>，请键入 {0}，然后按 {1}。
goto.action.to.return.to.the.editor=按 {0} 返回编辑器。
goto.action.invoke.again=您也可以使用 {0} 或按两下 {1} 更改设置。尝试重新调用它。
goto.action.show.line.numbers.request=键入 {0} 以查看 {1} 选择器。
goto.action.first.lines.toggle={0, choice, 0#关闭|1#开启} 行号。
goto.action.second.lines.toggle=现在，将行号切换回{0, choice, 0#开启|1#关闭}状态。
goto.action.propose.to.go.next.new.ui=太棒了! 只需按 {0} 或点击下面的按钮即可开始下一课。
goto.action.popup.closed.warning.message=按 {0} 或按两次 {1} 可再次打开搜索窗口。

collapse.lesson.name=收起
collapse.try.collapse=有时您需要收起一段代码以提高可读性。尝试使用 {0} 收起代码段。
collapse.hit.expand=要展开代码区域，请按 {0}。
collapse.all.collapse=如果要收起文件中的所有区域，请按 {0}。
collapse.all.expand=同样，按 {0} 可展开所有可用区域。

duplicate.and.delete.lines.lesson.name=复制和删除行
duplicate.and.delete.lines.duplicate.line=使用 {0} 复制文本光标所在的行。
duplicate.and.delete.lines.duplicate.several.lines=现在，按 {0} 复制所选行。
duplicate.and.delete.lines.delete.line=要删除当前行，请使用 {0} 操作。

move.lesson.name=移动代码段
move.pull.down=重新排列行通常涉及两项操作: 剪切和粘贴。使用 <ide/>，只需执行一项操作。按 {0} 向下拉取当前行。
move.pull.up=同样，要向上拉取一行，请按 {0}。
move.whole.method.up=尝试使用 {0} 将整个方法上移。请注意，文本光标应位于方法的标头处。
move.whole.method.down=现在，使用 {0} 将其下移。

multiple.selections.lesson.name=多选
multiple.selections.select.symbol=按 {0} 可选择文本光标处的符号。
multiple.selections.select.next.symbol=再次按 {0} 可选择此符号的下一个匹配项。
multiple.selections.deselect.symbol=按 {0} 可取消选择上一个匹配项。
multiple.selections.select.all=按 {0} 可选择文件中的所有匹配项。
multiple.selections.replace=键入 {0}，将 {1} 的所有匹配项替换为 {0}。

selection.lesson.name=扩大和缩小代码选区
selection.select.word=将文本光标放在任何单词前面。按 {0} 可将文本光标移至下一个单词，然后选择二者之间的所有内容。
selection.extend.selection=按 {0} 可将选区扩展到下一个代码块。
selection.extend.until.whole.file=尝试使用 {0} 增大选区，直至选择整个文件为止。
selection.shrink.selection={0} 可以缩小选区。尝试使用。

new.selection.select.word=按 {0} 可选择文本光标处的单词。
new.selection.select.string=再次按 {0} 可选择整个字符串。
new.selection.add.quotes=第三次按 {0} 以在选择中添加引号。
new.selection.select.call=再按 {0} {1,choice,1#一|2#两|3#三|4#四}次可选择整个调用。
new.selection.unselect=假设我们实际上要选择它的参数，而不是选择整个调用。请按 {0} 将选区缩小到参数。
new.selection.select.if=我们将文本光标移至 {0} 语句的开头。按两次 {1} 将其选中。只需按几下，即可很好地将关键字作为选择对应语句的一个起点。

comment.line.lesson.name=注释行
comment.line.comment.any.line=使用 {0} 注释掉任意一行。
comment.line.uncomment.that.line=使用相同的快捷方式取消注释注释行: 将文本光标置于该行中的任意位置，然后按 {0}。
comment.line.comment.several.lines=选择几行，然后使用 {0} 注释掉。

surround.and.unwrap.lesson.name=环绕和解开
surround.and.unwrap.invoke.surround=按 {0} 使用一些模板代码环绕所选代码段。
surround.and.unwrap.choose.surround.item=选择 {0} 条目。
surround.and.unwrap.invoke.unwrap=让我们通过“{0}”的解开操作返回到先前的状态。
surround.and.unwrap.choose.unwrap.item=选择 {0} 条目。
surround.and.unwrap.help.surround.code.fragments=环绕代码段
surround.and.unwrap.help.unwrapping.and.removing.statements=解开和移除语句

## Completion module
code.completion.module.name=代码补全
code.completion.module.description=让 IDE 补全您的代码。尝试基本、智能和其他类型的补全。

basic.completion.lesson.name=基本补全
basic.completion.start.typing=默认情况下，<ide/> 会立即提供代码补全建议。在文本光标所在位置处开始键入 {0}，您会看到带有匹配建议的补全列表。
basic.completion.just.press.to.complete=现在，只需按 {0} 即可补全此语句。
basic.completion.activate.explicitly=要显式激活基本补全，请按 {0}。
basic.completion.finish.explicit.completion=选择 {0} 并按 {1}。

completion.with.tab.lesson.name=使用 Tab 补全
completion.with.tab.begin.completion=按 {0} 查看补全建议。如果在建议列表中未看到 {1}，则开始输入 {1}，直至看到此条目。
completion.with.tab.finish.with.tab=选择 {0} 并按 {1}。此操作不是简单地插入所选建议，而是完全替换文本光标处的单词。

smart.completion.lesson.name=类型匹配补全

postfix.completion.lesson.name=后缀补全
postfix.completion.intro=后缀补全有助于在编写代码时减少向后跳转文本光标。使用它，您可以根据添加的后缀、表达式的类型及其上下文，将已键入的表达式转换为另一种表达式。

## Refactoring module
refactorings.module.name=重构
refactorings.module.description=通过重命名、提取和其他类型的重构保持代码整洁。
refactorings.change.settings.warning.message=要完成本课，请在编辑器设置中更改重构选项。按 {0}，转到“{1}”<strong>→</strong>“{2}”，然后选择“{4}”下面的“{3}”。或<callback id="{5}">点击</callback>以更改设置。

rename.lesson.name=重命名

refactoring.menu.lesson.name=重构菜单
refactoring.menu.show.refactoring.list=<ide/> 支持多种重构。其中许多重构都有自己的快捷键。要访问某些很少使用的重构，请按 {0} 并预览部分列表。
# Next string does not require translation
refactoring.menu.introduce.parameter.eng=假设您想通过重构操作将此表达式替换为参数。因此我们需要选择 {0}。现在只需键入 <strong>pa</strong> (introduce <strong>pa</strong>rameter) 或 <strong>ip</strong> (<strong>i</strong>ntroduce <strong>p</strong>arameter) 以减少建议的列表。
refactoring.menu.introduce.parameter=假设您想通过重构操作来将此表达式替换为一个参数。请从列表中选择 {0}，然后按 {1}。
refactoring.menu.start.refactoring=按 {0} 开始 {1} 重构。<strong>注意</strong>，您可以从重构菜单中了解重构快捷键。
refactoring.menu.finish.refactoring=要完成重构，您需要选择一些名称或保留其默认名称，然后按 {0}。

## Code Assistance module
code.assistance.module.name=代码辅助
code.assistance.module.description=了解如何设置代码格式、获取形参信息和预览快速弹出窗口。

code.format.lesson.name=代码格式
code.format.reformat.selection=<ide/> 只需一个操作即可帮助您更正代码格式设置。按 {0} 重新格式化所选代码段。
code.format.reformat.file=要在未选择任何行的情况下重新格式化整个文件，请使用 {0}。
code.format.show.reformat.file.dialog=使用 {0} 显示重新格式化设置。
code.format.optimize.imports=您可以在此处配置重新格式化选项。例如，启用 {0}，然后点击 {1}。

parameter.info.lesson.name=形参信息
parameter.info.use.action=按 {0} 查看方法签名。
parameter.info.add.parameters=使用 {0} 的 width 和 {1} 的 height。

quick.popups.lesson.name=快速弹出窗口
quick.popups.show.documentation=按 {0} 可查看文本光标处符号的文档。
quick.popups.press.escape=按 {0} 可关闭弹出窗口。
quick.popups.show.implementation=按 {0} 可查看文本光标处符号的定义。

editor.coding.assistance.lesson.name=编辑器编码辅助
editor.coding.assistance.goto.next.error=按 {0} 可转到文件中下一个高亮显示的错误。
editor.coding.assistance.fix.error=我们来修正此错误。按 {0}，然后选择 {1}。
editor.coding.assistance.goto.next.warning=我们转到下一个警告。按 {0}。
editor.coding.assistance.show.warning.description=此外，您还可以查看文本光标处条目的警告或错误说明。按 {0} 可查看简要说明，然后再次按 {0} 可展开说明。
editor.coding.assistance.fix.warning=弹出窗口显示了一条修正此警告的重构操作建议。
editor.coding.assistance.highlight.usages=另一种有用的工具是高亮显示用法。按 {0} 可高亮显示文件中文本光标处符号的所有用法。

## Navigation module
navigation.module.name=导航
navigation.module.description=跳转到源，导航到声明、实现和文件结构。

declaration.and.usages.lesson.name=声明和用法
declaration.and.usages.jump.to.declaration=按 {0} 跳转到方法的声明。
declaration.and.usages.show.usages=文本光标现在位于方法声明中。使用相同的快捷键 {0} 可查看其所有用法，然后选择其中之一。
declaration.and.usages.find.usages=按 {0} 可查看更详细的用法视图。您可以对声明或用法调用 {0}。
declaration.and.usages.pin.motivation=在 {0} 视图中，您可以同时导航到用法和声明。下次搜索将在 {0} 视图中重写这些结果。 为防止这种情况，请固定结果:
declaration.and.usages.right.click.tab=右键点击选项卡标题，{0}。
declaration.and.usages.select.pin.item=选择 {0}。
declaration.and.usages.hide.view=浏览完用法后，按 {0} 可隐藏视图。
declaration.and.usages.open.find.view=按 {0} 可再次打开 {1} 视图。

file.structure.lesson.name=文件结构
file.structure.open.popup=大型源文件可能难以读取和浏览。有时您只需要预览此类文件。按 {0} 可打开文件结构。
file.structure.request.prefixes=假设您想找到名称中含有 {0} 和 {1} 单词的方法。键入 {2} (所需单词的前缀)可筛选文件结构。
file.structure.navigate=仅剩一个条目。现在，按 {0} 跳转到所选项目。
file.structure.toolwindow=<ide/> 也可以将文件结构显示为工具窗口。使用 {0} 将其打开。

recent.files.lesson.name=最近的文件和位置
recent.files.first.transition=想知道 {0} 方法是如何实现的吗? 让我们使用 {1} 来查看它的声明。
recent.files.dialog.message=我们想模拟基本工作流: 在文件之间快速导航。请等待至完成。
recent.files.dialog.title=工作流模拟
recent.files.progress.title=正在打开文件
recent.files.show.recent.files=我们深入查看了库文件。怎样才能返回到我们的文件?<ide/> 有一项功能可以帮助我们显示最近打开的文件。按 {0}。
recent.files.search.typing=您可以按文件名搜索文件。键入 {0} (所需单词的前缀)。
recent.files.search.jump=仅剩一个文件。现在，按 {0} 跳转到所选文件。
recent.files.use.recent.files.again=我们已返回到文件。我们来使用 {0} 再次查看最近的文件。
recent.files.delete=此列表中包含很多我们不想再打开的源文件。我们来使用 {1} 从最近的文件历史记录中删除 {0} 个文件。
recent.files.close.popup=现在，最近文件的历史记录更干净了。点击弹出窗口外部的某个位置将其关闭或使用 {0}。
recent.files.show.recent.locations=通过另一项实用操作，您可以在最近访问的文件中发现您的代码。按 {0}
recent.files.locations.search.typing=在此处，可以根据您记得的代码段进行搜索。请键入 {0}
recent.files.locations.search.jump=现在，选择高亮显示的片段，然后按 {0} 打开包含的文件。

search.everywhere.lesson.name=随处搜索
search.everywhere.invoke.search.everywhere=要打开 {0}，需要按两次 {1}。
search.everywhere.type.prefixes=假设您正在查找名称中包含 {0} 和 {1} 单词的类。在搜索字段中键入 {2} (所需单词的前缀)。
search.everywhere.navigate.to.class=使用键盘箭头键选择 {0}，然后按 {1} 可跳转到此类的定义。
search.everywhere.goto.class=太棒了! 但是，有时您需要只查找类，或者只在某些特定目录中进行搜索。\n使用 {0} 可缩小搜索范围。
search.everywhere.type.class.name=假设您需要一些负责从输入流进行缓冲读取的库类。键入 {0} (所需单词的前缀)。但先不要导航到那里!
search.everywhere.use.all.places=现在，您可以在这个演示项目中看到一个类。但我们需要找到它在库中的实现。我们来将 {0} 筛选器切换到 {1}，您会看到可用库的内容。
search.everywhere.class.popup.closed.warning.message=按 {0} 可再次打开搜索窗口。
search.everywhere.quick.documentation=按 {0} 预览可用的文档。
search.everywhere.close.documentation.popup=按 {0} 可关闭弹出窗口。
search.everywhere.finish=<strong>完成!</strong>。您可以使用 {0} 查找方法或全局变量，并使用 {1} 查找文件。
search.everywhere.navigation.promotion=您将在 {0} 模块中找到其他导航操作和工作流用例。

find.in.files.lesson.name=在文件中查找并替换
find.in.files.show.find.popup=假设您希望查找某个字符串在项目中的所有匹配项。按 {0} 可打开 {1} 窗口。
find.in.files.type.to.find=键入 {0} 以搜索“学习”项目中的所有文本匹配项。
find.in.files.whole.words=您应当会找到 <code>apple</code> 字符串，但也会找到一些 <code>pineapple</code> 条目。我们来将搜索范围缩小到一个完整的单词。点击 {0} 或按 {1}。
find.in.files.select.row=您可以在嵌入式编辑器中查看找到的字符串的上下文。点击高亮显示的行或使用 {0} 和 {1} 按钮导航到该行。
find.in.files.go.to.file=此外，您也可以在主编辑器中打开所选文件。按 {0} 或双击该行以移至此文件。
find.in.files.show.replace.popup=假设您想用另一个字符串替换所有找到的匹配项。按顺序在每个文件中执行替换可能非常枯燥。<ide/> 将帮助您完成此任务。按 {0} 可打开 {1} 窗口。
find.in.files.type.to.replace=我们来用 {1} 替换 {0} 的所有匹配项。在高亮显示的字段中键入 {1}。
find.in.files.select.directory=您可以定义搜索和替换的范围。点击 {0} 按钮或按 {1} 将替换范围缩小到当前目录。
find.in.files.press.replace.all=按 {0} 开始重构。
find.in.files.confirm.replace=最后按 {0} 确认重构。
find.in.files.popup.closed.warning.message=按 {0} 可再次打开 {1} 窗口。

extract.method.lesson.name=提取方法
extract.method.invoke.action=按 {0} 将所选代码块提取到方法。
extract.method.start.refactoring=点击 {0} 开始重构。
extract.method.confirm.several.replaces=鸡尾酒排序有两个交换位置。第一个片段刚刚被提取。点击 {0} 同时提取它们。
extract.method.second.fragment=您现在可以确认或拒绝替换第二个片段。

extract.variable.lesson.name=提取变量
extract.variable.start.refactoring=按 {0} 从 {1} 表达式中提取局部变量。
extract.variable.replace.all=所选表达式在此代码块中出现 3 次。选择列表中的第二项以替换所有匹配项。
extract.variable.choose.name=为新变量选择名称，或者保留不变。按 {0} 补全重构。

## Run/Debug module
run.debug.module.name=运行并调试
run.debug.module.description=使用 IDE 可视调试器运行代码并修正错误。

run.configuration.lesson.name=运行配置
run.configuration.hide.toolwindow=<ide/> 自动打开 {0} 工具窗口。提示: 在 {0} 工具窗口的顶部，您可以看到完整运行命令。现在，我们来通过 {1} 隐藏工具窗口。
run.configuration.list.not.shown.warning=请在“{1} → {2}”菜单中选择“{0}”选项。启用工具栏并完成本课需要该选项。或者<callback id="{3}">点击</callback>以更改设置。
run.configuration.temporary.to.permanent=针对每个新的运行，<ide/> 会创建临时运行配置。当数量超过默认限值(5 个)时，临时配置会被自动删除。我们来将临时配置转换为永久配置。打开包含运行配置的下拉菜单。
run.configuration.select.save.configuration=选择 {0}。
run.configuration.edit.configuration=假设您要更改配置或手动创建另一个配置。您需要再次打开下拉菜单，然后点击 {0}。您也可以使用 {1} 操作。
run.configuration.settings.description=这是管理运行/调试配置的位置。您可以在此处设置程序形参、JVM 实参、环境变量等。
run.configuration.tip.about.save.configuration.into.file=提示: 有时您可能需要将配置保存到自身的文件中。此类配置易于在同事之间共享(一般通过版本控制系统)。现在，关闭设置对话框以完成本课。

debug.workflow.lesson.name=调试工作流
debug.workflow.incorrect.breakpoints=本课的断点设置不正确。
debug.workflow.run.program=在调试前运行程序，看看有哪些问题 {0}。
debug.workflow.toggle.breakpoint=因此，有一个问题。我们先来研究如何放置断点。要设置断点，请点击左编辑器间距或者按 {0}。
debug.workflow.start.debug=要开始调试所选运行配置，请点击 {0} 或按 {1}。
debug.workflow.need.restart.lesson=调试会话已停止。重新开始该课目。
debug.workflow.use.watches=确实有一个例外。我们把此表达式添加到 {0}。这是为了以后不用对其进行手动评估。按 {1} 或点击“{2}”选项。
debug.workflow.consider.to.add.a.shortcut=(不妨稍后指定快捷键)
debug.workflow.step.into=我们来单步进入。您可以在调试面板上执行 {0} 操作或使用 {1} 选项。
debug.workflow.choose.method.to.step.in=在大多数情况下，您可能想要跳过参数计算，因此“智能单步进入”功能默认会建议包装方法。但在这里需要选择第二种: {0}。您可以通过键盘 {1} 进行选择并按 {2}，或者点击该调用。
debug.workflow.quick.evaluate=我们来看看将传递给 {0} 的内容。为所选参数调用快速求值表达式 {1}。
debug.workflow.fix.error=糟糕，我们在数组索引中犯了一个错误! 现在，我们来修正此错误。关闭弹出窗口({0})并将 0 更改为 1。
debug.workflow.step.over=我们来检查 {0} 的调用现在是否抛出异常。使用“单步跳过”操作 {1} 或点击 {2} 选项。
debug.workflow.mute.breakpoints=糟糕，又是相同的断点。现在，我们不需要在此断点处停止。请点击 {0} 选项或执行操作 {1} 来禁止断点。
debug.workflow.run.to.cursor=来检查 {0} 的结果。我们已将编辑器光标移至 {1} 语句。按 {2} 或点击 {3}。或者，点击行号。请注意，即使断点被禁止，{4} 仍然有效。
debug.workflow.evaluate.expression=似乎异常是作为所选函数调用的结果引发的。我们来评估一下，看看猜测是否正确。复制所选表达式并将其粘贴到高亮显示的文本字段中。
debug.workflow.evaluate.it=按 {0} 评估表达式。
debug.workflow.stop.debug=结果正确! 我们来使用“{0}”或“{1}”按钮完成调试。
debug.workflow.resume=目前似乎没有异常。继续使用 {0} 执行或点击 {1} 按钮。

duplicate.and.delete.lines.select.several.lines=您可以对多行应用相同的操作。例如，按两下 {0} 以选择当前行和上一行。
duplicate.and.delete.lines.unexpected.selection.restore=意外选区
proceed.to.the.next.step=<callback id="{0}">点击以继续</callback>
local.history.lesson.name=恢复移除的代码
local.history.remove.code=在本课中，您将学习如何使用 {0} 恢复代码。按 {1} 移除所选代码段。
local.history.file.modification.progress=正在修改文件
local.history.editor.hint=文件修改对当前步骤禁用。
local.history.dialog.message=IDE 会模拟编辑文件的过程。请等待它完成。
local.history.imagine.restore=假设您需要恢复在开始时删除的代码。“{0}”操作无法帮助您，因为自那以后发生了许多其他更改，您可能会失去这些更改。
local.history.invoke.context.menu=使用 {0} 功能只需点击几次即可恢复已删除的代码。在编辑器中的任意位置点击鼠标右键即可调用上下文菜单。
local.history.show.history=选择“{0} → {1}”。
local.history.select.revision=“{0}”对话框的左侧窗格显示当前文件的已保存修订列表。当您编辑代码、运行测试和执行其他操作时，项目状态会自动保存到 {1}。例如，选择高亮显示的修订。
local.history.restore.code=右侧窗格显示了一个差异查看器，该查看器显示了每个版本与当前版本之间的差异。您可以看到本课开始时删除的此修订中的代码。点击 V 形按钮 {0} 可恢复代码片段。
local.history.restore.code.balloon=点击以恢复代码段
local.history.close.window=关闭对话框以返回到更改后的代码。按 {0}。
local.history.congratulations=很好! 您已恢复了代码段!
onboarding.return.to.welcome.remark=\ 并返回欢迎屏幕
context.actions.help.intention.actions=意图操作
collapse.help.link=展开或收起代码元素
multiple.selections.help.multiple.carets=多个文本光标和选择范围
selection.help.select.code.constructs=选择代码结构
basic.completion.help.code.completion=基本补全
postfix.completion.help.link=后缀代码补全
help.search.everywhere=随处搜索
help.lines.of.code=代码行
help.code.completion=代码补全
rename.help.link=“重命名”重构
refactoring.menu.help.link=调用重构
local.history.help.link=本地历史记录
code.format.help.link=配置代码样式
parameter.info.help.link=形参信息
quick.popups.help.link=快速弹出窗口
editor.coding.assistance.help.link=使用源代码
declaration.and.usages.help.link=转到声明及其类型
file.structure.help.link=查看源文件结构
recent.files.locations.help.link=查找最近的文件
find.in.files.help.link=搜索和替换项目中的目标
extract.method.help.link=提取方法
extract.variable.help.link=提取/引入变量
run.configuration.help.link=运行/调试配置
debug.workflow.help.link=调试代码
restore.settings.informer=在本课中，您更改了一些 IDE 设置。如果要恢复已修改的选项，请<callback id="{0}">点击</callback>。
debug.workflow.use.watches.shortcut=或者，您可以使用“{0}”操作将所选文本添加到{1} {2}。
debug.workflow.check.result=按 {0} 评估函数的结果。
multiple.selections.escape=按 {0} 重置多个选择并返回单文本光标模式。
comment.line.uncomment.several.lines=要取消对多行的注释，请选择所有注释行，然后按 {0}。
comment.block.lesson.name=注释行和代码块
comment.block.comment=若要使用块注释 {0} 进行注释，请选择代码块并按 {1}。
comment.block.uncomment=要取消对块注释的注释，请将文本光标置于注释块中的任意位置，然后按 {0}。
debug.workflow.frames.disabled.warning=要继续本课程，请在调试工具窗口中<callback id="{0}">启用</callback> {1} 视图。