action.CIDR.Lang.Format.ClangFormat.text=clangd\: 按原样运行 clang-format
cf.action.create.file=从代码样式创建 `.clang-format`
cf.action.disable=为项目禁用 ClangFormat
cf.action.enable=为项目启用 ClangFormat
cf.action.export=`.clang-format` 文件
cf.action.group.title=ClangFormat
cf.action.open.file=打开已编辑文件的 `.clang-format`
cf.action.open.full.set=显示已编辑文件的 ClangFormat 选项
cf.advertisement.text.has.clang-format=启用 ClangFormat 并使用 `.clang-format` 重写代码样式。
cf.advertisement.text.overridden=当前代码样式被 ClangFormat 重写
cf.config.enable=启用 ClangFormat (仅限 C/C++/Objective-C)
cf.config.override.standard=ClangFormat 重写 IDE 代码样式设置
cf.config.title=ClangFormat
cf.create.cf.file.message=是否要通过有效代码样式为当前项目创建新的 `.clang-format` 文件?
cf.create.cf.file.title=创建 `.clang-format` 文件
cf.hint.text.overridden=ClangFormat
cf.overwrite.cf.file.message=您是否要覆盖当前项目中的 `.clang-format` 文件以获得新的代码样式?
cf.overwrite.cf.file.title=覆盖 `.clang-format` 文件
cf.schema.name=ClangFormat
cf.title.actual.clang.format={0} 的 ClangFormat 选项
progressbar.long.clang.format=正在使用 ClangFormat 格式化…
progressbar.long.clang.indent=正在使用 ClangFormat 缩进…
progressbar.long.clang.settings=正在加载 ClangFormat 设置…
