SSRInspection.add.replace.template.button=添加结构替换检查…
SSRInspection.add.search.template.button=添加结构搜索检查…
SSRInspection.display.name=结构搜索检查
SSRInspection.family.name=结构化替换
add.filter.label=添加修饰符
add.filter.title=添加修饰符
add.pattern.action=添加模板
add.script.label=添加脚本
button.replace=替换
checkbox.save.in.project=保存在项目中(通过 VCS 共享)
class.category=Java/基于类
command.name.adjust.line.indent=调整行缩进
command.name.live.search.template.builder=活动搜索模板构建器
complete.match.variable.name=完全匹配
context.0.label=上下文\={0}
context.filter.name=上下文
context.label=上下文\=
count.filter.name=计数
count.label=计数\={0}
create.inspection.from.template.action.text=从模板创建检查…
default.label= 默认值
description.label=描述\:
do.replace.all.button=全部替换(&A)
draft.template.node=草稿模板
edit.metadata.button=编辑元数据…
error.argument.expected=''{0}'' 约束上应为实参
error.bad.character.literal=错误字符文字
error.bad.literal=不良文字
error.cannot.invert=无法反转 ''{0}'' 约束
error.condition.only.on.first.variable.reference=只有变量的第一个引用上允许约束
error.configuration.0.not.found=找不到模板 ''{0}''
error.empty.quantifier=空量词
error.expected.brace1=应为数字、'}' 或 ','
error.expected.brace2=应为数字或 '}'
error.expected.character=单引号后应为字符
error.expected.condition=''{0}'' 之后应为约束
error.expected.condition.name=缺少约束名称
error.expected.digit=应为数字
error.expected.value=应为 ''{0}''
error.in.groovy.parser=Groovy 解析器错误
error.incorrect.regexp.constraint=不正确的正则表达式约束\: {0}，{1}
error.only.applicable.to.complete.match=约束 ''{0}'' 仅适用于完全匹配
error.only.one.target.allowed=仅允许一个目标
error.overflow=值溢出
error.pattern.recursively.references.itself=模板以递归方式引用自身
error.script.constraint.for.0.has.problem.1={0} 的脚本约束存在问题 {1}
error.two.different.type.constraints=两种不同的类型约束
error.unexpected.value=意外的 ''{0}''
export.template.action=将模板导出到剪贴板
expressions.category=Java/表达式
exprtype.tooltip.message=类型{0,choice,0\#\=|1\#≠}{1}{2,choice,0\#|1\#，在层次结构中}
file.type.pattern.context={0} - {1}
filter.button=切换修饰符面板
filter.button.description=切换变量修饰符面板
filters.for.0.title=${0}$ 的修饰符\:
filters.for.whole.template.title=整个模板的修饰符\:
found.occurrences=在{0}中找到匹配项
found.progress.message=找到 {0} 个匹配项
generics.category=Java/泛型
hierarchy.tooltip.message=在层次结构内
import.template.action=从剪贴板导入模板
import.template.script.corrupted=剪贴板上未找到损坏的模板
import.template.script.warning=请注意，导入的模板包含 {1,choice,1\#1 个 Groovy 脚本修饰符|1<{1} 个 Groovy 脚本修饰符}，并且任何脚本都可以访问完整的 {0} 内部项。请确保脚本不会造成损坏，然后再使用此模板。
import.template.script.warning.title=警告\: 模板包含脚本
incorrect.pattern.message=错误模板
inspection.name.label=检查名称\:
inspection.script.problem={0}\n在结构搜索检查模板 ''{1}'' 中
inspection.tree.create.inspection.replace.template=正在使用结构替换模板…
inspection.tree.create.inspection.search.template=正在使用结构搜索模板…
inspection.tree.group.description=使用工具栏中的按钮创建新的结构搜索检查。<br>结构搜索检查会高亮显示与指定搜索模板匹配的代码段。可以通过添加替换模板来提供快速修复。<br><br><a href\="action\://ssr.profile.action.provider.add.group">添加自定义结构搜索检查…</a>
inspection.with.name.exists.warning=名称为 ''{0}'' 的检查已存在
interesting.category=Java/有趣
invalid.modifier.type=无效的修饰符类型 {0}
invalid.regular.expression=无效的正则表达式\: {0}
invert.filter=反转修饰符
j2ee.category=Java/Java EE
looking.in.progress.message=正在 {0} 中查找
max.label=最大值\=
meta.data.dialog.title=结构检索检查
metadata.category=Java/注释、Javadoc 和元数据
min.label=最小值\=
min.occurs.tooltip.message=[{0},{1}]
misc.category=Java/杂项
modify.editor.content.command.name=修改编辑器内容
name.must.not.be.empty.warning=名称不得为空
new.template.defaultname=未命名
no.description.message=未提供描述
no.filters.for.0.label=没有为 ${0}$ 添加修饰符
no.filters.whole.template.label=没有为整个模板添加修饰符。
no.script.for.0.label=没有为 ${0}$ 添加脚本
no.template.found.warning=剪贴板上未找到模板
occurrences.of=与模板 ''{0}'' 匹配的片段
occurrences.of.0.in.1={1}中的模板 ''{0}''
open.in.new.tab.checkbox=在新标签页中打开结果(&B)
operators.category=Java/运算符
option.is.not.recognized.error.message=未识别约束 ''{0}''
overwrite.message=具有相同名称的模板已存在。替换它将覆盖其当前内容。
overwrite.title=“{0}”已存在，是否替换?
pattern.context.class.member=类成员
pattern.context.default=默认
pin.button=搜索后保持对话框打开
pin.button.description=搜索后保持对话框打开
popup.content.directory=不是一个目录
predefined.configuration.all.expressions.of.some.type=一些类型的所有表达式
predefined.configuration.all.fields.of.the.class=该类的所有字段
predefined.configuration.all.inner.classes.within.hierarchy=所有内部类 (层次结构中)
predefined.configuration.all.methods.of.the.class.within.hierarchy=类所有的方法 (结构层次中)
predefined.configuration.annotated.class=注解的类、接口和枚举
predefined.configuration.annotated.fields=注解字段
predefined.configuration.annotated.methods=注解方法
predefined.configuration.annotation.declarations=注解声明
predefined.configuration.annotations=注解
predefined.configuration.anonymous.classes=匿名类
predefined.configuration.any.boxing=装箱的表达式
predefined.configuration.any.unboxing=拆箱的表达式
predefined.configuration.array.access=数组访问
predefined.configuration.assert.without.description=没有描述的 assert 语句
predefined.configuration.assignments=赋值
predefined.configuration.bean.info.classes=Bean 信息类
predefined.configuration.block.dcls=块声明
predefined.configuration.boxing.in.declarations=声明中的装箱
predefined.configuration.boxing.in.method.calls=方法调用中的装箱
predefined.configuration.casts=转换
predefined.configuration.class.any.initialization.blocks=任何初始值设定项
predefined.configuration.class.implements.two.interfaces=实现两个接口的类
predefined.configuration.class.instance.initialization.blocks=实例初始值设定项
predefined.configuration.class.static.blocks=Static 初始值设定项
predefined.configuration.class.with.parameterless.constructors=具有无形参构造函数的类
predefined.configuration.classes=类
predefined.configuration.classes.interfaces.enums=类、接口和枚举
predefined.configuration.cloneable.implementations=可克隆的实现
predefined.configuration.comments=注释
predefined.configuration.comments.containing.word=包含给定词的注释
predefined.configuration.constructors.of.the.class=类构造函数
predefined.configuration.deprecated.method.calls=对已弃用方法的方法调用
predefined.configuration.deprecated.methods=弃用的方法
predefined.configuration.diamond.operators=Diamond 运算符
predefined.configuration.direct.subclasses=直接子类
predefined.configuration.double.checked.locking=双重检查锁定
predefined.configuration.ejb.interface=EJB 接口
predefined.configuration.entity.ejb=实体 EJB
predefined.configuration.enums=枚举
predefined.configuration.field.selections=字段选择
predefined.configuration.fields.of.the.class=类的字段
predefined.configuration.fields.variables.read=字段/变量读取
predefined.configuration.fields_variables.with.given.name.pattern.updated=已更新给名称模式的字段/变量
predefined.configuration.filters=修饰符
predefined.configuration.foreaches=Foreach 循环
predefined.configuration.generic.casts=泛型转换
predefined.configuration.generic.classes=泛型类
predefined.configuration.generic.constructors=泛型构造函数
predefined.configuration.generic.methods=泛型方法
predefined.configuration.ifs=If
predefined.configuration.implementors.of.interface.within.hierarchy=接口的实现 (结构层次中)
predefined.configuration.inner.classes=内部类
predefined.configuration.instance.fields.of.the.class=该类的实例字段
predefined.configuration.instanceof=Instanceof
predefined.configuration.interfaces=接口
predefined.configuration.interfaces.having.no.descendants=未实现或扩展的接口
predefined.configuration.javadoc.annotated.class=Javadoc 注解类
predefined.configuration.javadoc.annotated.fields=Javadoc 注解字段
predefined.configuration.javadoc.annotated.methods=Javadoc 注解方法和构造函数
predefined.configuration.javadoc.tags=Javadoc 标记
predefined.configuration.junit.test.cases=JUnit 测试用例
predefined.configuration.labeled.break=带标签的 break 语句
predefined.configuration.lambdas=Lambdas
predefined.configuration.local.classes=局部类
predefined.configuration.logging.without.if=在没有 if 的情况下记录日志
predefined.configuration.method.calls=方法调用
predefined.configuration.method.references=方法引用
predefined.configuration.method.returns.bounded.wildcard=方法返回绑定的通配符
predefined.configuration.methods.of.the.class=构造函数和方法
predefined.configuration.methods.with.final.parameters=具有 final 形参的方法和构造函数
predefined.configuration.new.expressions=新表达式
predefined.configuration.not.annotated.methods=未注解的方法
predefined.configuration.packagelocal.fields.of.the.class=Package-private 字段
predefined.configuration.pattern.matching.instanceof=模式匹配 instanceof
predefined.configuration.records=记录
predefined.configuration.sample.method.invokation.with.constant.argument=具有常量实参的示例方法调用
predefined.configuration.serializable.classes.and.their.serialization.implementation=可序列化的类及其序列化实现
predefined.configuration.servlets=Servlet
predefined.configuration.session.ejb=会话 EJB
predefined.configuration.similar.methods.structure=类似的方法结构
predefined.configuration.singletons=单例
predefined.configuration.statement.in.if=if 中的语句
predefined.configuration.static.fields.without.final=不为 final 的 static 字段
predefined.configuration.string.concatenations=具有许多操作数的字符串串联
predefined.configuration.string.literals=字符串文字
predefined.configuration.struts.1.1.actions=Struts 1.1 操作
predefined.configuration.switch.with.branches=分支较少的 switch 语句和表达式
predefined.configuration.switches=开关
predefined.configuration.symbol=符号
predefined.configuration.try.without.resources=没有资源和 catch 块的 try 语句
predefined.configuration.trys=Try
predefined.configuration.type.text={0} 搜索模板
predefined.configuration.type.text.user.defined={0} 搜索模板，用户定义
predefined.configuration.type.var.substitutions.in.instanceof.with.generic.types=使用泛型类型替换 instanceof 中的类型变量
predefined.configuration.typed.symbol=键入的符号
predefined.configuration.unboxing.in.declarations=声明中的拆箱
predefined.configuration.unboxing.in.method.calls=方法调用中的拆箱
predefined.configuration.usage.of.derived.type.in.cast=转换中派生类型的用法
predefined.configuration.variables.of.generic.types=泛型类型变量
predefined.configuration.xdoclet.metadata=XDoclet 元数据
predefined.configuration.xml.attribute.referencing.java.class=引用 Java 类的 XML 特性
predefined.template.html.attribute=HTML 特性
predefined.template.html.attribute.value=HTML 特性值
predefined.template.li.not.contained.in.ul.or.ol=<li> 未包含在 <ul> 或 <ol> 中
predefined.template.ul.or.ol=<ul> 或 <ol>
predefined.template.xml.attribute=XML 特性
predefined.template.xml.attribute.value=XML 特性值
predefined.template.xml.html.tag.value=XML/HTML 标记值
predefined.template.xml.tag=XML 标签
predefined.template.xml.tag.without.specific.attribute=没有特定特性的 XML 标记
preview.replacement.button=预览替换(&P)
problem.descriptor.label=问题工具提示(使用宏 \#ref 插入高亮显示的代码)\:
project.templates.category=项目模板
recent.category=最近
reference.0.label=Reference\={0}
reference.filter.help.text=<p>对照提供的模板检查引用的元素。
reference.filter.name=引用
reference.label=引用\=
reference.target.tooltip.message=引用{0,choice,0\#\=|1\#≠}{1}
reformat.checkbox=重新设置格式(&R)
regex.check.box=正则表达式
remove.template=移除已保存的模板
replace.configuration.display.text={0} ⇨ {1}
replace.occurrences.of.0.with.1.in.2=将{2}中的 ''{0}'' 替换为 ''{1}''
replace.preview.oktext=替换(&R)
replace.selected.button=替换所选项(&R)
replacement.code=替换代码
replacement.not.supported.for.filetype={0} 文件类型不支持替换
replacement.template.is.not.expression.error.message=表达式无法替换为非表达式
replacement.template.label=替换模板\:
replacement.variable.is.not.defined.message=未知搜索变量 ''{0}'' 或替换变量 ''{0}'' 没有脚本
replacement.variable.is.not.valid=替换变量 ''{0}'' 有脚本代码问题\: {1}
save.inspection.action.text=将模板另存为检查…
save.template=保存模板(&A)…
save.template.action.text=在 IDE 或项目中保存模板…
save.template.description.button=保存当前模板
save.template.title=保存当前模板
script.0.label=Script\={0}
script.filter.match.variable.help.text=<p>使用 GroovyScript IntelliJ API 修改搜索结果。当指定的脚本返回 <code>false</code> 时，找到的元素将不在搜索结果中。非布尔脚本结果将被转换为布尔值。<p>可用变量\: {0}
script.filter.name=脚本
script.filter.replacement.variable.help.text=<p>使用 GroovyScript Intellij API 创建自定义替换，以实现高级重命名、重写或重构。替换时，替换模板中的变量将替换为指定脚本的字符串结果。<p>可用变量\: {0}
script.label=脚本\=
script.tooltip.message=脚本
search.dialog.file.type.label=语言(&L)\:
search.in.injected.checkbox=注入的代码(&J)
search.script.problem=结构检索脚本抛出异常\: {0}
search.target.label=目标(&T)\:
search.template=搜索模板\:
search.template.is.not.expression.error.message=非表达式无法替换为表达式
search.template.problem=结构搜索\: {0}
shorten.fully.qualified.names.checkbox=缩短完全限定名称(&Q)
ssr.will.not.find.anything=指定模板与作用域 ''{0}'' 中的任何内容都不匹配
status.bar.text.results.found.in.current.file=在当前文件中找到 {0} 个结果
structural.replace.preview.dialog.title=结构替换预览
structural.replace.title=结构替换
structural.search.group.name=结构搜索
structural.search.title=结构搜索
suppress.id.in.use.warning=禁止 ID ''{0}'' 已由另一个检查使用
suppress.id.label=禁止 ID\:
suppress.id.must.match.regex.warning=禁止 ID 必须匹配正则表达式 [a-zA-Z_0-9.-]
switch.to.replace.action=切换到替换
switch.to.search.action=切换到搜索
targets.node.text=结构搜索模板
template.in.use.message=模板 ''{0}'' 从模板 ''{1}'' 使用。确定要将其移除吗?
template.in.use.title=模板 ''{0}'' 正在使用中
template.name.label=模板名称\:
templates.button=切换现有模板面板
templates.button.description=切换现有模板面板
templates.title=模板\:
text.0.label=Text\={0}
text.filter.help.text=<p>根据提供的模式检查匹配的文本。<p>使用“\!”反转模式。<p>支持正则表达式。
text.filter.name=文本
text.label=文本\=
text.tooltip.message=文本{0,choice,0\#\=|1\#≠}{1}{2,choice,0\#|1\#，全字}{3,choice,0\#|1\#，在层次结构中}
this.pattern.is.malformed.message=指定模板的格式错误
tooltip.preconfigured.search.patterns=<p>可以使用 {0} 自动完成预配置的搜索模板。<p>提供的模板用于约束目标模板上下文
type.0.label=Type\={0}
type.filter.help.text=<p>根据提供的“|”分隔的模式检查匹配表达式的类型。<p>使用“\!”反转模式。
type.filter.name=类型
type.label=类型\=
unlimited.placeholder=无限制
use.static.import.checkbox=使用静态导入(&I)
user.defined.category=已保存的模板
user.defined.group.name=用户定义
whole.words.label=, 整个词
within.hierarchy.label=, 在层次结构内
within.type.hierarchy.check.box=在类型层次结构内
xml_html.category=XML/HTML
