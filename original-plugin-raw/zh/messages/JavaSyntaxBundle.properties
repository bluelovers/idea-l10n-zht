annotation.name.is.missing=应为格式为 'name\=value' 的注解特性
bound.not.expected=意外绑定
catch.without.try='catch' 没有 'try'
class.literal.expected=应为 .class
else.without.if='else' 没有 'if'
error.message.wildcard.not.expected=意外通配符
expected.array.initializer=应为数组初始值设定项
expected.boolean.expression=应为布尔表达式
expected.case.label.element=应为表达式、模式、'default' 或 'null'
expected.catch.or.finally=应为 'catch' 或 'finally'
expected.class.or.interface=应为 'class' 或 'interface'
expected.class.reference=应为类引用
expected.colon=应为 '\:'
expected.colon.or.arrow=应为 '\:' 或 '->'
expected.comma=应为 ','
expected.comma.or.rparen=应为 ',' 或 ')'
expected.comma.or.semicolon=应为 ',' 或 ';'
expected.dot=应为 '.'
expected.eq=应为 '\='
expected.expression=应为表达式
expected.gt=应为 '>'。
expected.gt.or.comma=应为 '>' 或 ','
expected.identifier=应为标识符
expected.identifier.or.semicolon=应为标识符或 ';'
expected.identifier.or.type=应为标识符或类型
expected.lbrace=应为 '{'
expected.lbrace.or.semicolon=应为 '{' 或 ';'
expected.lbracket=应为 '['
expected.lparen=应为 '('
expected.lparen.or.lbracket=应为 '(' 或 '['
expected.lt.or.lparen=应为 '<' 或 '('
expected.module.declaration=应为模块声明
expected.module.statement=应为模块指令
expected.package.reference=应为软件包引用
expected.parameter=应为形参
expected.parameter.or.rparen=应为注解特性或 ')'
expected.pattern=应为模式
expected.rbrace=应为 '}'
expected.rbracket=应为 ']'
expected.resource=应为资源定义
expected.rparen=应为 ')'
expected.semicolon=应为 ';'
expected.statement=应为语句
expected.switch.label=应为 'case'、'default' 或 '}'
expected.switch.rule=应为表达式、块或 throw 语句
expected.template.fragment=应为模板片段
expected.type=应为类型
expected.type.parameter=应为类型形参
expected.value=应为值
expected.while=应为 'while'
expected.with=应为 'with'
feature.advanced.collection.api=集合中的 Lambda 方法
feature.annotations=注解
feature.assertions=断言
feature.auto.root.modules=所有 API 导出模块都是隐式根模块
feature.binary.literals=二进制字面量
feature.classfile.api=ClassFile API
feature.collection.factories=集合工厂方法
feature.diamond.types=Diamond 类型
feature.effectively.final=有效的 final 变量
feature.enhanced.switch=增强的 'switch' 块
feature.enum.qualified.name.in.switch=switch 中作为常量的限定枚举
feature.enums=枚举
feature.extension.methods=扩展方法
feature.for.each=For-each 循环
feature.foreign.functions=外部函数和内存 API
feature.generics=泛型
feature.hex.fp.literals=十六进制浮点字面量
feature.implicit.class.name.out.of.scope=压缩源文件的隐式声明类的名称超出作用域
feature.implicit.classes=压缩源文件
feature.implicit.import.in.implicit.classes=压缩源文件中的隐式 import
feature.inherited.static.main.method=继承的 static main 方法
feature.inner.statics=内部类中的 static 声明
feature.instance.main.method=实例 main 方法
feature.intersections.in.casts=转换中的交叉类型
feature.javadoc.snippets=Javadoc 中的 @snippet
feature.lambda.expressions=Lambda 表达式
feature.local.enums=本地枚举
feature.local.interfaces=本地接口
feature.lvti=局部变量类型推断
feature.markdown.comment=Markdown 文档注释
feature.method.references=方法引用
feature.module.import.declarations=模块导入声明
feature.modules=模块
feature.multi.catch=多 catch
feature.nestmates=基于嵌套的访问控制
feature.no.this.capture=内部类不捕获 'this'
feature.objects.class=java.util.Objects API
feature.override.interface=接口中的 @Override
feature.package.import.shadow.module.import=按需导入优于模块导入
feature.package.transitive.dependency.on.java.base=对 java.base 模块的可传递依赖
feature.pattern.guard.and.record.patterns=模式 guard 和记录模式
feature.patterns.in.switch=switch 中的模式
feature.patterns.instanceof='instanceof' 中的模式
feature.pem.api=PEM Encodings API
feature.primitive.types.in.patterns=模式、instanceof 和 switch 中的基元类型
feature.private.interface.methods=private 接口方法
feature.record.patterns.in.for.each=在 for-each 循环中记录模式
feature.records=记录
feature.repeating.annotations=重复注解
feature.scoped.values=作用域值
feature.sealed.classes=密封类
feature.sequenced.collections=有序集合
feature.serial.annotation=@Serial 注解
feature.stable.values=Stable Values
feature.statements.before.super=灵活的构造函数主体
feature.static.imports=static import
feature.static.interface.calls=static 接口方法调用
feature.stream.and.optional.api=流和可选 API
feature.stream.gatherers=Stream Gatherer
feature.strictfp=始终严格的浮点语义
feature.string.switch='switch' 语句中的字符串
feature.string.templates=字符串模板
feature.structured.concurrency=结构化并发
feature.structured.concurrency.constructors=结构化并发(带有构造函数的 StructuredTaskScope)
feature.structured.concurrency.static.factory.methods=结构化并发(带有 static 工厂方法的 StructuredTaskScope)
feature.switch.expressions='switch' 表达式
feature.text.block.escape.sequences='\\s'转义序列
feature.text.blocks=文本块字面量
feature.try.with.resources=Try-with-resources
feature.try.with.resources.refs=资源引用
feature.type.annotations=类型注解
feature.type.receivers=接收器形参
feature.underscores.in.literals=在字面量中加下划线
feature.unnamed.vars=未命名的模式和变量
feature.utf8.property.files=采用 UTF-8 编码的属性文件
feature.valhalla.value.classes=Valhalla 值类
feature.var.lambda.parameter=lambda 形参中的 'var'
feature.varargs=可变 arity 方法
feature.virtual.threads=虚拟线程
feature.with.initial=ThreadLocal.withInitial()
finally.without.try='finally' 没有 'try'
import.statement.identifier.or.asterisk.expected.=应为标识符或 '*'
jdk.1.3.language.level.description=1.3 - 普通旧 Java
jdk.1.4.language.level.description=1.4 - 'assert' 关键字
jdk.1.5.language.level.description=5 - 'enum' 关键字，泛型，自动装箱等
jdk.1.6.language.level.description=6 - 接口中的 @Override
jdk.1.7.language.level.description=7 - 菱形运算符、ARM、多 catch 等
jdk.1.8.language.level.description=8 - lambda、类型注解等
jdk.1.9.language.level.description=9 - 模块、接口中的 private 方法等
jdk.10.language.level.description=10 - 局部变量类型推断
jdk.11.language.level.description=11 - lambda 形参的局部变量语法
jdk.12.language.level.description=12 - 无新语言功能
jdk.13.language.level.description=13 - 无新语言功能
jdk.14.language.level.description=14 - switch 表达式
jdk.15.language.level.description=15 - 文本块
jdk.16.language.level.description=16 - 记录、模式、本地枚举和接口
jdk.17.language.level.description=17 - sealed 类型、始终严格的浮点语义
jdk.18.language.level.description=18 - JavaDoc 代码段
jdk.19.language.level.description=19 - 无新语言功能
jdk.20.language.level.description=20 - 无新语言功能
jdk.21.language.level.description=21 - 记录模式、switch 的模式匹配
jdk.21.preview.language.level.description=21 (预览) - 字符串模板、未命名类和实例 main 方法等
jdk.22.language.level.description=22 - 未命名的变量和模式
jdk.22.preview.language.level.description=22 (预览) - super() 之前的语句、字符串模板(第二个预览版)等
jdk.23.language.level.description=23 - Markdown 文档注释
jdk.23.preview.language.level.description=23 (预览) - 模式中的基元类型，隐式声明的类等
jdk.24.language.level.description=24 - Stream Gatherers
jdk.24.preview.language.level.description=24 (预览) - 灵活的构造函数主体、简单的源文件等。
jdk.25.language.level.description=25 - 压缩源文件、模块导入
jdk.25.preview.language.level.description=25(预览) - 模式中的基元类型等
jdk.X.language.level.description=X - 实验性功能
jdk.unsupported.preview.language.level.description={0} (预览) - 不支持
unexpected.identifier=意外标识符
unexpected.token=意外的标记
unexpected.tokens=意外的标记
