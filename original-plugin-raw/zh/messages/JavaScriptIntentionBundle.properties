plugin.category.numbers      = JavaScript/数值
plugin.category.boolean      = JavaScript/布尔
plugin.category.conditional  = JavaScript/条件运算符
plugin.category.shift        = JavaScript/移位运算
plugin.category.declaration  = JavaScript/声明
plugin.category.comments     = JavaScript/注释
plugin.category.control-flow = JavaScript/控制流
plugin.category.other        = JavaScript/其他
plugin.category.flowjs   = Flow JS
plugin.category.javascript.jsx   = JavaScript/JSX

number.flip-arithmetic-operation.display-name                               = 翻转 {0}
number.flip-arithmetic-operation.family-name                                = 翻转算术运算的操作数

bool.de-morgans-law.display-name.ANDAND                          = 将 '\\&\\&' 替换为 '||'
bool.de-morgans-law.display-name.OROR                            = 将 '||' 替换为 '\\&\\&'
bool.de-morgans-law.family-name                                  = 德摩根定律
bool.flip-comparison.display-name.equals                         = 翻转 {0}
bool.flip-comparison.display-name.not-equals                     = 将 {0} 翻转为 {1}
bool.flip-comparison.display-name.unknown                        = 翻转比较
bool.flip-comparison.family-name                                 = 翻转比较
bool.flip-conjunction.display-name                               = 翻转 {0}
bool.flip-conjunction.family-name                                = 翻转合取操作数
bool.negate-comparison.display-name.equals                       = 对 {0} 求反
bool.negate-comparison.display-name.not-equals                   = 将 {0} 求反为 {1}
bool.negate-comparison.family-name                               = 求反比较
bool.remove-boolean-equality.display-name                        = 简化 {0}
bool.remove-boolean-equality.family-name                         = 移除布尔相等性
braces.add-braces.display-name                                   = 为 {0} 语句添加大括号
braces.add-braces.family-name                                    = 添加大括号
braces.remove-braces.display-name                                = 从 ''{0}'' 语句中移除大括号
braces.remove-braces.family-name                                 = 移除大括号
comment.change-to-cstyle-comment.display-name                    = 替换为多行注释
comment.change-to-cstyle-comment.family-name                     = 替换为多行注释
comment.change-to-end-of-line-comment.display-name               = 替换为单行注释
comment.change-to-end-of-line-comment.family-name                = 替换为单行注释
comment.move-comment-to-separate-line.display-name               = 将注释移至单独的行
comment.move-comment-to-separate-line.family-name                = 将注释移至单独的行
conditional.flip-conditional.display-name                        = 翻转 '?:'
conditional.flip-conditional.family-name                         = 翻转条件
conditional.flip-if.display-name                                 = 翻转 'if-else'
conditional.flip-if.family-name                                  = 翻转 'if'
conditional.replace-conditional-with-if.display-name             = 将 '?:' 替换为 'if-else'
conditional.replace-conditional-with-if.let.display-name         = 替换为 'let' 并将 '?:' 更改为 'if-else'
conditional.replace-conditional-with-if.family-name              = 将条件表达式替换为 'if...else'
constant.constant-expression.display-name                        = 计算常量值
constant.constant-expression.family-name                         = 计算常量值
constant.constant-subexpression.display-name                     = 计算 {0} {1} {2} 的常量值
constant.constant-subexpression.family-name                      = 计算子表达式的常量值
increment.extract-increment.display-name                         = 提取 {0}
increment.extract-increment.family-name                          = 提取增量
initialization.split-declaration-and-initialization.display-name = 拆分为声明和初始化
initialization.split-declaration-and-initialization.let.display-name = 替换为 'let'，并拆分为声明和初始化
initialization.split-declaration-and-initialization.family-name  = 拆分声明和初始化
initialization.split-declaration-and-move-to-scope-start.display-name = 拆分为声明和初始化，并移到范围起始处
initialization.split-declaration-and-move-to-scope-start.family-name  = 拆分声明并移到范围起始处

initialization.flow-type-explicitly.family-name = 显式指定变量类型
initialization.flow-type-explicitly.display-name  = 显式指定变量类型

number.convert-integer-to-decimal.display-name                   = 转换为十进制
number.convert-integer-to-decimal.family-name                    = 转换为十进制
number.convert-integer-to-hex.display-name                       = 转换为十六进制
number.convert-integer-to-hex.family-name                        = 转换为十六进制
number.convert-integer-to-octal.display-name                     = 转换为八进制
number.convert-integer-to-octal.family-name                      = 转换为八进制
number.convert-integer-to-binary.family-name                      = 转换为二进制
number.convert-integer-to-binary.display-name                     = 转换为二进制
number.replace-multiply-with-shift.display-name                  = 将 {0} 替换为 {1}
number.replace-multiply-with-shift.family-name                   = 将乘法替换为移位
number.replace-shift-with-multiply.display-name                  = 将 {0} 替换为 {1}
number.replace-shift-with-multiply.family-name                   = 将移位替换为乘法
opassign.replace-with-operator-assignment.display-name           = 将 ''='' 替换为 ''{0}=''
opassign.replace-with-operator-assignment.family-name            = 转换为运算符赋值
string.double-to-single-quoted-string.display-name               = 将带双引号的字符串替换为带单引号的字符串
string.double-to-single-quoted-string.family-name                = 将带双引号的字符串替换为带单引号的字符串
string.join-concatenated-string-literals.display-name            = 联接串联的字符串文字
string.single-to-double-quoted-string.display-name               = 将带单引号的字符串替换为带双引号的字符串
string.single-to-double-quoted-string.family-name                = 将带单引号的字符串替换为带双引号的字符串
switchtoif.replace-if-with-switch.display-name                   = 将 'if' 替换为 'switch'
switchtoif.replace-if-with-switch.family-name                    = 将 'if' 替换为 'switch'
switchtoif.replace-switch-with-if.display-name                   = 将 'switch' 替换为 'if'
switchtoif.replace-switch-with-if.family-name                    = 将 'switch' 替换为 'if'
trivialif.merge-else-if.display-name                             = 合并 'else-if'
trivialif.merge-else-if.family-name                              = 合并 'else-if'
trivialif.merge-if-and.display-name                              = 合并 'if' 语句
trivialif.merge-if-and.family-name                               = 将嵌套的 'if' 语句合并为 '\\&\\&' 条件
trivialif.merge-if-or.display-name                               = 合并 'if' 语句
trivialif.merge-if-or.family-name                                = 将等效的 'if' 语句合并为 '||' 条件
trivialif.merge-parallel-ifs.display-name                        = 合并 'if' 语句
trivialif.merge-parallel-ifs.family-name                         = 合并平行的 'if' 语句
trivialif.remove-redundant-else.display-name                     = 解开 'else'
trivialif.remove-redundant-else.family-name                      = 解开 'else'
trivialif.replace-if-with-conditional.display-name               = 将 'if-else' 替换为 '?:'
trivialif.replace-if-with-conditional.family-name                = 将 'if...else' 替换为条件运算符
trivialif.split-else-if.display-name                             = 拆分 'else-if'
trivialif.split-else-if.family-name                              = 拆分 'else-if'
trivialif.split-if-and.display-name                              = 拆分 'if' 中的 '\\&\\&' 条件
trivialif.split-if-and.family-name                               = 将 '\\&\\&' 条件拆分为嵌套的 'if' 语句
trivialif.split-if-or.display-name                               = 拆分 'if' 中的 '||' 条件
trivialif.split-if-or.family-name                                = 将 '||' 条件拆分为等效的 'if' 语句
jsx.attribute.value.remove.braces.family-name                    = 解开特性值
jsx.attribute.value.remove.braces.display-name                   = 移除大括号
jsx.attribute.value.remove.braces.replace.display-name           = 替换为 ""
jsx.attribute.value.wrap.with.braces.family-name                 = 使用 {} 包装特性值
jsx.attribute.value.wrap.with.braces.display-name                = 使用 {} 包装
jsx.attribute.value.wrap.with.braces.replace.display-name        = 替换为 {}


comment.change-to-doc-comment.display-name                       = 替换为 JSDoc 注释
comment.change-to-doc-comment.family-name                        = 替换为 JSDoc 注释