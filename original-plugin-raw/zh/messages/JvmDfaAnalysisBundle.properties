inspection.cache.enabled=分析期间使用缓存
inspection.cast.always.fails=转换始终失败
inspection.cast.may.fail=转换可能失败
inspection.common.settings=通用设置
inspection.condition.always.false=条件始终为 false
inspection.condition.always.true=条件始终为 true
inspection.dfa.progress=DFA 分析进度
inspection.global.depth=对于批量分析，从当前文件引用的文件的最大深度
inspection.global.operations.limit=批量分析的操作次数上限(100 万)
inspection.global.rml.analysis.display.name=基于 RML 的分析(全局)
inspection.global.settings=批量分析的设置
inspection.global.taint.analysis.display.name=污点分析
inspection.group.adjacent.locations.with.same.offset.enabled=将具有相同偏移量的位置进行分组
inspection.ir.progress=IR 文件生成
inspection.local.depth=对于编辑器内分析，从当前文件引用的文件的最大深度
inspection.local.null.dereference.analysis.display.name=基于 RML 的 null 解引用分析
inspection.local.rml.analysis.display.name=基于 RML 的分析(本地)
inspection.local.settings=编辑器内分析的设置
inspection.local.timeout=编辑器内分析的分析时间限制(毫秒)
inspection.max.ir=一次分析的最大声明数量
inspection.null.dereference=可能的 null 解引用
inspection.only.method.names.in.calls.enabled=仅在调用中显示方法名称
inspection.safe.class=安全类
inspection.safe.class.comment=这些类不能包含不安全的数据
inspection.slow.config.enabled=启用计算开销大的配置
inspection.taint.Authentication=不受控制的用户输入被传递到 Authentication 操作汇聚点
inspection.taint.Authentication.label=身份验证
inspection.taint.CMDi=不受控制的用户输入被传递到 Command 注入汇聚点
inspection.taint.CMDi.label=命令注入
inspection.taint.Crypto=使用了弱加密/哈希算法
inspection.taint.Crypto.label=弱加密
inspection.taint.Encryption=不受控制的用户输入被传递到 Encryption 操作汇聚点
inspection.taint.Encryption.label=加密
inspection.taint.EnvInjection=不受控制的用户输入被传递到 Environment 变量注入汇聚点
inspection.taint.EnvInjection.label=环境注入
inspection.taint.JNDIInjection=不受控制的用户输入被传递到 JNDI 注入汇聚点
inspection.taint.JNDIInjection.label=JNDI 注入
inspection.taint.LDAPInjection=不受控制的用户输入被传递到 LDAP 注入汇聚点
inspection.taint.LDAPInjection.label=LDAP 注入
inspection.taint.OpenRedirect=不受控制的用户输入被传递到 Open-Redirect 汇聚点
inspection.taint.OpenRedirect.label=打开重定向
inspection.taint.Password=不受控制的用户输入被传递到 Password 操作汇聚点
inspection.taint.Password.label=密码
inspection.taint.PathTraversal=不受控制的用户输入被传递到路径遍历汇聚点
inspection.taint.PathTraversal.label=路径遍历
inspection.taint.ResponseSplitting=不受控制的用户输入被传递到 Response Splitting 汇聚点
inspection.taint.ResponseSplitting.label=响应拆分
inspection.taint.SQLi=不受控制的用户输入被传递到 SQL 注入汇聚点
inspection.taint.SQLi.label=SQL 注入
inspection.taint.SSRF=不受控制的用户输入被传递到 Server-Side Request Forgery (SSRF) 汇聚点
inspection.taint.SSRF.label=SSRF
inspection.taint.TemplateInjection=不受控制的用户输入被传递到 Template 注入汇聚点
inspection.taint.TemplateInjection.label=模板注入
inspection.taint.UrlForward=不受控制的用户输入被传递到 Url Forward 注入汇聚点
inspection.taint.UrlForward.label=URL 转发
inspection.taint.XSLTInjection=不受控制的用户输入被传递到 XSLT 注入汇聚点
inspection.taint.XSLTInjection.label=XSLT 注入
inspection.taint.XSS=不受控制的用户输入被传递到跨站脚本(XSS)汇聚点
inspection.taint.XSS.label=XSS
inspection.taint.XpathInjection=不受控制的用户输入被传递到 XPath 注入汇聚点
inspection.taint.XpathInjection.label=XPath 注入
inspection.taint.analysis.group.name=安全性
inspection.taint.argument.description=污染数据作为实参传递给调用
inspection.taint.assignment.from.call.description=调用将污染数据赋值给变量 "{0}"
inspection.taint.assignment.from.call.without.variable.name.description=调用将污染数据赋值给变量
inspection.taint.call.inbound.description=调用将污染数据进行了传播
inspection.taint.call.outbound.description=此调用将污染数据传播到其返回值
inspection.taint.foreach.description=污染数据在 foreach 循环中迭代
inspection.taint.lhs.description=污染数据赋值给变量 "{0}"
inspection.taint.lhs.without.variable.name.description=污染数据赋值给变量
inspection.taint.new.inbound.description=污染数据通过构造函数调用传播
inspection.taint.new.outbound.description=污染数据被传递给构造函数调用
inspection.taint.parameter.description=污染数据作为函数形参 "{0}" 传递
inspection.taint.parameter.without.name.description=污染数据作为函数形参传递
inspection.taint.receiver.description=污染数据通过接收器传递给调用
inspection.taint.return.description=污染数据从函数返回
inspection.taint.rhs.description=污染数据传播到赋值的左侧
inspection.taint.rule.based.sink.description=汇聚点 {0}\: 污染数据会汇集在此处
inspection.taint.sink.description=汇聚点\: 污染数据会汇集在此处
inspection.taint.source.description=源\: 可以返回用户制作的污染内容
inspection.taint.unknown.description=污染数据已传播
inspection.taint.unknown.variable.name=未知
inspection.trace.settings=跟踪设置
