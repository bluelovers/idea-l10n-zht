extract.to.method.reference.intention.name=提取到方法引用中
merge.parallel.ifs.intention.name=合并 'if'
merge.parallel.ifs.intention.family.name=合并并行的 if
merge.else.if.intention.name=合并 'else if'
merge.else.if.intention.family.name=合并 else if
change.to.end.of.line.comment.intention.name=替换为行尾注释
change.to.end.of.line.comment.intention.family.name=替换为行尾注释
replace.for.each.loop.with.indexed.for.loop.intention.name=将 for-each 循环替换为带索引的 'for' 循环
replace.for.each.loop.with.iterator.for.loop.intention.name=将 for-each 循环替换为迭代器 'for' 循环
replace.for.each.loop.with.indexed.for.loop.intention.family.name=将 for-each 循环替换为带索引的 for 循环
replace.for.each.loop.with.optimized.indexed.for.loop.intention.name=将 for-each 循环替换为优化的带索引 'for' 循环
replace.for.each.loop.with.optimized.indexed.for.loop.intention.family.name=将 for-each 循环替换为优化的带索引 for 循环
replace.for.each.loop.with.iterator.for.loop.intention.family.name=将 for-each 循环替换为迭代器 for 循环
replace.while.loop.with.do.while.loop.intention.name=将 'while' 循环替换为 'do while' 循环
replace.while.loop.with.do.while.loop.intention.family.name=将 while 循环替换为 do while 循环
replace.do.while.loop.with.while.loop.intention.name=将 'do while' 循环替换为 'while' 循环
replace.do.while.loop.with.while.loop.intention.family.name=将 do while 循环替换为 while 循环
replace.with.javadoc.intention.name=替换为 javadoc
replace.with.javadoc.intention.family.name=替换为 javadoc
#expand.boolean.intention.name=Convert to 'if else'
expand.boolean.declaration.intention.name=将布尔声明扩展为 'if else'
expand.boolean.return.intention.name=将布尔返回扩展为 'if else'
expand.boolean.assignment.intention.name=将布尔赋值扩展为 'if else'
expand.boolean.intention.family.name=扩展布尔
split.else.if.intention.name=拆分 'else if'
split.else.if.intention.family.name=拆分 else if
convert.to.nested.if.intention.name=转换为多个 'if'
convert.to.nested.if.intention.family.name=将布尔扩展为多个 if
join.concatenated.string.literals.intention.name=联接串联的字符串文字
join.concatenated.string.literals.intention.family.name=联接串联的字符串文字
replace.switch.with.if.intention.name=将 'switch' 替换为 'if'
replace.switch.with.if.intention.family.name=将 switch 替换为 if
create.assert.intention.name=创建 JUnit 断言
create.assert.intention.family.name=创建 JUnit 断言
merge.if.or.intention.name=合并连续的 'if' 语句
merge.if.or.intention.family.name=合并连续的 'if' 语句
merge.if.and.intention.name=合并嵌套的 'if' 语句
merge.if.and.intention.family.name=合并嵌套的 'if' 语句
replace.concatenation.with.string.buffer.intention.name=将 '+' 替换为 'StringBuffer.append()'
replace.concatenation.with.string.builder.intention.name=将 '+' 替换为 'StringBuilder.append()'
replace.concatenation.with.string.buffer.intention.family.name=将 + 替换为 StringBuilder.append()
move.comment.to.separate.line.intention.name=将注释移至单独的行
move.comment.to.separate.line.intention.family.name=将注释移至单独的行
change.to.c.style.comment.intention.name=替换为块注释
change.to.c.style.comment.intention.family.name=替换为块注释
split.declaration.and.initialization.intention.name=拆分为声明和初始化
split.declaration.and.initialization.intention.family.name=拆分声明和初始化
char.to.string.intention.name=将字符文字替换为字符串
char.to.string.intention.family.name=将字符替换为字符串
make.call.chain.into.call.sequence.intention.name=将方法调用链扩展为调用序列
make.call.chain.into.call.sequence.intention.family.name=将方法链扩展为调用序列
merge.call.sequence.to.chain.intention.name=将连续的方法调用合并到调用链中
merge.call.sequence.to.chain.intention.family.name=将顺序方法调用合并到调用链中
detail.exceptions.intention.name=详细异常
detail.exceptions.intention.family.name=详细异常
flip.conditional.intention.name=翻转 '?:'
flip.conditional.intention.family.name=翻转条件
replace.shift.with.multiply.intention.family.name=将移位替换为乘法
demorgans.intention.family.name=德摩根定律
flip.comparison.intention.family.name=翻转比较
negate.comparison.intention.family.name=求反比较
flip.commutative.method.call.intention.family.name=翻转可交换方法调用
constant.subexpression.intention.family.name=计算子表达式的常量值
extract.increment.intention.family.name=提取增量
inline.increment.intention.family.name=内联增量/减量
flip.assert.literal.intention.family.name=翻转断言文字
replace.assert.literal.with.assert.equals.intention.family.name=将 assertTrue、assertFalse 或 assertNull 替换为 assertEquals
replace.multiply.with.shift.intention.family.name=将乘法替换为移位
convert.interface.to.class.intention.name=转换为 'class'
convert.interface.to.class.intention.family.name=将接口转换为类
replace.on.demand.import.intention.name=替换为单个类导入
replace.on.demand.import.intention.family.name=将按需导入替换为单个类导入
replace.operator.assignment.with.assignment.intention.family.name=将运算符赋值替换为赋值
convert.catch.to.throws.intention.name=将 'catch' 部分替换为 'throws' 声明
convert.catch.to.throws.intention.family.name=将 catch 部分替换为 throws 声明
wrap.vararg.arguments.with.explicit.array.intention.name=用显式数组创建包装 vararg 实参
wrap.vararg.arguments.with.explicit.array.intention.family.name=用显式数组创建包装 vararg 实参
extract.while.loop.condition.to.if.statement.intention.name=将条件提取到内部 'if' 语句中
extract.while.loop.condition.to.if.statement.intention.family.name=将 while 循环条件提取到内部 if 语句中
replace.concatenation.with.format.string.intention.name=将 '+' 替换为 'String.format()'
replace.concatenation.with.format.string.intention.name.formatted=将 '+' 替换为 'formatted()'
replace.concatenation.with.format.string.intention.family.name=将字符串串联替换为 String.format()
replace.format.string.with.concatenation.intention.name=将 'String.format()' 替换为串联
replace.format.string.with.concatenation.intention.family.name=将 String.format() 替换为串联
copy.concatenated.string.to.clipboard.intention.name=将字符串串联文本复制到剪贴板
copy.string.literal.to.clipboard.intention.name=将字符串文字文本复制到剪贴板
copy.concatenated.string.to.clipboard.intention.family.name=将字符串串联文本复制到剪贴板
flip.expression.intention.family.name=翻转二进制表达式
flip.setter.call.intention.family.name=翻转 setter 调用
eliminate.parentheses.intention.name=消除括号
reverse.for.loop.direction.intention.family.name=反转 for 循环的方向
reverse.for.loop.direction.intention.name=反转 for 循环的方向
replace.operator.assignment.with.postfix.expression.intention.family.name=将运算符赋值替换为后缀表达式
replace.postfix.expression.with.operator.assignment.intention.family.name=将后缀表达式替换为运算符赋值
replace.postfix.expression.with.assignment.intention.family.name=将后缀表达式替换为赋值
replace.assignment.with.postfix.expression.intention.family.name=将赋值替换为后缀表达式
annotate.overridden.methods.intention.family.name=注解重写方法及其参数
annotate.overridden.methods.intention.method.name=将重写方法注解为 ''{0}''
annotate.overridden.methods.intention.parameters.name=将重写方法的相同形参注解为 ''{0}''
replace.arm.with.try.finally.intention.name=将 'try-with-resources' 替换为 'try finally'
replace.arm.with.try.finally.intention.family.name=将 try-with-resources 替换为 try-finally
merge.nested.try.statements.intention.name=合并嵌套的 'try' 语句
merge.nested.try.statements.intention.family.name=合并嵌套 try 语句
obscure.thrown.exceptions.intention.family.name=将 throws 子句中的异常替换为单个更普通的异常
change.modifier.intention.name=更改访问修饰符
change.variable.type.to.rhs.type.intention.family.name=将变量类型更改为初始值设定项的类型
unicode.unescape.intention.name=将 Unicode 转义替换为字符
unicode.unescape.intention.family.name=将 Unicode 转义替换为非转义字符
replace.octal.escape.with.unicode.escape.intention.name=将八进制转义替换为 Unicode 转义
replace.octal.escape.with.unicode.escape.intention.family.name=将八进制转义替换为 Unicode 转义
negate.conditional.intention.name=求反 '?:'
negate.conditional.intention.family.name=求反条件
objects.require.non.null.intention.name=使用 'java.util.Objects.requireNonNull()' 表达式
objects.require.non.null.intention.family.name=使用 'java.util.Objects.requireNonNull()' 表达式
postfix.prefix.intention.family.name=翻转前缀/后缀表达式
replace.conditional.with.boolean.expression.intention.family.name=将条件表达式替换为布尔表达式
replace.conditional.with.boolean.expression.intention.name=将 '?:' 替换为布尔表达式
replace.with.arrays.as.list.intention.family.name=替换为 'Arrays.asList()'
replace.with.mutable.collection.intention.family.name=替换为可变集合

#hand made
flip.smth.intention.name=翻转 ''{0}''
flip.smth.intention.name1=翻转 ''{0}'' (更改语义)
flip.comparison.intention.name=将 ''{0}'' 翻转为 ''{1}''
negate.comparison.intention.name=求反 ''{0}''
negate.comparison.intention.name1=将 ''{0}'' 求反为 ''{1}''
flip.commutative.method.call.intention.name=翻转 ''.{0}()''
flip.commutative.method.call.intention.name1=翻转 ''.{0}()'' (可能更改语义)
constant.expression.intention.name=计算 ''{0}'' 的常量值
#suppress inspection "UnusedProperty"
press.escape.to.remove.highlighting.message=按 Esc 移除高亮显示
extract.increment.intention.name=提取 ''{0}''
inline.increment.intention.name=内联 ''{0}''
replace.assert.literal.with.assert.equals.intention.name=将 ''{0}()'' 替换为 ''assertEquals({1}, ...)''
replace.assert.literal.with.assert.equals.intention.name2=将 ''{0}()'' 替换为 ''assertEquals()''
replace.assert.literal.with.assert.equals.intention.name1=将 ''{0}()'' 替换为 ''assertEquals(..., {1}, ...)''
flip.setter.call.intention.name=翻转 Setter 调用
adapter.to.listener.intention.name=将 ''{0}'' 的扩展替换为 ''Listener'' 实现
adapter.to.listener.intention.family.name=将适配器扩展替换为侦听器实现
change.variable.type.to.rhs.type.intention.name=使用类型 ''{1}'' 声明 ''{0}''


#categories
intention.category.annotations=Java/注解
intention.category.numbers=Java/数字
intention.category.boolean=Java/布尔值
intention.category.conditional.operator=Java/条件运算符
intention.category.shift.operation=Java/移位运算
intention.category.junit=Java/JUnit
intention.category.declaration=Java/声明
intention.category.imports=Java/导入
intention.category.comments=Java/注释
intention.category.control.flow=Java/控制流
intention.category.strings=Java/字符串
intention.category.modifiers=Java/修饰符
intention.category.try.statements=Java/Try 语句
intention.category.other=Java/其他

#warnings
0.is.declared.in.1.but.when.public.should.be.declared.in.a.file.named.2={0} 已在 {1} 中声明，但 public 应在名称为 {2} 的文件中声明
0.will.have.incompatible.access.privileges.with.super.1={0}的访问权限与超级{1}不兼容
0.will.no.longer.be.visible.from.overriding.1={0}将不再可以从重写{1}可见
0.will.have.incompatible.access.privileges.with.overriding.1={0} 的访问权限与重写 {1} 不兼容
0.already.extends.1.and.will.not.compile.after.converting.2.to.a.class=实现{2}的{0}已扩展{1}并且在将{2}转换为类后不会编译
change.modifier.text=将 ''{0}'' 设为{1}
convert.datapoints.fix.family.name=转换 @DataPoint 注解文件夹
make.method.default.family.name=使方法为默认值
intention.name.make.default=将 ''{0}()'' 设为默认值
create.missing.switch.branches.family.name=创建缺少的 switch 分支
intention.name.replace.field.or.method=替换为 @{0} {1, choice, 0#字段|1#方法}
