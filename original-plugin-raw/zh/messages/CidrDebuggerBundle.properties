debug.breakpoint.line=行断点
debug.breakpoint.line.unresolved.hint=断点当前不会被命中。没有可执行代码与此行相关联。

debug.command.error.timedOut=命令超时
debug.command.error.notSuspended=仅当目标挂起时才能执行命令
debug.command.error.inPrompt=在提示模式下无法执行命令
debug.command.error.evaluationTimedOut=评估挂起: {0}\n\
 这可能是死锁或无限循环等情况所致。\n\
 为了防止在计算变量时发生这种情况，请将 ''{1}'' 切换为<a href="off">关</a>。
debug.command.error.cannotAddModulesSearchPaths=无法添加模块搜索路径

debug.assign.error.cannotAssignExpression=无法将表达式 ''{0}'' 分配至 ''{1}''

debug.settings.variables.separator=变量
debug.settings.enableValueRenderers.action=启用值呈现器
debug.settings.enableValueRenderers.checkbox=启用值呈现器:
debug.settings.enableValuesFilter.checkbox=隐藏范围外的变量
debug.settings.enableValuesFilter.checkbox.hint=在当前范围内未初始化或不可用的变量将不会显示
debug.settings.enableCocoaRenderers.checkbox=Cocoa 呈现器
debug.settings.enableCoreDataRenderers.checkbox=核心数据呈现器
debug.settings.enableGNUSTLRenderers.checkbox=启用 GNU C++ 库呈现器
debug.settings.enableGNUSTLRenderers.checkbox.description=更改此选项将影响下一个调试会话
debug.settings.enableHexNumberFormatting.checkbox=将整数显示为十六进制值
debug.settings.enableHexNumberFormatting.asSecondary.checkbox=与原始值一起显示
debug.settings.enableHexNumberFormatting.asSecondary.checkbox.hint=同时显示原始和十六进制数字格式
debug.settings.enableLLDBNatvisRenderers.checkbox=为 LLDB 启用 NatVis 呈现器
debug.settings.enableLLDBNatvisRenderers.checkbox.description=更改此选项将影响下一个调试会话
debug.settings.enableLLDBNatvisRenderers.diagnostics=诊断:

debugger.variables.loadMutedValue.link=加载
debugger.variables.showRawStringValue.link=视图

debugger.attachedTo=调试器已附加到进程 {0,number,#}
debugger.detached=调试器已分离
debugger.connectedTo=调试器已连接至 {0}
debugger.disconnected=调试器已断开连接

build.configuration.destination.ios.device=iOS 设备
build.configuration.destination.tvos.device=tvOS 设备
device.startingApplication.startingDebug=正在启动调试…
debug.lldb.lockedDeviceWaiting=正在等待设备解锁…
debug.lldb.lockedDeviceUserMessage={0} 无法在设备上启动应用程序，因为该设备当前已被密码锁定。\n\
 请解锁设备。
debug.driver.cannotCreatePipe=无法设置进程通信: {0}
debug.driver.cannotReadInputFile=无法打开输入文件: {0}
debug.gdb.error.duringStartupProgramTerminatedOnSierra={0}\n\
\n\
从版本 10.12 开始，由于系统完整性保护，macOS 在运行 GDB 时存在已知问题。
debug.gdb.error.changeSettingsToLLDB=请在<a href="settings">偏好设置</a>中将调试器切换到 LLDB。
debug.console.completions.tooManyCompletions=补全过多(仅显示了 {0} 个补全)
debug.console.action.jumpToDebuggerConsole.jumpTo0=跳转到 {0} 控制台
debug.console.action.jumpToDebuggerConsole=跳转到 GDB/LLDB 控制台

debug.memory.view.name.pattern={0} ({1})
debug.memory.view.tooltip.pattern=''{0}'' 的 {1}
debug.memory.view.panel.address.label=转到:
debug.memory.view.panel.error.evaluationNotAvailableWhileRunning=评估在程序运行时不可用
debug.memory.view.panel.error.evaluationNotAvailableInSelectedFrame=评估在所选框架中不可用
debug.memory.view.panel.error.evaluationError=评估错误: {0}
debug.memory.view.panel.error.notAPointer=不是指针
debug.memory.view.panel.hint.takeAddress=提取地址: {0}
debug.memory.addess.copy.address=复制地址
debug.memory.view.modify.not.supported=不支持修改 {0}
debug.address.breakpoints=地址断点
debug.address.breakpoint={0}
debug.address.breakpoint.invalid=地址断点无效
debug.exception.breakpoint.whenCaught.checkbox=捕获时
debug.exception.breakpoint.whenThrown.checkbox=抛出时
debug.exception.breakpoint.when.summary.caught.label={0} 捕获时
debug.exception.breakpoint.when.summary.thrown.label={0} 抛出时
debug.exception.breakpoint.when.summary.thrownAndCaught.label={0} 抛出时；{1} 被捕获
debug.symbolic.breakpoint.moduleName.label=模块名称
debug.symbolic.breakpoint.symbolName.label=符号名称
debug.symbolic.breakpoint.emptySymbolName.title=<Empty>
debug.symbolic.breakpoint.moduleAndSymbol.title={0}: {1}
debug.watchpoint.properties.accessType=访问类型:
debug.watchpoint.properties.error.label=错误
debug.watchpoint.properties.lifeTime=有效时长:
debug.evaluating.expression=正在评估表达式信息…
debug.evaluating.expression.cancel=已取消表达式信息
debug.evaluating.expression.cancel.tooltip=取消表达式信息
debug.exception.breakpoints=异常断点
debug.exception.breakpoint.invalid=异常断点无效
debug.exception.breakpoint=异常断点
debug.current.trace=线程: {0}\n\
跟踪: {1}
debug.result.already.cancelled=结果已被取消。\n\
当前线程: {0}\n\
{1}
debug.result.already.set.exceptionally=结果已被异常设置。\n\
异常: {0}\n\
{1}\n\
当前线程: {2}\n\
{3}
debug.memory.view.process=内存视图
debug.signal.suspension.cause=信号
debug.signal.exception.cause=异常
debug.symbolic.breakpoint.module.placeholder=所有模块
debug.symbolic.breakpoints=符号断点
debug.symbolic.breakpoint.invalid=断点无效
debug.popup.error.crashed=调试器进程已结束，退出代码为 {0}。
debug.popup.rerun=重新运行 ''{0}''
debug.jumpToLine.text=将执行点设置到光标
debug.jumpToLine.tooltip=拖放箭头以设置执行点
debug.jumpToLine.warning=此操作会将下一条语句设置为另一个函数\n\
并有可能破坏进一步执行。\n\
是否确定?
debug.computing.source.position=正在计算源位置
debug.watchpoints=观察点
debug.watchpoint.obsolete=观察点过时，请移除
debug.watchpoint.displayText.valueName.valueAccessType=%s (访问类型: "%s")
debug.watchpoint.displayText.valueName.valueAccessType.valueLifetime=%s (访问类型: "%s"，有效时长: "%s")

filetype.disasm.description=二进制图像反汇编
filetype.hex.dump.description=内存转储
goto.address.evaluate.view.button=查看
goto.address.evaluation.option=评估选项

action.CIDR.Debugger.LLDBFrontendDebugMode.text=为 LLDBFrontend 启用调试模式
action.CIDR.Debugger.LLDBFrontendDebugMode.description=LLDBFrontend 将等待调试器附加
group.CIDR.Debugger.InternalActions.text=CIDR 原生调试器
action.CIDR.Debugger.ShowMemoryViewInEditor.text=在编辑器中显示内存视图
action.CIDR.Debugger.AddWatchPoint.text=添加观察点
action.CIDR.Debugger.JumpToDebuggerConsole.text=跳转到调试器控制台
action.CIDR.Debugger.ShowInMemoryView.text=在内存视图中显示
action.CIDR.Debugger.CopyAddress.text=复制地址
error.cannot.create.editor.for=无法为下列对象创建编辑器: {0}
error.execution.interrupted=执行中断
action.show.addresses.text=显示地址
dialog.message.execution.exception=执行异常
filetype.native.visualisations.description=原生可视化
filetype.native.visualisations.display.name=原生可视化

debug.editor.notification.force.mapping=找不到当前帧的文件 ''{0}'' 或其内容与编译的内容不同。您可以手动指定此文件。
debug.editor.notification.force.mapping.select.file=选择文件…
debug.force.file.mapping.title=强制文件映射?
debug.force.file.mapping.invalid.hash=所选文件的校验和与调试信息中的校验和不同。是否仍要使用所选文件?
debug.force.file.mapping.invalid.name=所选文件的名称(''{0}'')与调试信息中的名称(''{1}'')不同。是否仍要使用所选的文件?
debug.breakpoint.line.is.relaxed.match=仅使用文件名
debug.editor.notification.force.mapping.exists=当前帧文件 ''{0}'' 的内容与编译的内容不同。
debug.editor.notification.force.mapping.use.it.anyway=仍要使用
stack.frame.label.inlined=[内联]
progress.title.downloading.symbols=正在下载符号…
tab.display.name.parallel.stacks=并行堆栈
debug.command.error.checkPermissionsMessage=附加调试器失败，请检查权限 - https://www.jetbrains.com/help/clion/attaching-to-local-process.html
debug.settings.name.objective.c=Objective-C
debug.settings.name.c.cpp=C/C++
debug.settings.frames.separator=帧
debug.settings.showFrameModule.checkbox=显示模块名称
action.CIDR.Debugger.ShowFrameModuleName.text=显示模块名称
group.CIDR.Debugger.FramePresentation.Popup.text=帧装饰
debug.frames.unknownFunction=<unknown>
action.CIDR.Debugger.DisableFilteringValues.text=隐藏范围外的变量
action.CIDR.Debugger.MuteVariables.text=禁止变量
action.CIDR.Debugger.EnableHexFormatting.text=将整数显示为十六进制值
action.CIDR.Debugger.ViewAsArray.text=作为数组查看…
debugger.variables.viewAsArray.enterSize.prompt=<输入大小>
debugger.variables.viewAsArray.enterSize.error=未提供大小
action.CIDR.Debugger.ShowTypes.text=显示类型
debug.settings.showTypeTemplateArguments.checkbox=显示类型中的模板实参
debug.settings.showFrameFunctionParameterTypes.checkbox=显示形参类型
debug.settings.showFrameFunctionTemplateArguments.checkbox=显示函数中的模板实参
debug.settings.cxxTypes.separator=C++ 类型(帧和变量)
debug.settings.stripCxxStdAbiVersionNamespace.checkbox=剥离辅助命名空间
debug.settings.stripCxxStdAbiVersionNamespace.checkbox.description=移除全局和函数范围说明符以及标准 ABI 版本命名空间
debug.settings.sugarizeCxxStlTypes.checkbox=简化 STL 类型
debug.settings.sugarizeCxxStlTypes.checkbox.description=将标准库类型替换为可读性更强的别名
action.CIDR.Debugger.ShowFrameFunctionParameterTypes.text=显示形参类型
action.CIDR.Debugger.ShowFrameFunctionTemplateArguments.text=显示模板实参
group.CIDR.Debugger.ValueGroup.DataViewSettings.Popup.text=自定义演示
action.CIDR.Debugger.ShowTypeTemplateArguments.text=显示模板实参
action.CIDR.Debugger.StripAuxiliaryNamespaces.text=剥离辅助命名空间
action.CIDR.Debugger.SugarizeCxxStlTypes.text=简化 C++ STL 类型
debug.exception.breakpoint.when.any.label=任意
debug.exception.breakpoint.when.objc.label=Objective-C
debug.exception.breakpoint.when.swift.label=Swift
debug.exception.breakpoint.when.kn.label=Kotlin/Native
debug.exception.breakpoint.when.any.fragment=任意
debug.exception.breakpoint.when.objc.fragment=Objective-C
debug.exception.breakpoint.when.swift.fragment=Swift
debug.exception.breakpoint.when.kn.fragment=Kotlin/Native
debug.settings.name.symbol.servers=符号服务器
debug.settings.symbolServers.checkbox=启用符号服务器支持
debug.settings.symbolCachePath.label= 本地符号存储
debug.settings.symbolServers.label=符号服务器
debug.settings.symbolServers.empty.text=未配置符号服务器
debug.settings.symbolStorages.label=共享符号存储
debug.settings.symbolStorages.empty.text=未配置符号存储
debug.settings.selectSymbolCache.caption=选择符号缓存位置
debug.settings.symbolServersNotAvailable.label=PDB 符号服务器仅在 Windows 上可用
debug.settings.addMicrosoftSymbolServer.action.label=添加 Microsoft 符号服务器
debug.settings.symbolServers.checkbox.comment=仅 Windows 上的 LLDB 支持符号服务器