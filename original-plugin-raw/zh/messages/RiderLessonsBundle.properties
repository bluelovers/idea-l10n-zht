alt.enter.invert.condition=反转条件
alt.enter.remove.parameter=移除形参
basic.completion.activate=如果未自动建议补全，则按 {0} 手动调用。
basic.completion.choose.first=最佳匹配项在补全列表中以蓝色高亮显示\: 按 {0} 将其选中。
basic.completion.choose.item=在补全列表中选择 {0} 并按 {1}。
basic.completion.complete=您可以自动插入所有必要的语法元素(圆括号、大括号、分号等)并转到可以开始输入下一条语句的位置。按 {0} 可补全此语句。
basic.completion.lesson.name=代码补全
basic.completion.start.typing=默认情况下，<ide/> 会在您输入时发出补全建议。开始在文本光标所在的位置输入 {0}，您将看到匹配建议。
comment.block.comment=若要使用块注释 {0} 进行注释，请选择代码块并按 {1}。
comment.block.uncomment=要取消对块注释的注释，请将文本光标置于注释块中的任意位置，然后按 {0}。
comment.lesson.name=注释代码行和块
comment.line.uncomment.several.lines=要取消对多行的注释，请选择所有注释行，然后按 {0}。
comment.line.uncomment.that.line=使用相同的快捷方式取消注释注释行\: 将文本光标置于该行中的任意位置，然后按 {0}。
docker.balloon.right.click.project=让我们将 Docker 支持添加到 {0} 项目中。右键点击项目并选择<strong>添加</strong> | {1}
docker.check.out.dockerfile={0} 已经生成 Dockerfile，其中包含您的项目的所有必要说明
docker.click.debug=按 {0} 或点击“{1}”开始调试
docker.lesson.name=Docker 基础知识
docker.module.description=Rider 中的 Docker 使用入门
docker.module.name=Docker
docker.open.settings=在开始之前，我们需要确保您的计算机上正在运行 Docker 守护进程。按 {0} 打开设置，或点击“{1}”并选择相应的条目
docker.run=按 {0} 或点击此按钮在 Docker 容器中运行项目
docker.select.run.config=要在 Docker 容器中运行项目，请选择 Dockerfile 运行配置
extract.variable.choose.name=指定变量名称或保留建议内容。再次按 {0} 可完成重构。
extract.variable.choose.type=选择是对新变量使用 ''var'' 还是显式类型，然后按 {0}。
extract.variable.replace.all=所选表达式在示例代码中出现 3 次。选择相应的条目以替换所有这些表达式。
file.structure.help.link=文件结构和其他上下文导航命令
file.structure.lesson.name=文件成员和结构
file.structure.open.popup=大型文件可能很难导航；一个很好的开始方法是查看其成员。按 {0} 可列出所有文件成员。
file.structure.request.prefixes=假设您想找到名称中含有 {0} 和 {1} 单词的方法。输入 {2} (所需单词的前缀)可筛选成员列表。
file.structure.toolwindow=您也可以在专用工具窗口中引用文件结构\: 按 {0} 可将其打开。
got.it.balloon.button.text=下一步
help.refactor.this=“重构此”菜单
onboarding.module.description=设置和使用 IDE 的初始步骤
onboarding.module.name=开始
onboarding.tour.lesson.name=入门导览
refactoring.menu.extract.interface=我们选择 {0} 重构，它可以帮助基于当前类的成员快速创建新接口。
refactoring.menu.extract.interface.dialog=指定新接口的名称，并选中应在其中声明的方法旁边的复选框，然后点击<strong>下一步</strong>以完成重构。
refactoring.menu.finish=当文本光标位于成员、变量或字符串文字上时，尝试按 {0} 可查看不同上下文中可用的重构。
rename.dialog.title=重命名
rename.epilogue=请注意，重构没有触及 <strong>Person</strong> 的 <code>Name</code> 属性。即使在同一上下文中有名称类似的符号，也可以安全使用。
rename.press.rename=<strong>重命名</strong>重构会自动更新对重命名符号的所有引用。您可以从声明或该符号的任何用法开始重构。按 {0} 可重命名 <code>Car</code> 类的 {1} 属性。
rename.type.new.name=输入此属性的新名称(例如 {0})，然后按 {1}。
rider.onboarding.alt.enter={0} 是编辑器中最重要的快捷键。例如，当您的文本光标位于 {1} 形参处时，按下该快捷键可移除该形参并更新用法。
rider.onboarding.alt.enter.menu=在应用“{0}”修正之前，请考虑可以在此弹出窗口中执行的其他有用操作。
rider.onboarding.balloon.open.file=双击以打开 {0}
rider.onboarding.balloon.open.learn.window=切换到“{0}”工具窗口继续学习本课次
rider.onboarding.balloon.project.directory=双击解决方案节点，然后展开<strong>学习</strong>项目
rider.onboarding.change.ui.settings=在本课次中，Rider 会将某些 UI 设置更改为默认值。完成或退出本课次后，将恢复您的偏好设置。
rider.onboarding.debug.window.toolbar=在这里，可以找到所有调试操作。现在，请按 {0} 或点击“{1}”恢复程序并使其运行到最后。
rider.onboarding.finish=本课次到此结束。现在，您可以从主菜单中选择<strong>文件</strong> | <strong>新建解决方案</strong>，启动自己的解决方案，也可以选择<strong>文件</strong> | <strong>打开</strong>，打开现有解决方案。
rider.onboarding.online.help=在线帮助
rider.onboarding.project.view.description=点击边栏图标或按 {0} 访问解决方案文件
rider.onboarding.resume=按 {0} 或点击“{1}”恢复程序并使其运行到最后
rider.onboarding.run.configuration.widget=在这里，您可以配置和启动运行配置。请按 {0} 或点击“{1}”开始使用当前配置进行调试。
rider.onboarding.search.everywhere=要查找任何内容，请按 {0} 两次或点击“{1}”
rider.onboarding.search.everywhere.query=有几个标签页可以将您的搜索限制为文件、操作等。但现在，请留在<strong>全部</strong>标签页中并输入 {0}。
rider.onboarding.search.everywhere.result=查询的复合名称的首字母与 {0} 匹配。在列表中将其选中并按 {1}。
rider.onboarding.settings=最后一件事是在何处配置所有内容。按 {0}，或点击“{1}”并选择相应的条目
rider.onboarding.settings.save=要应用任何更改，请点击“{0}”
rider.onboarding.settings.search=使用搜索字段查找特定选项
rider.onboarding.settings.theme=例如，您可以在“{0} | {1}”页面上切换浅色和深色主题
rider.onboarding.toggle.breakpoint=我们来调试程序。首先，切换断点\: 点击行号或将文本光标设置为该行并按 {0}。
