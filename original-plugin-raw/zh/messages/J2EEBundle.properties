button.add.appserver.descriptor=添加应用程序和服务器特定的描述符(&S)…
warning.delete.deployment.descriptor.title=删除部署描述符
additional.deployment.descriptor.file.description.additional.resource=其他资源
deployment.descriptor.title.application.module=应用程序模块部署描述符
deployment.descriptor.title.web.module=Web 模块部署描述符

label.web.source.roots.text=源根
action.name.edit.deployment.descriptor=编辑部署描述符…
project.view.pane.title.j2ee=Java EE
select.in.j2ee=框架视图

dialog.title.packaging.choose.facets=选择 Facet
link.display.text.configure.j2ee.names=Java EE 名称
label.configure.j2ee.names.prefix.and.suffix.are.taken.from=前缀和后缀获取自

title.appserver.specific.validators=应用程序服务器特定的验证器
appserver.validator.presentable.text={1} 的 {0}

#application module editors
dialog.title.deployment.descriptor.location=部署描述符位置
dialog.title.resource.location=资源位置
javaee.facet.settings.display.name={0} 设置
action.name.configure.j2ee.names=Java EE 名称(_J)…
j2ee.facet.fake.file.type=Java EE facet 假文件类型

message.title.error=错误

dialog.title.edit.0=编辑 {0}
dialog.title.create.new.0=创建 {0}
column.name.description=描述

dialog.title.web.resource.directory.path=Web 资源目录路径
dialog.title.web.resource.directory=Web 资源目录
dialog.description.web.resource.directory=选择存储 web 文件的 web 资源目录
label.new.web.root.web.resource.directory.path=Web 资源目录路径(&P):
confirmation.text.create.directory=创建目录 ''{0}''?
message.title.directory.not.found=未找到目录
command.name.creating.web.root.dir=正在创建目录
message.text.error.creating.directory=创建目录时出错。\n{0}
message.text.web.resource.directory.should.be.located.under.module.root=Web 资源目录应位于模块根下。\n请按 '...' (省略号) 按钮来浏览模块根目录。
message.title.directory.not.in.module=模块中没有目录
message.text.existing.web.resource.directory.configured.in.dir.which.includes.dir=<html><body>''<b>{0}''</b> 中已配置 web 资源目录，该资源目录已包含当前目录 ''<b>{1}''</b> 中。</body></html>
message.title.conflicting.directory.found=已找到冲突的目录
message.text.existing.web.resource.directory.configured.in.dir.which.will.be.included.in.dir=<html><body>''<b>{0}''</b> 中已配置 web 资源目录，该资源目录已包含在当前目录 ''<b>{1}''</b> 中。</body></html>
message.text.cannot.find.file=找不到文件 ''{0}''
message.title.file.not.found=找不到文件
label.web.root.dialog.relative.path.in.deployment.directory=部署目录中的相关路径(&R):

# validation
action.name.validate=验证
action.description.validate=对所选条目中的所有文件运行验证
action.text.validate.facet=验证 facet ''{0}'' 中的所有文件
action.name.validate.location=验证 {0}
location.to.validate.jsp=文件 ''{0}''
location.to.validate.selected.jsps=所选文件
location.to.validate.all.jsps.in.directory=目录 ''{0}'' 中的所有文件
location.to.validate.all.jsps.in.selected.directories=所选目录中的所有文件

message.text.remove.web.resource.directory=移除 web 资源目录 ''{0}''?
message.text.remove.selected.web.resource.directories=移除选定 web 资源目录?
message.title.remove.web.resource.directory=移除 Web 资源目录
column.name.edit.web.roots.web.resource.directory=Web 资源目录
column.name.edit.web.roots..relative.to.deployment.root=相对于部署根的路径
warning.duplicate.relative.deployment.path.text=重复的相对部署路径 ''{0}''
message.title.unmark.web.resource.directory=取消标记 Web 资源目录
message.text.unmark.web.resource.directory=取消标记 Web 资源目录 ''{0}''
action.name.create.new.filter=Web 筛选器
dialog.title.new.filter=新 Web 筛选器
action.name.create.new.listener=Web 侦听器
dialog.title.new.listener=新 Web 侦听器
tooltip.text.filter.class=筛选器 ''{0}'' 类
tooltip.text.listener.class=侦听器 ''{0}'' 类
tooltip.text.servlet.class=Servlet ''{0}'' 类
tooltip.text.web.resource.directory=Web 资源目录 ({0})
action.name.create.new.servlet=Servlet
action.description.create.new.servlet=创建新 Servlet
dialog.title.new.servlet=新建 Servlet
dialog.title.choose.class=选择 {0} 类
label.servlet.properties.package=软件包(&P):

dialog.title.choose.package=选择软件包
dialog.title.choose.0.package=选择 {0} 软件包
label.properties.class=类(&C):
message.text.exists={0} ''{1}'' 在此 Web facet 中已存在。
border.edit.web.module.web.resource.directories=Web 资源目录

action.name.delete=删除
column.name.edit.deployment.descriptors.type=类型
column.name.edit.deployment.descriptors.path=路径
border.edit.deployment.descriptors.deployment.descriptors.group=部署描述符

model.object.type.listener=侦听器

# edit deployment descriptor dialog
combobox.deployment.descriptor.version=部署描述符版本(&V)
error.deployment.descriptor.already.exists=文件 ''{0}'' 上的部署描述符已存在
error.deployment.descriptor.target.in.use=部署描述符目标文件 ''{0}'' 正在使用
error.cannot.create.deployment.descriptor=无法创建 {0}\n{1}
title.edit.deployment.descriptor=编辑部署描述符
error.please.specify.path.to.deployment.descriptor=请指定 {0} 的路径
label.choose.or.create.deployment.descriptor.file=为 {0} 选择现有的 XML 文件或指定目录以创建新文件。
deployment.descriptor.panel.directory.path.relative.to.deployment.root.label=相对于部署根的目录路径(&P):

# create appserver-specific deployment descriptor dialog
dialog.title.create.appserver.specific.descriptor=创建应用程序服务器特定的描述符
label.appserver.text=应用程序服务器(&A):
label.descriptor.type.text=描述符(&D):
label.descriptor.version.text=版本(&V):

intention.add.javaee.jar.text=将 {0} JAR 添加到模块依赖关系中

javaeeapp.facet.display.name=JavaEE 应用程序

command.name.create.0.1=创建{0} ''{1}''

label.deployment.descriptors.wizard.step.text=<html><body>配置将用于部署此 facet 的描述符。<br>您可以在此处添加标准、专有和应用程序服务器特定的描述符。</body></html>
label.delete.deployment.descriptor.text=删除选定的部署描述符?
checkbox.also.delete.file.from.disk.text=同时从磁盘删除文件(&A)

inspection.group.display.name.application.server.inspections=应用程序服务器

template.node.java.code.templates=Java 代码模板
template.node.deployment.descriptors=部署描述符
template.node.application=应用程序
template.node.web=Web

servlet.reference.canonical.text=无法解析 servlet ''{0}''。

#code style settings
title.j2ee.names=Java EE 名称
title.entity.bean=实体 Bean
editbox.default.pk.class=默认 PK 类:
label.prefix=前缀:
label.suffix=后缀:
editbox.j2eenames.ejb.class=EJB 类
editbox.j2eenames.home.interface=主接口
editbox.j2eenames.remote.interface=远程接口
editbox.j2eenames.local.home.interface=本地主接口
editbox.j2eenames.local.interface=本地接口
editbox.j2eenames.ejb.name.tag=<ejb-name> 标记
editbox.j2eenames.transfer.object=传输对象
editbox.j2eenames.servlet.class=Servlet 类
editbox.j2eenames.servlet.name.tag=<servlet-name> 标记
editbox.j2eenames.filter.class=筛选器类
editbox.j2eenames.filter.name.tag=<filter-name> 标记
editbox.j2eenames.listener.class=侦听器类
editbox.j2eenames.service.endpoint.interface=服务端点接口
label.j2eenames.session.bean=会话 Bean
label.j2eenames.message.driven.bean=消息驱动 Bean
label.j2eenames.servlet=Servlet
label.j2eenames.filter=筛选器
label.j2eenames.listener=侦听器

#inspections
group.names.javaee.issues=Java EE
inspection.javaee.xml.display.name=Java EE 应用程序描述符正确性
inspection.security.role.name=安全角色名称的正确性

add.web.root=将 {0} 设置为 Web 根
web.root.family=设置 Web 根

#actions
action.CreateStatelessBean.text=无状态会话 Bean(_L)
action.CreateStatefulBean.text=有状态会话 Bean(_F)
action.CreateSingletonBean.text=单一实例会话 Bean(_G)
action.CreateContainerManagedEntityBeanAction.text=CMP 实体 Bean(_C)
action.CreateBeanManagedEntityBeanAction.text=BMP 实体 Bean(_B)
action.CreateMessageBean.text=消息 Bean(_M)
action.CreateTransferObject.text=传输对象(_T)
action.CreateCMPField.text=CMP 字段(_C)
action.CreateEJBRelationship.text=EJB 关系(_R)
action.CreateEJBInterceptor.text=侦听器(_I)

action.CreateServletAction.description=创建新 servlet
action.CreateFilterAction.description=创建新筛选器
action.CreateListenerAction.description=创建新侦听器
action.GenerateResourceReference.text=@Resource 引用
action.GeneratePersistenceContextReference.text=@PersistenceContext/单元引用
action.GenerateInterceptorMethods.text=侦听器方法…
action.GenerateEntityListenerMethods.text=实体侦听器方法…
action.GenerateEJBFinderOrSelectorMethod.text=EJB Finder/选择器方法…

action.OpenPersistenceERDiagramAction.text=ER 图表(_G)

action.ValidateJsp.text=验证 JSP(_V)
action.ValidateJsp.description=验证选定的 JSP 文件
action.PackageFile.text=软件包文件(_P)
action.PackageFile.description=将所选文件添加到展开型部署目录或 Java EE 归档中

facet.0.in.module.1.text={0} ({1} 中)
facet.0.in.module.1.text.detailed=''{0}'' facet (在模块 ''{1}'' 中)
security.role.name.should.accord.to.nmtoken.pattern=安全角色名称应符合 NMTOKEN 模式
group.JspActions.text=JSP 操作
group.JavaeeMigrationGroup.text=迁移操作

browser.web.faced.not.configured=请先配置 Web Facet!
browser.no.suitable.configuration.running=未找到配置的/正在运行的 web 服务器! 请运行任意一个 web 配置并点击“刷新”按钮!

web.context.family=Web 上下文系列
web.context.fix=为 {0} 将上下文文件夹设置为 ''/''
web.context.fix.for.directory=为 {0} 目录中的所有文件将上下文文件夹设置为 ''/''

#starter
javaee.starter.template.label=模板:
starter.web.application=Web 应用程序
starter.web.application.hint=Servlet、web.xml、index.jsp
starter.rest.service=REST 服务
starter.rest.service.hint=JAX-RS 资源
starter.library=库
starter.library.hint=仅依赖项

javaee.starter.module.builder.description=基于 <b>Java EE</b> 或 <b>Jakarta EE</b> 规范的模块。

javaee.starter.library.jakarta-api9.description=包括大多数 Jakarta EE 规范。\n兼容的服务器: GlassFish 6.x、Open Liberty 21.*、Wildfly 23.x

javaee.starter.library.javaee-api8.description=包括大多数 Java EE 规范 (JSR 366)。\n兼容的服务器: GlassFish 5.x、WebSphere AS Liberty 18.0.0.2、Wildfly 14.x、JBoss Enterprise AP 7.3、WebLogic Server 14.1.1.0。

javaee.starter.library.web-api.description=包括 Servlet、CDI、JPA、Bean Validation、JSF、JAX-RS、WebSocket、JSON-P、JSON-B、Security、EJB 和 JTA 规范。

javaee.starter.library.batch.description=包含用于开发强大批处理系统模型的框架。
javaee.starter.library.bean-validation.description=具有约束的验证模型，该约束以注解的形式置于 JavaBeans 组件的字段、方法或类上(JSR 380)。
javaee.starter.library.cdi.description=企业应用程序的依赖项注入框架(JSR 365)。
javaee.starter.library.concurrency.description=异步功能、并发实用程序和对象作为托管对象(JSR 236)。
javaee.starter.library.connector.description=作为企业应用程序集成(EAI)解决方案的一部分，用于连接应用程序服务器和企业信息系统(EIS)的工具(JSR 322)。
javaee.starter.library.ejb.description=Java 平台的服务器端组件架构。
javaee.starter.library.json-b.description=用于将 Java 对象与 JSON 消息相互转换的标准绑定层(JSR 367)。
javaee.starter.library.json-p.description=使用对象模型或流模型来解析、转换和查询 JSON 数据的 API(JSR 353)。
javaee.starter.library.mvc.description=用于 JAX-RS 的模板引擎 API (JSR 371)。
javaee.starter.library.jms.description=面向消息的中间件 API，用于在两个或多个客户端之间发送消息。
javaee.starter.library.jpa.description=提供用于管理关系数据的对象/关系映射工具(JSR 338)。
javaee.starter.library.jaxrs.description=为根据表述性状态转移(REST)架构模式创建 Web 服务提供支持(JSR 370)。
javaee.starter.library.security.description=提供处理 Java 容器中安全性问题的可移植标准方法(JSR 375)。
javaee.starter.library.jsf.description=用于构建 Web 应用程序的服务器端 UI 组件框架(JSR 372)。
javaee.starter.library.servlet.description=基于请求-响应编程模型的 Web 应用程序框架(JSR 369)。
javaee.starter.library.jta.description=提供以独立于事务管理器实现的方式处理事务的 API (JSR 907)。
javaee.starter.library.websocket.description=通过提供双向、全双工的实时客户端/服务器通信(JSR 356)，为服务器与 Web 浏览器之间的有效通信限制提供备选方式。
javaee.starter.library.jaxws.description=用于构建使用 XML 进行通信的 Web 服务和客户端的技术，例如通过 SOAP (JSR 224)。

javaee.starter.library.cxf.description=功能全面的 Web 服务框架，支持 SOAP、JAX-RS 和 JAX-WS。
javaee.starter.library.weld.description=CDI 的参考实现: Java EE 平台的上下文和依赖项注入。
javaee.starter.library.activemq.description=与 JMS API 兼容的 ActiveMQ 消息传递服务器的客户端。
javaee.starter.library.jersey.description=用于提供 JAX-RS (JSR 370)实现的 REST 框架。
javaee.starter.library.eclipselink.description=ORM 框架支持开发人员与各种数据服务交互，包括数据库、Web 服务、对象 XML 映射和企业信息系统。
javaee.starter.library.hibernate.description=用于将面向对象的域模型映射到关系数据库的框架。
javaee.starter.library.hibernate-validator.description=Java Bean 验证(JSR 380)的实现。
javaee.starter.library.mojarra.description=JSF 标准的实现。
javaee.starter.library.resteasy.description=用于提供 JAX-RS (JSR 370)实现的 REST 框架。
javaee.starter.library.rabbitmq.description=用于 RabbitMQ 消息代理的客户端。
javaee.starter.library.thymeleaf.description=适用于 Web 和独立环境的现代服务器端 Java 模板引擎。
javaee.starter.library.tyrus-server.description=用于轻松开发 WebSocket 应用程序的参考服务器的实现。
javaee.starter.library.tyrus-client.description=用于轻松开发 WebSocket 应用程序的参考客户端的实现。

javaee.starter.category.implementations.title=实现
javaee.starter.category.specifications.title=规范
javaee.starter.category.specifications.description=Java Enterprise API 依赖项。
javaee.starter.category.implementations.description=Java Enterprise 实现依赖项。

Form.TransportManagerConfigurable.type=类型:
Form.TransportManagerConfigurable.host=主机:
LocalTransportHost.name=相同的文件系统

action.AnActionButton.text.help=帮助

JavaeeApplicationFrameworkType.javaeeapp.facet.display.name=JavaEE 应用程序

DataSourceAddFromServerAction.server.is.not.connected=服务器未连接

JavaeeView.technologies.frameworks.view=技术/框架视图
JavaeeView.action.show.modules=显示模块
JavaeeViewFrameworkProvider.not.implemented.yet=尚未实现
DestinationChooserDialog.target.module=目标模块
DestinationChooserDialog.target.package=目标软件包
DestinationChooserDialog.override.existing.files=重写现有文件
DestinationChooserDialog.module.not.specified=未指定模块
DestinationChooserDialog.package.not.specified=未指定软件包
output.path.must.point.to.directory.under.output.root=输出路径必须指向输出根下的目录
web.facet.create.web.xml=创建 web.xml

should.be.interface=''{0}'' 应为接口
should.not.be.interface=''{0}'' 应为类
interface.should.have.modifier=接口 ''{0}'' 应为 {1}
interface.should.not.have.modifier=接口 ''{0}'' 不应为 {1}
class.should.have.modifier=类 ''{0}'' 应为 {1}
class.should.not.have.modifier=类 ''{0}'' 不应为 {1}

model.object.type.security.role=安全角色

auto.detected.descriptor.settings.in.0=在以下位置自动检测到描述符设置: {0}

ejb.er.diagram.presentation.name=EJB ER 图表
label.add.jars.to.classpath=向类路径中添加 JAR
artifact.dependencies.checker.label.change.scope.to=将 ''{0}'' 范围更改为 ''{1}''
missing.module.in.artifact.label.add.to.artifact=将 ''{0}'' 添加到工件
artifact.dependency.checker.add.dependencies.recursively.fix.name=将 ''{0}'' 及其所有依赖项添加到工件
artifact.dependency.checker.add.all.dependencies.fix.name=将 ''{0}'' 缺失的所有依赖项添加到工件
descriptor.several.facets.not.registered=未在 'application.xml' 中注册多个 facet
facet.0.not.registered={0} 未在 ''application.xml'' 中注册
facet.0.has.incorrect.uri.tag={0} 在 ''application.xml'' 中的 ''uri'' 标记不正确
descriptor.0.refers.to.directory.rather.than.file=''{0}'' 描述符引用目录，而不是文件
javaee.application.archive.title=Java EE 应用程序: 归档
javaee.application.exploded.title=Java EE 应用程序: 展开型
dependency.missing.from.the.classpath=''{2}'' 类路径中的 {0} {1, choice, 1#为|2#为} 缺失
module.0.required.for.module.1.is.missing.from.the.artifact=工件中缺少模块 ''{1}'' 所需的模块 ''{0}''
library.0.required.for.module.1.is.missing.from.the.artifact=工件中缺少模块 ''{1}'' 所需的库 ''{0}''
for.0=对于 ''{0}''
action.create.artifact.from.modules.text=基于模块…
show.content.of.javaee.facets=显示 Java EE Facet 的内容
javaee.facet.resources.title=Java EE Facet 资源
javaee.facet.classes.title=Java EE Facet 类
facet.resources.are.not.included.in.an.artifact=任何工件中都不包含 Facet 资源
button.create.artifact=创建工件
popup.title.select.artifact=选择工件
dialog.message.unable.to.set.permissions.for.file=无法设置文件 {0} 的权限
dialog.message.can.t.set.permissions.for.file=无法设置 {0} 的权限
dialog.message.can.t.write.file=无法写入到文件 {0}
java.ee.libraries=Java EE 库
if.you.see.this.text.please.submit.a.bug=如果您看到此文本，请提交错误
choose.facets=选择 Facet
ejb.application.archive=EJB 应用程序: 归档
label.selected.modules.will.be.included.in.created.artifact.with.all.dependencies=选定模块将包含在使用所有依赖项创建的工件中
dialog.title.select.modules=选择模块
ejb.application.exploded=EJB 应用程序: 展开型
label.module.facet=''{0}'' 模块: ''{1}'' facet {2}
label.facet.resources={0} facet 资源
web.application.exploded=Web 应用程序: 展开型
web.application.archive=Web 应用程序: 归档
command.name.create.filter=创建筛选器
command.name.create.servlet=创建 Servlet
inspection.message.invalid.http.status.code=无效的 HTTP 状态代码 ''{0}''
inspection.message.http.status.code.not.allowed.here=此处不允许使用 HTTP 状态代码 ''{0}''
javaee.toolwindow.unknown.item=未知
inspection.managed.bean.class=托管的 Bean 类检查

javaee.app.config.gutter.name=JavaEE: 应用程序配置文件
javaee.app.config.gutter.action=打开 JavaEE: 应用工具窗口
jakartaee.migration.description=在 Java 代码中将 javax.* 导入替换为 jakarta.* import。\n不影响以下用法: javax.sql、javax.swing、javax.xml、javax.naming 和 javax.transaction.xa。\n\n您需要在迁移前添加 Jakarta EE 库。
model.object.type.resource.reference=资源引用
model.object.type.resource.environment.reference=资源环境引用
model.object.type.environment.entry=环境条目