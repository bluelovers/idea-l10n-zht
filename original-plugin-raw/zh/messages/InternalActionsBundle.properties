action.AddInlayInternalAction.Anonymous.description.remove.this.inlay=移除此嵌入
action.AddInlayInternalAction.Anonymous.text.remove=移除
action.AnAction.description.load.all.files.content=加载所有文件内容
action.AnAction.description.load.all.virtual.files.content=加载所有 VirtualFile 内容
action.AnAction.text.load.all.files.content=加载所有文件内容
action.AnAction.text.load.all.virtual.files.content=加载所有文件内容
action.Anonymous.description.ShowAccessibilityIssues=高亮显示组件树中的无障碍功能问题。如需更多信息，请在表中选择对应的属性值。
action.Anonymous.description.open.definition=打开所选组件的定义
action.Anonymous.text.Accessible=可访问
action.Anonymous.text.DataContext=数据上下文
action.Anonymous.text.ShowAccessibilityIssues=显示无障碍功能问题
action.Anonymous.text.clientproperties=ClientProperties
action.Anonymous.text.colorPicker=颜色键选择器
action.Anonymous.text.parents=父项
action.Anonymous.text.refresh=刷新
action.Anonymous.text.reset.statistics=重置统计信息
action.presentation.FocusDebuggerAction.text.start.focus.debugger=启动焦点调试器
action.presentation.FocusDebuggerAction.text.stop.focus.debugger=停止焦点调试器
action.presentation.FocusTracesAction.text.start.focus.tracing=启动焦点跟踪
action.presentation.FocusTracesAction.text.stop.focus.tracing=停止焦点跟踪
action.presentation.ToggleLaggingModeAction.text.enter.lagging.mode=进入滞后模式
action.presentation.ToggleLaggingModeAction.text.exit.lagging.mode=退出滞后模式
disable.tremble.dumb.mode=退出 Tremble Dumb 模式
enable.tremble.dumb.mode=进入 Tremble Dumb 模式
tab.title.edt.utilization.chart=EDT 锁使用情况
ui.inspector.accessibility.audit.AccessibleActionNotNullInspection.description=AccessibleAction 接口应为角色 "{0}" 实现 。该接口允许屏幕阅读器和语音控制等辅助技术在无需与组件直接交互的情况下执行操作。典型的操作示例包括点击按钮、激活复选框或显示上下文菜单。\n\n修复方法\:\n确保组件的 AccessibleContext 实现 AccessibleAction 接口，并提供该组件支持的所有操作。
ui.inspector.accessibility.audit.AccessibleEditableTextNotNullInspection.description=The AccessibleEditableText interface is expected to be implemented based on the accessible state "editable" and role "{0}". It allows assistive technologies such as screen readers and voice control to interact with the text component.\n\nHow to fix\:\nEnsure the AccessibleContext of the component implements the AccessibleEditableText interface. If the component is not supposed to be editable, make sure the method AccessibleContext.getAccessibleStateSet() doesn''t return AccessibleState.EDITABLE.
ui.inspector.accessibility.audit.AccessibleNameAndDescriptionNotEqualInspection.description=可访问名称和描述属性不应相同。名称用于传达组件的主要用途，而描述可用于提供说明或注释等其他信息。\n\n修复方法\:\n如果可访问描述与可访问名称重复，并且没有适合描述的附加信息，则仅保留名称。否则，请酌情将文本拆分为两个属性。
ui.inspector.accessibility.audit.AccessibleNameNotEmptyForFocusableComponentsInspection.description=对于具有角色 "{0}" 的可聚焦组件，其可访问名称不应为空。否则，辅助技术用户可能无法与其交互。例如，屏幕阅读器用户可能无法理解此组件的用途，而语音控制用户则无法使用名称来激活它。\n\n修复方法\:\n有以下几种选择\:\n1. 使用 getAccessibleContext().setAccessibleName() 方法为组件设置名称，或在组件的 AccessibleContext 中重写 getAccessibleName() 方法。\n2. 也可以通过使用 JLabel.setLabelFor(Component) 方法，设置组件的工具提示或文本属性，来隐式设置可访问名称。\n3. 如果组件纯粹用于装饰，并且没有合适的可访问名称，请确保其不可聚焦，并且其可访问角色能够正确反映其用途。
ui.inspector.accessibility.audit.AccessibleNameNotEmptyForIcon.description=图标应配有能描述其代表内容的可访问名称。这样，屏幕阅读器等辅助技术才能将图标的含义正确地传达给无法通过视觉识别该图标的用户。\n\n修复方法\:\n使用 getAccessibleContext().setAccessibleName() 方法为图标设置一个描述性的可访问名称。如果图标纯粹用于装饰，不传达任何信息，则可访问名称可以留空。
ui.inspector.accessibility.audit.AccessibleStateSetContainsFocusableInspection.description=The component is missing the "focusable" accessible state. Based on the accessible role "{0}", the component is expected to be keyboard-focusable to allow interacting with it for users who rely only on the keyboard to work with the IDE.\n\nHow to fix\:\nEnsure the component is focusable by calling setFocusable(true) on the component and verifying that it can be reached using Tab/Shift-Tab navigation. If the component is not interactive and shouldn''t be focusable, consider changing its accessible role to a non-interactive role that better represents its purpose, such as panel or label.
ui.inspector.accessibility.audit.AccessibleTextNotNullInspection.description=应为可访问角色 "{0}" 实现 AccessibleText 接口。该接口允许屏幕阅读器和语音控制等辅助技术访问组件的文本内容。\n\n修复方法\:\n确保组件的 AccessibleContext 实现 AccessibleText 接口。如果文本组件是简单的静态文本，且无需交互，请考虑将可访问角色更改为 "label"，并在可访问名称中提供文本内容。
ui.inspector.accessibility.audit.AccessibleValueNotNullInspection.description=应为可访问角色 "{0}" 实现 AccessibleValue 接口。该接口允许屏幕阅读器等辅助技术确定组件的值并进行交互。\n\n修复方法\:\n确保组件的 AccessibleContext 实现 AccessibleValue 接口。对于复选框或单选按钮等可切换组件，关闭状态应返回值 0，开启状态应返回值 1。
ui.inspector.accessibility.audit.ComponentWithIconHasNonDefaultAccessibleNameInspection.description=带有图标的组件应具有同时描述图标和文本内容的可访问名称，而不是仅描述文本，除非图标纯粹用于装饰且不传达任何信息。\n\n修复方法\:\n使用 getAccessibleContext().setAccessibleName() 方法设置同时描述图标和文本的可访问名称，或重写组件 AccessibleContext 的 getAccessibleName() 方法。
ui.inspector.accessibility.audit.ImplementsAccessibleInterfaceInspection.description=所有 UI 组件都应实现 Accessible 接口，以便向屏幕阅读器和语音控制等辅助技术提供无障碍功能元数据。\n\n修复方法\:\n为组件实现 Accessible 接口，并提供合适的 AccessibleContext 实现来描述组件的角色、状态和其他属性。对于纯装饰性组件(例如分隔符)，可以不实现 Accessible 接口，但仍建议实现。
ui.inspector.accessibility.audit.inspection.tab.text=问题 {0}
ui.inspector.accessibility.audit.preview.tab.text=值
ui.inspector.accessibility.audit.table.property.name.tooltip=选择值单元格以查看失败的检查
ui.inspector.accessibility.audit.tree.tooltip={0,choice,0\#没有无障碍功能问题|1\#无障碍功能问题\: } {1, choice, 0\#|1\# 1 个错误|2\#{1} 个错误} {2,choice,0\#|1\# 1 个警告|2\#, {2} 个警告} {3,choice,0\#|1\# 1 个推荐|2\#, {3} 个推荐}
