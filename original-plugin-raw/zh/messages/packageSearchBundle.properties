packagesearch.actions.addDependency.description=向当前模块添加新的依赖项
packagesearch.actions.addDependency.text=添加依赖项…
packagesearch.actions.showDetails.description=显示依赖项详细信息
packagesearch.actions.showDetails.text=显示软件包详细信息
packagesearch.actions.showSettings.description=显示软件包搜索设置
packagesearch.actions.showSettings.text=软件包搜索设置…


packagesearch.configuration.general=常规
packagesearch.configuration.gradle.configurations.comma.separated=逗号分隔的配置列表
packagesearch.configuration.gradle.configurations.default=默认 Gradle 配置:
packagesearch.configuration.gradle.configurations=Gradle 配置:
packagesearch.configuration.gradle.title=Gradle
packagesearch.configuration.maven.scopes.default=默认 Maven 作用域:
packagesearch.configuration.maven.scopes=Maven 作用域:
packagesearch.configuration.maven.title=Maven
packagesearch.configuration.restore.defaults=恢复默认值
packagesearch.configuration.title=软件包搜索
packagesearch.configuration.update.scopes.on.usage=首次使用时将配置保存到此列表

packagesearch.inspection.upgrade.description.gradle=检测 Gradle 项目中的依赖项有新版本的情况
packagesearch.inspection.upgrade.description.maven=检测 Maven 项目中的依赖项有新版本的情况
packagesearch.inspection.upgrade.group=软件包搜索
packagesearch.inspection.upgrade.key.gradle=检查新的依赖项版本(Gradle)
packagesearch.inspection.upgrade.key.maven=检查新的依赖项版本(Maven)
packagesearch.inspection.upgrade.description=软件包 ''{0}'' 可升级到版本 ''{1}''

packagesearch.operation.error.subtitle.someFailed=部分操作失败
packagesearch.operation.verb.change=更改
packagesearch.operation.verb.install=安装
packagesearch.operation.verb.remove=移除

packagesearch.package.copyableInfo.availableVersions=可用版本:
packagesearch.package.copyableInfo.githubStats.forks={0} 个复刻
packagesearch.package.copyableInfo.githubStats.stars={0} 颗星
packagesearch.package.copyableInfo.githubStats=GitHub 统计信息:
packagesearch.package.copyableInfo.installedVersions=安装的版本:
packagesearch.package.copyableInfo.stackOverflowTags=StackOverflow 标记:

packagesearch.quickfix.packagesearch.action=搜索依赖项…
packagesearch.quickfix.packagesearch.family=软件包搜索
packagesearch.quickfix.upgrade.action=将 ''{0}'' 升级到版本 ''{1}''
packagesearch.quickfix.upgrade.family=升级依赖项

packagesearch.repository.canBeSearched=(在软件包搜索索引)
packagesearch.repository.copyableInfo.id=ID: {0}
packagesearch.repository.copyableInfo.name=名称: {0}
packagesearch.repository.copyableInfo.url=URL: {0}
packagesearch.repository.willBeAddedOnInstall=将添加 {0} 仓库。

packagesearch.restService.readyForInstallation=依赖项已准备好进行安装。请选择要向其中添加依赖项的模块。

packagesearch.search.client.error.no.versions.for.range=请求的范围不应包含版本号。
packagesearch.search.client.error.too.many.requests.for.range=请求的范围大于允许的最大条目数(应 <= 25)。
packagesearch.search.client.response.body.is.empty=响应正文为空
packagesearch.search.hint=搜索已安装的依赖项和可用依赖项

packagesearch.terminology.dependency.configuration=配置
packagesearch.terminology.dependency.scope=范围
packagesearch.terminology.kotlinMultiplatform.platform.android_jvm=Android JVM
packagesearch.terminology.kotlinMultiplatform.platform.common=通用
packagesearch.terminology.kotlinMultiplatform.platform.js=Javascript
packagesearch.terminology.kotlinMultiplatform.platform.jvm=JVM
packagesearch.terminology.kotlinMultiplatform.platform.native=Native
packagesearch.terminology.kotlinMultiplatform.platform.target.android_arm32=Android (arm32)
packagesearch.terminology.kotlinMultiplatform.platform.target.android_arm64=Android (arm64)
packagesearch.terminology.kotlinMultiplatform.platform.target.android_x64=Android (x64)
packagesearch.terminology.kotlinMultiplatform.platform.target.android_x86=Android (x86)
packagesearch.terminology.kotlinMultiplatform.platform.target.browser=浏览器
packagesearch.terminology.kotlinMultiplatform.platform.target.ios_arm32=iOS (arm32)
packagesearch.terminology.kotlinMultiplatform.platform.target.ios_arm64=iOS (arm64)
packagesearch.terminology.kotlinMultiplatform.platform.target.ios_x64=iOS (x64)
packagesearch.terminology.kotlinMultiplatform.platform.target.linux_arm32_hfp=Linux (arm32_hfp)
packagesearch.terminology.kotlinMultiplatform.platform.target.linux_arm64=Linux (arm64)
packagesearch.terminology.kotlinMultiplatform.platform.target.linux_mips32=Linux (mips32)
packagesearch.terminology.kotlinMultiplatform.platform.target.linux_mipsel32=Linux (mips32 little endian)
packagesearch.terminology.kotlinMultiplatform.platform.target.linux_x64=Linux (x64)
packagesearch.terminology.kotlinMultiplatform.platform.target.macos_arm64=macOS (arm64)
packagesearch.terminology.kotlinMultiplatform.platform.target.macos_x64=macOS (x64)
packagesearch.terminology.kotlinMultiplatform.platform.target.mingw_x64=mingw (x64)
packagesearch.terminology.kotlinMultiplatform.platform.target.mingw_x86=mingw (x86)
packagesearch.terminology.kotlinMultiplatform.platform.target.node=Node.js
packagesearch.terminology.kotlinMultiplatform.platform.target.tvos_arm64=tvOS (arm64)
packagesearch.terminology.kotlinMultiplatform.platform.target.tvos_x64=tvOS (x64)
packagesearch.terminology.kotlinMultiplatform.platform.target.wasm32=WebAssembly (wasm32)
packagesearch.terminology.kotlinMultiplatform.platform.target.watchos_arm32=watchOS (arm32)
packagesearch.terminology.kotlinMultiplatform.platform.target.watchos_arm64=watchOS (arm64)
packagesearch.terminology.kotlinMultiplatform.platform.target.watchos_x64=watchOS (x64)
packagesearch.terminology.kotlinMultiplatform.platform.target.watchos_x86=watchOS (x86)
packagesearch.terminology.kotlinMultiplatform.tooltip=Kotlin Multiplatform
packagesearch.terminology.kotlinMultiplatform=多平台

packagesearch.title=包搜索

packagesearch.ui.missingScope=[默认]
packagesearch.ui.missingVersion=[未设置]

packagesearch.ui.toolwindow.actions.add.text=添加
packagesearch.ui.toolwindow.actions.remove.text=移除
packagesearch.ui.toolwindow.actions.upgrade.text=升级
packagesearch.ui.toolwindow.actions.upgradeAll.text.withCount=全部升级({0})
packagesearch.ui.toolwindow.actions.upgradeAll.text=全部升级

packagesearch.ui.toolwindow.allModules=所有模块

packagesearch.ui.toolwindow.link.documentation.capitalized=文档
packagesearch.ui.toolwindow.link.documentation=文档
packagesearch.ui.toolwindow.link.github.capitalized=GitHub
packagesearch.ui.toolwindow.link.github=GitHub
packagesearch.ui.toolwindow.link.license.capitalized=许可证
packagesearch.ui.toolwindow.link.license=许可证
packagesearch.ui.toolwindow.link.projectSite.capitalized=项目站点
packagesearch.ui.toolwindow.link.projectSite=项目站点
packagesearch.ui.toolwindow.link.readme.capitalized=自述文件
packagesearch.ui.toolwindow.link.readme=自述文件
packagesearch.ui.toolwindow.link.scm.capitalized=源
packagesearch.ui.toolwindow.link.scm=源

packagesearch.ui.toolwindow.modulesTree.empty=没有要显示的模块。

packagesearch.ui.toolwindow.packages.actions.install=添加
packagesearch.ui.toolwindow.packages.actions.upgrade=升级
packagesearch.ui.toolwindow.packages.columns.actions=操作
packagesearch.ui.toolwindow.packages.columns.name=依赖项名称
packagesearch.ui.toolwindow.packages.columns.scope=范围
packagesearch.ui.toolwindow.packages.details.emptyState=未选择依赖项
packagesearch.ui.toolwindow.packages.details.noData=没有关于软件包搜索的可用信息
packagesearch.ui.toolwindow.packages.details.info.author=作者: {0}
packagesearch.ui.toolwindow.packages.details.info.authors=作者: {0}
packagesearch.ui.toolwindow.packages.details.info.kotlinPlatforms=支持的 Kotlin 平台:
packagesearch.ui.toolwindow.packages.details.info.license=许可证: {0}
packagesearch.ui.toolwindow.packages.details.info.repositories=仓库: {0}
packagesearch.ui.toolwindow.packages.details.info.repository=仓库: {0}
packagesearch.ui.toolwindow.packages.details.info.usages.caption=用于:
packagesearch.ui.toolwindow.packages.details.menu.copy=复制
packagesearch.ui.toolwindow.packages.empty.allModules=任意模块
packagesearch.ui.toolwindow.packages.empty.base=没有要显示的依赖项。
packagesearch.ui.toolwindow.packages.empty.noModule=从树中选择一个模块以管理其依赖项。
packagesearch.ui.toolwindow.packages.empty.packagesOnly=未在 {0} 中找到支持的依赖项。搜索要添加到项目中的依赖项。
packagesearch.ui.toolwindow.packages.empty.searching=找不到依赖项
packagesearch.ui.toolwindow.packages.filter.onlyMpp=Kotlin 多平台
packagesearch.ui.toolwindow.packages.filter.onlyStable=仅限稳定版本

packagesearch.ui.toolwindow.tab.packages.installedPackages.addedIn=添加到{0}中
packagesearch.ui.toolwindow.tab.packages.searchResults=搜索结果
packagesearch.ui.toolwindow.tab.packages.selectedPackage=所选依赖项
packagesearch.ui.toolwindow.tab.packages.title=管理
packagesearch.ui.toolwindow.tab.repositories.no.repositories.configured=当前项目中未配置仓库
packagesearch.ui.toolwindow.tab.repositories.title=仓库


packagesearch.ui.util.numberWithThousandsSymbol={0}k

packagesearch.version.undefined=未定义插件版本

# Note: this is not unused, it's picked up automatically by IJ to translate the toolwindow title

packagesearch.ui.toolwindow.packages.columns.versions=版本
packagesearch.ui.toolwindow.packages.actions.set=设置
toolwindow.stripe.Dependencies=依赖
packagesearch.operation.error.gradle.missing.configuration=缺少 Gradle 配置
packagesearch.inspection.upgrade.excluded.dependencies=排除的依赖项:
packagesearch.quickfix.upgrade.exclude.action=不检查 ''{0}'' 更新
packagesearch.quickfix.upgrade.exclude.family=跳过依赖项升级
packagesearch.ui.loading=正在处理构建文件…
packagesearch.logging.error=记录分析事件时出错：''{0}''。此错误不会影响插件功能。请使用异常分析器报告此错误。
packagesearch.configuration.recovery.caches=删除软件包搜索项目缓存
packagesearch.configuration.recovery.caches.global=删除软件包搜索全局缓存
packagesearch.configuration.automatically.add.repositories=添加或更改依赖项时自动添加缺少的仓库
packagesearch.inspection.upgrade.range.withVersion=<html><body>版本 ''{0}'' 声明可能会在构建时导致不可预见的问题，因为它不固定依赖项的具体版本。根据构建的时间和地点，生成的工件可能包含此依赖项的不同版本，从而使构建具有不确定性。请参阅 <a href="https://reproducible-builds.org/">https://reproducible-builds.org/</a> 了解详细信息。</body></html>
packagesearch.inspection.upgrade.range=<html><body>此版本声明可能会在构建时导致不可预见的问题，因为它不固定依赖项的具体版本。根据构建的时间和地点，生成的工件可能包含此依赖项的不同版本，从而使构建具有不确定性。请参阅 <a href="https://reproducible-builds.org/">https://reproducible-builds.org/</a> 了解详细信息。</body></html>
packagesearch.inspection.range.key.gradle=检查依赖项版本中的范围(Gradle)
packagesearch.inspection.range.key.maven=检查依赖项版本中的范围(Maven)
packagesearch.inspection.range.description.gradle=检测依赖项版本是否为 Gradle 项目中的范围
packagesearch.inspection.range.description.maven=检测依赖项版本是否为 Maven 项目中的范围