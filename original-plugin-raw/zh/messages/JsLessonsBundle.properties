js.readme.description=此交互式课程将帮助您了解如何完成一些常见的任务，例如重构代码或在项目中导航。\n\n此课程对 {0} 的新手非常有用。但如果您是一名经验丰富的 {0} 用户，并且希望检查自己是否了解所有基本快捷键，也可以尝试。
js.readme.usage.header=如何学习此课程
js.readme.feedback.header=分享反馈


js.editor.basics.module.name=编辑器基础知识
js.editor.basics.module.description=掌握编辑器的要点 - 从最开始就编写更好的代码，并节省执行常见任务的时间。

js.editor.completion.title=代码补全
js.editor.completion.choose.lookup=<ide/> 功能丰富，能帮助您编写更好的代码并提高工作效率。我们先从代码补全开始。通过补全语言 API 和项目依赖项中的关键字和符号，它可以加快编码速度。键入 {0}，然后按 {1} 自动补全 {2}。
js.editor.completion.choose.method=因此，代码补全会随着您键入而显示上下文感知的建议。要添加其中一项建议，可以像刚才那样使用 {0}，或按 {1} 替换现有项。现在，在 {3} 后面添加 {2}，然后键入 {4} 并通过 {0} 自动补全 {5} 方法。
js.editor.completion.parameter.info=将文本光标放入 {1} 中后，所得到的工具提示({0})有助于您快速查找方法和函数中的形参名称。在某些情况下，您可能想要查看更详细的文档。现在按 {2}。
js.editor.completion.add.parameter=这样便可以在 <ide/> 中查找 JavaScript 文档。现在在 {1} 中添加 {0} 以继续。
js.editor.completion.console.log.argument=最后补全 {0} 语句。将文本光标放在第 8 行的 {1} 内，并使用代码补全功能添加 {2}。
js.editor.completion.next=本课程到此为止。要开始下一个课程，请点击下面的按钮或使用 {0}。

js.editor.code.editing.tips.and.tricks.title=代码编辑技巧和窍门
js.editor.code.editing.reformat.start=我们来看一下有助于更快编辑代码的提示和技巧。对于初学者，无需使用 <ide/> 手动修正代码格式。使用 {0} 重新格式化代码。
js.editor.code.editing.select.word=就是这样! 现在看看如何快速选择文件中的代码段。按几次 {0}，以完全选择第二个 tr 元素(第 14-18 行)。
js.editor.code.editing.comment.delete.unselect.move.up.1=现在您已选择了代码，可以将其(取消)注释掉({0})、删除({1})或收缩选区({2})。
js.editor.code.editing.comment.delete.unselect.move.up.2=您可以做的另一件事是在文件中向上或向下移动这段代码。使用 {0} 将其上移。
js.editor.code.editing.multi.caret.1=接下来是多文本光标编辑。同时在多个位置修改代码时，可以使用这项功能节省时间。将文本光标放在第一个 {0} 标记内(第 10 行)。然后选择同一 tr 元素内的所有 {1} 标记(第 10-12 行): 按六次 {2}，直至选择所有必要的标记。
js.editor.code.editing.multi.caret.2=将 {0} 替换为 {1}，然后按 {2} 退出多文本光标模式。
js.editor.code.editing.duplicate.delete.comment=最后，快速尝试最常见的行操作，例如复制行、删除行或将其注释掉。现在使用 {0} 复制所选行。然后按 {1} 和 {2} 尝试其他行操作。
js.editor.code.editing.next=本课到此为止。点击下面的按钮开始下一课或使用 {0}。

js.editor.code.inspection.title=代码检查的作用
js.editor.code.inspection.intro=在编辑器中工作时，<ide/> 会不断分析您的代码，检测其中的各种问题，并提出如何对其进行改进的建议。在打开的文件中，第 4 行和第 5 行有两个高亮显示的问题。按一下 {0}，来看看是什么问题。
js.editor.code.inspection.show.intentions.1=您还可以使用 {0} 从一个错误跳转到另一个错误。也可以将鼠标悬停在发现的问题上来了解这些问题。
js.editor.code.inspection.show.intentions.2=在此文件中，IDE 找到了一个未解析的变量 - 该变量未在代码中的任何位置定义。它建议创建一个新变量 {0} 作为一种可能的修正，但我们需要添加一个参数 book。将文本光标插入 {1}，然后按 {2} 查看完整的修正列表。
js.editor.code.inspection.run.intention=选择 {0} 并按 {1}。
js.editor.code.inspection.checkmark=现在查看编辑器的右上角，会看到用于确认该文件并无其他问题的绿色复选标记({0})。即便如此，仍可以对一些细节进行优化以缩短代码。将文本光标插入 {1}(第 3 行)，然后按 {2}。
js.editor.code.inspection.make.shorter=现在我们要缩短函数表达式。选择 {0} 快速修复，然后按 {1}。
js.editor.code.inspection.next=本课到此为止。点击下面的按钮开始下一课或使用 {0}。

js.editor.navigation.title=高效导航
js.editor.navigation.recent.files=我们从导航项目开始。按 {0} 调出 {1} 弹出窗口。
js.editor.navigation.choose.structure=通过该弹出窗口，可以在最近的文件和 IDE 工具窗口之间快速跳转。其中的一个工具窗口可以帮助您导航项目中的一小部分(即单个文件)。点击 {0} 选项卡了解更多信息。
js.editor.navigation.activate.structure=因此，{0} 工具窗口可以帮助您更快速地检查文件。它提供文件结构概述，您只需键入名称即可跳转到特定项。在工具窗口区域中的任意位置开始键入 {1}，按 {2}，然后按 {3} 以关闭面板，并跳转到代码处。
js.editor.navigation.find.usages=在执行这些操作后，文本光标已移至 {0}(第 9 行)。我们将其保留在此处，然后按 {1} 打开另一个工具窗口，它可以帮您快速查找任何项的用法。
js.editor.navigation.hide.tool.window=太好了! 现在您可以看到 giveTreat 在整个项目和库中的用法。使用 {0} 关闭工具窗口。
js.editor.navigation.search.everywhere=现在，按两下 {0}，了解另一项能帮您加快搜索的功能。
js.editor.navigation.search.everywhere.tabs=这是 {0} 弹出窗口。从中可以立即查找任何操作、文件、类或符号，并在一个位置显示所有匹配项。如果要执行更具体的搜索，可以按 {1} 从 {2} 切换到其他任何选项卡，例如 {3} 或 {4}。您也可以使用快捷键打开所需的特定选项卡。我们来通过 {5} 尝试进行后面这种操作。
js.editor.navigation.search.action=现在我们位于 {0} 选项卡中，先在搜索栏中键入 {1}，来查找另一项实用导航功能的快捷键。
js.editor.navigation.go.to.declaration=请注意<strong>转到声明或用法</strong>旁边的 {0} - 它会显示定义的用法(反之亦然)。关闭弹出窗口，将文本光标置于 {1} (第 16 行)上，然后按 {0} 查找其声明。
js.editor.navigation.keymap.reference=恭喜! 您已经完成 {0} 的操作。打印出<a href="{1}">键盘映射参考</a>，以便您在 <ide/> 中得心应手地使用所有快捷键。点击下方按钮移至下一个模块。

js.editor.refactorings.title=简单的重构
js.editor.refactorings.this=<ide/> 提供<a href=''{0}''>多种重构</a>来自动重构现有代码，无需在整个项目中更改其行为。来预览一下 {1} 参数可用的重构列表。按 {2} 或从主菜单中选择 {3}。
js.editor.refactorings.rename=借助 {0}，您无需记住所有重构或其快捷键。点击 {1} 查看最常用的一种重构操作。
js.editor.refactorings.rename.apply=将 {0} 形参重命名为 {1} 并按 {2}。此操作将针对项目中的所有文件应用变更。
js.editor.refactorings.shortcut=太棒了! 我们来尝试通过快捷键重构代码。将文本光标插入 {0} 属性(第 4 行)，然后按 {1}。
js.editor.refactoring.replace=现在将这 2 个匹配项都替换成名称为 {1} 的 {0} 变量。
js.editor.refactoring.select.expression=我们来创建一个新变量 {0}，该变量包含 {1}。从列表中选择 {1} 表达式，然后按 {2}。
js.editor.refactorings.next=您刚刚了解了在 <ide/> 中重构代码的两种方法。如果您更喜欢使用快捷键，请将<a href="{0}">键映射参考</a>打印出来，或者继续使用 {1} 菜单。点击下方按钮开始下一课或使用 {2}。

js.getting.started.module.name=测试入门
js.getting.started.module.description=使用 Jest 的示例了解如何简化 {0} 中的单元测试。

js.testing.jest.title={0} 测试的基础知识
js.testing.jest.prepare=使用 <ide/> 可以让所有测试工作流变得更简单。来了解一下具体的过程。对于此模块，我们将以 <a href="{0}">Jest</a> 和一个<a href="{1}">示例项目</a>为例，因此请确保计算机上安装了 Jest 和 npm/Yarn(有关详细信息，请参阅<a href="{2}">此</a>网页)。先创建一项特定于 Jest 的运行/调试配置。在主菜单上，选择 {3} > {4}。然后点击 {5}，使用默认形参添加 {6} 配置，然后按 {7} 进行保存。
js.testing.jest.run=现在默认为选择了新的 {0} 配置。点击它旁边的 {1}({2})按钮。
js.testing.jest.navigate.1=现在可以看到 {0} 工具窗口，其中包含测试结果以及测试运行程序中失败测试的堆栈跟踪。除了跟踪测试进度之外，在这里还可以执行许多其他操作。您可以重新运行所有({1})测试，或仅运行失败的({2})测试，查看通过的测试({3})，或启用<a href="{4}">监视模式</a>，以便在发生变更时自动重新运行测试。
js.testing.jest.navigate.2=您还可以在 {0} 中快速查找特定的测试。现在尝试执行这项操作: 将文本光标放在 {0} 区域的任意位置，键入 {1}，然后按 {2} 跳转到测试。
js.testing.jest.double.click=就是这样! 当您需要在许多测试中快速查找特定一个时，请使用这项功能。现在双击我们找到的 {0}。
js.testing.jest.fix.test.1=通过双击 {0} 中的测试，我们直接跳转到了它在代码中的位置。如果现在将鼠标悬停在 {1} 上，会看到一个弹出窗口，其中说明了测试失败的原因。如果需要，可以从这里调试测试。
js.testing.jest.fix.test.2=现在替换用于 {0} 的不正确的值: 在第 6 行，将 {1} 替换为 {2}。
js.testing.jest.re.run.test.1=我们已得到符合预期结果的正确值，可以重新运行测试了。这次以不同的方式来执行。在编辑器中看到测试左侧的 {0} 图标了吗? 此图标不仅可以显示最近运行的测试的测试状态，还可以供您快速运行和调试特定测试。
js.testing.jest.re.run.test.2=点击它并选择 {0}。
js.testing.jest.success.run.coverage.1=很好! 我们已成功通过测试。
js.testing.jest.success.run.coverage.2=来看看另一种方便的工具。点击运行/调试配置菜单旁边的 {0} 图标。
js.testing.jest.coverage.result=这样可以快速生成代码覆盖率报告，这一报告会显示测试覆盖的文件数目，包括覆盖这些文件中的行数百分比。现在使用 {0} 关闭覆盖率报告。
js.testing.jest.end=恭喜您! 您已完成本模块。我们学到的大多数内容也适用于 <ide/> 支持的其他测试运行程序(代码覆盖率和监视模式除外)。有关使用 Jest 测试应用的更多提示和技巧，请阅读<a href="{0}">这篇</a>博文。如果您使用其他测试运行程序，可能需要浏览我们的 <a href="{1}">Web 帮助</a>。
