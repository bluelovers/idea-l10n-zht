action.PromoDataFrameAction.text=DataFrame
action.PromoDockerAction.text=在 Docker 中运行
action.PromoEndpointsAction.text=端点
action.PromoNewJavaScriptFile.text=JavaScript 文件
action.PromoNewJupyterNotebook.text=Jupyter Notebook
action.PromoNewSqlFile.text=SQL 文件
action.PromoNewTypeScriptFile.text=TypeScript 文件
action.PromoPlotsAction.text=绘图
action.PromoPreviewJupyterNotebook.text=Jupyter Notebook
feature.ai.assistant.description.html=<a href\="{0}">AI Assistant</a> 能够为软件开发提供 AI 赋能的功能。<br/>它可以帮助实现以下功能\:
feature.ai.assistant.open.toolwindow=打开 AI Assistant
feature.ai.assistant.title=推出 AI Assistant
feature.django.code=模型、视图、字符串等的代码洞察和补全
feature.django.description.html=通过高级调试功能、实时模板等获得专门的 <a href\="{0}">Django</a> 支持\:
feature.django.djangoTemplates=Django 模板支持\: 为您的 Django 模板获取语法和错误高亮显示、代码补全、导航等功能
feature.django.endpoints=端点\: 在使用 API 时获取所有声明的 URL 和端点的概览
feature.jupyter.code=适用于 Jupyter 的 PyCharm 级编码辅助
feature.jupyter.debugger=使用我们的内置调试器，在 Notebook 中进行高级调试和实时变量监控
feature.jupyter.description.html=通过将 <a href\="{0}">Jupyter Notebook</a> 与 PyCharm 提供的全部功能无缝集成来增强其功能。
feature.jupyter.tables=使您能够浏览、排序、查看和导出数据的交互式表
feature.jupyter.vcs=增强的集成，包括版本控制支持、问题分析、文件查看器窗格等
feature.remoteSsh.deploy=轻松将您的应用程序部署到远程服务器，确保您的代码在目标环境中平稳运行
feature.remoteSsh.description.html=在<a href\="{0}">远程服务器</a>上无缝开发、运行和调试您的 Python 项目，使协作和部署变得轻而易举。
feature.remoteSsh.run=在远程/容器环境中运行和设置断点、检查变量，以及逐步执行本地代码
feature.remoteSsh.sync=同步代码、数据和其他项目文件，使本地和远程开发环境保持最新
misc.install.python.question=是否要安装最新的 Python?
misc.no.python.found=在您的系统上找不到 Python 解释器。
misc.project.error.create.dir=由于{1}，无法创建 {0}。请手动创建，然后重试。
misc.project.filling.file=正在填充模板文件
misc.project.generating.env=正在准备环境
misc.script.text=新建脚本
new.project.other.group.name=其他
new.project.python.group.name=Python
notification.group.pro.advertiser=PyCharm 推荐
promo.configurable.django=Django
promo.configurable.jupyter=Jupyter
promo.configurable.remoteSsh=远程 SSH
sdk.create.condaenv.exception.dialog.title=无法创建 Conda 环境
sdk.create.condaenv.permission=文件 environment.yml 包含项目依赖项。要使用它创建 conda 环境吗?
sdk.create.condaenv.suggestion=使用 environment.yml 创建 conda 环境
sdk.create.pipenv.exception.dialog.title=无法创建 Pipenv 环境
sdk.create.pipenv.permission=文件 Pipfile 包含项目依赖项。要使用它创建 pipenv 环境吗?
sdk.create.pipenv.suggestion=使用 {0} 创建 pipenv 环境
sdk.create.venv.permission=文件 {0} 包含项目依赖项。要使用它创建虚拟环境吗?
sdk.create.venv.suggestion=使用 {0} 创建虚拟环境
sdk.detect.condaenv.exception.dialog.title=无法获取 Conda 环境
sdk.dialog.title.failed.to.set.up.poetry.environment=无法设置 Poetry 环境
sdk.dialog.title.setting.up.poetry.environment=正在设置 Poetry 环境
sdk.notification.label.set.up.poetry.environment.from.pyproject.toml.dependencies=文件 pyproject.toml 包含项目依赖项。是否要设置 Poetry 环境?
sdk.progress.text.setting.up.poetry.environment=正在设置 Poetry 环境
sdk.set.up.hatch.environment=设置 Hatch 'default' 环境
sdk.set.up.hatch.project.analysis=Hatch 项目分析
sdk.set.up.poetry.environment=使用 {0} 设置 Poetry 环境
sdk.set.up.uv.environment=使用 {0} 设置 uv 环境
temporarily.ignored.file.provider.description=暂时忽略的文件
