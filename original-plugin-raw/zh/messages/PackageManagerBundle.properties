cmake.hints.view.action.name=将软件包添加到 CMakeLists.txt
cmake.hints.view.window.hint=将此代码复制到您的 CMakeLists.txt 并在必要时更改目标
cmake.hints.view.window.name=将软件包添加到 CMakeLists.txt
cmake.hints.view.window.ok.button.name=复制到剪贴板
full.error.output.view.action.name=显示输出
json.file.modificator.error.read.json=无法读取文件 {0}
json.file.modificator.read=读取 {0}
json.file.modificator.update=更新 {0}
json.file.modificator.write=写入 {0}
label.checking.correctness.package.manager=正在检查软件包管理器状态
label.error.when.checking.package.manager.make.sure.path.correct.cloned.repository.lies.there.that.it.was.bootstrap=检查软件包管理器时出错。\n请确保路径正确并检查仓库是否已成功引导。
manifest.manager.unable.to.create.file=无法创建文件\: ${0}
progress.title.checking.for.install=正在查找 vcpkg
remove.package.manager.window.checkbox.delete.files=从磁盘中移除所有文件
remove.package.manager.window.name=删除 {0}
remove.package.manager.window.task.remove.from.disk=正在移除文件
remove.package.manager.window.want.to.remove=确定要删除 {0} 吗?
switch.to.manifest.mode.window.check.all=全部勾选
switch.to.manifest.mode.window.description=选择要导入的软件包名称。切换到清单模式后，其他软件包将不再可用。
switch.to.manifest.mode.window.name=切换到清单模式
switch.to.manifest.mode.window.table.package.name=名称
switch.to.manifest.mode.window.table.version.name=版本
switch.to.manifest.mode.window.uncheck.all=取消全部勾选
toolwindow.button.edit.package.manager.description=编辑 {0}
toolwindow.button.edit.package.manager.name=编辑 {0}
toolwindow.button.new.package.manager.name=添加 {0}
toolwindow.console.placeholder=[{0} 行]
toolwindow.install.multiple.window.label.choose.one=选择要安装的软件包
toolwindow.install.multiply.window.name=安装软件包
toolwindow.install.multiply.window.notification.broken.package.manager=安装过程中出错\n{0} 不可用
toolwindow.install.multiply.window.notification.can't.find.package.manager=找不到 Vcpkg。请确保它已在 Vcpkg 工具窗口中配置
toolwindow.install.multiply.window.task.find.packages=正在查找软件包
toolwindow.install.multiply.window.task.find.packages.failed=无法从仓库加载软件包。\n{0}
toolwindow.left.panel.linked.to=已链接到 {0} 个，共 {1} 个
toolwindow.left.panel.linked.to.single=已链接到“{0}”
toolwindow.left.panel.tooltip=已链接到\: {0}
toolwindow.left.panel.tooltip.on.empty=此 vcpkg 实例未在任何 CMake 配置文件中使用。通过编辑实例对齐进行链接。
toolwindow.name.console=控制台\: {0}
toolwindow.name.vcpkg=软件包
toolwindow.not.selected.package.manager=未选择软件包管理器。请选择软件包管理器
toolwindow.notification.key=软件包管理器通知
toolwindow.problem.cmake.description=找不到软件包 {0}
toolwindow.problem.cmake.module.description=找不到模块 {0}
toolwindow.problem.cpp.description=找不到文件 {0}
toolwindow.problem.do.not.show.this.button.name=不再建议
toolwindow.problem.do.not.show.this.button.notification=建议已被禁用。要启用，请转到 Vcpkg 工具窗口，然后在“设置”菜单中选择相应的选项
toolwindow.problem.notification.profile.cant.find.package.manager=工具链参数路径上没有软件包管理器
toolwindow.problem.notification.profile.cant.found.toolchain=没有指定工具链参数路径
toolwindow.problem.problem.name=修正…
toolwindow.problem.solve.part.bridge=using
toolwindow.problem.solve.part.package.install.many=安装候选项
toolwindow.problem.solve.part.package.install.one=安装软件包 ''{0}''
toolwindow.problem.solve.part.package.manager.install.new.vcpkg=新的 vcpkg
toolwindow.problem.solve.part.package.manager.use.existed=vcpkg ''{0}''
vcpkg.add.new.package.manager.field.local.path=目录\:
vcpkg.add.new.package.manager.field.local.path.name.window=选择安装目录
vcpkg.add.new.package.manager.field.name=名称\:
vcpkg.add.new.package.manager.field.url=URL\:
vcpkg.add.new.package.manager.name.must.be.not.blank=名称不得为空
vcpkg.add.new.package.manager.name.must.be.unique=名称必须唯一
vcpkg.add.new.package.manager.name.of.triple.select=将 vcpkg 集成添加到现有 CMake 配置文件
vcpkg.add.new.package.manager.name.tooltip=每当软件包管理器在 IDE 中显示时都会使用该名称
vcpkg.add.new.package.manager.path.already.exists=目录 {0} 已存在。它的内容将被视为软件包管理器。
vcpkg.add.new.package.manager.path.must.be.correct=路径必须正确
vcpkg.add.new.package.manager.path.must.be.not.blank=安装目录不能为空
vcpkg.add.new.package.manager.path.tooltip=仓库将被克隆到的路径
vcpkg.add.new.package.manager.rename.package.manager=名称为 ''{0}'' 的 vcpkg 被重命名为 ''{1}''
vcpkg.add.new.package.manager.table.profile.already.enabled=(使用 ''{0}'')
vcpkg.add.new.package.manager.url.must.be.valid=URL 必须有效
vcpkg.add.new.package.manager.window.name=添加 Vcpkg 仓库
vcpkg.edit.package.manager.advanced.settings=高级设置
vcpkg.edit.package.manager.force.cmake.ninja.sources.description=设置 VCPKG_FORCE_SYSTEM_BINARIES 变量并将 CMake 和 Ninja 添加到 PATH
vcpkg.edit.package.manager.force.cmake.ninja.sources.name=使用系统二进制文件
vcpkg.edit.package.manager.window.name=编辑 Vcpkg
vcpkg.indicator.task.label.install.package=正在安装软件包
vcpkg.indicator.task.label.installed.find=正在查找已安装的软件包
vcpkg.indicator.task.label.remove.package=正在移除软件包
vcpkg.indicator.task.label.search.package=正在查找软件包
vcpkg.name=vcpkg
vcpkg.profiles.panel.vcpkg.not.supported.non.cmake=项目集成仅适用于 CMake 项目
vcpkg.return.status.exit.code.is=Vcpkg 失败，退出代码为 {0}
vcpkg.return.status.failed.on.execution=无法运行 vcpkg 可执行文件(在目录“{0}”中)。可能的原因\: 权限被拒绝
vcpkg.return.status.process.failed=无法运行 vcpkg 可执行文件(在目录“{0}”中)。找不到指定的文件
vcpkg.scheme.name=架构\: vcpkg
vcpkg.table.column.name=名称
vcpkg.table.column.version=版本
vcpkg.toolwindow.button.auto.reload.cmake.after.install.description=安装软件包后自动重新加载 CMake
vcpkg.toolwindow.button.auto.reload.cmake.after.install.name=安装软件包后重新加载 CMake
vcpkg.toolwindow.button.check.for.update.description=检查 Git 仓库更新
vcpkg.toolwindow.button.check.for.update.name=检查更新
vcpkg.toolwindow.button.console.check.error.description=在控制台输出中提供快速修复
vcpkg.toolwindow.button.console.check.error.name=在输出视图中显示快速修复
vcpkg.toolwindow.button.install.package.name=安装
vcpkg.toolwindow.button.pull.and.update.description=更新 Git 仓库并更新 vcpkg
vcpkg.toolwindow.button.pull.and.update.name=全部更新
vcpkg.toolwindow.button.remove.repository.description=删除仓库
vcpkg.toolwindow.button.remove.repository.name=删除仓库
vcpkg.toolwindow.button.repository.on.start.update.description=软件包管理器将在 IDE 启动时自动更新
vcpkg.toolwindow.button.repository.on.start.update.name=IDE 启动时自动更新仓库
vcpkg.toolwindow.button.settings.description=软件包管理器的设置
vcpkg.toolwindow.button.settings.name=设置
vcpkg.toolwindow.button.show.console.description=显示包含 vcpkg 输出的控制台
vcpkg.toolwindow.button.show.console.name=显示控制台
vcpkg.toolwindow.button.switch.to.manifest.mode.description=将项目切换到清单模式
vcpkg.toolwindow.button.switch.to.manifest.mode.name=切换到清单模式
vcpkg.toolwindow.button.update.git.repository.description=将 Git 仓库更新到最新版本
vcpkg.toolwindow.button.update.git.repository.name=更新 Vcpkg 仓库
vcpkg.toolwindow.button.update.repository.description=检查当前版本的 vcpkg 是否可以从当前版本的 Git 仓库更新任何已安装的软件包。\n注意\: 这并不能保证您获得最新版本的软件包，因为您还需要更新 Git 仓库才能进行完整更新
vcpkg.toolwindow.button.update.repository.name=更新仓库
vcpkg.toolwindow.button.upgrade.all.description=更新 Git 仓库并升级 vcpkg
vcpkg.toolwindow.button.upgrade.all.name=全部升级
vcpkg.toolwindow.button.upgrade.repository.description=重新构建所有过时的软件包
vcpkg.toolwindow.button.upgrade.repository.name=升级仓库
vcpkg.toolwindow.mode.classic=经典
vcpkg.toolwindow.mode.manifest=清单
vcpkg.toolwindow.package.info.vcpkg.json.install=添加到 vcpkg.json
vcpkg.toolwindow.package.info.vcpkg.json.remove=从 vcpkg.json 中移除
vcpkg.toolwindow.package.not.selected=选择软件包以查看信息。
vcpkg.toolwindow.package.triplet.action.remove.tooltip=删除软件包
vcpkg.toolwindow.package.triplet.action.upgrade.tooltip=升级软件包
vcpkg.toolwindow.package.triplet.dependencies=依赖项\: {0}
vcpkg.toolwindow.package.triplet.dependencies.failed=无法加载依赖项
vcpkg.toolwindow.package.triplet.dependencies.load=加载依赖项…
vcpkg.toolwindow.package.triplet.dependencies.no=无依赖项
vcpkg.toolwindow.package.triplet.installed.triplets=已安装的三元组\:
vcpkg.toolwindow.package.triplet.lets.cmake.decide=让 vcpkg 决定
vcpkg.toolwindow.package.triplet.name=三元组\:
vcpkg.toolwindow.package.triplet.name.and.version={0} ({1})
vcpkg.toolwindow.package.triplet.no.triplets.found=未安装软件包
vcpkg.toolwindow.table.model.name.with.count=(找到 {0} 个)
vcpkg.toolwindow.table.splitter.all=所有
vcpkg.toolwindow.table.splitter.installed.classic=已安装 | 经典模式
vcpkg.toolwindow.table.splitter.installed.manifest=已添加 | 清单模式
vcpkg.toolwindow.table.warning.not.upgraded=软件包可更新({0} -> {1})
vcpkg.toolwindow.table.warning.not.upgraded.no.version=<无版本>
vcpkg.toolwindow.task.bootstrap.failed=引导失败。原因\:\n{0}
vcpkg.toolwindow.task.bootstrap.vcpkg=正在引导 vcpkg
vcpkg.toolwindow.task.check.for.update.failed=检查更新失败。原因\:\n{0}
vcpkg.toolwindow.task.check.for.update.label=正在检查更新
vcpkg.toolwindow.task.check.for.update.successful.can.be.updated=仓库可以更新
vcpkg.toolwindow.task.check.for.update.successful.updated=仓库已更新
vcpkg.toolwindow.task.clone.and.bootstrap.successful=克隆和引导成功
vcpkg.toolwindow.task.get.dependencies=获取依赖项
vcpkg.toolwindow.task.get.dependencies.failed=获取依赖项命令失败
vcpkg.toolwindow.task.git.clone.failed=Git 克隆失败。原因\:\n{0}
vcpkg.toolwindow.task.git.update.and.vcpkg.update=正在更新 Git 和 vcpkg
vcpkg.toolwindow.task.git.update.and.vcpkg.update.failed.git=Git 拉取失败。原因\: {0}
vcpkg.toolwindow.task.git.update.and.vcpkg.update.failed.vcpkg=vcpkg 更新失败。原因\: {0}
vcpkg.toolwindow.task.git.update.and.vcpkg.update.successful=Git 拉取和 vcpkg 更新成功。过时的软件包\:\n{0}
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade=Git 拉取和 vcpkg 升级
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade.failed.git=Git 拉取失败。原因\: {0}
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade.failed.vcpkg=vcpkg 升级失败。原因\: {0}
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade.successful=Git 拉取和 vcpkg 更新成功。已更新的软件包\:\n{0}
vcpkg.toolwindow.task.git.update.and.vcpkg.upgrade.successful.no.packages=Git 拉取和 vcpkg 升级成功，没有要更新的软件包
vcpkg.toolwindow.task.install.failed=安装失败。原因\:\n{0}
vcpkg.toolwindow.task.install.manifest.failed=无法添加到 vcpkg.json\: {0}
vcpkg.toolwindow.task.install.manifest.successful=软件包已添加到 vcpkg.json
vcpkg.toolwindow.task.install.successful.top=安装成功。已安装的软件包\:\n{0}
vcpkg.toolwindow.task.install.vcpkg=安装 vcpkg
vcpkg.toolwindow.task.installed.failed=已安装内容搜索失败。原因\:\n{0}
vcpkg.toolwindow.task.installed.successful=已成功加载的已安装软件包列表
vcpkg.toolwindow.task.query.failed=搜索失败。原因\:\n{0}
vcpkg.toolwindow.task.remove.failed=移除失败。原因\:\n{0}
vcpkg.toolwindow.task.remove.manifest.failed=无法从 vcpkg.json 中移除\: {0}
vcpkg.toolwindow.task.remove.manifest.successful=软件包已从 vcpkg.json 中移除
vcpkg.toolwindow.task.remove.package.manager=移除 {0}
vcpkg.toolwindow.task.remove.package.manager.asked.to.delete.but.there.is.nothing.to.delete=有文件需要删除，但没有可删除的内容
vcpkg.toolwindow.task.remove.package.manager.error.on.deleting=删除时发生未知错误
vcpkg.toolwindow.task.remove.package.manager.failed=移除软件包管理器失败\: {0}
vcpkg.toolwindow.task.remove.package.manager.success=已成功移除软件包管理器
vcpkg.toolwindow.task.remove.successful.no.packages=没有要移除的软件包
vcpkg.toolwindow.task.remove.successful.top=移除成功。已移除的软件包\:\n{0}
vcpkg.toolwindow.task.start.check.folder.is.not.empty=“{0}”必须是空目录或 vcpkg 仓库
vcpkg.toolwindow.task.start.check.folder.is.not.exist.or.not.folder=“{0}”不存在或不是目录
vcpkg.toolwindow.task.start.check.folder.is.not.folder=“{0}”不是目录
vcpkg.toolwindow.task.start.package.manager=正在启动软件包管理器\: {0}
vcpkg.toolwindow.task.start.package.manager.failed=无法启动软件包管理器
vcpkg.toolwindow.task.start.package.managers=正在启动软件包管理器
vcpkg.toolwindow.task.successful.more=和 {0} 个其他软件包
vcpkg.toolwindow.task.update.failed=更新失败。原因\:\n{0}
vcpkg.toolwindow.task.update.git.repository=正在更新 Git 仓库
vcpkg.toolwindow.task.update.git.repository.failed=更新 Git 仓库失败。原因\:\n{0}
vcpkg.toolwindow.task.update.git.repository.successful=Git 仓库更新成功
vcpkg.toolwindow.task.update.manifest.failed=无法更新 vcpkg.json\: {0}
vcpkg.toolwindow.task.update.manifest.successful=vcpkg.json 更新成功
vcpkg.toolwindow.task.update.packages=正在更新软件包
vcpkg.toolwindow.task.update.successful=更新成功。软件包可以更新\:\n{0}
vcpkg.toolwindow.task.update.successful.no.packages=没有要更新的软件包
vcpkg.toolwindow.task.upgrade.failed=升级失败。原因\:\n{0}
vcpkg.toolwindow.task.upgrade.packages=正在升级软件包
vcpkg.toolwindow.task.upgrade.successful=更新成功。已更新的软件包\:\n{0}
vcpkg.toolwindow.task.upgrade.successful.no.packages=没有要升级的软件包
wait.until.install.package.manager=正在安装软件包管理器…
