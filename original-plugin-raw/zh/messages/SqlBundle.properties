sql.inspections.group.name=SQL
sql.quickfix.family=SQL
intentions.category.sql=SQL

sql.inspections.group.name.mssql=SQL Server
sql.inspections.group.name.mysql=MySQL
sql.inspections.group.name.oracle=Oracle
sql.inspections.group.name.postgres=PostgreSQL

sql.code.style.group.display.name=SQL
sql.code.style.group.description=基于 SQL 的代码样式集。

code.style.ui.ddl=DDL
code.style.short.with.uppercase=使用大写缩写
code.style.short.with.lowercase=使用小写缩写

sql.ui.type.none=无
sql.ui.type.reference=引用
sql.ui.type.all.languages=所有

sql.template.editor.help=帮助
sql.template.editor.example.name=示例名称: {0}

inspection.name.identifier=标识符应加引号
inspection.name.resolve=未解析的引用
inspection.name.type=类型兼容性
inspection.name.unused=未使用的变量
inspection.name.unused.subquery.item=未使用的子查询项
inspection.name.insert.values=VALUE 子句基数
inspection.name.ambiguous.column=不明确的引用
inspection.name.dialect=SQL 方言检测
inspection.name.current.schema=已内省当前控制台架构
inspection.name.storage=SQL 源修改检测
inspection.name.no.datasources=未配置数据源
inspection.name.derived.table=每个派生表都应具有别名
inspection.name.should.be.in.group.by=列应在 group by 子句中
inspection.name.constant.condition=恒定条件
inspection.name.constant.expression=常量表达式
inspection.name.auto_increment.duplicate=自动增量重复
inspection.name.drop.indexed.column=索引依赖于列
inspection.name.deprecated.type=弃用的类型
inspection.name.add.not.null=添加没有默认值的非 null 列
inspection.name.using.column.check=检查 using 子句列
inspection.name.null.comparison=null 比较
inspection.name.signature=函数签名
inspection.side.effect.statements=具有副作用的语句
inspection.name.delete.update.without.where=不带 where 子句的删除或更新语句
inspection.name.error.handling=SQL 错误处理
inspection.name.join.without.on='delete' 语句中的 'join' 子句不安全
inspection.name.unreachable.code=不可到达的代码
inspection.name.illegal.cursor.state=非法光标状态
inspection.name.named.argument=应使用命名实参
inspection.name.call.notation=使用命名实参和位置实参
inspection.name.goto=使用 GOTO 语句
inspection.name.suspicious.trigger=触发器中的可疑代码
inspection.name.redundant.ordering=冗余排序方向
inspection.name.aggregate.problems=与聚合相关的问题
inspection.name.case.conditional=使用 CASE 代替条件函数，反之亦然
inspection.name.case.coalesce=使用 CASE 代替 COALESCE 函数，反之亦然
inspection.name.truncation=隐式字符串截断
inspection.name.redundant.alias=冗余别名表达式
inspection.name.redundant.limit=查询中的冗余行限制
inspection.name.multiple.limit=查询中的多个行限制/偏移子句
inspection.name.insert.generated=插入到生成的列中
inspection.name.duplicating.column=SELECT 中的重复列名
inspection.name.long.identifiers=标识符过长
inspection.name.redundant.else.null=冗余 ELSE NULL 子句
inspection.name.insert.null.not.null=将 NULL 插入 NOT NULL 列
inspection.name.redundant.coalesce=COALESCE 调用中的冗余代码
inspection.name.unicode=SQL 中的 Unicode 用法
inspection.name.unused.cte=未使用的通用表表达式
inspection.name.missing.column.aliases=缺少列别名
inspection.name.misleading.references=误导性引用
inspection.name.missing.return=缺少 return 语句
inspection.name.transaction.in.trigger=在触发器中使用事务管理语句
inspection.name.date.time.literal=格式错误的日期/时间文字
inspection.name.overload=重载错误
inspection.name.unmatched.forward=不含定义的前向声明
inspection.name.missing.body=缺少软件包/对象类型规范的主体
inspection.name.shadowing.alias=列被别名隐藏

inspection.name.mysql.parsing=8.0 以前的版本中不受支持的语法
inspection.name.mysql.load.data.path=LOAD 语句路径
inspection.name.pg.select.from.procedure=Postgres: 从过程调用中 select

inspection.name.mssql.builtin=内置函数
inspection.name.mssql.order.by=查询中的 ORDER BY

dialog.sql.dialects.caption=<html>要更改文件、目录或整个项目使用的 SQL 方言 {0}，请根据需要添加其路径，然后从下拉列表中选择一种方言。{1} 方言可能无法使用高级编码辅助。<br></html>
dialog.sql.dialects.value.title=SQL 方言
dialog.sql.dialects.override.question=以递归方式覆盖 SQL 方言?
dialog.sql.dialects.override.title=SQL 方言
sql.dialects.configurable=SQL 方言
dialog.sql.resolve.caption=<html>要为文件、目录或整个项目配置非限定 SQL 名称解析，请根据需要添加其路径，然后在下拉列表中选择所需的数据源、数据库和架构。<br></html>
dialog.sql.resolve.value.title=解析范围
dialog.sql.resolve.override.question=以递归方式覆盖解析范围?
dialog.sql.resolve.override.title=SQL 解析范围
sql.resolve.configurable=SQL 解析范围

# inspection error messages
unable.to.resolve.symbol.0=无法解析符号 ''{0}''
unable.to.resolve.symbol.0.1=无法解析 {0} ''{1}''
unable.to.resolve.synonym.target=无法解析同义词目标
identifier.expected=应为标识符
0.expected=应为 ''{0}''
one.of.expected.0=应为以下之一: {0}
0.unexpected=意外的 ''{0}''
quickfix.change.dialect.family.text=更改 SQL 方言
incompatible.types=''{0}'' 与 ''{1}'' 不兼容
already.exists=''{0}'' 已存在。
duplicate.column=重复列 ''{0}''
expected.boolean.expression=需要布尔表达式
unknown.function=未知数据库函数 ''{0}''
column.alias.required=''{0}'' 需要列别名
unexpected.token.0.expected.1=意外的 ''{0}''，应为 ''{1}''
operator.0.not.supported.by.dialect.1=''{1}'' 方言不支持 ''{0}'' 运算符
identifier.1.should.be.quoted=''{0}'' 是保留关键字，应加引号
identifier.should.start.with.letter=未加引号的标识符应以字母开头
incorrect.values.number=应为 {0} 个值，得到 {1} 个
ambiguous.column.short.reference=不明确的列引用: {0}
derived.table.alias=每个派生表都应具有别名
column.should.be.in.group.by=选择列表中的列 ''{0}'' 无效，因为它未包含在聚合函数或 GROUP BY 子句中
columns.should.be.in.group.by=选择列表中的列 ''{0}'' 无效，因为它们未包含在聚合函数或 GROUP BY 子句中
condition.always.true=条件 ''{0}'' 始终为 ''true''
condition.always.false=条件 ''{0}'' 始终为 ''false''
delete.without.where=不带 'where' 的 'Delete' 语句会清除表中的所有数据
update.without.where=不带 'where' 的 'Update' 语句会立刻更新所有表行
update.without.where.skip.self.refs=如果查询中存在自引用(即 set id = id + 1)，不发出警告
update.without.where.skip.limit=如果存在 'limit' 子句，不发出警告
join.without.on='delete' 内的 'join' 子句不安全: 'on' 或 'where' 应引用左侧的表
subquery.item.never.used=子查询项 ''{0}'' 从未使用
subquery.item.star.includes.unused=''select *'' 导致未使用的列: {0}。考虑替换为 ''{1}''

help.file.0.not.found=找不到帮助文件 ''{0}''
action.text.create.sql.datasource=DDL 数据源
sources.tab.title=源
generation.tab.title=新建文件布局
action.add.ddl.files.text=DDL 文件
dialog.title.choose.ddl.files=选择要添加的 DDL 文件
generic.sql.dialect.usage.error.message={0} 使用 {1} 方言

sql.color.page.title=SQL

quickfix.name.split.string.literal=拆分字符串文字
quickfix.name.quote.identifier=为标识符加引号
quickfix.name.unquote.identifier=为标识符去除引号
quickfix.name.add.to.group.by=添加到 GROUP BY 子句
quickfix.name.introduce.alias=引入别名
quickfix.name.create.table.definition=创建表定义
quickfix.name.create.table.declaration=创建临时表声明
quickfix.name.add.definition=添加定义
quickfix.name.replace.deprecated.type=替换弃用的类型
quickfix.name.add.as=添加 AS 关键字
quickfix.name.add.comma=插入逗号
sql.framework.support.provider.title=SQL 支持
sql.framework.support.provider.project.default=项目默认设置
label.text.default.dialect=默认方言(&D):

surround.with.quote.template=加引号
surround.with.select.template=从以下位置选择 * …

action.sql.ExtractFunctionAction.text=提取例程…
action.sql.ImplementMembersAction.text=实现成员...
action.sql.IntroduceAliasAction.text=表别名…
action.sql.SelectCurrentStatement.text=选择当前语句
action.sql.ExtractNamedQueryAction.text=子查询为 CTE
action.sql.ChangeDialect.toolbar.text=更改 SQL 方言
action.sql.ChangeDialect.text=更改 SQL 方言
settings.sql.title=SQL
settings.join.clauses=JOIN 子句
settings.use.aliases.in.completion.for.join=在 JOIN 补全中使用别名
settings.invert.order.of.operands.in.auto.generated.on.clause=反转自动生成的 ON 子句中操作数的顺序
settings.suggest.non.strict.foreign.keys.based.on.the.name.matching=根据名称匹配建议非严格外键
settings.table.aliases=表别名
settings.automatically.add.aliases.when.completing.table.names=在补全表名时自动添加别名
settings.suggest.alias.names.in.completion.after.table.names=在表名之后的补全中建议别名
settings.suggest.search.path.objects.only=仅来自当前搜索路径的对象
settings.automatically.suggest.all.objects.in.completion=所有可用架构中的所有对象
settings.suggest=建议:
settings.suggest.current.scope.objects=当前范围中的对象
settings.custom.aliases=自定义别名:
settings.no.custom.aliases=无自定义别名
settings.add.alias=添加别名
settings.remove.alias=移除别名
settings.no.column.reference.rules=无列引用规则
settings.column.pattern=列模式
settings.target.column.pattern=目标列模式
settings.add.rule=添加规则
settings.remove.rule=移除规则
settings.check=检查…
settings.test.rule=测试规则
settings.column.name=名称
settings.column.alias=别名
settings.folding.put.underscores.inside.numeric.literals=在数字文字(6 位或更长)内部添加下划线
settings.folding.title=SQL
settings.smart.keys.insert.string.concatenation.on.enter=按 Enter 时插入字符串串联
settings.smart.keys.close.code.blocks.on.enter=按 Enter 时结束代码块
settings.smart.keys.qualify.object.on.code.completion.and.refactorings.with=在代码补全和重构时通过以下方式限定对象:
settings.smart.keys.database.schema=数据库/架构：
settings.smart.keys.table=表:
settings.smart.keys.alias=别名:
settings.smart.keys.join.condition=联接条件:
settings.smart.keys.always=始终
settings.smart.keys.on.collisions=遇到冲突时
settings.smart.keys.never=从不
settings.inlay.in.insert.values=在 INSERT 值中
settings.inlay.in.select.expressions=在 SELECT 表达式中
settings.inlay.for.references=对于 * 引用
settings.inlay.for.set.operations=对于集合运算(UNION、INTERSECT、EXCEPT)
settings.inlay.show.column.names=显示列名:
inlay.parameters.sql.show.column.names.in.insert.values=显示 INSERT 语句中的列名。只能在查询控制台中使用，不能作为语言注入使用。
inlay.parameters.sql.show.column.names.in.select=显示 SELECT 语句中具有设置列名的上下文的列名。例如，CREATE VIEW 和 INSERT 内的 SELECT 语句。只能在查询控制台中使用，不能作为语言注入使用。
inlay.parameters.sql.show.column.names.for.asterisk=显示 SELECT 语句中具有设置列名的上下文的星号(*)引用的列名。例如，CREATE VIEW 和 INSERT 内的 SELECT 语句。只能在查询控制台中使用，不能作为语言注入使用。
inlay.parameters.sql.show.column.names.for.set.operations=当 SELECT 语句中的列用在 UNION、INTERSECT 和 EXCEPT 等集合运算中时，显示它们的名称。只能在查询控制台中使用，不能作为语言注入使用。
settings.code.style.common=通用
settings.code.style.keywords=关键字
settings.code.style.types.builtin=内置类型
settings.code.style.types.custom=自定义类型
settings.code.style.identifiers=标识符
settings.code.style.aliases=别名
settings.code.style.builtIns=内置函数
settings.code.style.quoted.identifiers=带引号的标识符
settings.code.style.use.original.case=使用原始大小写
settings.code.style.identifier.quotation=标识符引用
settings.code.style.quotation.character=引号
settings.code.style.align.the.first.word.of.clause=对齐子句的第一个单词
settings.code.style.collapse.short.statement=收起短语句
settings.code.style.place.into.on.the.new.line=将 INTO 置于新行中
settings.code.style.place.into.clause.elements.on=将 INTO 子句元素置于
settings.code.style.place.values.clause.elements.rows.on=将 VALUES 子句元素(行)置于
settings.code.style.place.columns.or.values=放置列或值
settings.code.style.wrap.columns.or.values=换行列或值
settings.code.style.place.comma=放置逗号
settings.code.style.wrap.subqueries=换行子查询
settings.code.style.keep.elements.on.one.line.if.less=如果 ≤ 此值，则将元素保持在同一行中
settings.code.style.use.as=使用 AS
settings.code.style.place.join.in.join-only.queries.under=将仅联接查询中的 JOIN 置于下方
settings.code.style.place.on.using.under=将 ON/USING 置于下方
settings.code.style.place.top.level.and.or=放置顶层 AND/OR
settings.code.style.place.subquery=放置子查询
settings.code.style.alter.instruction.wrap=换行更改指令
settings.code.style.alter.instruction.indent=缩进更改指令
settings.code.style.alter.instruction.align=对齐更改指令
settings.code.style.alter.item.wrap=换行更改的条目
settings.code.style.alter.item.indent=缩进更改的条目
settings.code.style.alter.item.align=对齐更改的条目
settings.code.style.minimum.blank.lines.between.declaration=声明之间的最少空白行数
settings.code.style.maximum.blank.lines.between.declaration=声明之间的最多空白行数
settings.code.style.keep.blank.lines.in.code=保留代码中的空白行
settings.code.style.wrap.variables=换行变量
settings.code.style.use.spaces.around.operators=在运算符周围使用空格
settings.code.style.align.end=对齐 END
settings.code.style.keep.section.elements.under.section.header=保留部分标题下的部分元素
settings.code.style.align.section.elements=对齐部分元素
settings.code.style.align.line.comments.at.right.of.elements=对齐元素右侧的行注释
settings.code.style.put.spaces.within.parentheses=在括号内添加空格
settings.code.style.collapse.short.multi.row.values=收起较短的多行值
settings.code.style.align.equals=对齐 `=`
settings.code.style.new.line.after.all.distinct=在 ALL、DISTINCT 后换行
settings.code.style.align.as=对齐 AS
settings.code.style.select.asterisk.regular=将星号视为常规元素
settings.code.style.wrap.the.first.join=换行第一个 JOIN
settings.code.style.wrap.the.next.join=换行下一个 JOIN
settings.code.style.indent.join=缩进 JOIN
settings.code.style.align.joined.tables=对齐联接的表
settings.code.style.align.table.aliases=对齐表别名
settings.code.style.wrap.on.using=换行 ON/USING
settings.code.style.align.asc.desc=对齐 ASC/DESC
settings.code.style.align.defaults=对齐 defaults
settings.code.style.align.nullabilities=对齐为 Null 性
settings.code.style.wrap.constraint=换行 CONSTRAINT
settings.code.style.wrap.key.check=换行 KEY/CHECK
settings.code.style.wrap.references=换行 REFERENCES
settings.code.style.wrap.cascade.and.deferrability=换行 cascade 和 deferrability
settings.code.style.indent.content=缩进内容
settings.code.style.wrap.the.beginning.of.the.query=换行查询的开头
settings.code.style.indent.query=缩进查询
settings.code.style.wrap.first.option=换行第一个选项
settings.code.style.wrap.next.option=换行下一个选项
settings.code.style.indent.options=缩进选项
settings.code.style.align.options=对齐选项
settings.code.style.script.semicolon.wrap=换行命令末尾的分号
settings.code.style.script.follows.blank.line=命令后面跟随空行
settings.code.style.wrap.every.statement=包装每条语句
settings.code.style.wrap.section=换行部分
settings.code.style.align.assignments=对齐赋值
settings.code.style.align.expressions=对齐表达式
settings.code.style.align.lineComments=对齐行注释(仅限MS SQL)
settings.code.style.align.types=对齐类型
settings.code.style.wrap.as=换行 AS
settings.code.style.wrap.opening=换行左 $$
settings.code.style.wrap.the.content.after.opening=换行左 $$ 后面的内容
settings.code.style.wrap.before.closing=在右 $$ 的前面换行
settings.code.style.wrap.options.after.closing=换行右 $$ 后面的选项
settings.code.style.wrap.else=换行 ELSE
settings.code.style.wrap.inner.code=换行内部代码
settings.code.style.indent.then.and.else=缩进 THEN 和 ELSE
settings.code.style.indent.end.if=缩进 END IF
settings.code.style.wrap.loop=换行 LOOP
settings.code.style.indent.loop=缩进 LOOP
settings.code.style.indent.end.loop=缩进 END LOOP
settings.code.style.collapse.when.short=较短时收起
settings.code.style.add.space.before.left.parentheses=在 `(` 前面添加空格
settings.code.style.place.comma.to.begin=放置逗号以开始
settings.code.style.align.operands.in.binary.expressions=对齐二进制表达式中的操作数
settings.code.style.space.within.parenthesized.sub.expressions=括号中子表达式中的空格
settings.code.style.space.within.parentheses=括号中的空格
settings.code.style.space.before.comma=逗号前面的空格
settings.code.style.space.after.comma=逗号后面的空格
settings.code.style.wrap.when=换行 WHEN
settings.code.style.indent.when.if.wrapped=换行时缩进 WHEN
settings.code.style.wrap.then=换行 THEN
settings.code.style.align.then=对齐 THEN
settings.code.style.align.else.under.then.when.then.aligned=对齐 TEHN 时，也对齐 THEN 下的 ELSE
settings.code.style.keep.new.line.after.then.else=在 THEN、ELSE 后换行
settings.code.style.collapse.short.clause=收起短子句
settings.code.style.inherit.general.sql.style=继承常规 SQL 样式
settings.code.style.disable.formatting=禁用格式设置
settings.code.style.word.case=单词大小写
settings.code.style.quotation=引号
settings.code.style.script = 脚本
settings.code.style.imp.common=命令式通用功能
settings.code.style.insert.statement.and.values.clause=INSERT 语句和 VALUES 子句
settings.code.style.update.statement=UPDATE 语句
settings.code.style.with.clause=WITH 子句
settings.code.style.select.clause=SELECT 子句
settings.code.style.from.clause=FROM 子句
settings.code.style.where.and.having.clauses=WHERE 和 HAVING 子句
settings.code.style.group.by.and.order.by.clauses=GROUP BY 和 ORDER BY 子句
settings.code.style.subquery=子查询
settings.code.style.table.create=CREATE TABLE
settings.code.style.table.alter=ALTER TABLE
settings.code.style.table.create.alter=CREATE TABLE 或 ALTER TABLE
settings.code.style.create.schema=CREATE SCHEMA
settings.code.style.constraint=CONSTRAINT
settings.code.style.views=视图
settings.code.style.postfix.options=后缀选项
settings.code.style.declared.variables=声明的变量
settings.code.style.routine.arguments=例程实参
settings.code.style.routine.statement=例程语句
settings.code.style.if.then.else=IF … THEN … ELSE
settings.code.style.loops=循环
settings.code.style.code=代码
settings.code.style.cortege=括号内的值列表
settings.code.style.binary.expression=二进制表达式
settings.code.style.function.or.procedure.call=函数或过程调用
settings.code.style.case.clause=CASE 子句
settings.code.style.expressions=表达式
settings.code.style.queries=查询
settings.code.style.case=大小写
settings.code.style.wrapping=换行
settings.code.style.do.not.change=不更改
settings.code.style.as.in.common=与通用中相同
settings.code.style.yes=是
settings.code.style.no=否
settings.code.style.auto=自动
settings.code.style.to.left=至左侧
settings.code.style.to.left.with.indent=至左侧并缩进
settings.code.style.to.right=至右侧
settings.code.style.to.begin=至开头
settings.code.style.to.end=至结尾
settings.code.style.at.the.end=在结尾
settings.code.style.to.lower=改为小写
settings.code.style.to.upper=改为大写
settings.code.style.to.title=改为首字母大写
settings.code.style.in.the.middle=在中间
settings.code.style.place.the.opening.parenthesis=左括号放置
settings.code.style.place.elements=元素放置
settings.code.style.place.the.closing.parenthesis=右括号放置
settings.code.style.wrap.elements=元素换行
settings.code.style.place.elements.on=将元素放置在
settings.code.style.place.clause.elements.on=将子句元素放置在
settings.code.style.on.the.same.line=在同一行中
settings.code.style.aligned=对齐
settings.code.style.indented=缩进
settings.code.style.same.line.aligned=同一行并对齐
settings.code.style.wrapped.unindented=换行并且不缩进
settings.code.style.wrapped.aligned=换行并对齐
settings.code.style.wrapped.indented=换行并且缩进
settings.code.style.under.opening=在左括号下
settings.code.style.under.elements=在元素下
settings.code.style.unindented=不缩进
settings.code.style.as.keywords=As 关键字
settings.code.style.as.identifiers=同标识符
settings.code.style.chop=截断
settings.code.style.chop.if.long=如果过长则截断
settings.code.style.wrap.if.long=过长则换行
settings.code.style.same.line=同一行
settings.code.style.new.line=新行
settings.code.style.never=从不
settings.code.style.always=始终
settings.code.style.subqueries.only=仅子查询
settings.code.style.table.as.usual=表(照常)
settings.code.style.FROM.indented=FROM 并缩进
settings.code.style.FROM=FROM
settings.code.style.JOIN=JOIN
settings.code.style.JOIN.indented=JOIN 缩进
settings.code.style.JOIN.indented.cont=JOIN 连续缩进
settings.code.style.table=表
settings.code.style.table.indented=表并缩进
settings.code.style.align.with.CASE=与 CASE 对齐
settings.code.style.align.with.WHEN=与 WHEN 对齐
settings.code.style.add.always=始终添加
settings.code.style.remove=移除
settings.code.style.quote=加引号
settings.code.style.unquote=去除引号
settings.code.style.double.quotes.or.another="双引号" 或另一个
settings.code.style.double.quotes.only=仅 "双引号"
settings.code.style.double.quotes.or.brackets="双引号" 或 [中括号]
settings.code.style.double.quotes.or.grave.accent="双引号" 或 `重音符`
settings.code.style.brackets.or.double.quotes=[中括号] 或 "双引号"
settings.code.style.brackets.only=仅 [中括号]
settings.code.style.grave.accents.or.double.quotes=`重音符` 或 "双引号"
settings.code.style.grave.accents.only=仅 `重音符`
settings.code.style.preview.dialect=预览方言:
preview.update=预览更新
preview.delete=预览删除
progress.details.interrupted=已中断
progress.text.building=正在构建 `{0}`
dialog.message.cannot.perform.refactoring=无法执行重构
dialog.title.cannot.perform.refactoring=无法执行重构
dialog.message.only.primitives.are.supported=仅支持基元类型的表达式
dialog.message.only.primitives.and.tables.are.supported=仅支持基元类型或表类型的表达式
dialog.message.only.queries.and.froms.are.supported=仅支持查询和 FROM 表达式
command.name.extract.variable=提取变量
data.source.chooser.title=数据源
intention.name.add.column=将列 ''{0}'' 添加到 ''{1}'' 表
intention.name.add.table=将表添加到数据源
intention.name.declare.variable=声明变量
intention.name.declare.pl.variable=声明 PL 变量
intention.name.introspect.schema.fix=内省 {0}
intention.name.refresh.schema.fix=刷新{0}
intention.name.qualify.fix=限定引用
intention.name.attach.session=附加会话
intention.name.choose.schema=选择架构
intention.name.go.to.sql.resolution.scopes=转到 SQL 解析范围
inspection.message.unable.to.resolve.in.this.context=在此上下文无法解析 *
inspection.message.invalid.column.index=列索引无效
sql.resolve.inspection.checkbox.suppress.for.quoted=对带引号的标识符禁止，它们可能被视为字符串
inspection.message.sql.dialect.not.configured=未配置 SQL 方言。
intention.name.change.dialect.to=将方言更改为…
intention.name.use.dialect=使用{0}
global.sql.dialect.setting.text=全局 SQL 方言
sql.code.style.settings.tab.title=代码生成
SqlTypePanel.label.fragment=片段:
SqlTypePanel.label.in.sql.dialects=在 SQL 方言中:
SqlTypePanel.label.type.pattern=类型模式:
command.name.introduce.variable=引入变量
SqlQueryParametersProvider.query.parameter=查询形参
SqlStructureViewBuilderProvider.action.ddl.statements.text=DDL 语句
SqlStructureViewBuilderProvider.action.dml.statements.text=DML 语句
SqlStructureViewBuilderProvider.action.select.statements.text=Select 语句
SqlStructureViewBuilderProvider.action.other.text=其他
SqlStructureViewBuilderProvider.action.group.by.type.text=按类型分组
attribute.descriptor.external.command=外部命令
attribute.descriptor.comment=注释
attribute.descriptor.database.object=数据库对象
attribute.descriptor.schema=模式
attribute.descriptor.table=表
attribute.descriptor.column=列
attribute.descriptor.outer.query.column=外部查询列
attribute.descriptor.type=类型
attribute.descriptor.procedure.or.function=过程或函数
attribute.descriptor.parameter=形参
attribute.descriptor.variable=变量
attribute.descriptor.label=标签
attribute.descriptor.table.or.column.alias=表或列别名
attribute.descriptor.synthetic.entity=合成实体
attribute.descriptor.number.token=数字令牌
attribute.descriptor.string.token=字符串令牌
attribute.descriptor.keyword=关键字
attribute.descriptor.semicolon=分号
attribute.descriptor.comma=逗号
attribute.descriptor.dot=点
attribute.descriptor.parentheses=圆括号
attribute.descriptor.brackets=方括号
attribute.descriptor.braces=大括号
attribute.descriptor.bad.token=错误令牌
SqlTypeBasedInjectionSupport.action.sql.injection.text=SQL 注入
SqlTypeBasedInjectionSupport.action.sql.type.injection.text=SQL 类型注入
SqlTypeBasedInjectionSupport.new.sql.injection=新 SQL 注入
popup.title.go.to.specification=转到规范
popup.title.go.to.super.type=转到父类型
popup.title.go.to.body=转到主体
popup.title.go.to.routine.definition=转到例程定义
SqlAnnotator.inspection.message.outer.query.column=外部查询列
SqlGenerateGroup.action.creates.description=创建 {0}
SqlGenerateGroup.action.block.text=块
SqlNavigationLineMarkerProvider.tooltip=<html><body>{0}<br><div style=''margin-top: 5px''><font size=''2''>点击{2, choice, 0#或按 {1}|1#} 导航</font></div></body></html>
SqlPasteProvider.command.name.pasting.database.object.references=粘贴数据库对象引用
SqlRecursiveCallLineMakerProvider.gutter.name.recursive.call=递归调用
parsing.error.expression.expected=应为 <expression>
parsing.error.t.or.space.expected=应为 'T' 或空格
add.type.element=添加类型元素
hint.text.no.sql.expression.found=未找到 SQL 表达式
intention.name.add.default.value=添加 DEFAULT 值
inspection.message.column.can.not.be.added.because.it.s.mandatory.not.null.but.unknown.how.to.fill.it.for.existing.rows=无法添加该列，因为它必不可少(非 null)，但不知如何针对现有行进行填充。
inspection.message.only.one.auto.increment.column.it.must.be.defined.as.key=仅一个自动增量列，必须将其定义为键
inspection.message.column.specified.in.using.clause.does.not.exist.in.choice.left.right.table={1, choice, 0#左|1#右} 表中没有在 using 子句中指定的列 ''{0}''
inspection.message.attempt.to.dropping.indexed.column.choice.drop.index.before.dropping.this.column=尝试删除索引列。{1, choice, 0#|1#删除“{0}”''索引后再删除此列。}
inspection.message.attempt.to.dropping.indexed.column.choice.drop.key.before.dropping.this.column=尝试删除索引列。{1, choice, 0#|1#删除“{0}”''键后再删除此列。}
inspection.message.left.right.operands.should.have.same.number.columns.got=左右操作数的列数应相同，但得到的是 {0} 和 {1}
inspection.message.following.columns.have.no.computed.default.value.must.be.listed.explicitly=以下列没有计算的值/默认值，必须明确列出:\n{0}
inspection.message.suspicious.comparison.with.null.probably.operator.should.be.used=与 NULL 的比较可疑，或许应当使用 {0} 运算符
intention.family.name.use.operator=使用 {0} 运算符
popup.title.add.to.view=添加到视图
disable.read.only.mode=禁用只读模式
inspection.message.this.statement.may.cause.side.effects=此语句可能导致副作用
inspection.message.this.statement.will.lead.to.modification.data=此语句将导致数据修改
inspection.message.this.statement.will.lead.to.modification.database=此语句将导致数据库修改
inspection.message.this.routine.may.cause.side.effects=此例程可能会导致副作用
inspection.message.could.not.take.such.arguments={0} 无法接受此类实参
inspection.message.column.alias.required.for=''{0}'' 需要列别名
inspection.message.never.used={0} {1} 从未使用
checkbox.don.t.warn.if.there.exists.join.clause.with.condition=存在带有条件的 'join' 子句时不发出警告
checkbox.don.t.warn.if.statement.applied.to.temporary.table=在语句应用于临时表时不发出警告
inspection.message.current.not.introspected=当前 {0} 未内省。
inspection.message.choice.matches.match.best=\ {0}{1, choice, 0# 匹配|1# 匹配}为最佳。
inspection.message.no.data.sources.are.configured=没有配置任何数据源来运行此 SQL 并提供高级代码辅助。{1, choice, 0# 通过问题菜单({0})禁用此检查。|1#}
intention.family.name.configure.data.source=配置数据源
inspection.message.object.source.code.may.be.invalid=对象源代码可能无效。
intention.family.name.synchronize=同步
intention.family.name.disable.check=禁用检查
intention.family.name.revert.local.changes=还原本地变更
intention.family.name.forget.local.changes=忘记本地变更
notification.content.failed.to.revert=无法还原 {0}
intention.family.name.regenerate=重新生成
intention.family.name.keep.local.changes=保留本地变更
notification.content.failed.to.merge=无法合并 {0}
intention.family.name.merge=合并
intention.family.name.restore.in.database=在数据库中还原
inspection.message.cached.object.differs.from.object.in.database=缓存的对象与数据库中的对象不同
inspection.message.object.dropped.in.database=对象在数据库中被删除
inspection.message.object.has.changed.in.database=对象在数据库中已更改
inspection.message.object.has.changed.in.database.but.you.have.local.changes=对象在数据库中已更改，但是您有本地变更
intention.name.for.file=对文件 {0}
popup.title.statements=语句
intention.name.for.statement=对语句 {0}
intention.name.suppress=抑制
intention.name.suppress.references.to=禁止对{0} ''{1}'' 的引用
intention.family.name.expand.column.list=展开列列表
intention.family.extract.named.query=将子查询提取为 CTE
intention.family.inline.named.query=内联 CTE
inject.by.type=按类型注入
popup.title.qualify.with=限定方式…
command.name.qualify.identifier=限定标识符
intention.family.name.qualify.identifier=限定标识符
command.name.split.string.literal=拆分字符串文字
intention.family.name.unqualify.identifier=取消限定标识符
label.sql.code=任意 SQL 代码
label.all.dialects=所有方言
label.sql.statements=任意 SQL 语句
label.applicable.sql.dialects=适用的 SQL 方言:
command.name.introduce.cte=引入 CTE
command.name.extract.cte=提取 CTE
dialog.message.no.usages.found=未找到任何用法
command.name.inline.cte=内联 CTE
dialog.title.inline.cte=内联 CTE
dialog.message.alias.not.identifier=别名不是标识符
dialog.message.failed.to.find.with.expression=找不到 with 表达式
dialog.message.unexpected.reference.type=意外的引用类型
dialog.message.nothing.to.inline=没有要内联的内容
dialog.message.too.many.places.to.inline=要内联之处太多
dialog.message.with.clause.can.not.be.found=找不到 with 子句
dialog.message.can.not.inline.recursive.cte=无法内联递归 CTE
dialog.message.with.clause.without.query=with 子句无查询
popup.title.identifier.should.start.with=标识符应以 `{0}`开头
FkRuleCheckerDialog.border.title.rule=规则
FkRuleCheckerDialog.label.column.pattern=列模式: 
FkRuleCheckerDialog.label.target.column.pattern=目标列模式: 
FkRuleCheckerDialog.border.title.example=示例
FkRuleCheckerDialog.label.source.column=源列: 
FkRuleCheckerDialog.label.generated.pattern=生成的模式: 
FkRuleCheckerDialog.label.target.table.column=目标表.列: 
FkRuleCheckerDialog.rule.debugger=规则调试器
FkRuleCheckerDialog.tooltip.should.match.column.pattern=应匹配 `列模式`: {0}
FkRuleCheckerDialog.tooltip.should.match.generated.pattern=应匹配 `生成的模式`: {0}
intention.family.name.delete.element=删除元素
intention.family.name.delete=删除{0}
intention.family.name.rename.element=重命名元素
inspection.message.using.aggregate.free.condition.s.in.having.clause.might.be.inefficient.consider.moving.them.to.where=在 HAVING 子句中使用无聚合条件可能会导致效率低下。可以考虑将它们移至 WHERE 中
inspection.message.aggregate.calls.are.not.allowed.here=此处不允许聚合调用
inspection.message.nested.aggregate.calls.are.not.allowed=不允许嵌套的聚合调用
inspection.message.nondeterministic.value.column.neither.aggregated.nor.mentioned.in.group.by.clause=非确定值: 列 {0} 既未聚合，也未在 GROUP BY 子句中提及
inspection.message.column.must.be.either.aggregated.or.mentioned.in.group.by.clause=列 {0} 必须聚合或在 GROUP BY 子句中提及
intention.family.name.replace.with.call=替换为 ''{0}'' 调用
intention.family.name.replace.with.case.expression=替换为 CASE 表达式
checkbox.prefer.case.expressions.over.coalesce.function=CASE 表达式优先于 COALESCE 函数
inspection.message.call.can.be.replaced.with.case.expression={0} 调用可替换为 CASE 表达式
inspection.message.case.can.be.replaced.with.call=CASE 可替换为 ''{0}'' 调用
checkbox.prefer.case.expressions.over.if.functions=CASE 表达式优先于 IF 函数
inspection.message.column.name.specified.more.than.once=多次指定列名 ''{0}''
inspection.message.sqlstate.value.must.be.character.string.literal.may.not.start.with=SQLSTATE 值必须是 5 个字符长且不能以 '00' 开头的字符串文字
inspection.message.error.code.may.not.be.zero=错误代码可能不为零
inspection.message.undo.handlers.are.not.supported=不支持 UNDO 处理程序
inspection.message.raise.without.arguments.may.not.be.used.outside.exception.handler=没有实参的 RAISE 不得在异常处理程序之外使用
inspection.message.raise.error.code.already.specified=已指定 RAISE 错误代码
inspection.message.condition.used.in.signal.statement.must.be.associated.with.sqlstate.value=SIGNAL 语句中使用的条件必须与 SQLSTATE 值关联
inspection.message.duplicate.condition.information.item=重复条件信息条目: {0}
inspection.message.resignal.may.not.be.used.outside.condition.handler.context=不能在条件处理程序上下文之外使用 RESIGNAL
inspection.message.required.type.for.non.generated.column=非生成的列必须具有显式类型
checkbox.report.all.goto.statements=报告所有 GOTO 语句
checkbox.report.uses.goto.statements.to.exit.loop=报告使用 GOTO 语句退出循环的情况
checkbox.report.backward.goto.statements=报告后向 GOTO 语句
inspection.message.avoid.using.backward.goto.statements=避免使用后向 GOTO 语句
inspection.message.avoid.using.goto.statements.to.exit.loop=避免使用 GOTO 语句退出循环
inspection.message.avoid.use.goto.statements=避免使用 GOTO 语句
inspection.message.identifier.too.long.should.not.exceed.characters=标识符过长(不能超过 {0} 个字符)
inspection.message.cursor.might.not.have.been.closed=光标可能未关闭
inspection.message.cursor.might.not.have.been.open=光标可能未打开
intention.family.name.surround.with.set.identity.insert=使用 SET IDENTITY_INSERT 环绕
inspection.message.insertion.into.generated.column.not.supported=不支持插入到生成的列中
inspection.message.only.default.may.be.inserted.into.generated.column=只能将 DEFAULT 插入到生成的列中
inspection.message.insertion.into.identity.autoincrement.column.not.supported=不支持插入到标识/自动增量列中
inspection.message.only.default.may.be.inserted.into.identity.autoincrement.column=只能将 DEFAULT 插入到标识/自动增量列中
inspection.message.column.not.null=列 ''{0}'' 非 null
inspection.message.name.shadowed=名称被隐藏: ''{0}''
inspection.message.name.ambiguous.since.it.can.refer.to.both.table.column.routine.parameter=名称 ''{0}'' 不明确，因为它可能指向表列和例程形参
intention.family.name.introduce.alias=引入别名
inspection.message.missing.column.alias=缺少列别名
inspection.message.missing.return.statement=缺少 return 语句
inspection.message.multiple.limiting.clauses.are.not.allowed=不允许多个 limit 子句
inspection.message.multiple.offset.clauses.are.not.allowed=不允许多个 offset 子句
inspection.message.named.argument.should.be.used=应使用命名实参
inspection.message.positional.argument.after.named=位置实参不允许位于命名实参后面
intention.family.name.remove.alias=移除别名
inspection.message.remove.alias=移除别名
intention.family.name.replace.with.first.argument=替换为第一个实参
inspection.message.redundant.code.in.coalesce.call=COALESCE 调用中的冗余代码
inspection.message.redundant.else.null=冗余 ELSE NULL
inspection.message.clause.redundant.here=此处的 {0} 子句冗余
inspection.message.ordering.direction.redundant.here=此处的排序方向冗余
intention.family.name.increase.type.length=增加类型长度
inspection.message.string.will.be.truncated=字符串将被截断
inspection.message.this.statement.should.not.be.used.in.trigger.since.it.s.executed.in.context.enclosing.transaction=此语句不应在触发器中使用，因为它在封闭事务上下文中执行
inspection.message.will.always.be.empty={0} 始终为空。
intention.family.name.add.n.prefix=添加 N 前缀
inspection.message.unicode.strings.should.have.n.prefix=Unicode 字符串应具有 N 前缀
inspection.message.unreachable.code=不可到达的代码
inspection.message.unused.common.table.expression=未使用的通用表表达式
inspection.message.overload.conflicting.signatures=以下函数的签名冲突:
inspection.message.unmatched.forward=此前向声明没有定义
inspection.message.missing.package.body=含有子程序或游标的软件包必须有主体
inspection.message.missing.type.body=包含成员子程序的对象类型必须有主体
intention.family.name.store.table.relation=存储表关系
dialog.title.save.external.data.for=保存 {0} 的外部数据
intention.family.name.replace.between.expression.with.comparisons=将 BETWEEN 表达式替换为比较
intention.family.name.replace.comparison.with.between.expression=将比较替换为 BETWEEN 表达式
intention.family.name.replace.equality.checks.with.in.expression=将相等检查替换为 IN 表达式
intention.family.name.replace.in.expression.with.equality.checks=将 IN 表达式替换为相等检查
intention.family.name.replace.on.with.natural.join=将 ON 替换为 NATURAL JOIN
intention.family.name.replace.on.with.using=将 ON 替换为 USING
intention.family.name.replace.using.with.natural.join=将 USING 替换为 NATURAL JOIN
intention.family.name.replace.using.with.on=将 USING 替换为 ON
intention.family.name.replace.natural.join.with.on.clause=将 NATURAL JOIN 替换为 ON 子句
intention.family.name.replace.natural.join.with.using.clause=将 NATURAL JOIN 替换为 USING 子句
intention.family.name.flip.expression.operands=翻转表达式操作数
intention.family.add.grouped.column.to.select=向 SELECT 列表中添加 GROUP BY 列
intention.name.add.grouped.column.to.select=向 SELECT 列表中添加 ''{0}'' 列
flip.0.1.choice.0.may.change.semantics.1=翻转 ''{0}''{1, choice, 0# (可能会更改语义)|1#}
inline.table.alias=内联表别名
introduce.table.alias=引入表别名
intention.family.name.merge.insert.statements=合并 INSERT 语句
intention.name.merge.selected.insert.statements=合并所选 INSERT 语句
intention.name.merge.successive.insert.statements=合并连续的 INSERT 语句
intention.family.name.replace.column.name.with.ordinal.number=将列名替换为序数
intention.family.name.replace.column.number.with.name=将列编号替换为名称
intention.family.name.replace.distinct.with.group.by=将 DISTINCT 替换为 GROUP BY
intention.family.name.replace.group.by.with.distinct=将 GROUP BY 替换为 DISTINCT
intention.family.name.split.insert.statement=拆分 INSERT 语句
dialog.message.not.supported.for={1} 不支持 {0}
dialog.message.selected.fragment.must.be.valid.expression=所选片段必须为有效表达式
dialog.message.not.available.in.this.context={0} 在此上下文中不可用
dialog.message.no.valid.expressions.were.found=未找到有效的表达式
SqlExtractFunctionDialog.label.name=名称:
SqlExtractFunctionDialog.label.type=类型:
extract.routine=提取例程
extract.function=提取函数
introduce.variable=引入变量
sql.action.no.expression=找不到表达式
parse.error.one.of.expected=其中一个: 应为 {0}，但实际为 {1}
filetype.sql.dt.description=SQL 日期/时间
sql.dt.parse.unexpected.characters=意外的字符
sql.dt.parse.unexpected.end.of.string=字符串意外结束
sql.dt.parse.expected=应为 {0}
sql.dt.inspection.unknown.symbol=未知符号: {0}
code.style.predefined.Modern=现代
code.style.predefined.JoeCelko=Joe Celko
code.style.predefined.Allman=Allman (仅 DDL)
code.style.predefined.Whitesmiths=Whitesmiths (仅 DDL)
code.style.predefined.Egypt=埃及
code.style.predefined.OldIdea=旧 Idea
code.style.predefined.MsVsDdl=Visual Studio 数据库项目
suggest.alias.names.in.completion.after.table.names=在表名之后的补全中建议别名
collection.0.might.not.exist=集合 ''{0}'' 可能不存在
unknown.database.object.0.1=未知 {0}: {1}
inspection.message.fractional.part.is.rounded.off.unless.its.a.timestamp.literal=除非是时间戳文字，否则小数部分将四舍五入
inspection.message.concatenated.date.must.take.form.either.yymmdd.or.yyyymmdd=串联日期必须采用 YYMMDD 或 YYYYMMDD 形式
inspection.message.fractions.longer.than.digits.are.rounded.off=超过 6 位数的小数将四舍五入
inspection.message.field.must.be.between={0} 字段必须介于 {1} 到 {2} 之间
concatenated.time.literal.must.take.the.form.of.hhmmss=串联时间文字必须采用 HHMMSS 格式
concatenated.date.literal.must.take.the.form.of.either.yyyymmdd.or.yymmdd=串联日期文字必须采用 YYYYMMDD 或 YYMMDD 格式
concatenated.timestamp.literal.must.take.the.form.of.either.yyyymmddhhmmss.or.yymmddhhmmss=串联时间戳文字必须采用 YYYYMMDDHHMMSS 或 YYMMDDHHMMSS 格式
structural.search.template.info.expression=表达式
structural.search.template.info.type=类型
structural.search.template.info.query.clause=查询子句
postfix.template.provider.name=SQL

implement.members.code.block=代码块
implement.members.no.members.to.implement=找不到要实现的成员
implement.members.chooser.title=选择成员
inconsistent.dialects.for.files.0.choice.0.and.parent.data.source.1=文件{0, choice, 0#和父数据源|1#}的方言不一致。
sql.data.source.dialect.configure=配置
sql.data.source.dialect.set.all.to=全部设为:
button.configure.sql.dialect=配置 SQL 方言
inspection.message.method.is.deprecated=''{0}'' 已被弃用 
inspection.message.replace.deprecated.method.family.name=替换方法调用
inspection.message.replace.deprecated.method=将方法调用替换为 {0}
inspection.message.shadowing.alias=列 {0} 被别名隐藏(可能是因为缺少逗号)

inspection.message.expression.always.null=表达式 ''{0}'' 始终为 null
inspection.message.null.reference=Null 引用 ''{0}''

parameter.info.no.parameters=<无形参>

progress.title.loading.ddl.data.sources=正在加载 DDL 数据源…
default.schemas.databases=默认架构/数据库:

SqlJoinCardinalityInlayHintsProvider.hint.name.join.cardinality=联接基数
SqlJoinCardinalityInlayHintsProvider.hint.settings.main.cognitive.complexity.hints.for=为以下对象显示基数提示:
SqlJoinCardinalityInlayHintsProvider.hint.settings.case.inner.join=INNER JOIN
SqlJoinCardinalityInlayHintsProvider.hint.settings.case.left.join=LEFT JOIN
SqlJoinCardinalityInlayHintsProvider.hint.settings.case.right.join=RIGHT JOIN
SqlJoinCardinalityInlayHintsProvider.hint.settings.case.full.join=FULL JOIN
action.extend.data.source.text=扩展数据源
notification.title.incomplete.configuration=不完整的配置
notification.content.no.ddl.files.specified=未指定 DDL 文件