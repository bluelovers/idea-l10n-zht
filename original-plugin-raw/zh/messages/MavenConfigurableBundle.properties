column.name.name=名称
column.name.value=值
connector.ui.dir=多模块目录
connector.ui.dummy=虚拟
connector.ui.jdk=JDK 名称
connector.ui.label=Maven 连接器
connector.ui.maven=Maven 发行版
connector.ui.project=项目名称
connector.ui.refresh=刷新
connector.ui.state=状态
connector.ui.stop=停止
connector.ui.type=类型
connector.ui.vmOptions=虚拟机选项
link.label.choose.phase.goal.to.assign.shortcut=选择要分配快捷键的阶段/目标
maven.livetemplate.dep.description=添加依赖关系声明
maven.livetemplate.pl.description=添加插件定义
maven.livetemplate.repo.description=添加仓库定义
maven.progress.title.computing.repository.location=正在计算仓库位置…
maven.progress.title.computing.user.settings.location=正在计算用户设置位置…
maven.project.file.pom.xml=<b>Maven</b> 项目文件(pom.xml)
maven.run.configuration.bundled.distribution.description=已捆绑
maven.run.configuration.bundled.distribution.name=Maven {0}
maven.run.configuration.checksum.policy=校验和策略(&C)
maven.run.configuration.command.line.argument.column=Maven 选项
maven.run.configuration.command.line.arguments.empty.text=无 Maven 选项
maven.run.configuration.command.line.description.column=描述
maven.run.configuration.command.line.empty.state=命令行
maven.run.configuration.command.line.hint=示例\: 编译 --debug。使用 {0} 进行自动补全。
maven.run.configuration.command.line.name=命令行(&C)
maven.run.configuration.command.line.task.column=Maven 命令
maven.run.configuration.command.line.tasks.empty.text=无 Maven 命令
maven.run.configuration.command.line.title=Maven 命令
maven.run.configuration.command.line.tooltip=插入 Maven 命令…
maven.run.configuration.distribution.invalid.home.error=Maven 主目录无效
maven.run.configuration.distribution.label=Maven 主目录(&H)\:
maven.run.configuration.distribution.name=Maven 主目录(&H)
maven.run.configuration.emulate.terminal.hint=启用原生终端模拟
maven.run.configuration.emulate.terminal.name=模拟终端
maven.run.configuration.general.options.group=Maven 选项
maven.run.configuration.general.options.group.name=Maven 选项(&M)
maven.run.configuration.jre.action.hint=指定 JRE 以运行 Maven 目标
maven.run.configuration.jre.label=JRE(&J)\:
maven.run.configuration.jre.name=JRE(&J)
maven.run.configuration.local.repository.label=本地仓库(&L)\:
maven.run.configuration.local.repository.name=本地仓库(&L)
maven.run.configuration.local.repository.title=选择 Maven 本地仓库
maven.run.configuration.multi.project.build.policy=多项目构建失败策略(&F)
maven.run.configuration.multimoduledir.label=多模块目录(&M)\:
maven.run.configuration.multimoduledir.name=多模块目录(&M)
maven.run.configuration.multimoduledir.title=选择 Maven 项目多模块仓库
maven.run.configuration.multimoduledir.tooltip=要用于此运行的 Maven 多模块项目目录
maven.run.configuration.options.group.inherit=从<a>设置</a>继承
maven.run.configuration.output.level.label=输出级别(&L)\:
maven.run.configuration.output.level.name=输出级别(&L)
maven.run.configuration.profiles.hint=用空格分隔。使用 "-" 前缀禁用配置文件，例如 -test
maven.run.configuration.profiles.label=配置文件(&P)\:
maven.run.configuration.profiles.name=配置文件(&P)
maven.run.configuration.properties.dialog.empty.state=无属性
maven.run.configuration.properties.dialog.label=属性\:
maven.run.configuration.properties.dialog.ok.button=保存
maven.run.configuration.properties.dialog.title=属性
maven.run.configuration.properties.dialog.tooltip=编辑 Maven 属性…
maven.run.configuration.properties.label=属性(&R)\:
maven.run.configuration.properties.name=属性(&R)
maven.run.configuration.runner.options.group=Java 选项
maven.run.configuration.runner.options.group.name=Java 选项(&J)
maven.run.configuration.specify.distribution.action.name=指定 Maven 主目录
maven.run.configuration.threads.label=线程计数(&T)\:
maven.run.configuration.threads.name=线程计数(&T)
maven.run.configuration.user.settings.label=用户设置(&R)\:
maven.run.configuration.user.settings.name=用户设置(&R)
maven.run.configuration.user.settings.title=选择 Maven 用户设置
maven.settings.archetype.add.archetype=添加 Archetype(&D)…
maven.settings.archetype.add.artifactid=工件 ID
maven.settings.archetype.add.groupid=组 ID
maven.settings.archetype.add.repository=<html>仓库<i>(可选)</i></html>
maven.settings.archetype.add.title=添加 Archetype
maven.settings.archetype.add.version=版本
maven.settings.archetype.create.from.archetype=从 archetype 创建(&A)
maven.settings.command.line=命令行(&C)
maven.settings.edit.goal.select.maven.project=选择 Maven 项目
maven.settings.environment.home.directory=Maven 主路径(&H)
maven.settings.environment.local.repository=本地仓库(&R)
maven.settings.environment.settings.title=Maven 设置
maven.settings.environment.show.advanced.settings=显示新 Maven 项目的设置对话框(&D)
maven.settings.environment.show.advanced.settings.tooltip=打开或链接新 Maven 项目时显示包含 Maven 环境项目设置的对话窗口
maven.settings.environment.use.maven.config.settings=使用 .mvn/maven.config 中的设置
maven.settings.environment.use.maven.config.settings.hint=<html>重新导入后可能会丢失在其配置中所做的任何更改</html>
maven.settings.environment.use.maven.config.settings.tooltip=maven.config 文件中的设置会覆盖 IDE Maven UI 设置。<br/>如果此选项已启用，请使用 maven.config 更改设置。<br/>否则，重新导入后可能会丢失 UI 中所做的任何更改。
maven.settings.environment.user.settings=用户设置文件(&S)
maven.settings.general.checksum.policy=校验和策略(&C)\:
maven.settings.general.execute.non.recursively=以非递归方式执行目标(&G)
maven.settings.general.execute.recursively=以递归方式执行目标(&G)
maven.settings.general.execute.recursively.tooltip=<html>如果未选择此选项，则添加选项 <b>--non-recursive</b></html>
maven.settings.general.multiproject.build.policy=多项目构建失败策略(&F)\:
maven.settings.general.output.level=输出级别(&L)\:
maven.settings.general.print.stacktraces=打印异常堆栈跟踪(&E)
maven.settings.general.print.stacktraces.tooltip=<html>运行 Maven 目标时将选项 <b>--errors</b> 添加到命令行</html>
maven.settings.general.thread.count=线程计数
maven.settings.general.thread.count.note=-T 选项
maven.settings.general.thread.count.tooltip=线程数，例如 2.0C，其中 C 是核心数量(选项 -T)
maven.settings.general.update.snapshots=始终更新快照(&S)
maven.settings.general.update.snapshots.tooltip=强制检查远程仓库上有无更新的版本和快照
maven.settings.general.use.project.settings.tooltip=使用“偏好设置 | 构建、执行、部署 | 构建工具 | Maven”的设置
maven.settings.general.work.offline=脱机工作(&O)
maven.settings.general.work.offline.tooltip=<html>运行 Maven 目标时将选项 <b>--offline</b> 添加到命令行</html>
maven.settings.generated.folder.autodetect=自动检测
maven.settings.generated.folder.ignore=不检测
maven.settings.generated.folder.targerdir=target/generated-sources
maven.settings.generated.folder.targersubdir=“target/generated-sources”的子目录
maven.settings.ignored.no.file=无 Maven 文件
maven.settings.ignored.title=已忽略的文件
maven.settings.ignored.tooltip=路径模式(允许使用逗号分隔、'*' 和 '?' 通配符)
maven.settings.importing.auto.download=自动下载\:
maven.settings.importing.auto.download.annotations=注解
maven.settings.importing.auto.download.documentation=文档(&D)
maven.settings.importing.auto.download.sources=源(&R)
maven.settings.importing.create.modules.for.aggregator=为聚合器项目创建 $FULLNAME$ 模块(使用 'pom' 打包)(&M)
maven.settings.importing.dependency.type=依赖项类型\:
maven.settings.importing.dependency.type.tooltip=应导入的以逗号分隔的依赖项类型列表
maven.settings.importing.detect.compiler=自动检测编译器
maven.settings.importing.generated.source.folders=生成的源文件夹\:
maven.settings.importing.jdk=导入程序的 JDK\:
maven.settings.importing.jdk.fallback.warning=内部运行时将被用作回退。这不会影响项目 SDK 配置。
maven.settings.importing.jdk.too.old.error=Maven 导入程序需要 JDK 1.8 或更高版本
maven.settings.importing.jdk.too.old.error.4=Maven 导入程序需要 JDK 17 或更高版本以支持 Maven 4
maven.settings.importing.keep.folders.on.reimport=项目重新加载时保持源文件夹和测试文件夹(&F)
maven.settings.importing.phase.for.source.updates=要用于文件夹更新的阶段(&U)\:
maven.settings.importing.phase.for.source.updates.notes=<html>IntelliJ IDEA 需要执行列出的一个阶段以发现通过 Maven 插件配置的所有源代码文件夹。<br><b>请注意</b>，所有 test-* 阶段都会先生成并编译生产源代码。</html>
maven.settings.importing.project.exclude.build.directory=排除构建目录(%PROJECT_ROOT%/target)
maven.settings.importing.project.exclude.build.directory.tooltip=如果选择此选项，文件夹 /target 将在重新导入期间从项目中排除。无论如何，都将排除编译器输出(/target/classes 和 /target/test-classes)
maven.settings.importing.project.files.keep.in=将项目文件保留在(&K)\:
maven.settings.importing.project.files.keep.in.tooltip=将 IDEA 指定的文件(例如 *.iml / .idea)保留在所选目录中。默认情况下，*.iml 文件存储在 pom.xml 旁
maven.settings.importing.project.format=项目格式(&T)\:
maven.settings.importing.project.store.externally=将生成的项目文件存储在项目根下(已弃用)
maven.settings.importing.project.store.externally.hint=<html>此选项已弃用，未来不再支持。<br>请考虑禁用此选项或迁移以使用新的 Workspace API 进行导入。<br>它会将导入的模块设置保留在内部存储中，而手动自定义设置则存储在项目根下的 .ide 文件夹中。<br><br></html>
maven.settings.importing.search.recursively=以递归方式搜索项目(&S)
maven.settings.importing.use.output.directories=使用 Maven 输出目录(&O)
maven.settings.importing.use.output.directories.tooltip=IDEA 编译器将使用在 Maven 模型中定义的输出目录(默认情况下为 target/classes)
maven.settings.importing.vm.options=导入程序的虚拟机选项\:
maven.settings.importing.workspace.import=启用快速导入
maven.settings.index.edit.repository=编辑 Maven 仓库
maven.settings.on.targets.environment.home.directory={0} 的 Maven 主路径(&H)
maven.settings.on.targets.environment.home.directory.context.help=已为所选目标配置 Maven 主路径。编辑目标配置以更改可用 Maven 主路径。
maven.settings.on.targets.general.use.project.settings.tooltip=常规项目设置不能重用于具有非本地目标的 Maven 运行配置
maven.settings.on.targets.runner.use.project.settings.tooltip=运行程序项目设置不能重用于具有非本地目标的 Maven 运行配置
maven.settings.override=重写
maven.settings.repositories.no=无远程仓库
maven.settings.repositories.table.accessible.name=仓库
maven.settings.repositories.title=已编制索引的 Maven 仓库\:
maven.settings.repositories.update=更新(&U)
maven.settings.runner.delegate=将 IDE 构建/运行操作委托给 Maven(&D)
maven.settings.runner.jre=JRE(&J)\:
maven.settings.runner.profiles=配置文件(用空格分隔)(&P)
maven.settings.runner.profiles.notes=添加前缀 '-' 可以禁用配置文件，例如“-test”
maven.settings.runner.properties=属性\:
maven.settings.runner.properties.not.defined=未定义属性
maven.settings.runner.resolve.workspace.artifacts=解析工作区工件(&W)
maven.settings.runner.resolve.workspace.artifacts.tooltip=如果是多项目工作区，将先在工作区中查找依赖项，然后才会在本地仓库中查找。
maven.settings.runner.skip.tests=跳过测试(&T)
maven.settings.runner.use.project.settings.tooltip=使用“偏好设置 | 构建、执行、部署 | 构建工具 | Maven | 运行程序”的设置
maven.settings.runner.vm.options=虚拟机选项(&V)\:
maven.settings.testrun.argline=<html><i>argLine(&A)</i></html>
maven.settings.testrun.caption=<html>遵循 <b>maven-surefire-plugin</b> 和 <b>maven-failsafe-plugin</b> 设置传递到 JUnit 进程\:</html>
maven.settings.testrun.env.variables=<html><i>environmentVariables(&E)</i></html>
maven.settings.testrun.system.property=<html><i>systemPropertyVariables(&S)</i></html>
maven.settings.vm.options.tooltip=此字段中指定的选项会重写 .mvn/jvm.config 文件中的选项
maven.settings.working.directory=工作目录(&D)
