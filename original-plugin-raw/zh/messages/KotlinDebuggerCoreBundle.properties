find.inline.calls.task.compute.names=为声明 {0} 计算类名
find.inline.calls.task.cancelled=调试器可以跳过 {0} 的一些执行，因为类名的计算已中断

alternative.sources.notification.title=可用于文件 {0} 的替代源

function.breakpoint.tab.title=Kotlin 函数断点
function.breakpoint.initialize=初始化函数断点

line.breakpoint.tab.title=Kotlin 行断点
line.breakpoint=行断点
line.and.lambda.breakpoint=行和 {0,choice,1#Lambda|2#Lambda} 断点

filter.ignore.internal.classes=不步入 Kotlin 运行时库实现类
variables.disable.coroutine.agent.values=禁用协同程序代理
variables.disable.coroutine.agent.tooltip=对 Gradle 和 Java 运行配置禁用协同程序代理

field.watchpoint.tab.title=Kotlin 字段观察点
field.watchpoint.properties.access=字段访问(&A)
field.watchpoint.properties.modification=字段修改(&M)
field.watchpoint.properties.initialization=字段初始化(&I)
couldn.t.find.0.class=无法找到 ''{0}'' 类
stepping.over.inline=单步跳过内联

breakpoint.properties.panel.option.pass.count=合格次数(&P):
breakpoint.properties.panel.option.class.filters=类筛选器(&L):
breakpoint.properties.panel.option.instance.filters=实例筛选器(&I):
label.breakpoint.properties.panel.group.conditions=筛选器

label.add.field.breakpoint.dialog.fq.name=类的完全限定名称:
label.add.field.breakpoint.dialog.field.name=字段名称:

message.class.has.no.properties=类没有属性
message.variables.property.get=... get()

alternative.sources.notification.hide=隐藏
filters.text.inline.function.body=内联函数体
filters.text.inline.function.call.site=内联函数调用站点
filters.title.navigate.to=导航到
configurable.name.kotlin=Kotlin
always.do.smart.step.into=始终进行智能步入