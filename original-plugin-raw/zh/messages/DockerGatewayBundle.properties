DefaultGitHttpsGuiAuthenticator.dialog.checkbox.remember=记住
DefaultGitHttpsGuiAuthenticator.dialog.field.password=密码或令牌\:
DefaultGitHttpsGuiAuthenticator.dialog.field.password.validation=密码不能为空
DefaultGitHttpsGuiAuthenticator.dialog.field.username=用户名：
DefaultGitHttpsGuiAuthenticator.dialog.field.username.validation=用户名不能为空
DefaultGitHttpsGuiAuthenticator.dialog.ok.button=登录
DefaultGitHttpsGuiAuthenticator.dialog.title=登录 {0}
Devcontainer.build.notification.action.connect.automatically=自动连接(不再询问)
Devcontainer.build.notification.action.connect.text=连接
Devcontainer.build.notification.message=Dev Container 构建完成，点击“连接”以初始化客户端与后端的连接
Devcontainer.build.progress.title=Dev Container 构建\: {0}
DevcontainerSetupBuildContextStagePanel.build.from.local.project=从本地项目
DevcontainerSetupBuildContextStagePanel.build.from.remote.project=从远程项目
DevcontainerSetupBuildContextStagePanel.build.from.vcs.project=从 VCS 项目
DevcontainerSetupLocalContextComponent.invalid.devcontainer.json.file.path=无效的 devcontainer.json 文件路径\: {0}
DevcontainerSetupLocalContextComponent.path.to.devcontainer.json=devcontainer.json 的路径\:
DevcontainerTemplateChooserDialog.checkbox.compute.location.automatically=自动计算位置
DevcontainerTemplateChooserDialog.location=位置\:
DevcontainersBackendSelectionDialog.progress.title.prepare.environment=准备环境
DevcontainersBackendSelectionDialog.title.select.backend=选择后端
DockerContainersSection.action.collecting.logs.progress=正在收集日志…
DockerContainersSection.action.delete=删除
DockerContainersSection.action.logs=收集日志
DockerContainersSection.action.rebuild=重新构建
DockerContainersSection.action.rebuilding.progress=正在重新构建…
DockerContainersSection.action.start=启动
DockerContainersSection.action.starting.progress=正在启动…
DockerContainersSection.action.stop=停止
DockerContainersSection.action.stopping.progress=正在停止…
DockerContainersSection.cannot.find.recent.devcontainers=找不到最近的 Dev Container
DockerContainersSection.deleting.progress=正在删除…
DockerCreateDevcontainerPanel.computing.backend=正在计算后端…
DockerCreateDevcontainerPanel.connected=已连接
DockerCreateDevcontainerPanel.connecting.to.docker=正在连接到 Docker…
DockerDeployDevcontainerProgressPanel.action.restart=重启
DockerDeployDevcontainerProgressPanel.continue=继续
DockerDeployDevcontainerProgressPanel.environment.prepared=环境已准备就绪
DockerDeployDevcontainerProgressPanel.preparing.environment=正在准备环境…
DockerDeployDevcontainerProgressPanel.title=正在 Dev Container
DockerDevcontainerHostInitializer.dialog.title.cloning.git.repository.failed=Git 克隆错误
DockerDevcontainerHostInitializer.failed.dialog.button.cancel=取消
DockerDevcontainerHostInitializer.failed.dialog.button.retry=重试
DockerDevcontainerHostInitializer.failed.dialog.message.permission.denied.help.message=如果您使用的是 SSH Git URL，请将与您的 Git 仓库关联的私钥添加到本地 SSH 代理。\n\n 为此，请在您的本地机器上运行 ssh-add -k <path_to_your_key>，然后点击“重试”。\n\n 您可以使用 `ssh-add -l` 命令查看添加的密钥。
DockerDevcontainersRunLineMarkerContributor.performance.degradation.ok=继续
DockerDevcontainersRunLineMarkerContributor.performance.degradation.warning=在 Windows 和 macOS 上挂载源代码可能会导致性能下降。我们建议在容器内部使用源代码的克隆。
DockerGateway.close.button.text=关闭
DockerGateway.connecting=正在连接…
DockerGateway.devcontainer=Dev Container
DockerGateway.loading=正在加载…
DockerGateway.local=本地
DockerGateway.new.devcontainer=新建 Dev Container
DockerGateway.progress.title.creating.devcontainer=正在创建 Dev Container…
DockerGateway.removing.container=正在移除容器…
DockerGatewayConnectionProvider.gateway.to.devcontainer=Dev Container 的网关
DockerGatewayConnector.description=创建 Dev Container 并连接到环境
DockerGatewayConnector.title=Docker Dev Container
DockerGatewayRecentConnections.title=Dev Container
DockerSetupDevcontainerBuildContextPanel.automatic.model.file.detection.tooltip=<i>我们将自动查找位于标准位置的 devcontainer.json 文件\:<br>\n              .devcontainer/devcontainer.json<br>\n              .devcontainer.json<br>\n              .devcontainer/\\&lt;folder\\&gt;/devcontainer.json<i/>\n            
DockerSetupDevcontainerBuildContextPanel.file.for.build=使用 .json 文件进行构建\: {0}
DockerSetupDevcontainerBuildContextPanel.model.detection.strategy.automatic=自动
DockerSetupDevcontainerBuildContextPanel.model.detection.strategy.label=检测 devcontainer.json 文件\:
DockerSetupDevcontainerBuildContextPanel.model.detection.strategy.specify.path=指定路径
DockerSetupGitRepositoryAndSSHPanel.field.git.branch=Git 分支\:
DockerSetupGitRepositoryAndSSHPanel.field.git.repository=Git 仓库\:
DockerSetupGitRepositoryAndSSHPanel.forward=构建容器并继续
DockerSetupGitRepositoryAndSSHPanel.validation.git.url.can.not.be.empty=Git URL 不能为空
GitCloneHelper.legacy.image.tag.warning=使用镜像标记 ''{0}'' 运行具有 OpenSSH 版本 8.8.1 的帮助程序容器，并避免与您的计算机上的 OpenSSH 版本发生兼容性问题\: ''{1}''。我们建议将 OpenSSH 更新到最新版本。
GitCloneHelper.preparing=正在为 git 克隆准备帮助程序容器…
Ijent.initializing.remote.agent=正在初始化远程代理…
Ijent.trying.to.clone.with.https.url=正在尝试使用 https url {0} 进行克隆…
ManageDevcontainerBackendsDialog.empty.state=找不到后端
ManageDevcontainerBackendsDialog.ok.title=删除所选后端
ManageDevcontainerBackendsDialog.progress.title=正在删除后端…
ManageDevcontainerBackendsDialog.title=管理后端
OpenDevcontainerProjectAction.action.dev.container.workspace.text=Dev Container 工作区\: {0}
RecentDevcontainersSection.container.name=容器名称\: {0}
RecentDevcontainersSection.created.at=创建时间\: {0}
RecentDevcontainersSection.created.from=创建自\: {0}
RecentDevcontainersSection.last.started=上次启动时间\: {0}
Ssh.info.dialog.do.not.show.again=不再显示
Ssh.info.dialog.text=远程环境需要<a href\="https\://docs.docker.com/engine/reference/commandline/build/\#git-repositories">从 Git 仓库</a>构建 Dev Container 映像。\n\n提取仓库要求<a href\="https\://docs.github.com/en/authentication/connecting-to-github-with-ssh/using-ssh-agent-forwarding">将本地 SSH 代理转发</a>到远程服务器。
Ssh.info.dialog.title=配置 SSH 代理转发
SshAgent.performing.ssh.add.k.command=正在执行 ssh-add -k 命令…
SshAgent.ssh.add.k.command.is.exited.with.exit.code=已完成，非零退出代码为 {0}。
action.Create.Dev.Container.CloneSources.text=创建 Dev Container 并克隆源代码…
action.Dev.Container.Create.text=创建 Dev Container
action.Dev.Container.ManageBackends.text=管理 Dev Container 后端
action.Dev.Container.OpenProject.text=打开项目
action.Dev.Container.ShowRecent.text=显示 Dev Container
action.Dev.Container.ideSettings.AddSettingsAction.text=从 IDE 添加修改后的设置
action.com.intellij.clouds.docker.gateway.actions.NewDevcontainerAction.text=新建 Dev Container 配置…
action.com.intellij.clouds.docker.gateway.actions.NewDevcontainerFileAction.text=Dev Container 配置…
advanced.setting.dev.containers.always.use.latest.backend=自动选择后端版本
advanced.setting.dev.containers.compose.no.recreate=重新构建 Docker Compose Dev Container 时使用 '--no-recreate'。主服务将始终被重新创建。
advanced.setting.dev.containers.fast.clone=使用 --depth\=1 克隆源
advanced.setting.dev.containers.show.connection.notification.on.timeout=如果 Dev Container 后端/前端的部署时间超过 10 秒，则显示通知
advanced.settings.dev.containers=Dev Container
devcontainer.add.settings.command.name=正在将设置添加到 Dev Container
devcontainer.add.settings.intention.family.name=Dev Container
devcontainer.add.settings.intention.name=从 IDE 添加当前修改的设置
devcontainer.add.settings.intention.progress.title=正在添加设置
devcontainer.confirm.exit.dialog.message=存在有效的 Dev Container 客户端，关闭 IDE 将断开它们与 DevContainer 的连接。\n是否仍要关闭 IDE?
devcontainer.confirm.exit.dialog.title=有效的 Dev Container 客户端
devcontainer.dialog.title.create.configuration=创建 Dev Container 配置
devcontainer.errors.setting.up.from.template=设置 Dev Container 时出错\:\n{0}
devcontainer.folder.structure.problems=Dev Container 文件夹结构问题
devcontainer.ide.settings.inspection=验证 IDE 设置
devcontainer.ide.settings.inspection.bool.value.expected=应为布尔值(true/false)
devcontainer.ide.settings.inspection.enum.value.expected=应为 {0} 的中一个值
devcontainer.ide.settings.inspection.int.value.expected=应为整数值
devcontainer.ide.settings.inspection.string.list.expected=应为字符串列表 […]
devcontainer.ide.settings.inspection.string.map.expected=应为字符串映射 {"k1"\:"v1", "k2"\:"v2",...}
devcontainer.ide.settings.inspection.string.value.expected=应为字符串字面量
devcontainer.inspection.group=Dev Container
devcontainer.inspection.message.ambiguous.dev.container.context=不明确的 Dev Container 上下文\: .devcontainer 已存在于 {0}
devcontainer.inspection.message.missing.parent.devcontainer.folder=缺少父 .devcontainer 文件夹
devcontainer.inspection.message.unknown.setting=未知设置 {0}
devcontainer.notification.action.clone.sources.text=克隆…
devcontainer.notification.action.content.skip=不再显示
devcontainer.notification.action.file.open=打开 {0}
devcontainer.notification.action.learn.more=了解详情…
devcontainer.notification.action.mount.sources.text=在容器中重新打开
devcontainer.notification.action.progress.title.resolving.backend=正在解析后端…
devcontainer.notification.content.reopen.project.in.devcontainer=是否在容器中重新打开项目?
devcontainer.notification.title.devcontainer.found=已找到 Dev Container 配置
devcontainer.notification.title.setup=Dev Container 设置
devcontainer.progress.title.settings.up.template=从模板设置容器
devcontainer.ssh.executing.0.command=正在执行“{0}”命令…
devcontainer.ssh.failed.to.parse.java.version=无法从 {0} 进程输出解析 Java 版本
devcontainer.ssh.process.exited.with.code.0=进程退出，代码为 {0}
devcontainer.ssh.uploading.cli=正在上传 Dev Container 命令行实用程序…
devcontainer.template.border.title.customizations=customizations
devcontainer.template.border.title.options=模板选项
devcontainer.template.border.title.template=Dev Container 模板\:
devcontainer.template.customizations.hint=将“customizations”部分添加到 devcontainer.json，或者如果模板中未定义 JetBrains 自定义内容，则替换现有部分。
devcontainer.template.generate.customizations.label=自动为 JetBrains IDE 生成 'customizations' 部分
devcontainer.template.label.publisher=发布程序\:
devcontainer.template.publisher.unknown=未知
group.Create.Dev.Container.MountSources.text=创建 Dev Container 并挂载源代码…
group.Dev.Container.Actions.text=Dev Container
group.Dev.Container.OpenProject.Group.text=打开项目
group.Tools.Services.DevContainers.text=Dev Container
select.devcontainer.json.file.dialog.cancelled.exception=已被用户取消。未选择任何模型文件。
select.devcontainer.json.file.dialog.okButton=选择
select.devcontainer.json.file.dialog.title=选择 devcontainer.json 文件
tty.progress.done=完成
tty.progress.error.0=错误\: {0}
