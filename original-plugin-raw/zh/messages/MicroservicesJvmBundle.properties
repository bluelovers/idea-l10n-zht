action.CompactBeansListItemsAction.GoToAction.text=紧凑 Bean 列表条目
action.CompactBeansListItemsAction.text=紧凑列表条目
action.ShowBeansFromLibrariesAction.GoToAction.text=显示库中的 Bean
action.ShowBeansFromLibrariesAction.text=显示库中的内容
action.ShowBeansFromTestsAction.GoToAction.text=显示测试中的 Bean
action.ShowBeansFromTestsAction.text=显示测试中的内容
action.ShowBeansModulesAction.GoToAction.text=按模块对 Bean 分组
action.ShowBeansModulesAction.text=按模块分组
action.ShowBeansSidePanelAction.GoToAction.text=显示 Bean 侧面板
action.ShowBeansSidePanelAction.text=显示侧面板
beans.empty.text=找不到 Bean
beans.loading.text=正在加载 Bean…
beans.tab.documentation=文档
beans.tab.documentation.empty.text=选择 Bean 以查看文档
beans.tool.window.activate.action.description=激活 Bean 工具窗口
beans.tool.window.title=Bean
group.BeansActions.FilterOptions.separator=筛选
group.BeansActions.LayoutOptions.separator=布局
group.BeansActions.OptionsMenu.text=选项
inject.bean.dependency.fix.modified=文档已被修改。\n未添加依赖项。
inject.bean.dependency.fix.no.beans.found=找不到与 ''{0}'' 匹配的 Bean
inject.http.method.reference=HTTP 方法引用
inject.http.url.reference=HTTP URL 引用
inject.http.ws.reference=WebSocket URL 引用
inject.mq.destination={0} 目标引用
inject.mq.destination.generic=消息队列引用
inject.mq.topic={0} 主题引用
injectionType.CONFIGURATION_METHOD.description=注入 Bean 作为配置方法形参
injectionType.CONFIGURATION_METHOD.name=配置方法
injectionType.CONFIGURATION_METHOD.settings=配置方法
injectionType.CONSTRUCTOR.description=通过构造函数方法注入 Bean 实例
injectionType.CONSTRUCTOR.name=构造函数依赖项
injectionType.CONSTRUCTOR.settings=构造函数
injectionType.FIELD.description=使用 @Autowired 注解通过字段注入 Bean 实例
injectionType.FIELD.name=@Autowired 依赖项
injectionType.FIELD.settings=字段
injectionType.LOOKUP_METHOD.description=创建将从 BeanFactory 返回 Bean 实例的 Lookup 方法。
injectionType.LOOKUP_METHOD.name=查找方法依赖项
injectionType.LOOKUP_METHOD.settings=查找方法
injectionType.OBJECT_FACTORY_METHOD.description=定义一个工厂，它在被调用时可以返回一个 Bean 实例(可能是共享实例或独立实例)
injectionType.OBJECT_FACTORY_METHOD.name=对象工厂依赖项
injectionType.OBJECT_FACTORY_METHOD.settings=对象工厂
injectionType.SETTER.description=使用 @Autowired 注解通过 setter 方法注入 Bean 实例
injectionType.SETTER.name=Setter 依赖项
injectionType.SETTER.settings=Setter
install.agent=安装 @Scheduled 调试器代理
microservices.mq.AccessType.ADMINISTRATION=管理
microservices.mq.AccessType.RECEIVE=接收
microservices.mq.AccessType.SEND=发送
microservices.mq.AccessType.SEND_AND_RECEIVE=发送和接收
microservices.mq.AccessType.STREAM_FORWARDING=流转发
microservices.mq.AccessType.UNKNOWN=未知
microservices.mq.destination={0} 目标
microservices.mq.direct={0} 直接
microservices.mq.exchange={0} 交换
microservices.mq.fanout={0} 扇出
microservices.mq.generic=消息队列目标
microservices.mq.headers={0} 标头
microservices.mq.queue={0} 队列
microservices.mq.queue.type=队列
microservices.mq.topic={0} 主题
microservices.mq.topic.type=主题
scheduled.method.enable.debugger.cancel=取消
scheduled.method.enable.debugger.html=没有为模块运行配置启用 @Scheduled 调试器。
scheduled.method.enable.debugger.html.withRestart=模块运行配置未启用 @Scheduled 调试器。<br>要启用吗? (需要重新启动运行/调试)
scheduled.method.enable.debugger.ok=启用
scheduled.target.process.not.started=此 @Scheduled 方法没有正在运行的应用程序
scheduled.target.requires.restart=@Scheduled 调试器已启用。请重新启动运行配置
scheduled.target.requires.start=@Scheduled 调试器已启用。您可以启动应用程序
