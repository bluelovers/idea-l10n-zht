axis2.path.tooltip=Axis2 安装路径

webservice.url.tooltip=WSDL 文档的互联网地址
webservice.browse.tooltip=浏览本地文件
webservice.user.tooltip=用于访问 WSDL URL 的用户名(如果受密码保护)
webservice.password.tooltip=用于访问 WSDL URL 的用户密码(如果受密码保护)

webservice.webmethod=Web 方法
webservice.packageprefix=软件包前缀:
webservice.outputpath=输出路径:
webservice.platform=服务平台:
webservice.namespace=服务命名空间:
webservice.name=服务名称:
webservice.web.module=目标 Web 模块:
webservice.url=服务 URL:
webservice.outputpath.tooltip=生成的代码的输出路径，模块的源根之一
webservice.packageprefix.tooltip=生成的代码的软件包前缀
webservice.generateastestcase.tooltip=生成用于访问服务的 JUnit 测试用例
webservice.addrequiredlibs.tooltip=添加必要的库，以使生成的代码编译并发挥作用

webservice.wstoolkit.tooltip=要使用的 Web 服务工具包
webservice.classname.tooltip=要作为 Web 服务公开的类名
webservice.classname.wsdl.tooltip=用于生成 WSDL 的类名

webservice.platform.tooltip=要使用的 Web 服务引擎的名称
webservice.methodsforoperations.tooltip=要作为 webservice 端点公开的类的方法
webservice.generate.classes.for.schema.arrays.tooltip=生成架构数组的类，如果未设置，则使用 Java 数组

webservice.typemapping.version.tooltip=生成的代码使用的类型映射版本，1.1 - SOAP 1.1 JAX-RPC 合规，1.2 - SOAP 1.1 编码
webservice.generateunreferenced.elements.tooltip=为未引用的元素也生成 Java 代码
webservice.wrapped.support.tooltip=对所谓的“包装”文档/文字样式操作的特殊处理，例如默认情况下由 .NET 使用
webservice.soap.action.tooltip=这项运算的 soapAction 字段的值。OPERATION 强制 soapAction 作为运算的名称。DEFAULT 可让 soapAction 根据运算的元数据(通常为 "")进行设置。NONE 则强制 soapAction 为 ""

webservice.binding.style.tooltip=WSDL 中绑定的样式
webservice.deployment.style.tooltip=部署的样式(DOCUMENT/WRAPPED/ENCODED/MESSAGE)
webservice.use.items.binding.tooltip=在绑定中使用条目
webservice.output.mode.tooltip=应生成客户端存根(客户端)或服务器端(服务器)实现框架
webservice.name.of.module.tooltip=用于操作的模块的名称
webservice.namespace.tooltip=Web 服务标识命名空间
webservice.monitoring.port.tooltip=在 web.xml 中指定的用于 SOAP 消息监视的端口
webservice.servername.tooltip=用于 Web 服务开发的服务器的名称
webservice.serverport.tooltip=用于 Web 服务开发的服务器的端口
webservice.java2wsdl.generatetype.tooltip=生成包含所有/接口/实现元素的 WSDL
webservice.column.add.to.deployment=添加到部署
webservice.column.method.to.expose=要显示的方法

jwsdp.path.tooltip=用于 XML Web 服务引用实现/Java Web 服务开发包的 Metro/Glassfish/Java API 的路径
xfire.path.tooltip=XFire/Apache CXF (亦称 XFire 2.0)安装的路径
xml.beans.path.tooltip=XML Bean 安装的路径
jaxb.classname.tooltip=用于生成 JAXB 架构的类的名称
jaxb.include.parameters.return.types.of.methods.tooltips=在 JAXB 生成的架构中包含以下方法的参数和返回类型
jaxb.generate.mark.generated=将生成的代码标记为 @javax.annotation.Generated
jaxb.generate.source.location.support=为生成的代码启用源位置支持
jaxb.generate.sync.methods=使用 'synchronized' 关键字生成访问器方法
jaxb.generate.package.level.annotations=生成 package-info.java 以包含软件包级别信息
jaxb.url.tooltip=使用 JAXB 生成的架构(WSDL、DTD)的路径

xmlbeans.url.tooltip=使用 XMLBeans 生成所用的架构或 WSDL 的路径
jaxb.make.files.readonly.tooltip=将生成的文件设为只读
jaxb.schema.gen.error=架构生成错误
jaxb.no.jwsdp.path=请在插件设置中指定 JWSDP/Glassfish 路径
jaxb.no.jwsdp.path.jdk6=请在插件设置中指定 JWSDP/Glassfish 路径或使用 JDK 6
jaxb.external.class.error=类 ''{0}'' 不属于某些项目模块
jaxb.no.class.error=未选择类
jaxb.no.methods.selected.error=未选择任何方法

xfire.binding.tooltip=用于 XML <-> 序列化的绑定
webservice.name.tooltip=要创建的 Web 服务名称
jbossws.path.tooltip=安装了 JBossWS 的 JBoss 的路径
jbossws.use.webservice.interface=使用 WebService 接口
jbossws.generates.wsdl.only=JBossWS 仅从接口生成 WSDL

webservices.deploy.remove.from.descriptor=从 Web 服务部署描述符中移除
webservices.deploy.add.to.descriptor=添加到 Web 服务部署描述符
webservices.deploy.edit.descriptor=编辑 web.xml
webservices.deploy.class.is.not.from.module=所选类不在模块中
webservices.deploy.class.does.not.exist=类不存在
webservices.deploy.error=错误
webservices.deploy.info=信息
webservices.deploy.no.deployed.services=找不到已部署的 Web 服务
webservices.list.header=Web 服务:
webservices.select.target=选择目标

webservices.inspections.group.name=Web 服务
webservices.inspections.valid.externally.bound.object.display.name=有效的外部绑定对象
webservices.inspections.empty.webservice.display.name=Web 服务类没有任何方法
webservices.inspections.problem.found={0} 问题: {1}
websphere.path.tooltip=Web Sphere 安装的路径
webservice.url.path.prefix=构造 Web 服务 URL 时在 Web 服务名称前追加的路径

webservices.inspections.oneway.operation.display.name='@Oneway' 方法不应返回任何内容
webservices.inspections.oneway.operation.problem='@Oneway' 方法不应返回任何内容
webservices.inspections.oneway.operation.remove.annotation.fix.name=移除 '@Oneway' 注解
webservices.inspections.oneway.operation.replace.returntype.with.void.fix.name=将返回类型设置为 'void'
webservices.inspections.nonjaxwswebservices.inspection.display.name=未使用 `@WebService` 对 JAX-WS 服务进行注解
webservices.inspections.implicitly.exposed.webmethod.inspection.display.name=隐式公开的 Web 服务方法
webservices.inspections.implicitly.exposed.webmethod.inspection.webmethod.problem=Web 方法隐式公开
webservices.inspections.nonjaxwswebservices.inspectionwebservice.problem=非 JAX-WS 注解的 Web 服务
webservices.inspections.nonjaxwswebservices.inspection.annotate.web.service.fix=将类注解为 '@WebService'
webservices.inspections.implicitly.exposed.webmethod.inspection.annotate.web.method.fix=将方法注解为 '@WebMethod'
webservices.inspections.web.service.without.methods=没有方法的 Web 服务或 XML 映射对象
webservices.inspections.problem=问题:
webservices.inspections.web.service=Web 服务
webservices.inspections.mapped.object=映射的对象
webservices.inspections.field.should.be.public=字段应为 public
webservices.inspections.no.setter.for.property=属性 ''{0}'' 没有 setter 方法
webservices.inspections.no.engines=未配置引擎。
webservices.inspections.no.engines.default.used=将使用默认 ''{0}''。
webservices.inspections.no.engines.fix=修正
webservices.inspections.no.engines.configure=配置

url.is.empty.validation.problem=URL 为空

no.class.in.selected.text.editor.error.message=选中的编辑器里没有类

choose.glassfish.or.jaxws.ri.or.jwsdp.directory.dialog.title=选择 JAX-WS RI、Glassfish、Metro 或 JWSDP 2.0 目录
choose.axis.2.directory.dialog.title=选择 Axis 2 目录
choose.xfire.directory.dialog.title=选择 XFire 或 CXF 目录
choose.xml.beans.directory.dialog.title=选择 XML Beans 目录
choose.jboss.application.server.directory.with.jboss.ws.installed.dialog.title=选择已安装 JBoss WS 的 JBoss 应用程序服务器目录
choose.web.sphere.path.dialog.title=选择 Web Sphere 路径
class.should.not.be.enum.annotation.type.validation.problem=类不应为注解类型
class.should.be.instanciatable.validation.problem=类应当可实例化(具有 public 修饰符和无参 public 构造函数)
class.not.public.or.does.not.allow.instantiation.validation.message=类 {0} 非公共或不允许实例化
class.not.found.validation.message=找不到类 {0}
method.is.constructor.validation.message=方法为构造函数
method.is.not.public.validation.message=方法不为 public
webservices.facet.config.name=WebService
webservices.facet.configure.message=请在“设置 -> Web 服务”中配置特定的框架和库
webservices.support.provider.name=Web 服务(&V)
webservices.support.generate.sample.server=生成示例服务器代码
webservices.set.valid.path=在 WebService 插件设置中设置有效的 {0} 路径。
webservices.use.jdk.6=或者使用 JDK 6。
webservices.client.support.provider.name=WebService 客户端(&C)
webservices.client.generate.sample=生成示例客户端代码

enable.web.services.support.lvcslabel=启用 Web 服务支持
nonspecified.webservices.engine.name.validation.message=Web 服务引擎名称无效
class.was.not.recompiled.after.changes.please.compile.before.proceeding.deployment.problem=更改后未重新编译类 {0}，请编译后再继续
select.ws.engine.facet.configuration.name=选择 WS 引擎(&W)
webservices.facet.name=WebService
webservicesclient.facet.name=WebService 客户端
choose.wsdl.file.dialog.title=选择 WSDL 文件
file.doesn.t.exist.validation.message=文件 {0} 不存在
file.0.has.inappropriate.file.type.validation.message=文件 {0} 的文件类型不当
invalid.web.module.selected.validation.message=选择了无效的 Web 模块
show.deployed.web.services.dialog.title=显示部署的 Web 服务
show.deployed.web.services.loading=正在加载 Web 服务列表
uncomment.soapmonitor.mapping.in.web.xml.validation.message=取消 web.xml 中 SOAPMonitor 映射的注释
no.web.module.with.web.service.support.configure.one.validation.message=没有支持 Web 服务的 Web 模块 => 配置一个

soap.messages.toolwindow.title=SOAP 消息
soap.monitor.title=监视 SOAP 消息

expose.class.as.web.service.dialog.title=作为 Web 服务公开类
unexpose.class.as.web.service.dialog.title=取消将类作为 Web 服务公开
invalid.web.service.class.name.validation.message=无效的 Web 服务类名
invalid.web.service.name.validation.message=无效的 Web 服务名称
use.of.items.deploy.dialog.text=条目使用:
context.name.should.consist.of.alphanumeric.and.letters.only.validation.message=上下文名称应仅由字母、数字和符号组成(_S)
the.web.server.0.1.is.not.running.launch.the.webservices.web.module.in.local.tomcat.run.debug.session.or.change.server.port.in.plugin.settings.validation.message=Web 服务器 {0}:{1} 未运行 => 在本地 Tomcat 运行/调试会话中启动 Webservices Web 模块，或在插件设置中更改服务器/端口
nonvalid.context.or.axisservlet.is.not.present.web.service.support.not.enabled.for.module.validation.message=上下文无效或 AxisServlet 不存在(模块未启用 Web 服务支持)
invalid.url.validation.message=无效的 URL

generate.wsdl.from.java.dialog.title=从 Java 生成 WSDL
generate.wsdl.from.java.plugin.error=启动 Java 2 WSDL 时出错，请将异常发送给插件作者
generate.wsdl.from.java.internal.error=内部错误
generate.wsdl.from.java.no.methods.error=未选择任何方法

invalid.web.service.url.validation.message=Web 服务 URL 无效
invalid.web.service.namespace.validation.message=Web 服务命名空间无效
package.prefix.is.not.valid.validation.message=软件包前缀无效
expose.class.as.web.service.lvcs.label=作为 Web 服务公开类
create.webservice.action.text=创建 WebService
create.webservice.action.description=创建 JEE WebService
create.webservice.client.action.text=创建 Web 服务客户端
create.webservice.client.name=名称
create.webservice.client.action.description=创建 JEE WebService 客户端
remove.web.service.dialog.title=移除 Web 服务
invalid.web.service.selected.validation.message=选择了无效的 Web 服务

webservice.create.action.name=WebService
webserviceclient.create.action.name=WebServiceClient
webservices.file.templates.group.name=Web 服务
selected.class.is.not.marked.with.javax.jws.webservice.annotation.validation.message=所选类未使用 javax.jws.WebService 注解进行标记
jaxws.does.not.support.wsdl.generation.from.interface.validation.message=JAX-WS 不支持从接口生成 WSDL
no.targetnamespace.is.specified.validation.message=未指定 targetNamespace 时，JAX-WS 不支持从默认软件包类生成 WSDL
class.in.default.package.should.have.targetnamespace.specified.validation.message=默认软件包中的类应指定 targetNamespace

generate.xml.schema.from.java.using.jaxb.dialog.title=使用 JAXB 从 Java 生成 XML 架构
generate.java.xjc.error=XJC 生成错误
generate.java.xjb.select.dir=选择目录或 .xjb 文件
generate.java.wadl.unsupported=Web 服务引擎不支持 WADL 文件
generate.java.wsdl.connection.error=WSDL URL 连接异常
generate.java.wsdl.package.empty=软件包不应为空
generate.java.wsdl.path.invalid=WSDL 路径无效
generate.java.code.from.xml.schema.using.jaxb.dialog.title=使用 JAXB 从 XML 架构生成 Java 代码
generate.jaxb.schemas.from.java.lvcs.title=使用 JAXB 从 Java 生成 XML 架构

generate.java.code.from.jaxb.schemas.lvcs.action=使用 JAXB 从 XML 架构生成 Java 代码
generate.java.code.from.xmlbeans.schemas.lvcs.action=使用 XMLBeans 从 XML 架构生成 Java 代码
generate.java.code.from.xmlbeans.schemas.dialog.title=使用 XMLBeans 从 XML 架构生成 Java 代码
generate.java.code.from.xmlbeans.select.schema=选择要生成的 XML 模式/WSDL 文件
generate.java.code.from.xmlbeans.invalid.output=输出 JAR 文件名无效
generate.java.code.from.xmlbeans.no.root.tag=无根标记
generate.java.code.from.xmlbeans.no.xml.beans.path=请在插件设置中指定 XMLBeans 路径
generate.java.code.from.xmlbeans.compiler.error=XMLBeans 编译器错误
generate.java.code.from.xmlbeans.select.jar=选择要覆盖的 JAR 文件

glassfish.jax.ws.2.x.ri.metro.1.x.jwsdp.2.0=Glassfish / JAX-WS 2.2 RI / Metro 1.X / JWSDP 2.2
max.vm.memory.size.when.launching.tools=启动 Web 服务工具时将使用的最大堆内存大小(MB)
exception.when.copying.endorsed.jars.message=由于您的项目使用 JDK 6 (捆绑了 JAXB/JAX-WS api)，并且您的设置指定了不同的 JAX-WS 位置，因此 IDEA 尝试将 JAR {0} 复制到 {1} 目录，但出现异常，因此您需要手动复制文件
exception.when.copying.endorsed.jars.title=将 JAR 文件复制到 JDK 的支持目录时出错


cant.resolve.ws.reference='@XmlType' 特性中未解析的引用
property.doesnt.exist=属性 ''{0}'' 不存在
field.doesnt.exist=字段 ''{0}'' 不存在
remove=移除属性
ws.intention.action.family.name=Web 服务意图动作
wsdl.inspection.group.name=WSDL
wsdl.inspection.display.name=无效内容

websphere.platform.name=WebSphere 6.X
axis2.display.name=Apache Axis 2
cxf.display.name=CXF
cxf.spring.cannot.resolve.bean=无法解析 Spring Bean ''{0}''

restful.service.display.name=RESTful Web 服务
restful.client.service.display.name=RESTful Web 服务客户端
configurable.WebServicesPluginConfigurable.display.name=Web 服务
settings.external.engines=外部引擎:
settings.jboss.name=JBoss
settings.xml.beans=XMLBeans
settings.server.name=服务器名称:
settings.server.port=服务器端口:
settings.prefix.path.for.web.services.url=Web 服务 URL 的前缀路径:
settings.maximum.vm.heap.size.when.launching.tools.mb=启动工具时的最大虚拟机堆大小(Mb):
settings.port.should.be.numeric=端口应为数值
settings.invalid.url=无效的 URL
settings.directory.not.exists=目录 ''{0}'' 不存在
settings.engine.not.configured=未配置 Web 服务引擎

group.JAXB.text=JAXB(_X)
group.JAXB.description=JAXB 操作
group.WebServicesActions.text=XML _WebServices 和 WSDL
group.WebServicesActions.description=Web 服务操作

action.WebServicesPlugin.MonitorSoapMessages.text=监视 SOAP 消息
action.WebServicesPlugin.ShowDeployedWebServices.text=显示部署的 Web 服务
action.WebServicesPlugin.GenerateJavaFromXmlBeansSchemas.text=使用 XMLBeans 从 XML 架构生成 Java 代码…
action.WebServicesPlugin.GenerateJavaFromJAXBSchemas.text=使用 JAXB 从 XML 架构生成 Java 代码…
action.WebServicesPlugin.GenerateJAXBSchemasFromJava.text=使用 JAXB 从 Java 生成 XML 架构…
action.WebServicesPlugin.CreateWebServiceClient.text=Web 服务客户端
action.WebServicesPlugin.GenerateWsdlFromJava.text=从 Java 代码生成 WSDL...
action.WebServicesPlugin.GenerateJavaFromWsdl.text=从 WSDL 生成 Java 代码...
action.WebServicesPlugin.CreateWebService.text=Web 服务

axis.monitor.title=SOAPMonitor 筛选器
axis.monitor.start=开始
axis.monitor.ok=确定
axis.monitor.cancel=取消
axis.monitor.stop=停止
axis.monitor.add=添加
axis.monitor.remove=移除
axis.monitor.remove.all=全部移除
axis.monitor.switch.layout=切换布局
axis.monitor.reflow.xml=重排 XML 文本
axis.monitor.filter.options=筛选…
axis.monitor.filter.by.status=基于状态筛选消息:
axis.monitor.filter.active.only=仅活动消息
axis.monitor.filter.complete.only=仅完成消息
axis.monitor.time=时间:
axis.monitor.status=状态:
axis.monitor.target.service=目标服务:
axis.monitor.soap.request=SOAP 请求
axis.monitor.soap.response=SOAP 响应
axis.monitor.include.messages=包含基于目标服务的消息:
axis.monitor.exclude.messages=排除基于目标服务的消息:

axis.monitor.status.active=SOAPMonitor 已启动
axis.monitor.status.stopped=SOAPMonitor 已停止
axis.monitor.status.closed=服务器通信已终止
axis.monitor.status.no.connect=SOAPMonitor 无法连接到服务器

axis.monitor.response.active=活动
axis.monitor.response.complete=完成

deploy.dialog.add.required.engine=将所需的 Web 服务引擎库添加到类路径
deploy.dialog.service.style=服务样式
deploy.dialog.service.classname=服务类名
deploy.dialog.target.module=目标模块
deploy.dialog.undefined.class=*未定义*
deploy.choose.class=选择类

generate.java.jaxb.dialog.enable.src.support=启用源位置支持(&E)
generate.java.jaxb.dialog.add.external.binding=添加外部绑定文件/目录
generate.java.jaxb.dialog.add.libs=添加必要的库
generate.java.jaxb.dialog.no.header=不生成标头(&H)
generate.java.jaxb.dialog.package.annotations=生成软件包级注解(&P)
generate.java.jaxb.dialog.mark.generated=使用 'generated' 注解标记生成的代码(&G)
generate.java.jaxb.dialog.gen.synchronized=生成同步访问器(&Y)
generate.java.jaxb.dialog.make.readonly=将生成的文件设为只读(&R)
generate.java.jaxb.dialog.schema.path=架构/WSDL/DTD 路径
generate.java.jaxb.add.to.generation=添加到 JAXB 生成
generate.java.jaxb.parameter.of.method=以下方法的参数/返回类型
generate.java.jaxb.select.xml.schema=选择要用于 JAXB 生成的 XML 架构文件

generate.java.wsdl.invalid.url=WSDL URL 无效
generate.java.wsdl.action=从 WSDL 生成 Java 代码
generate.java.wsdl.dialog.service.wsdl.url=Web 服务 WSDL URL:
generate.java.wsdl.dialog.username=用户名:
generate.java.wsdl.dialog.password=密码:
generate.java.wsdl.dialog.binding=要使用的绑定:
generate.java.wsdl.dialog.output.mode=输出模式:
generate.java.wsdl.dialog.mapping.version=类型映射版本:
generate.java.wsdl.dialog.allow.extensions=允许扩展
generate.java.wsdl.dialog.allow.extensions.tooltip=允许供应商扩展
generate.java.wsdl.dialog.generate.test=生成 TestCase
generate.java.wsdl.dialog.generate.schema.arrays=为架构数组生成类
generate.java.wsdl.dialog.generate.unreferenced=生成未引用的元素
generate.java.wsdl.dialog.add.libs=添加必要的库，以使生成的代码编译并发挥作用
generate.java.wsdl.dialog.wrapped.style=支持包装的文档/文字样式
generate.java.wsdl.dialog.unwrap=解开文档/文字包装的元素

generate.java.xml.dialog.add.libs=添加必要的库，以使生成的代码编译并发挥作用
generate.java.xml.dialog.schema.path=架构路径:

generate.jaxb.schemas.classname=类名:
generate.jaxb.schemas.include.parameters=包括以下方法的参数和返回类型:

show.deployed.context.name=上下文名称:
show.deployed.monitoring.port=监视端口:

generate.wsdl.action=从 Java 生成 WSDL
generate.wsdl.binding.style=绑定样式:
generate.wsdl.class=要生成 WSDL 的类:
generate.wsdl.soap.action=SOAP 操作:
generate.wsdl.use.items=在绑定中使用条目:
generate.wsdl.types.version=类型映射版本:
generate.wsdl.generation.type=生成类型:

jaxrpc.select.proper.implementation=选择用于实现 WebService 接口的类
progress.validating=正在验证…

generate.java.jaxb.dialog.sdk.tooltip=将用于执行生成的 SDK
generate.java.jaxb.search.xjc.progress.title=正在搜索 XJC 工件…
jaxb.generation.dialog.sdk.label=SDK:
jaxb.generation.dialog.xjc.label=XJC:
jaxb.generation.dialog.jxc.label=JXC:
jaxb.lib.select.dialog.title=选择 {0} 库
jaxb.lib.select.dialog.no.results=无结果
jaxb.lib.select.dialog.filter.placeholder=筛选工件
jaxb.lib.select.field.icon.tooltip=浏览可用工件
jaxb.lib.select.field.placeholder=内置
jaxb.lib.select.field.tooltip=要执行生成的 {0} 库
jaxb.lib.select.field.validation.error=应选择 {0} 库
make.sure.code.compiled.before.run=* 请确保代码在运行前已编译