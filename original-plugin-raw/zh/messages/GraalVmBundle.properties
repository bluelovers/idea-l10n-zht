action.GraalVM.Debugger.DisplayPointers.text=显示值的内存地址
debugger.display.gdb.name=GDB/GraalVM
debugger.display.lldb.name=LLDB/GraalVM
graalvm.application.arguments=实参\:
graalvm.application.run=GraalVM 应用程序运行
graalvm.before.run.task.build={0} GraalVM 构建任务
graalvm.before.run.task.progress.title.building.project=构建目标
graalvm.container.attach.configuration.type.description=GraalVM 容器调试
graalvm.container.attach.configuration.type.name=GraalVM 容器调试
graalvm.debug.marker.loading.debug.info=正在加载调试信息符号
graalvm.debugger.attach.group.name=Graal VM/Docker
graalvm.debugger.attach.option.title=附加选项
graalvm.debugger.attach.options.dialog.label.modules=类路径模块\:
graalvm.debugger.attach.options.dialog.label.symbol.file=符号文件\:
graalvm.debugger.attach.options.dialog.label.symbol.file.text=符号文件
graalvm.debugger.driver.configuration.symbol-file-loader-title=符号文件加载器
graalvm.debugger.driver.configuration.symbol-file-not-found-ignore=忽略，我没有调试符号。
graalvm.debugger.driver.configuration.symbol-file-not-found-message=未设置调试符号。要进行配置吗?
graalvm.debugger.driver.configuration.symbol-file-not-found-ok=好的，我有调试符号文件。我们来加载它吧。
graalvm.debugger.driver.configuration.title=Graal VM 调试信息加载程序。
graalvm.debugger.function-breakpoint=GraalVM 函数断点
graalvm.debugger.ok=确定
graalvm.debugger.progress.local-process-starting=本地进程正在调试器下启动
graalvm.debugger.progress.port-fetching=正在从框架中获取进度
graalvm.debugger.progress.prepare-remote-target=正在准备远程运行目标
graalvm.debugger.progress.remote-process-attaching=正在附加到远程进程
graalvm.debugger.progress.searching.for.file=正在加载文件…
graalvm.debugger.restoring.parameter=正在恢复形参
graalvm.debugger.symbol-file-loading=正在加载符号文件
graalvm.debugger.variable.description.warning=形参“{0}”根据调用约定还原，使用它可能非常危险\!
graalvm.docker.console.title=Docker 控制台上的 GraalVm…
graalvm.downloader.download-message=下载调试器
graalvm.json.jni.config.name=GraalVM JNI 配置
graalvm.json.predefined.classes.config.name=GraalVM 预定义类配置
graalvm.json.proxy.config.name=GraalVM 代理配置
graalvm.json.reflection.config.name=GraalVM 反射配置
graalvm.json.resource.config.name=GraalVM JNI 配置
graalvm.json.serialization.config.name=GraalVM 序列化配置
graalvm.pre.run.task.native.image.args=原生镜像实参\:
graalvm.pre.run.task.target=构建环境\:
graalvm.remote.attach.configuration.container.lookup=正在创建附加容器
graalvm.remote.attach.configuration.type.description=GraalVM 远程调试
graalvm.remote.attach.configuration.type.name=GraalVM 远程调试
graalvm.run.config.missing.symbol.file=未指定符号文件
graalvm.run.configuration.error.no.class.specified=未指定类。
graalvm.run.configuration.error.no.image.specified=未指定可执行文件
graalvm.run.configuration.error.no.module.specified=未指定类路径模块。
graalvm.run.configuration.error.no.symbol.info.specified=未指定符号文件.
graalvm.run.configuration.name.application=GraalVM 编译的应用程序 `{0}`
graalvm.run.line.marker.text=作为 GraalVM 应用程序运行
graalvm.runconfig.argumentsLabel=实参\:
graalvm.runconfig.attach.name=附加字符串(host\:port)\:
graalvm.runconfig.docker.container.name=Docker 容器名称/ID
graalvm.runconfig.docker.container.pid=目标 PID
graalvm.runconfig.docker.containers=Docker 容器
graalvm.runconfig.docker.process.shared.display.name={0, number, \#}\: {1}
graalvm.runconfig.docker.progress.pid.mode.fetching=正在从容器中获取 pid 模式
graalvm.runconfig.environmentVariables=环境变量\:
graalvm.runconfig.fileHint=GraalVM 镜像
graalvm.runconfig.gdbserver.launch=启动 Gdb 服务器
graalvm.runconfig.imageFileNameLabel=可执行文件\:
graalvm.runconfig.mapping-label=源映射\:
graalvm.runconfig.module=使用模块的类路径\:
graalvm.runconfig.process.id=进程 ID
graalvm.runconfig.symbol-file=符号文件\:
graalvm.runconfig.symbolInfoFileHint=GraalVM 调试信息符号
graalvm.runconfig.system-root=系统根\:
graalvm.runconfig.system-root-path=系统根
graalvm.runconfig.table.local=本地源\:
graalvm.runconfig.table.remote=远程源\:
graaplvm.application.main.class=主类\:
method.invoke.notsupported=不支持类方法调用
newinstance.notsupported=不支持类实例化
notification.group.unsupported.graalvm.platform=不受支持的 GraalVM 平台
