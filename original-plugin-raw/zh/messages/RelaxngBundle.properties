action.ConvertSchemaAction.description=将所选架构文档 (RNG、RNC、XSD、DTD) 转换为另一种格式
action.ConvertSchemaAction.text=转换架构…
filetype.relaxng.compact-syntax.description=RELAX NG 紧凑语法
prefix=前缀
relaxng.annotator.definition-doesnt-override-anything-from=定义不重写 {0} 中的任何内容
relaxng.annotator.overrides.x.in.y=重写 {1} 中的 ''{0}''
relaxng.annotator.unresolved-namespace-prefix=未解析的命名空间前缀 ''{0}''
relaxng.annotator.unresolved-pattern-reference=未解析的模式引用 ''{0}''
relaxng.convert-schema.action.title.non-xml=转换架构…
relaxng.convert-schema.action.title.xml-files=从 XML {0, choice, 1\#文件|2\#文件} 生成架构…
relaxng.convert-schema.advanced-options.dialog.title=高级转换选项
relaxng.convert-schema.advanced-options.dtd.action.remove-entry.description=移除条目
relaxng.convert-schema.advanced-options.dtd.border-title.dtd-input=DTD 输入
relaxng.convert-schema.advanced-options.dtd.border-title.namespace-settings=命名空间设置
relaxng.convert-schema.advanced-options.dtd.checkbox.generate-start=generate-start(&G)
relaxng.convert-schema.advanced-options.dtd.checkbox.inline-attlist=inline-attlist(&I)
relaxng.convert-schema.advanced-options.dtd.checkbox.strict-any=strict-any(&S)
relaxng.convert-schema.advanced-options.dtd.label.annotation-prefix=annotation-prefix(&O)\:
relaxng.convert-schema.advanced-options.dtd.label.any-name=any-name(&N)\:
relaxng.convert-schema.advanced-options.dtd.label.attlist-define=attlist-define(&A)\:
relaxng.convert-schema.advanced-options.dtd.label.colon-replacement=colon-replacement(&C)\:
relaxng.convert-schema.advanced-options.dtd.label.default=默认(&D)\:
relaxng.convert-schema.advanced-options.dtd.label.element-define=element-define(&E)\:
relaxng.convert-schema.advanced-options.dtd.tooltip.annotation-prefix=默认值使用注解特性 prefix\:defaultValue 表示，其中前缀绑定到 RELAX NG DTD 兼容性委员会规范定义的 http\://relaxng.org/ns/compatibility/annotations/1.0。默认情况下，Trang 将为前缀使用 a，除非该前缀与 DTD 中使用的前缀冲突。
relaxng.convert-schema.advanced-options.dtd.tooltip.any-name=对于 DTD 中声明为具有 ANY 内容模型的元素，指定为元素内容生成的定义名称。
relaxng.convert-schema.advanced-options.dtd.tooltip.attlist-define=这指定了如何从元素的名称构造表示特性列表声明的定义名称。名称模式必须恰好包含一个百分号字符。此百分号字符将被替换为元素的名称(在冒号替换后)，并且结果将用作定义的名称。
relaxng.convert-schema.advanced-options.dtd.tooltip.colon-replacement=在构造用于表示 DTD 中元素声明和特性列表声明的定义名称时，将元素名称中的冒号替换为字符。Trang 为 DTD 中的每个元素声明和特性列表声明生成定义。定义名称基于元素的名称。在 RELAX NG 中，定义名称不能包含冒号。但在 DTD 中，元素名称可以包含冒号。默认情况下，Trang 将首先尝试使用不带前缀的元素名称。如果这引起冲突，会将冒号替换为合法的名称字符(首先尝试使用句点)。
relaxng.convert-schema.advanced-options.dtd.tooltip.element-define=指定如何根据元素名称构造表示元素声明的定义名称。名称模式必须只包含一个百分号字符。此百分号字符被替换为元素名称(在进行冒号替换后)，结果用作定义名称
relaxng.convert-schema.advanced-options.dtd.tooltip.generate-start=指定 Trang 是否应生成起始元素。DTD 未指示允许哪些元素作为文档元素。Trang 假定允许所有已定义但从未引用的元素作为文档元素。
relaxng.convert-schema.advanced-options.dtd.tooltip.inline-attlist=指定不生成特性列表声明的定义，而是将特性列表声明中声明的特性移至为元素声明生成的定义中。这是输出模块为 xsd 时的默认行为。否则，默认行为如 -i no-inline-attlist 形参中所述。
relaxng.convert-schema.advanced-options.dtd.tooltip.strict-any=通过对声明的所有元素使用显式选择的引用，保留 ANY 内容模型的确切语义。默认情况下，Trang 使用允许任意元素的通配符。
relaxng.convert-schema.advanced-options.xsd.border-title.w3c-xml-schema-output=W3C XML 架构输出
relaxng.convert-schema.advanced-options.xsd.checkbox.disable-abstract-elements=disable-abstract-elements(&D)
relaxng.convert-schema.advanced-options.xsd.label.any-attribute-process-contents=any-attribute-process-contents(&N)
relaxng.convert-schema.advanced-options.xsd.label.any-process-contents=any-process-contents(&A)
relaxng.convert-schema.advanced-options.xsd.tooltip.any-attribute-process-contents=指定任意特性元素的 processContents 特性的值。\n默认为 skip (对应 RELAX NG 语义)。
relaxng.convert-schema.advanced-options.xsd.tooltip.any-process-contents=指定任意元素的 processContents 特性的值。\n默认为 skip (对应 RELAX NG 语义)，除非输入格式为 dtd，\n在这种情况下，默认为 strict (对应\nDTD 语义)。
relaxng.convert-schema.advanced-options.xsd.tooltip.disable-abstract-elements=在生成的 XML 架构中禁用\n抽象元素和替换组。\n也可以使用注解特性进行控制。
relaxng.convert-schema.dialog.file-exists.message=文件 ''{0}'' 已存在。是否覆盖?
relaxng.convert-schema.dialog.file-exists.title=输出文件存在
relaxng.convert-schema.dialog.title=转换架构文件
relaxng.convert-schema.settings.border-title.output-destination=输出目标
relaxng.convert-schema.settings.border-title.output-options=输出选项
relaxng.convert-schema.settings.border-title.output-type=输出类型
relaxng.convert-schema.settings.destination.message=请选择应放置生成文件的目标
relaxng.convert-schema.settings.destination.title=模式转换目标
relaxng.convert-schema.settings.label.encoding=编码(&E)\:
relaxng.convert-schema.settings.label.indent=缩进(&I)\:
relaxng.convert-schema.settings.label.line-length=行长度(&L)\:
relaxng.convert-schema.settings.radio-button.dtd=DTD(&D)
relaxng.convert-schema.settings.radio-button.relax-ng-compact-syntax=RELAX NG - 紧凑语法(&C)
relaxng.convert-schema.settings.radio-button.relax-ng-xml-syntax=RELAX NG - XML 语法(&R)
relaxng.convert-schema.settings.radio-button.w3c-xml-schema=W3C XML 架构(&S)
relaxng.gutter.go-to-overridden-define=转到被重写的定义
relaxng.gutter.go-to-overriding-defines=转到重写定义
relaxng.gutter.is-overridden=被重写
relaxng.inspection.group-name=RELAX NG
relaxng.inspection.unresolved-reference.name=未解析的引用
relaxng.inspection.unused-define.message=未引用的定义
relaxng.inspection.unused-define.name=未使用的定义
relaxng.message-viewer.tab-title.convert-schema=转换架构
relaxng.message-viewer.tab-title.validate-relax-ng=验证 RELAX NG
relaxng.message-viewer.warning.message={0} 仍在运行。仍要关闭?
relaxng.message-viewer.warning.title={0} 正在运行
relaxng.parse.error.equals-expected=应为 \=
relaxng.parse.error.equals-orequals-or-andequals-expected=应为 \=、|\= 或 \\&\=
relaxng.parse.error.identifier-expected=应为标识符
relaxng.parse.error.lbrace-expected=应为 {
relaxng.parse.error.literal-expected=应为字面量
relaxng.parse.error.name-class-expected=应为名称类
relaxng.parse.error.namespace-expected=应为 'namespace'
relaxng.parse.error.namespace-uri-or-inherit-expected=应为命名空间 URI 或 'inherit'
relaxng.parse.error.pattern-expected=应为模式
relaxng.parse.error.rbrace-expected=应为 }
relaxng.parse.error.rparen-expected=应为 )
relaxng.parse.error.uri-literal-expected=应为 URI 字面量
relaxng.quickfix.create-declaration.name=创建{0}声明 ''{1}''
relaxng.quickfix.create-pattern.family=创建模式
relaxng.quickfix.create-pattern.name=创建模式 ''{0}''
relaxng.quickfix.remove-define=移除定义
relaxng.suppress.action.name=对{0}禁止
relaxng.symbol.pattern-definition=模式定义
