action.GraphQLCreateConfigFile.description=创建新的 GraphQL 配置文件
action.GraphQLCreateConfigFile.text=GraphQL 配置
action.GraphQLEditEnvironmentVariables.text=编辑 GraphQL 环境变量
action.GraphQLExecuteEditor.description=针对指定的 GraphQL 端点执行当前的 GraphQL 文件
action.GraphQLExecuteEditor.text=执行 GraphQL
action.GraphQLMigrateLegacyConfig.text=迁移 GraphQL 配置
action.GraphQLNewFileAction.description=创建新的 GraphQL 文件
action.GraphQLNewFileAction.text=GraphQL 文件
action.GraphQLRerunLatestIntrospection.description=重新运行执行的最新内省查询以更新本地架构，例如，当远程架构已更改时
action.GraphQLRerunLatestIntrospection.text=重新运行内省查询
action.GraphQLRestartSchemaDiscovery.description=在整个项目中执行 GraphQL 架构发现
action.GraphQLRestartSchemaDiscovery.text=重新启动架构发现
advanced.setting.graphql.introspection.detect.schema.capabilities=架构功能检测模式
advanced.setting.graphql.introspection.detect.schema.capabilities.description=在架构内省之前启用初步请求来检测 GraphQL 服务器功能。
advanced.setting.graphql.introspection.include.empty.types=在内省结果中包含空类型
advanced.setting.graphql.introspection.skip.default.values=在内省查询中跳过默认值
advanced.setting.graphql.introspection.skip.default.values.description=通过跳过默认值来提高与不兼容端点的兼容性，但这会从架构中移除默认值信息。
graphql=GraphQL
graphql.action.add.schema.configuration.text=添加架构配置
graphql.action.adds.new.graphql.configuration.file.description=添加新的 GraphQL 配置文件
graphql.action.create.config.file.command=创建 GraphQL 配置
graphql.action.create.file.from.template.dialog.kind=GraphQL 文件
graphql.action.create.file.from.template.dialog.title=新建 GraphQL 文件
graphql.action.create.file.from.template.name=创建 GraphQL {0}
graphql.action.edit.environment.variables.toolbar.title=编辑环境变量
graphql.action.edit.selected.schema.configuration.text=编辑所选架构配置
graphql.action.open.config.file.title=打开配置文件
graphql.action.open.introspection.schema.title=打开内省架构
graphql.action.opens.graphql.config.file.for.selected.schema.description=打开所选架构的 GraphQL 配置文件
graphql.action.rerun.latest.introspection.schema.title=重新运行内省查询({0})
graphql.action.run.introspection.query.title=运行内省查询
graphql.action.schemas.panel.help.text=帮助
graphql.action.schemas.panel.open.documentation.description=打开 GraphQL 插件文档
graphql.action.toggle.variables.editor.desc=切换 GraphQL 变量编辑器
graphql.action.toggle.variables.editor.title=切换变量编辑器
graphql.attribute.descriptor.argument=实参
graphql.attribute.descriptor.comment=评论
graphql.attribute.descriptor.constant=常量
graphql.attribute.descriptor.directive=指令
graphql.attribute.descriptor.field.alias=字段别名
graphql.attribute.descriptor.field.name=字段名称
graphql.attribute.descriptor.fragment.definition=片段定义
graphql.attribute.descriptor.fragment.spread=片段传播
graphql.attribute.descriptor.keyword=关键字
graphql.attribute.descriptor.number=数字
graphql.attribute.descriptor.object.field=对象字段
graphql.attribute.descriptor.operation.definition=操作定义
graphql.attribute.descriptor.parameter=形参
graphql.attribute.descriptor.string=字符串
graphql.attribute.descriptor.type.name=类型名称
graphql.attribute.descriptor.unused.fragment=未使用的片段
graphql.attribute.descriptor.variable=变量
graphql.attribute.descriptor.variable.definition=变量定义
graphql.command.name.reformat.generated.graphql.sdl=重新设置生成的 GraphQL SDL 格式
graphql.config.error.title=GraphQL 配置错误
graphql.config.evaluation.error=无法评估配置
graphql.config.evaluation.interpreter.not.found.error=无法评估 GraphQL 配置文件 ''{0}''，因为找不到 Node.js 解释器
graphql.config.legacy.schema.name=GraphQL 旧版配置
graphql.config.node.interpreter.error=找不到 Node.js 解释器
graphql.config.reload=重新加载
graphql.config.schema.name=GraphQL 配置
graphql.dialog.title.select.graphql.configuration.folder=选择 GraphQL 配置文件夹
graphql.dialog.title.select.graphql.schema.base.directory=选择 GraphQL 架构基目录
graphql.editor.element.is.included.in.query.execution=元素包含在查询执行中
graphql.editor.hint.text.executed.selection=已执行选区
graphql.editor.query.hint.description=将文本光标放在<a href\="{0}">操作内部</a>以单独执行该操作。<br>自动包含引用的片段。<br><div style\="margin\: 4px 0 4px 0;"><a style\="text-decoration\: none" href\="{1}">不再显示</a></div>
graphql.endpoint.tooltip=GraphQL 端点
graphql.environment.variables.dialog.title=GraphQL 环境变量
graphql.find.usage.argument=实参
graphql.find.usage.directive=指令
graphql.find.usage.enum.value=枚举值
graphql.find.usage.field=字段
graphql.find.usage.fragment=片段
graphql.find.usage.type=类型
graphql.find.usage.unknown=未知
graphql.hint.text.executed.anonymous.operation=已执行匿名{0}
graphql.hint.text.executed.buffer=已执行缓冲区“{0}”
graphql.hint.text.executed.named.operation=已执行{0}“{1}”
graphql.hint.text.failed.to.parse.variables.as.json=无法将变量解析为 JSON\:\n{0}
graphql.inspection.deprecated.symbols.description.template=已弃用\: {0}
graphql.inspection.deprecated.symbols.description.template.default=使用了弃用的符号，请查阅文档了解更好的替代方案
graphql.inspection.display.name.deprecated.symbols=弃用的符号
graphql.inspection.display.name.duplicate.argument=重复实参
graphql.inspection.display.name.duplicate.directive=重复指令
graphql.inspection.display.name.empty.type=空类型
graphql.inspection.display.name.illegal.directive.argument=非法指令实参
graphql.inspection.display.name.illegal.name=非法名称
graphql.inspection.display.name.interface.implementation=接口实现
graphql.inspection.display.name.invalid.directive.location=指令位置无效
graphql.inspection.display.name.member.redefinition=成员重新定义
graphql.inspection.display.name.missing.type=缺少类型
graphql.inspection.display.name.schema.validation=架构验证
graphql.inspection.display.name.type.redefinition=类型重新定义
graphql.inspection.display.name.unexpected.type=意外类型
graphql.inspection.display.name.unresolved.reference=未解析的引用
graphql.inspection.go.to.related.definition.family.name=导航至相关定义
graphql.inspection.go.to.related.definition.name=导航至相关定义 ''{0}''
graphql.inspection.group.general=常规
graphql.inspection.group.schema=架构
graphql.inspection.related.definitions=相关定义\:
graphql.inspection.suppress.for.definition=对定义禁止
graphql.inspection.suppress.for.file=对文件禁止
graphql.intention.create.missing.type.definition.family.name=创建缺少的类型定义
graphql.intention.name.add.missing.type=添加 "{0} {1}"
graphql.introspection.capabilities.detection.failed.errors=内省功能检测查询返回了错误\: {0}
graphql.introspection.errors=内省查询返回错误\: {0}
graphql.introspection.missing.data=`data` 键应出现在查询结果中。
graphql.introspection.missing.schema=`__schema` 键应出现在查询结果数据中。
graphql.introspection.run.query=运行内省查询以生成 GraphQL SDL 架构文件
graphql.library.apollokotlin=Apollo Kotlin
graphql.library.built.in=规范
graphql.library.federation=Federation
graphql.library.prefix=GraphQL\: {0}
graphql.library.relay=Relay
graphql.line.marker.generate.schema.file=生成 GraphQL SDL 架构文件
graphql.notification.config.not.found.body=搜索当前目录和父目录，直至项目根。
graphql.notification.config.not.found.create.action=创建配置文件
graphql.notification.config.not.found.title=找不到 GraphQL 配置
graphql.notification.configuration.error=GraphQL 配置错误
graphql.notification.content.open.schema.file=打开架构文件
graphql.notification.content.request.to.url.failed=对 {0} 的 GraphQL 请求失败。
graphql.notification.content.unable.to.create.file.in.directory=无法在目录 ''{1}'' 中创建文件 ''{0}''\: {2}
graphql.notification.error.title=GraphQL 错误
graphql.notification.introspection.empty.endpoint.url=请在配置文件中提供非空端点 URL。
graphql.notification.introspection.empty.schema.path=请在配置文件中提供架构的有效路径。第一个架构模式应包含文件在文件系统中的正确路径。{0}
graphql.notification.introspection.empty.schema.path.provided=提供了 ''{0}''。
graphql.notification.introspection.endpoint.config.not.found=找不到端点的配置。
graphql.notification.introspection.error.body=无法使用内省结果构建有效架构。
graphql.notification.introspection.error.title=GraphQL 内省
graphql.notification.introspection.parse.error=服务器内省响应无法解析为有效的 JSON 对象。
graphql.notification.introspection.spec.error.body=无法使用内省结果构建有效架构。端点可能不遵循 GraphQL 规范。
graphql.notification.introspection.unable.to.build.path=无法构建文件路径来保存内省结果
graphql.notification.invalid.config.file=GraphQL 配置文件无效
graphql.notification.load.schema.from.endpoint.action=内省 ''{0}''
graphql.notification.load.schema.from.endpoint.body=内省 ''{0}'' 以更新本地架构文件。
graphql.notification.load.schema.from.endpoint.title=是否立即从端点获取 GraphQL 架构?
graphql.notification.migrate.config.action=迁移
graphql.notification.migrate.config.text=将 GraphQL 配置迁移到新语法
graphql.notification.open.file=打开 ''{0}''
graphql.notification.retry=重试
graphql.notification.sdl.generation.error.text=无法使用提供的内省结果构建有效的 GraphQL 架构
graphql.notification.sdl.generation.hide.notification.action=隐藏通知
graphql.notification.sdl.generation.stack.trace.action=堆栈跟踪
graphql.notification.sdl.generation.syntax.error.text=服务器内省响应无法解析为有效的 JSON 对象
graphql.notification.show.query.error.details.action=显示错误
graphql.notification.ssl.cert.error.title=SSL 证书错误
graphql.notification.title.limit.graphql.that.sent.to.server=限制发送到服务器的查询
graphql.notification.title.unable.to.create=无法创建 {0}
graphql.notification.trust.all.hosts=信任所有主机
graphql.notification.unable.to.create.file=无法在目录 ''{1}'' 中创建文件 ''{0}''.
graphql.notification.unable.to.delete.file=无法删除目录 ''{1}'' 中的文件 ''{0}''。
graphql.notification.unable.to.open.editor=无法打开 ''{0}'' 的编辑器
graphql.notification.unable.to.parse.file=无法解析 {0}
graphql.parsing.error.injection.placeholder=注入占位符
graphql.progress.executing.introspection.query=正在执行 GraphQL 内省查询
graphql.progress.title.executing.graphql=正在执行 GraphQL
graphql.query.result.statistics={0}\: {1} 毫秒执行时间，{2} 响应
graphql.query.result.statistics.error=, {0} {1}
graphql.query.result.statistics.multiple.errors=错误
graphql.query.result.statistics.single.error=错误
graphql.query.result.window.bytes.count={0} 字节
graphql.schema.is.too.complex.error.text=架构大小超出了 {0} 类型定义的上限。此上限由 IDE 设置，以防止出现性能问题。要解决此问题，请考虑通过创建 GraphQL 配置文件来定义更具体的作用域
graphql.search.schema.registry.0=搜索架构注册表“{0}”
graphql.settings.frameworks=框架
graphql.settings.introspection=内省
graphql.settings.introspection.open.editor.label=在编辑器中打开内省结果
graphql.tab.title.graphql.schema=GraphQL 架构({0})
graphql.tab.title.query.result=查询结果
graphql.tab.title.schemas.project.structure=架构和项目结构
graphql.tooltip.endpoints.perform.introspection.queries.mutations=端点允许您执行 GraphQL 内省、查询和变异
graphql.tooltip.search.schema.registry=双击或按 Enter 搜索架构注册表
graphql.toolwindow.action.create.scratch=新建 GraphQL 临时文件
graphql.toolwindow.action.introspect.endpoint=从端点获取 GraphQL 架构
graphql.toolwindow.default.schema.node.name=默认的项目范围架构
graphql.toolwindow.discovery.not.completed=架构发现尚未完成
graphql.toolwindow.projects.node.name=项目
graphql.toolwindow.schema.content.directives.count={0} 条指令
graphql.toolwindow.schema.content.empty.node.tooltip=架构为空
graphql.toolwindow.schema.content.enums.count={0} 个枚举
graphql.toolwindow.schema.content.inputs.count={0} 个输入
graphql.toolwindow.schema.content.interfaces.count={0} 个接口
graphql.toolwindow.schema.content.node.name=架构发现摘要
graphql.toolwindow.schema.content.scalars.count={0} 个标量
graphql.toolwindow.schema.content.types.count={0} 个类型
graphql.toolwindow.schema.content.unions.count={0} 个联合体
graphql.toolwindow.schema.endpoints.default.node.name=默认架构中没有可用的端点
graphql.toolwindow.schema.endpoints.list.node.name=端点
graphql.toolwindow.schema.error.node.tooltip=双击可打开堆栈跟踪
graphql.toolwindow.schema.errors.list.node.empty.errors=未发现错误
graphql.toolwindow.schema.errors.list.node.name=架构错误
graphql.validation.did.you.mean.0=。您是否指的是 {0}?
graphql.validation.enum.values.can.not.be.named.0=枚举值不能命名为 ''{0}''
graphql.validation.field.name.suggestion.delimiter=, 或
graphql.validation.interface.type=接口
graphql.validation.object.type=对象
graphql.validation.on.0.type.1=(在{0}类型“{1}”上)
graphql.validation.on.input.type.0=(在输入类型“{0}”上)
graphql.validation.parent.selection.or.operation.does.not.resolve.to.a.valid.schema.type=\: 父选区或操作未解析为有效的架构类型
graphql.validation.unknown.argument.0=未知实参“{0}”
graphql.validation.unknown.directive.0=未知指令“{0}”
graphql.validation.unknown.directive.location.0=未知指令位置 ''{0}''
graphql.validation.unknown.field.0=未知字段“{0}”
graphql.validation.unknown.fragment.spread.0=未知片段传播“{0}”
graphql.validation.unknown.type.0=未知类型“{0}”
group.advanced.settings.graphql=GraphQL
