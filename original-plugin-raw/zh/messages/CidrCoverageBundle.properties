coverage.cleaning.directory=正在清理覆盖率输出目录…
coverage.processing.progress=正在处理覆盖率数据…
coverage.reading.output.data=正在解析覆盖率数据…
coverage.processing.failed=无法处理覆盖率数据:\n{0}
coverage.download.progress=正在下载覆盖率数据…
coverage.tool.not.found=找不到 {0} 工具
coverage.tool.version.mismatch={0}的版本({1})与编译器的版本({2})不匹配:\n这可能会导致覆盖率结果不完整或为空
coverage.not.available=代码覆盖率不适用于给定的运行配置
coverage.message.with.configure={0}\n<a href="">配置</a>
coverage.not.found=找不到代码覆盖率数据\n确保使用所需的编译器选项编译目标应用程序
coverage.not.found.auto.fix=找不到代码覆盖率数据\n确保使用所需的编译器选项编译目标应用程序\n要自动添加吗?\n<a href="">修正并重新运行</a>
coverage.auto.fix.failed=无法添加所需编译器选项
coverage.auto.fix.manual.execution=所需编译器选项已添加\n请手动重新运行代码覆盖率
coverage.process.execution.failed=覆盖率数据可能不完整:\n进程以非零退出代码完成
coverage.profile.name.suffix=覆盖率
llvm.name=LLVM
llvm.tools.missing=找不到 LLVM 覆盖率工具
llvm.profdata.merge.failed=llvm-profdata 合并工具因错误而失败:\n{0}
llvm.cov.export.failed=llvm-cov 导出工具因错误而失败:\n{0}
gcov.llvm.name=gcov/llvm
gcov.name=gcov/llvm-cov
gcov.tools.missing=找不到 gcov/llvm-cov 覆盖率工具
gcov.tools.failed=无法生成覆盖率数据\n{0}
tool.executable.path={0} 可执行文件路径
specify.tool.path.placeholder=指定可执行文件路径，或将其留空以让 CLion 自动检测
gcov.binary.row.title=gcov:
llvm.cov.binary.row.title=llvm-cov:
llvm.profdata.binary.row.title=llvm-profdata:
show.branch.coverage.checkbox=显示分支覆盖率
show.branch.coverage.hint=支持 GCC/LLVM (12.0.0 或更高版本)
branch.coverage.table.column.name=分支覆盖率(%)
line.coverage.table.column.name=行覆盖率(%)
coverage.view.branches.covered=覆盖 {0}% 的分支
coverage.not.found.ctest.fix=对于 CTest 执行，<a href="">切换到 --coverage 编译器标志</a>