action.AnActionButton.description.disable.selected=禁用所选项
action.AnActionButton.description.duplicate=重复
action.AnActionButton.description.enable.selected=启用所选项
action.AnActionButton.description.export=导出
action.AnActionButton.description.import=导入
action.AnActionButton.text.disable.selected=禁用所选项
action.AnActionButton.text.duplicate=复制
action.AnActionButton.text.enable.selected=启用所选项
action.AnActionButton.text.export=导出
action.AnActionButton.text.import=导入
action.add.field.watchpoint.text=添加字段观察点
action.auto.variables.mode=仅显示执行点附近的变量
action.auto.variables.mode.description=仅显示执行点附近使用的变量
action.calculate.retained.size.info=''{0}'' 的保留对象高亮显示
action.calculate.retained.size.text=''{0}'' 的保留大小为 {1}，浅层大小为 {2}
action.calculate.retained.size.title=''{0}'' 的保留大小
action.calculate.retained.size.waiting.message=正在计算保留大小…
action.do.not.stop.if.called.from.text=从以下项调用时不要停止\: {0}
action.do.not.stop.in.class.text=不要在类中停止\: {0}
action.failed=操作失败
action.hide.text=隐藏
action.interrupt.thread.text=中断
action.resume.thread.text.resume=恢复
action.show.objects.text=显示 {0} 对象…
action.stop.only.if.called.from.text=仅当从以下项调用时停止\: {0}
action.stop.only.in.class.text=仅在类中停止\: {0}
action.stop.only.in.current.object.text=仅在当前对象中停止
action.watch.method.return.value.description=启用观察上次执行的方法返回值
action.watches.method.return.value.enable=显示方法返回值
action.watches.method.return.value.unavailable.reason=目标VM不支持的功能
add.exception.breakpoint.classchooser.title=输入异常类
add.field.breakpoint.dialog.classchooser.title=选择字段的类
add.field.breakpoint.dialog.field.chooser.title={0,choice, 0\#类没有字段|1\#选择字段}
add.field.breakpoint.dialog.title=添加字段监视
add.instance.filter.dialog.error.numeric.value.expected=实例 ID 应为 'long' 类型的数值
add.instance.filter.dialog.prompt=输入实例ID\:
add.instance.filter.dialog.title=添加实例过滤器
add.method.breakpoint=添加方法断点
add.stepping.filter=添加步进筛选器
array.filter.node.clear.link=\ 清除
async.stacktraces.configurable.display.name=异步堆栈跟踪
breakpoint.any.exception.display.name=任何异常
breakpoint.properties.panel.option.caller.filter=调用方筛选器(&R)\:
breakpoint.properties.panel.option.catch.class.filters=捕捉类过滤器\:
breakpoint.properties.panel.option.class.filters=类筛选器(&L)\:
breakpoint.properties.panel.option.instance.filters=实例筛选器(&I)\:
breakpoint.properties.panel.option.pass.count=合格次数(&P)\:
breakpoint.property.name.class.filters=类筛选器\:
breakpoint.property.name.instance.filters=实例过滤器\:
breakpoint.property.name.pass.count=合格次数\:
breakpoint.variant.text.line=行
breakpoint.variant.text.line.and.lambda=行和 {0,choice,1\#Lambda|2\#Lambda}
breakpoint.variant.text.line.and.lambda.uknown.count=行和 Lambda
button.add=添加
button.copy=复制
button.debugger.settings=调试器设置…
button.drop.anyway=不执行
button.execute.finally=执行 finally 块
button.perform.reload.classes=执行重新加载类(&R)
button.skip.reload.classes=跳过重新加载类(&S)
call.tracer=调用跟踪器
caller.filters.dialog.title=调用方筛选器
cancel.emulation=取消仿真
capture.node.settings.link=\ 设置
checkbox.start.tracing=开始
checkbox.stop.tracing=停止
checkbox.tracing=跟踪
checkbox.tracking.filters=筛选器
class.filters.dialog.exclusion.filters.group=类排除过滤器
class.filters.dialog.inclusion.filters.group=包含
class.filters.dialog.title=类过滤器
class.pattern.not.specified=未指定类模式
collection.history=集合历史记录
collection.history.tab.title={0} 的历史记录
collection.watchpoint.description=集合观察点
collection.watchpoints.tab.title=Java 集合观察点
column.name.hits=命中
column.name.instances=实例
column.name.retained.size=保留大小
column.name.shallow.size=浅层大小
column.name.time.ms=时间(毫秒)
command.name.surround.with.runtime.cast=使用运行时转换包围
condition=条件\:
debugger.actions.group.title=调试器操作
debugger.attach.group.name.java=Java
debugger.attach.group.name.java.read.only=Java 只读
debugger.attach.password.for.sudo=输入密码以使用 su 权限连接\: 
debugger.collection.visualizer.title=集合表示
debugger.collection.visualizer.title.0=集合表示\: {0}
debugger.data.views.configurable.show.title=显示
debugger.jdi.bootstrap.error={0}。请检查您的 JDK 安装。
debugger.memory.agent.loading.error=无法将内存代理加载到虚拟机
debugger.memory.agent.timeout.error=计算超时(堆过大，内存代理无法在合理时间内执行此操作，建议捕获堆转储)
debugger.variables.not.available.in.async=变量不适用于异步堆栈框架
default.package.name=<默认>
dialog.title.exception.to.throw=要抛出的异常
dialog.title.return.value=返回值
drop.frame.error.no.information=有关框架的信息不可用
editor.notification.alternative.source=类{0}的替代来源
enable.tracking.for.new.instances=启用新实例的跟踪
error.absent.exception.breakpoint.class.name=没有异常断点的类名
error.array.renderer.configurable.end.index.less.than.start=结束索引小于开始索引
error.array.renderer.configurable.start.index.less.than.zero=开始索引小于 0
error.breakpoint.file.not.found=文件 ''{0}'' 未找到; b此文件的断点将被忽略
error.cannot.create.expression.from.code.fragment=无法从代码段创建表达式。
error.cannot.load.breakpoint.file=无法加载文件 ''{0}''; 此文件的断点将被忽略
error.cannot.open.debugger.port=无法打开调试器端口
error.class.circularity.error=类循环错误\: {0}
error.class.def.not.found=找不到类定义 \: {0}
error.class.format.error=类格式错误 \: {0}
error.class.not.loaded=未加载类\: {0}
error.compound.renderer.configurable.fqn.generic=不允许泛型类型
error.context.has.changed=上下文已经改变，操作是不可能的
error.context.not.available=上下文不可用
error.corrupt.debug.info=调试信息可能已损坏\: {0}
error.debug.connector.not.found=找不到所需的连接器 ''{0}''。检查您的 JDK 安装。
error.debugger.already.listening=调试器已经在侦听
error.early.return=早期返回时出错\: {0}
error.evaluating.breakpoint.condition.or.action=处理虚拟机事件的问题\:\n断点\: ''{0}''\n错误\: {1}\n是否要在断点处停止?
error.exception.while.connecting=连接到远程进程时出错。\n发生异常\: {0}\n异常消息\: {1}
error.exception.while.reloading=重新加载类时出现异常 \: {0} \: {1}
error.executing.finally=执行 finally 块时出错\: {0}
error.failed.evaluating.breakpoint.condition=无法对断点条件求值\n''{0}''\n原因\: {1}
error.field.breakpoint.class.name.not.specified=无法添加监视点\: 未指定类名
error.field.breakpoint.class.sources.not.found=无法为 ''{0}.{1}'' 创建字段观察点。\n没有类 ''{2}'' 的源
error.field.breakpoint.field.name.not.specified=无法添加监视点\: 未指定字段名称
error.field.breakpoint.field.not.found=无法为 ''{0}.{1}'' 创建字段观察点。\n找不到字段 ''{2}''
error.field.not.found.in.class={1}中没有此类字段{0}
error.inconsistent.debug.info=不一致的调试信息
error.internal=内部错误
error.invalid.argument={0,choice, 1\#无效实参|2\#实参无效} 
error.invalid.breakpoint.method.not.found=在类{0}未找到方法
error.invalid.breakpoint.missing.field.in.class=在类 ''{1}'' 中找不到字段 ''{0}''
error.invalid.breakpoint.no.executable.code=在类{1}中的行{0}处找不到可执行代码
error.invalid.breakpoint.no.line.info=行号信息在类{0}不可用
error.invalid.breakpoint.source.changed=源文件已更改或找到源文件与断点的文件不对应
error.invalid.breakpoint.source.not.found=在项目类路径中找到的类{0}没有关联的源文件
error.invalid.field.name=字段名无效 ''{0}''
error.invalid.local.variable.name=无效的局部变量名''{0}''
error.invalid.stackframe=内部异常 - 无效的堆栈帧
error.invalid.type.name=无效的类型名称''{0}''
error.io.error=I/O 错误
error.jdk.not.specified=JDK未指定
error.native.method.exception=所有帧和包括帧都不是原生的
error.no.debug.attach.port=要附加到未指定的端口
error.no.debug.listen.port=未指定的监听端口
error.no.debug.process=无调试进程
error.no.pid=未指定 Pid
error.no.shmem.address=未指定共享内存地址
error.operation.canceled=操作被取消
error.operation.not.supported.by.vm=虚拟机不支持的操作\: {0}
error.pop.bottom.stackframe=无法弹出底部框架
error.pop.stackframe=弹出框架时发生错误\: {0}
error.running.to.cursor.no.executable.code={0}没有可执行代码\:{1}
error.text.invalid.port=未指定端口
error.throw.exception=抛出异常时出错\: {0}
error.unable.to.create.sapidattachingconnector=无法创建 SAPIDAttachingConnector
error.unable.to.evaluate.capture.expression=无法对捕获键表达式求值\: {0}
error.unable.to.evaluate.children.expression=无法对子呈现器表达式求值
error.unable.to.evaluate.expression=无法对表达式求值
error.unable.to.evaluate.insert.expression=无法对插入键表达式求值\: {0}
error.unknown.host=无法连接到远程进程。主机未知
error.unknown.host.with.address=无法连接到远程进程。主机未知({0})
error.unsupported.class.version=不支持的类版本 \: {0}
error.verification.error=验证错误 \: {0}
error.vm.disconnected=VM断开连接. 目标虚拟机关闭连接
evaluation.error.anonymous.class.evaluation.not.supported=不支持匿名类求值
evaluation.error.array.collected=已收集数组
evaluation.error.array.dimention.numeric.value.expected=数字值应为数组维度
evaluation.error.array.reference.expected=应为数组引用
evaluation.error.array.type.expected=应为数组类型
evaluation.error.boolean.condition.expected=条件中应为 'boolean' 值
evaluation.error.boolean.expected=应为布尔值
evaluation.error.boolean.value.expected.in.condition=条件中预估值为'boolean'
evaluation.error.cannot.cast.boolean=不能将布尔转换为''{0}''
evaluation.error.cannot.cast.char=不能将字符转换为''{0}''
evaluation.error.cannot.cast.null=不能将null转换为''{0}''
evaluation.error.cannot.cast.numeric=不能将数字转换为''{0}''
evaluation.error.cannot.cast.object=不能转换''{0}''为''{1}''
evaluation.error.cannot.evaluate.array.initializer=无法对数组初始值设定项求值
evaluation.error.cannot.evaluate.class.type=无法对类类型求值
evaluation.error.cannot.evaluate.qualifier=无法对限定符 ''{0}'' 求值
evaluation.error.cannot.evaluate.tostring=无法对 {0}.toString() 求值
evaluation.error.cannot.find.source=找不到 {0} 的源类
evaluation.error.cannot.find.stackframe.source=找不到当前堆栈帧的源类
evaluation.error.cannot.initialize.array=无法初始化数组
evaluation.error.cannot.resolve.constructor=无法解析构造函数 ''{0}''
evaluation.error.cannot.resolve.field.class=无法解析包含字段''{0}''
evaluation.error.cannot.set.primitive.to.null=无法将基元类型设置为 null
evaluation.error.cannot.sources.for.field.class=找不到包含字段''{0}''的类的源
evaluation.error.class.not.loaded=类''{0}''未加载
evaluation.error.class.or.array.expected=在对字段 ''{0}'' 求值时应为类或数组类型
evaluation.error.debug.info.unavailable=调试信息不可用
evaluation.error.during.indexing=索引编制期间无法求值
evaluation.error.empty.code.fragment=应为代码段
evaluation.error.evaluating.field=对字段求值时出错\: ''{0}''
evaluation.error.evaluating.method=对方法求值时出错\: ''{0}''
evaluation.error.exception.collected=<Cause unknown as the exception has been collected>
evaluation.error.expression.info=无法提取表达式
evaluation.error.identifier.expected=预期的标识符不是''{0}''
evaluation.error.incompatible.array.initializer.type=初始值设定项类型与数组的组件类型不兼容
evaluation.error.incompatible.types=''{0}''操作不兼容的类型
evaluation.error.incompatible.variable.initializer.type=''{0}'' 的初始值设定项具有不兼容的类型
evaluation.error.inconsistent.debug.info=调试信息不一致
evaluation.error.integer.expected=应为整数值
evaluation.error.invalid.array.dimension.expression=数组维度无效的表达式\: {0}
evaluation.error.invalid.array.size=数组大小无效
evaluation.error.invalid.expression=无效的表达式 \: {0}
evaluation.error.invalid.index.expression=索引表达式无效
evaluation.error.invalid.this.expression=不能替换''{1}''的''{0}''为''this''
evaluation.error.invalid.type.name=类型名称无效\: ''{0}''
evaluation.error.lambda.evaluation.not.supported=不支持 Lambda 求值
evaluation.error.lebeled.loops.not.found=没有标记为''{0}''为循环语句
evaluation.error.local.variable.declarations.not.supported=局部变量声明不受支持。
evaluation.error.local.variable.missing=找不到局部变量''{0}''
evaluation.error.local.variable.missing.from.class.closure=在闭包类中找不到局部变量''{0}''
evaluation.error.method.exception=方法抛出 ''{0}'' 异常。
evaluation.error.method.reference.evaluation.not.supported=不支持方法引用求值
evaluation.error.multi.dimensional.arrays.creation.not.supported=不支持创建多维数组
evaluation.error.nested.evaluation=在对另一个方法求值期间不支持求值
evaluation.error.no.instance.field=没有此类实例字段\: ''{0}''
evaluation.error.no.instance.method=没有此类实例方法\: ''{0}''
evaluation.error.no.stackframe=无法求值\: 堆栈帧不可用
evaluation.error.no.static.field=没有此类 static 字段\: ''{0}''
evaluation.error.no.static.method=没有此类 static 方法\: ''{0}''
evaluation.error.not.lvalue=分配的左边部分不是一个值
evaluation.error.not.rvalue=分配的右边部分不是一个值
evaluation.error.numeric.expected=应为数值
evaluation.error.object.collected=已搜集对象
evaluation.error.object.is.being.initialized=对象正在初始化
evaluation.error.object.reference.expected=应为对象引用
evaluation.error.operation.not.supported=操作''{0}''不支持
evaluation.error.process.exited=无法求值\: 进程退出
evaluation.error.signature.polymorphic.call.evaluation.not.supported=不支持签名多态调用评估
evaluation.error.sources.out.of.sync=源码与执行的代码不对应
evaluation.error.stack.frame.unavailable=堆栈帧不可用
evaluation.error.statement.not.supported=语句 ''{0}'' 不受支持
evaluation.error.surrounded.expression.null=包围的表达式为 null
evaluation.error.this.not.avalilable='this'是不可用的
evaluation.error.thread.collected=已收集线程
evaluation.error.thread.not.at.breakpoint=“暂停程序”后无法对表达式求值。请考虑使用断点挂起程序。
evaluation.error.thread.resumed=线程已被恢复
evaluation.error.type.mismatch=类型不匹配
evaluation.error.unknown.expression.operand=表达式操作数未知\: {0}
evaluation.error.unknown.expression.type=表达式类型未知\: {0}
evaluation.error.unknown.method.return.type=无法解析方法返回值类型\: {0}
evaluation.error.unknown.type=无法解析类型\: {0}
evaluation.error.unsupported.declaration=声明无效 \: {0} 仅支持局部变量声明。
evaluation.error.unsupported.expression.type=不支持的表达式类型
evaluation.error.variable.already.declared=变量''{0}''已被声明
evaluation.error.variable.not.declared=变量''{0}''未声明
evaluation.warning.cannot.evaluate.on.pause=执行已暂停，无法求值
exception=异常
exception.breakpoint.console.message={1}({2})处发生异常 ''{0}''
exception.breakpoint.console.message.location.info={0}\:{1,number,\#}
exception.breakpoint.console.message.location.info.absent=没有调试信息
exception.breakpoint.console.message.with.thread.info={2}({3})处的线程 ''{1}'' 中发生异常 ''{0}''
exception.breakpoint.description.any=任何异常断点
exception.breakpoint.description.with.type={0} 的异常断点
exception.breakpoints.tab.title=Java异常断点
export.failed=导出失败
export.selected.capture.points.to.file=将所选捕获点导出到文件…
field.watchpoint.description=字段观察点
field.watchpoint.property.name.access=监视访问\:
field.watchpoint.property.name.modification=监视修改\:
field.watchpoints.tab.title=Java字段监视点
filters=筛选器…
filters.not.configured=未配置筛选器
frame.panel.async.stacktrace=异步堆栈跟踪
frame.panel.computing.frame=正在计算帧…
frame.panel.frames.not.available=帧不可用于未挂起的线程
frame.panel.thread.finished=线程已结束执行
hotswap.dialog.hang.warning=JVM 当前已被暂停。\n使用有效的第三方 JVM 代理重新加载类可能会导致 JVM 挂起。
hotswap.dialog.reload.action.text=重新加载
hotswap.dialog.run.prompt=某些类已被更改。立即重新加载更改的类?
hotswap.dialog.title=重新加载已更改的类
hotswap.dialog.title.with.session=重新加载已更改的类 {0}
if.the.value.is.referenced.by.a.constant.field=如果该值由抽象类的常量字段引用，IDEA 可以使用引用字段的名称来另外标记从此类引用的所有值。
import.capture.points=导入捕获点
instance.filters.dialog.title=实例过滤器
instances.window.show.history=InstancesWindow.ShowHistory
internal.debugger.error=内部错误。有关详细信息，请参阅日志
internal.error.locations.of.line=从 ''{0}'' 加载调试信息时发生内部错误。断点在此类中将不可用。
invoke.completion.once.more=再次调用补全以查看运行时类型变量
label.add.field.breakpoint.dialog.field.name=字段名称\:
label.add.field.breakpoint.dialog.fq.name=类的完全限定名称\:
label.add.wildcard.breakpoint.dialog.class.pattern=类模式(&C)\:
label.add.wildcard.breakpoint.dialog.method.name=方法名称(&M)\:
label.array.renderer.configurable.end.index=结束索引 (&D)\:
label.array.renderer.configurable.max.count1=显示最大值 (&M)
label.array.renderer.configurable.max.count2=数组元素
label.array.renderer.configurable.start.index=数组开始索引 (&R)\:
label.arrays.could.not.be.tracked=无法跟踪数组
label.base.renderer.configurable.all.overriding=对于覆盖'toString()'方法的所有类
label.base.renderer.configurable.alternate.view=启用集合类的替代视图 (&E)
label.base.renderer.configurable.autoscroll=自动定位到新的局部变量 (&L)
label.base.renderer.configurable.classes.from.list=对于列表中的类\:
label.base.renderer.configurable.dfa.assist=基于数据流分析预测条件值和异常
label.base.renderer.configurable.dfa.assist.gray.out=将预计不可到达的代码块变灰
label.base.renderer.configurable.enable.toString=启用 't&oString()' 对象视图 (&O)\:
label.base.renderer.configurable.hide.null.array.elements=在数组和集合中隐藏 null 元素(&N)
label.base.renderer.configurable.populate.throwable.stack=自动填充可抛出对象的堆栈跟踪
label.base.renderer.configurable.show.declared.type=已声明类型 (&T)
label.base.renderer.configurable.show.fq.names=完全限定名称 (&Q)
label.base.renderer.configurable.show.hex.value=显示基元的十六进制值
label.base.renderer.configurable.show.object.id=对象ID (&I)
label.base.renderer.configurable.show.static.fields=static 字段(&S)
label.base.renderer.configurable.show.static.final.fields=static final 字段(&F)
label.base.renderer.configurable.show.strings.type=显示字符串的类型
label.base.renderer.configurable.show.synthetic.fields=合成字段 (&Y)
label.base.renderer.configurable.show.val.fields.as.locals=$val 字段作为局部变量(&V)
label.capture.configurable.annotations.configure=配置注解…
label.capture.configurable.capture.variables=捕获局部变量 (可能会大大减慢执行速度)
label.capture.configurable.debugger.agent=检测代理 (需要调试器重启)
label.capture.point.at={0}.{1} 的捕获点
label.collection.breakpoint.properties.save.history=保存集合历史记录
label.compound.renderer.configurable.append.default.children=追加默认子项
label.compound.renderer.configurable.apply.to=将呈现器应用于以下类型的对象(完全限定名称)\:
label.compound.renderer.configurable.ondemand=按需
label.compound.renderer.configurable.show.type=显示类型和对象id
label.compound.renderer.configurable.table.header.expression=表达式
label.compound.renderer.configurable.table.header.name=名称
label.compound.renderer.configurable.table.header.ondemand=按需
label.compound.renderer.configurable.test.can.expand=测试一个节点是否可以扩展 (可选)\:
label.compound.renderer.configurable.use.default.renderer=使用默认呈现器
label.compound.renderer.configurable.use.expression=使用以下表达式\:
label.compound.renderer.configurable.use.expression.list=使用表达式列表\:
label.compound.renderer.configurable.when.expanding=展开节点时
label.compound.renderer.configurable.when.rendering=呈现节点时
label.debugger.general.configurable.always.debug=开始使用调试代理运行配置
label.debugger.general.configurable.always.smart.step.into=始终进行智能步入(&L)
label.debugger.general.configurable.enable.memory.agent=附加内存代理
label.debugger.general.configurable.enable.memory.agent.tooltip.text=Java 调试器将提供有关堆中对象的其他信息
label.debugger.general.configurable.evaluate.finally.always=总是(&A)
label.debugger.general.configurable.evaluate.finally.ask=询问(&K)
label.debugger.general.configurable.evaluate.finally.never=从不(&E)
label.debugger.general.configurable.evaluate.finally.on.pop=对弹出帧和早期返回值上的 finally 块求值\:
label.debugger.general.configurable.hide.stack.frames.using.step.filter=使用步进筛选器隐藏堆栈帧(&F)
label.debugger.general.configurable.kill.immediately=立即停止调试进程
label.debugger.general.configurable.resume.only.current.thread=只恢复当前线程
label.debugger.general.configurable.show.alternative.source=显示替代源切换器
label.debugger.general.configurable.skip.classLoaders=跳过加载器 (&O)
label.debugger.general.configurable.skip.constructors=跳过构造函数 (&C)
label.debugger.general.configurable.skip.simple.getters=跳过简单的getter (&G)
label.debugger.general.configurable.skip.synthetic.methods=跳过合成方法 (&P)
label.debugger.general.configurable.step.filters.list.header=不要进入类 (&I)
label.debugger.hotswap.configurable.always=总是(&A)
label.debugger.hotswap.configurable.ask=询问 (&K)
label.debugger.hotswap.configurable.compile.before.hotswap=在重新加载类之前构建项目
label.debugger.hotswap.configurable.enable.vm.hang.warning=启用 'JVM将挂起' 警告
label.debugger.hotswap.configurable.never=从不 (&N)
label.debugger.hotswap.configurable.reload.classes=编译后重新加载类\:
label.debugger.hotswap.configurable.suggest.in.editor=修改代码时在编辑器中建议使用热交换
label.debugger.launching.configurable.debugger.transport=传输\:
label.debugger.launching.configurable.shmem=共享内存(&M)
label.debugger.launching.configurable.socket=&Socket 
label.exception.breakpoint.properties.panel.caught.exception=捕获异常 (&N)
label.exception.breakpoint.properties.panel.group.notifications=通知
label.exception.breakpoint.properties.panel.uncaught.exception=未捕获的异常 (&O)
label.field.breakpoint.properties.panel.field.access=字段访问(&S)
label.field.breakpoint.properties.panel.field.modification=字段修改(&M)
label.generic.debugger.parameters.patcher.configurable.port=端口\:
label.generic.debugger.parameters.patcher.configurable.shmem=Shared &memory ()
label.generic.debugger.parameters.patcher.configurable.shmem.address=共享内存地址\:
label.generic.debugger.parameters.patcher.configurable.socket=套接字(&S)
label.generic.debugger.parameters.patcher.configurable.transport=传输\:
label.group.watch.events=监视
label.instrumentation.tracker=插桩跟踪器\: {0}
label.method.breakpoint.properties.panel.emulated=仿真 (&U)
label.method.breakpoint.properties.panel.method.entry=方法输入 (&Y)
label.method.breakpoint.properties.panel.method.exit=方法退出 (&X)
label.method.breakpoints.processing.classes=处理仿真方法断点的类
label.method.breakpoints.setting.breakpoints=设置仿真方法断点
label.object.markup.dialog.mark.referenced=标记从常量字段引用的值(&M)
label.thread.group.node=线程组 "{0}"@{1}
label.thread.group.node.group.collected=线程组“{0}”已被垃圾回收
label.thread.node="{0}"@{1}\: {2}
label.thread.node.in.group="{0}"@{1} 在组“{3}”\: {2}
label.thread.node.thread.collected=线程 ''{0}'' 已被垃圾回收
label.threads.view.configurable.current.thread.on.top=将当前线程移至顶部
label.threads.view.configurable.show.class.name=显示类名
label.threads.view.configurable.show.line.number=显示行号 (&L)
label.threads.view.configurable.show.package=显示软件包名称
label.threads.view.configurable.show.prams.types=显示方法实参类型
label.threads.view.configurable.show.source.file.name=显示源文件名
label.threads.view.configurable.show.stack.frames.for.synthetic.methods=显示合成方法的堆栈帧(&F)
label.threads.view.configurable.show.thread.groups=显示线程组 (&G)
label.too.many.frames.rest.truncated=帧过多，其余帧将被截断…
label.undefined=未定义
label.unknown.value=<未知>
label.user.renderers.configurable.renderer.name=呈现器名称\:
line.breakpoint.description.basic.line=行断点
line.breakpoint.description.conditional.return=返回断点
line.breakpoint.description.lambda=Lambda 断点
line.breakpoint.display.name=行 {0,number,\#}
line.breakpoint.display.name.with.class.or.method=行 {0,number,\#} 在 {1}
line.breakpoint.display.name.with.column=行 {0,number,\#} 列 {1,number,\#}
line.breakpoint.display.name.with.column.and.class.or.method={2} 中的行 {0,number,\#} 列 {1,number,\#}
line.breakpoints.tab.title=Java行断点
memory.toolwindow.title=内存
memory.view.constructor.tracker.name=MemoryViewConstructorTracker\: {0}
message.breakpoint.skipped.during.evaluation=已跳过 {0} 处的断点，因为它发生在调试器评估内
message.breakpoint.skipped.during.stepping.in.another.thread=由于步入另一个线程，已跳过 {0} 处的断点
message.breakpoint.skipped.learn.more=故障排查指南
message.breakpoint.skipped.other.vm=已跳过 {0} 处的断点，因为它发生在当前 JVM 外部
message.conditional.return.breakpoint.on.android=Android 上尚不支持条件返回的断点，将设置常规行断点。
message.node.all.array.elements.null=范围({0}, {1})的所有元素都为 null
message.node.all.elements.null=所有元素都为 null
message.node.array.elements.more=+ 其他 {0} 个
message.node.class.has.no.fields=类没有字段
message.node.class.no.fields.to.display=没有字段显示
message.node.debug.info.not.available=调试信息不可用
message.node.elements.null.hidden=不显示 null 元素
message.node.empty.array=空
message.node.evaluate=…求值
message.node.evaluation.not.possible=目标虚拟机未被断点请求暂停。在这种模式下无法对方法求值
message.node.filtered=已过滤用\:
message.node.local.variables.capture.disabled=局部变量未被捕获，您可以在以下位置更改\:
message.node.local.variables.debug.info.not.available=变量调试信息不可用
message.node.local.variables.not.captured=局部变量未被捕获用于合成、桥接等方法
message.node.navigate=… 导航
message.node.object.collected=对象在方法调用期间已被垃圾回收
message.node.open=…打开
message.node.show.icon=… 显示图标
message.node.show.image=… 显示图片
message.node.thread.has.no.frames=线程没有帧
message.node.thread.running=线程正在运行
message.node.toString=… toString()
message.other.threads.reached.breakpoints={0,choice,1\#另一个线程也到达了断点|2\#其他 {0} 个线程也到达了断点}
message.remote.jre.version.mismatch=目标 JRE 版本({0})与项目 JDK 版本不匹配({1})，将使用 JDK 中的源代码\: {2}
method.breakpoint.description=方法断点
method.breakpoint.property.name.emulated=模拟\:
method.breakpoint.property.name.watch.entry=监视条目\:
method.breakpoint.property.name.watch.exit=监视退出\:
method.breakpoints.slowness.warning=方法断点可能会大大减慢调试速度
method.breakpoints.tab.title=Java方法断点
method.name.not.specified=未指定方法名称
notification.group.hotswap=热交换已执行
notification.method.has.not.been.called=尚未调用方法 <b>{0}()</b>
overhead.toolwindow.title=开销
paths.to.closest.gc.roots.for={0} 距离 GC 根最近的路径
please.select.a.file.to.import=请选择要导入的文件。
process.attach.run.configuration.type.name=附加到进程
progress.evaluating=正在对 {0} 求值
progress.hot.swap.title=热交换
progress.hotswap.reloading=正在重新加载类…
progress.hotswap.scanning.classes=正在扫描要重新加载的类…
progress.hotswap.scanning.path=扫描\: {0}
progress.suffix.filtering.has.been.interrupted=(筛选已中断)
progress.suffix.limit.has.been.reached=(已达到限制)
progress.text.errors.count=错误\: {0}
progress.text.shown.x.of.y=已显示\: {0} / {1}
ref=Ref
renderer.name={0} 呈现器
rule.name.group.by.class=按类分组
rule.name.group.by.package=按软件包分组
select.stack.frame=选择堆栈帧
settings.async.annotations.configuration=异步注解配置
settings.async.execute=异步执行
settings.async.schedule=异步调度
settings.breakpoints.based=基于断点\:
settings.capture.column.capture.class.name=捕获类名
settings.capture.column.capture.key.expression=捕获键表达式
settings.capture.column.capture.method.name=捕获方法名称
settings.capture.column.insert.class.name=插入类名
settings.capture.column.insert.key.expression=插入键表达式
settings.capture.column.insert.method.name=插入方法名称
status.app.running=应用程序正在运行
status.app.stepping=正在步入应用程序
status.breakpoint.invalid=无效
status.breakpoint.reached.in.thread=到达线程 {0} 中的断点
status.breakpoint.reached.in.thread.switch=<a href\="\#">切换线程</a>
status.classes.not.all.versions.reloaded=对于 {0} 个{1,choice, 1\#类|2\#类}(共 {1} 个)，未重新加载所有版本
status.classes.reloaded={0,number} 个{0,choice, 0\#类|1\#类|2\#类}重新加载
status.connect.failed=无法建立与地址为 ''{0}'' 的目标虚拟机的连接
status.connected=已连接到地址为 ''{0}'' 的目标虚拟机
status.connecting=正在连接到地址为 ''{0}'' 的目标虚拟机
status.debug.stopped=调试已停止
status.disconnected=已与地址为 ''{0}'' 的目标虚拟机断开连接
status.field.watchpoint.reached.access='{'{0}@{5}'}'.{1}将在访问{2}({3}\:{4,number,\#})
status.field.watchpoint.reached.modification='{'{0}@{7}'}'.{1} 将在 {4}({5}\:{6,number,\#})下修改。当前值 \= ''{2}''。新值 \= ''{3}''
status.generic.breakpoint.reached=已到达断点
status.hot.swap.completed.restart=重新启动会话
status.hot.swap.completed.stop=停止会话
status.hot.swap.completed.with.errors=热交换失败
status.hot.swap.completed.with.warnings=热交换已完成，但存在警告
status.hotswap.loaded.classes.up.to.date=已加载类是最新的. 不需要重新加载
status.hotswap.uptodate=已加载的类处于最新状态。无需重新加载任何内容。
status.invalid.breakpoint.out.of.class=断点不属于任何类
status.line.breakpoint.reached=到达 {0}({1}\:{2,number,\#}) 的断点
status.line.breakpoint.reached.full.trace=已到达断点
status.listening=正在侦听连接，地址\: {0}
status.method.entry.breakpoint.reached=方法''{0}''进入{1}({2}\:{3,number,\#})
status.method.exit.breakpoint.reached=已达到方法断点. 方法''{0}''即将退出{1}({2}\:{3,number,\#})
status.paused=已暂停
status.paused.in.another.thread=在另一个线程中暂停
status.process.resumed=恢复进程
status.process.started=进程已启动
status.process.terminated=进程已终止
status.run.to.cursor=运行到光标
status.run.to.cursor.in=运行至 {0} 中的光标
status.static.field.watchpoint.reached.access={0}.{1} 将在 {2}({3}\:{4,number,\#})下访问
status.static.field.watchpoint.reached.modification={0}.{1} 将在 {4}({5}\:{6,number,\#})下修改。当前值 \= ''{2}''。新值 \= ''{3}''
status.step.into=步入
status.step.out=步出
status.step.over=步过
status.stepping.in=正在步入 {0}
status.stopped.at.cursor=在游标停止
status.text.no.stack.frame.for.this.instance=该实例没有堆栈帧
status.text.select.instance.to.see.stack.frame=选择实例以查看堆栈帧
status.thread.blocked.by=线程{0}被线程{1}组织
status.thread.blocked.by.resume=<a href\="\#">恢复{0}</a>
status.thread.monitor=监视器
status.thread.not.started=未启动
status.thread.running=正在运行
status.thread.sleeping=正在休眠
status.thread.undefined=未定义
status.thread.unknown=未知
status.thread.wait=等待
status.thread.zombie=僵停
status.waiting.attach=调试器正在等待应用程序启动
status.waiting.attach.address=调试地址\: {0}
status.waiting.evaluation.result=等待直到最后一个调试器命令完成
stepping.filter.real.thread.name=线程 {0}
string.connection=''{0}''，传输\: ''{1}''
string.file.line.position={0}中的类\:{1}
string.null.context=上下文为null
surround.with.runtime.type.template=((RuntimeType)expr)
text.user.renderers.configurable.no.renderers=没有呈现器
thread.dump.coroutines.name=协程
thread.dump.during.previous.dump.evaluation.warning=之前转储的评估仍在进行中。已获取 Java 平台线程转储。
thread.dump.progress.message=正在转储 {0}…
thread.dump.unavailable.title=扩展转储不可用
thread.dump.virtual.threads.name=Java 虚拟线程
thread.operation.interrupt.is.not.supported.by.vm=虚拟机不支持线程操作 'interrupt'
threads.view.configurable.display.name=自定义线程视图
title.compound.renderer.configurable.choose.renderer.reference.type=呈现器引用类型
title.customize.data.views=自定义数据视图
title.error.evaluating.breakpoint.action=断点操作错误
title.error.evaluating.breakpoint.condition=断点条件错误
title.evaluating=正在评估…
title.jdk140.unstable=VM版本警告
title.range.too.big=范围太大了
title.set.value=设置值
title.smart.step.popup=进入的方法
tracing.class.filters=跟踪类筛选器
transport.name.shared.memory=共享内存
transport.name.socket=套接字
user.renderers.configurable.button.description.copy=拷贝选择的呈现器
user.renderers.configurable.display.name=Java类型呈现器
waiting.for.debugger.response=等待进程正常完成
warning.0=警告\! {0}
warning.filtering.may.have.side.effects=警告\: 筛选可能有副作用
warning.finally.block.detected=检测到非空 finally 块\:
warning.jdk140.unstable=被调试程序的虚拟机版本为 "1.4.0"。\nJ2SDK 1.4.0 记录的 bug 可能会导致不稳定的调试器行为。\n我们建议使用 J2SDK 1.4.0_01 或更高版本。
warning.range.too.big=指定范围太大. {0} 需要太多的资源才能执行请求的操作. 你确定你要继续吗?
warning.recalculate=将重新计算该值
warning.source.code.not.match=源码与字节码不匹配
