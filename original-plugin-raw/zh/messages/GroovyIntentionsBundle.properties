# suppress inspection "UnusedProperty" for whole file
demorgans.law.intention.family.name=德摩根定律
demorgans.intention.name1=将 '\\&\\&' 替换为 '||'
demorgans.intention.name2=将 '||' 替换为 '\\&\\&'
merge.if.and.intention.name=合并 if
merge.if.and.intention.family.name=将嵌套 if 合并为 and-ed 条件
make.closure.call.explicit.intention.name=将闭包调用设为显式
make.closure.call.explicit.intention.family.name=将闭包调用设为显式
make.closure.call.implicit.intention.name=将闭包调用设为隐式
make.closure.call.implicit.intention.family.name=将闭包调用设为隐式
flip.conjunction.intention.family.name=翻转合取操作数
flip.comparison.intention.family.name=翻转比较操作数
negate.comparison.intention.family.name=求反比较
expand.boolean.intention.name=将布尔使用扩展为 if-else
expand.boolean.intention.family.name=扩展布尔
for.to.each.intention.name=替换为“.each”
for.to.each.intention.family.name=将 for-in 替换为 each
each.to.for.intention.name=替换为 for-in
each.to.for.intention.family.name=将 each 替换为 for-in
convert.integer.to.hex.intention.name=转换为十六进制
convert.integer.to.hex.intention.family.name=转换为十六进制
convert.integer.to.decimal.intention.name=转换为十进制
convert.integer.to.decimal.intention.family.name=转换为十进制
convert.integer.to.octal.intention.name=转换为八进制
convert.integer.to.octal.intention.family.name=转换为八进制
convert.integer.to.binary.intention.name=转换为二进制
convert.integer.to.binary.intention.family.name=转换为二进制
flip.comparison.intention.name=将 ''{0}'' 翻转为 ''{1}''
negate.comparison.intention.name=将 ''{0}'' 求反为 ''{1}''
flip.smth.intention.name=翻转 ''{0}''
merge.else.if.intention.name=合并 else-if
merge.else.if.intention.family.name=合并 else if
split.else.if.intention.name=拆分 else-if
split.else.if.intention.family.name=拆分 else if
split.if.intention.name=拆分成 2 条 'if' 语句
split.if.intention.family.name=拆分成 2 条 'if' 语句
invert.if.intention.name=反转 'if' 条件
invert.if.intention.family.name=反转 'if' 条件
replace.ternary.with.if.else.intention.name=将 '?:' 替换为 if else
replace.ternary.with.if.else.intention.family.name=将 '?:' 替换为 if else
simplify.ternary.operator.intention.name=简化条件表达式
simplify.ternary.operator.intention.family.name=简化条件表达式
flip.conditional.intention.name=翻转 '?:'
flip.conditional.intention.family.name=翻转条件
change.to.end.of.line.comment.intention.name=替换为行尾注释
change.to.end.of.line.comment.intention.family.name=替换为行尾注释
change.to.c.style.comment.intention.name=替换为 C 样式注释
change.to.c.style.comment.intention.family.name=替换为 C 样式注释
convert.string.to.g.string.intention.name=转换为 GString
convert.string.to.g.string.intention.family.name=将字符串转换为 GString
convert.g.string.to.string.intention.name=转换为字符串
convert.g.string.to.string.intention.family.name=将 GString 转换为字符串
indexing.method.conversion.intention.name=转换为 [] 形式
indexing.method.conversion.intention.family.name=将索引方法转换为 [] 形式
indexed.expression.conversion.intention.name=将 [] 访问转换为方法形式
indexed.expression.conversion.intention.family.name=将 [] 形式转换为索引方法
remove.parentheses.from.method.call.intention.family.name=从方法调用中移除不必要的圆括号
remove.parentheses.from.method.call.intention.name=移除不必要的圆括号
replace.abstract.class.instance.by.map.intention.family.name=将匿名类更改为动态实例化
replace.abstract.class.instance.by.map.intention.name=更改为动态实例化
remove.unnecessary.braces.in.g.string.intention.family.name=移除 GString 中不必要的大括号
remove.unnecessary.braces.in.g.string.intention.name=移除 GString 中不必要的大括号
convert.concatenation.to.gstring.intention.family.name=将字符串串联转换为 GString
convert.concatenation.to.gstring.intention.name=转换为 GString
convert.closure.to.method.intention.name=转换为方法
convert.closure.to.method.intention.family.name=将属性转换为方法
convert.method.to.closure.intention.name=转换为闭包属性
convert.method.to.closure.intention.family.name=将方法转换为闭包类型的属性
convert.string.to.multiline.intention.name=转换为多行
convert.string.to.multiline.intention.family.name=将文字转换为多行文字
convert.junit.assertion.to.assert.statement.intention.name=将 JUnit 断言转换为 assert 语句
convert.junit.assertion.to.assert.statement.intention.family.name=将 JUnit 断言转换为 assert 语句
convert.parameter.to.map.entry.intention.family.name=将方法或闭包参数转换为映射项
convert.parameter.to.map.entry.intention.name=将形参转换为映射条目
convert.java.style.array.intention.name=转换 Java 样式数组创建
convert.java.style.array.intention.family.name=将 Java 样式数组创建转换为 Groovy 语法
create.parameter.for.field.intention.name = 为字段添加构造函数形参
create.parameter.for.field.intention.family.name = 为字段添加构造函数形参
convert.map.to.class.intention.name=转换为类
convert.map.to.class.intention.family.name=将 Groovy 原生映射转换为类实例
rename.file.with.class.intention.name=将文件重命名为类名
rename.file.with.class.intention.family.name=将文件重命名为相应的类名
rename.class.to.file.name.intention.family.name=将类重命名为相应的文件名
rename.class.to.0=将类重命名为 ''{0}''
move.class.to.new.file.intention.name=移至单独的文件
move.class.to.new.file.intention.family.name=将类移至单独的文件
import.static.intention.name=添加静态导入
import.static.intention.family.name=添加单成员静态导入
import.on.demand.intention.name=添加按需导入
import.on.demand.intention.family.name=添加按需静态导入
replace.qualified.reference.with.import.intention.name=替换为导入
replace.qualified.reference.with.import.intention.family.name=将限定引用替换为导入
convert.to.geese.braces.intention.name=格式化一行中的大括号
convert.to.geese.braces.intention.family.name=格式化一行中的右大括号
convert.from.geese.braces.intention.name=格式化单独的行中的大括号
convert.from.geese.braces.intention.family.name=格式化单独的行中的大括号
split.into.declaration.and.assignment=拆分为声明和赋值
split.into.separate.declaration=拆分为单独的声明
gr.split.declaration.intention.family.name=拆分变量声明
gr.convert.string.to.char.intention.name=转换为 char
gr.convert.string.to.char.intention.family.name=转换为 char
gr.set.strong.type.intention.name=声明显式类型
gr.set.strong.type.intention.family.name=声明显式类型
remove.unnecessary.escape.characters.intention.name=移除不必要转义字符
remove.unnecessary.escape.characters.intention.family.name=移除不必要转义字符
gr.break.string.on.line.breaks.intention.name=出现 '\\n' 时断开字符串
gr.break.string.on.line.breaks.intention.family.name=出现 '\\n' 时断开字符串
gr.create.missing.switch.branches.intention.name=创建缺少的 'switch' 分支
gr.create.missing.switch.branches.intention.family.name=创建缺少的 'switch' 分支
remove.redundant.class.property.intention.name=移除冗余 .class
remove.redundant.class.property.intention.family.name=移除冗余 .class
convert.simple.getter.to.property.intention.name=转换为属性
convert.simple.getter.to.property.intention.family.name=将简单的 getter 转换为属性
remove.unnecessary.return.intention.name=移除 'return' 关键字
remove.unnecessary.return.intention.family.name=移除不必要的 'return' 关键字
gr.alias.import.intention.name=别名导入
gr.alias.import.intention.family.name=别名导入静态导入的成员
gr.copy.string.concatenation.content.intention.name=将字符串串联文本复制到剪贴板
gr.copy.string.concatenation.content.intention.family.name=将字符串串联文本复制到剪贴板
gr.make.member.private.intention.name=设为 'private'
gr.make.member.private.intention.family.name=设为 'private'
gr.make.member.public.intention.name=设为 'public'
gr.make.member.public.intention.family.name=设为 'public'
gr.make.member.protected.intention.name=设为 'protected'
gr.make.member.protected.intention.family.name=设为 'protected'
convert.multiline.string.to.single.line.intention.name=转换为单行文字
convert.multiline.string.to.single.line.intention.family.name=将多行字符串转换为单行
gr.convert.type.cast.to.safe.cast.intention.name=转换为安全转换
gr.convert.type.cast.to.safe.cast.intention.family.name=将转换表达式转换为安全的转换表达式
gr.introduce.local.variable.intention.name=引入局部变量
gr.introduce.local.variable.intention.family.name=引入局部变量
flip.if.intention.name=翻转 if 语句
flip.if.intention.family.name=翻转 if 语句
replace.if.with.ternary.intention.name=替换为 ?:
replace.if.with.ternary.intention.family.name=将 if 语句替换为三元运算符
gr.redundant.else.intention.name=移除冗余的 'else' 关键字
gr.redundant.else.intention.family.name=移除冗余的 'else' 关键字
convert.to.regex.intention.name=转换为正则表达式
convert.to.regex.intention.family.name=将字符串文字转换为正则表达式
convert.to.dollar.slash.regex.intention.name=转换为 $/ 字符串
convert.to.dollar.slash.regex.intention.family.name=将字符串文字转换为 $/ 字符串
gr.remove.explicit.type.declaration.intention.name=移除显式类型
gr.remove.explicit.type.declaration.intention.family.name=移除显式类型声明
gr.sort.map.keys.intention.name=按字母顺序排序
gr.sort.map.keys.intention.family.name=按字母顺序对映射项排序
gr.remove.annotation.intention.name=移除
gr.remove.annotation.intention.family.name=移除注解
add.annotation.value.intention.name=添加 'value='
add.annotation.value.intention.family.name=添加 'value='
