buildsystem.type.gradle.groovy=Gradle Groovy
buildsystem.type.gradle.kotlin=Gradle Kotlin
buildsystem.type.intellij=IntelliJ
buildsystem.type.intellij.full=IntelliJ 构建系统
buildsystem.type.maven=Maven

error.template.not.found=找不到 ID 为 {0} 的模板
error.configurator.not.found=找不到模块类型 {0}
error.invalid.module.dependency=模块 {0} 至 {1} 的模块依赖关系无效

module.configuration.group.android.native=Android 原生
module.configuration.group.ios=iOS
module.configuration.group.linux=Linux
module.configuration.group.macos=macOS
module.configuration.group.windows.mingw=Windows (MinGW)

module.type=模块类型

module.kind.android.module=Android 模块
module.kind.ios.module=iOS 模块
module.kind.js.browser.module=JS 浏览器模块
module.kind.js.node.module=JS 节点模块
module.kind.module=模块
module.kind.mpp.module=MPP 模块
module.kind.target=目标

plugin.buildsystem.setting.type=构建系统
plugin.buildsystem.setting.type.error.wrong.project.kind=无法使用 {1} 生成 {0} 项目

plugin.kotlin.downloading.kotlin.versions=正在下载 Kotlin 版本列表
plugin.kotlin.setting.modules=模块
plugin.kotlin.setting.modules.error.duplicated.modules=有 {0} 个名称为 {1} 的模块
plugin.kotlin.setting.modules.error.duplicated.targets=有 {0} 个名称为 {1} 的目标

plugin.kotlin.setting.project.kind=项目种类

project.kind.android=Android
project.kind.kotlin.js=Kotlin/JS
project.kind.multiplatform=Multiplatform
project.kind.singleplatform=JVM
project.kind.compose= Compose Multiplatform (旧版本)
project.kind.compose.short.name=Compose Multiplatform (旧版本)

project=项目

plugin.structure.setting.location=位置
plugin.structure.setting.location.error.is.not.empty=目录不为空
plugin.structure.setting.name=名称
plugin.structure.setting.group.id=组 ID
plugin.structure.setting.artifact.id=工件 ID
plugin.structure.setting.version=版本

plugin.templates.setting.template=项目模板

plugin.android.setting.sdk=Android SDK


validation.should.not.be.blank=指定 {0}
validation.identifier={0} 应仅包含字母、数字{1}
validation.identifier.additional.symbols=和符号: {0}

version.error.bad.format=设置 {0} 的版本格式不正确
parse.error.no.value.for.key=未找到键 {0} 的值

module.type.jvm=Kotlin/JVM
module.type.js=Kotlin/JS
module.type.common=通用
module.type.android=Android
module.type.native=Kotlin/Native


module.name=模块名称

module.configurator.simple.js.browser=Kotlin (适用于浏览器)
module.configurator.simple.js.node=适用于 Node.JS 的 JS

module.configurator.android=Android
module.configurator.android.setting.android.plugin=Android 插件
module.configurator.android.setting.android.plugin.application=com.android.application
module.configurator.android.setting.android.plugin.library=com.android.library

module.configurator.common=通用

module.configurator.jvm=JVM
module.configurator.jvm.setting.target.jvm.version=目标 JVM 版本

module.configurator.mpp=多平台
module.configurator.ios=IOS
module.configurator.ios.requires.xcode=需要 Xcode

module.configurator.js.browser=浏览器
module.configurator.js.node=Node.js

module.configurator.js.target.settings.kind=目标种类
module.configurator.js.target.settings.compiler=Kotlin/JS 编译器
module.configurator.js.target.settings.kind.library=JavaScript 库
module.configurator.js.target.settings.kind.application=JavaScript 应用程序

module.configurator.tests.setting.framework=测试框架
module.configurator.tests.setting.framework.junit4=JUnit 4
module.configurator.tests.setting.framework.junit5=JUnit 5
module.configurator.tests.setting.framework.test.ng=TestNG
module.configurator.tests.setting.framework.none=无
module.configurator.native.for.current.system=您的系统



project.template.empty.jvm.console.title=控制台应用程序
project.template.empty.jvm.console.description=使用 Kotlin/JVM 的简单“Hello World!”应用程序

project.template.mpp.lib.title=库
project.template.mpp.lib.description=具有用于跨平台共享的通用代码的多平台库

project.template.full.stack.title=全堆栈 Web 应用程序
project.template.full.stack.description=具有 Kotlin/JS Web 前端、Kotlin/JVM 服务器后端和在平台间共享的通用代码的 Web 应用程序

project.template.native.console.title=原生应用程序
project.template.native.console.description=适用于特定平台或多个使用 Kotlin/Native 的平台的原生应用程序

project.template.browser.title=浏览器应用程序
project.template.browser.description=使用 Kotlin/JS 的 Web 前端应用程序

project.template.react.title=React 应用程序
project.template.react.description=使用 Kotlin/JS 和 React UI 框架的 Web 前端应用程序

project.template.nodejs.title=Node.JS 应用程序
project.template.nodejs.description=使用 Kotlin/JS 的 Node.js 运行时的应用程序

project.template.mpp.mobile.title=移动应用程序
project.template.mpp.mobile.description=适用于 iOS 和 Android 并包含在平台间共享的通用代码的移动应用程序



project.template.compose.desktop.title=Compose 桌面应用程序
project.template.compose.desktop.description=面向桌面 JVM 平台(Windows、Linux、macOS)的 Compose 应用程序

project.template.compose.multiplatform.title=Compose Multiplatform 应用程序
project.template.compose.multiplatform.description=在通用模块中包含共享代码的多平台(JVM/Windows、JVM/Linux、JVM/MacOS、Android) Compose 项目



module.template.console.jvm.title=控制台应用程序
module.template.console.jvm.description=可在控制台中运行的简单“Hello World!”Kotlin/JVM 应用程序

module.template.mpp.mobile.title=移动应用程序
module.template.mpp.mobile.description=使用 Kotlin Multiplatform Mobile (支持在各个平台之间共享通用代码)编写的 iOS 和 Android 版移动应用程序。


module.template.compose.desktop.title=Compose 桌面模块
module.template.compose.desktop.description=面向桌面 JVM 平台的 Compose 应用程序

module.template.compose.mpp.title=Compose MPP 模块
module.template.compose.mpp.description=Compose MPP 模块

module.template.ktor.server.title=Web 服务器
module.template.ktor.server.description=后端 Web 服务器

module.template.native.console.title=原生应用程序
module.template.native.console.description=适用于操作系统的简单 Kotlin/Native 应用程序

module.template.js.simple.title=浏览器应用程序
module.template.js.simple.description=针对浏览器的空白应用程序
module.template.js.simple.run.configuration.dev=连续模式下的 BrowserDevelopmentRun
module.template.js.simple.run.configuration.prod=连续模式下的 BrowserProductionRun
module.template.simple.use.kotlinx.html=使用 kotlinx.html
module.template.simple.use.kotlinx.html.description=类型安全的 Kotlin DSL，用于创建 HTML 元素和构建 DOM 树

module.template.js.react.title=React 应用程序
module.template.js.react.description=针对浏览器的 React 应用程序
module.template.react.use.react.router.dom=使用 react-router-dom
module.template.react.use.react.router.dom.description=添加导航组件以保持 URL 和 UI 同步
module.template.react.use.react.redux=使用 react-redux
module.template.react.use.react.redux.description=添加由 Redux 驱动的状态容器

module.template.simple.nodejs.title=Node.JS 应用程序
module.template.simple.nodejs.description=针对 Node.js 的空白应用程序
module.template.simple.nodejs.use.kotlinx.nodejs=使用实验性 Node.js API (kotlinx-nodejs)
module.template.simple.nodejs.use.kotlinx.nodejs.description=允许访问特定于 Node.js 的功能


validation.file.should.exist={0} 的文件应存在
module.configurator.tests.setting.framework.kotlin.test=Kotlin Test
module.configurator.js.target.settings.use.js.ir.title=使用新的 JS IR 编译器
module.configurator.js.target.settings.use.js.ir.description=<html>详细了解新的 <a href="https://kotlinlang.org/docs/js-ir-compiler.html">Kotlin/JS IR 编译器</a></html>中可用的功能
module.configurator.tests.setting.kotlin.test.title=使用 kotlin.test
module.configurator.tests.setting.kotlin.test.desc=<html>为单元测试添加 <a href="https://kotlinlang.org/api/latest/kotlin.test/">kotlin.test</a> 注解和断言函数</html>
error.required.settings.are.not.present.0=未配置以下所需设置\n{0}
plugin.structure.setting.group.id.tooltip=您的机构的唯一标识符 – 不适用于 IntelliJ 构建系统
plugin.structure.setting.artifact.id.tooltip=此项目的主要工件的唯一名称 – 不适用于 IntelliJ 构建系统
plugin.structure.setting.version.tooltip=项目生成的主要工件的版本 – 不适用于 IntelliJ 构建系统
plugin.templates.setting.template.tooltip=定义初始项目结构。请根据您的用途，从下面选择一个模板:
plugin.android.setting.sdk.tooltip=将用于当前应用程序的 Android SDK
module.configurator.simple.js.compose.browser=Compose JS (适用于浏览器)
module.configurator.android.setting.android.plugin.tooltip=将用于当前模块的 Android Gradle 插件
module.configurator.jvm.setting.target.jvm.version.tooltip=编译此模块后将产生的 JVM 字节码版本
module.configurator.jvm.setting.target.jvm.test.framework.tooltip=将用于单元测试的框架
module.configurator.js.target.settings.kind.hint=编译模块的结果
module.configurator.js.target.settings.compiler.ir=新的 JS IR 编译器
module.configurator.js.target.settings.compiler.legacy=默认 JS 编译器
module.configurator.js.target.settings.compiler.both=两者
project.template.compose.web.title=Compose Web 应用程序
project.template.compose.web.description=Web (JS) Compose 项目
module.template.compose.web.title=Compose Web 模块
module.template.compose.web.description=针对浏览器的 Compose Web 应用程序(JS)
error.text.project.importing.error.kotlin.version.0.reason.1=项目导入错误\nKotlin 版本: {0}\n原因: {1}
error.text.module.0.should.contain.at.least.one.ios.target=模块 {0} 应至少包含一个 iOS 目标
error.text.project.templates.is.not.supported.in.yaml.for.now=yaml 目前不支持项目模板
configuration.name.run=运行
error.text.for.setting.0.one.of.1.was.expected.but.2.was.found=对于设置 `{0}`，需要 [{1}] 之一，实际为 `{2}`
error.text.expected.0.for.1.but.2.was.found=`{1}` 需要 {0}，但实际为 {2}
module.configurator.js.target.settings.compiler.tooltip=“两者”会使用两种编译器后端(默认和 IR)编译项目。这主要用于创作与两种后端均兼容的库。