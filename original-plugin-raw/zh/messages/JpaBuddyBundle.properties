ActionGroupDropDown.label=操作
AttribitePanel.validation=验证
AttributeTipInfo.Severity.LEAST_EFFICIENT=效率最低
AttributeTipInfo.Severity.MORE_EFFICIENT=效率较高
AttributeTipInfo.Severity.MOST_EFFICIENT=效率最高
ColumnRenderer.inDb.prefix=在数据库中\:
ColumnValueCellRenderer.usedBy=被{0}使用
ConfirmDialog.title=请确认
ConstraintCheckDigitIndexItem.name=检查数字索引
ConstraintCurrencyItem.name=单位
ConstraintFractionItem.name=分数
ConstraintHostItem.name=主机
ConstraintIgnoreNonDigitCharactersItem.name=忽略非数字字符
ConstraintInclusiveItem.name=包含
ConstraintIntegerItem.name=整数
ConstraintMaxItem.name=最大值
ConstraintMaxLongItem.name=最大值
ConstraintMessageItem.name=消息
ConstraintMinItem.name=最小值
ConstraintMinLongItem.name=最小值
ConstraintPortItem.name=端口
ConstraintProtocolItem.name=协议
ConstraintRegexpItem.name=正则表达式
ConverterAttributeItem.name=转换器
CreateIndexDialog.label.name=名称
CreateIndexDialog.label.unique=唯一
CreateRepoLookupItem.command.name=创建仓库
DaysDurationItem.days=天
DaysDurationItem.hours=小时
DaysDurationItem.millis=毫秒
DaysDurationItem.minutes=分钟
DaysDurationItem.nanos=纳秒
DaysDurationItem.seconds=秒
DisplayName.codingAssistance=代码辅助
DisplayName.dbDrivers=数据库驱动程序
DisplayName.dtoDeclaration=DTO 声明
DisplayName.entityDeclaration=JPA 实体声明
DisplayName.hibernateEnvers=Hibernate Envers
DisplayName.mapperDeclaration=Mapper 声明
DisplayName.projectionDeclaration=投影声明
DisplayName.repository=Spring Data 仓库
DomainEntityType.JPA=JPA 实体
DomainEntityType.MONGODB=MongoDB 文档
DtoAttributePanel.mappingWillBeHandledImplicitly=映射将被隐式处理
DtoAttributePanel.unsetName=<取消设置名称>
EndIndexItem.name=结束索引
EntityFromPojoAttributeType.EXISTING_CLASS=选择现有实体类
EntityFromPojoAttributeType.NEW_CLASS=创建新实体类
EntityFromPojoAttributeType.TRANSIENT=瞬时
EntityToDtoMapperDialog.fromDto=映射 {0} 自…
EntityToDtoMapperDialog.toDto=将 {0} 映射到…
EntityViewCreateDialog.title=新建{0}
EnvironmentVariablesDialog.message.illegalNameEnvironmentVariable=非法的环境变量名称\: {0}
EnvironmentVariablesDialog.message.illegalValueEnvironmentVariable=环境变量 ''{0}'' 的值非法\: ''{1}''
ExtractJpqlQueryIntention.error={0} 错误
GenerateEntityAttributeAction.TypeField.radio.element.collection=元素集合
GenerateEntityAttributeAction.TypeField.radio.id=ID
GenerateEntityAttributeAction.TypeField.radio.persist=持久
GenerateEntityAttributeAction.TypeField.radio.transient=瞬时
GenerateEntityAttributeAction.popup.title.enterAttributeType=输入特性类型
InheritanceField.default=默认({0})
InjectionInsertHandler.hint.text.canNotPerformCompletion.canNotFindInjectingClass=无法执行补全\: 找不到注入类。
InjectionInsertHandler.hint.text.canNotPerformCompletion.targetClassNotFound=无法执行补全\: 找不到目标类。
Item.notImplemented.text=此功能尚未实现。我们计划在未来的更新中实现。
JpaAttributePropertiesPanel.action.createItem=创建反向特性…
JpaAttributePropertiesPanel.notification.unableToDefineEntityId=无法定义 ''{0}'' 实体的 ID 类型
JpaColumnNamesEditor.validation.columnMustNotBeEmpty=列列表不得为空
JpaToolWindowManager.designer=设计器
JpaToolWindowManager.jpaDesignerEmptyText=设计器仅支持以下文件类型\:\n• JPA 实体\n• JPA 仓库\n• SQL 脚本\n• Liquibase 更改集
JpaToolWindowManager.jpaDesignerTitle=JPA 设计器
JpaToolWindowManager.toolWindowId=JPA Buddy
MapperMethodCreationDialog.single=单一
MapperMethodCreationDialog.title.from.dto.to.entity=从 DTO 到实体
MapperMethodCreationDialog.title.from.entity.to.dto=从实体到 DTO
MessageDialog.no.thanks=不，谢谢
MessageDialog.request.ultimate.trial=试用 IntelliJ IDEA Ultimate
MethodType.COUNT=计数
MethodType.DELETE=删除
MethodType.EXISTS=Exists
MethodType.FIND_COLLECTION=查找集合
MethodType.FIND_INSTANCE=查找实例
MethodType.QUERY_COUNT=计数
MethodType.QUERY_DELETE=删除
MethodType.QUERY_EXISTS=Exists
MethodType.QUERY_FIND_COLLECTION=查找集合
MethodType.QUERY_FIND_INSTANCE=查找实例
MethodType.QUERY_UPDATE=更新
NewType.INDEX=索引
NewType.UNIQUE_CONSTRAINT=唯一约束
NotImplemented.title=即将推出
PTableGroup.association=关联
PTableGroup.basic=基本
PTableGroup.column=列
PTableGroup.format=格式
PTableGroup.general=常规
PTableGroup.hibernate.envers=Hibernate Envers
PTableGroup.id=ID
PTableGroup.inheritance=继承
PTableGroup.jpa.buddy=JPA Buddy
PTableGroup.lombok=Lombok
PTableGroup.table=表
PTableGroup.validation=验证
Palette.category.attributes=属性
Palette.category.audit=审核
Palette.category.indexes=索引
Palette.category.lifecycleCallbacks=生存期回调
Palette.category.liquibase.add=添加
Palette.category.liquibase.create=创建
Palette.category.liquibase.drop=删除
Palette.category.liquibase.filter=Liquibase 文件
Palette.category.liquibase.rename=重命名
Palette.category.method=方法
Palette.category.namedGraph=命名图
Palette.category.namedGraphs=命名图
Palette.category.namedQuery=命名查询
Palette.category.other=其他
Palette.category.query=查询
Palette.category.reverseEngineering=逆向工程
Palette.category.utils=实用工具
QueryType.COUNT=计数
QueryType.DELETE=删除
QueryType.EXISTS=Exists
QueryType.FIND=查找
QueryType.UPDATE=更新
RepositoryCreationDialog.mode.bulk=批量
RepositoryCreationDialog.mode.single=单一
RepositoryCreationDialog.title=新建 Spring Data 仓库
RepositoryGraphEditor.radio.fetch=提取
RepositoryGraphEditor.radio.load=加载
RepositoryMethodDialog.changeSettings=更改设置
RepositoryMethodDialog.is=(Is)
RevisionListenerRenderer.newClass=新类
SpringAuditItem.name=Spring 审核
StartIndexItem.name=开始索引
TabularPropertiesEditor.propertiesNotFound=找不到属性
TabularPropertiesEditor.validation.number=数值无效
ToStringType.ALL=所有
ToStringType.NONE=无
ToStringType.ONLY_EXPLICITLY_INCLUDED=仅显式包含
TypeInject.CONSTRUCTOR_OR_AUTOWIRED=构造函数/@Autowired
TypeInject.LOOKUP=查找方法
TypeInject.OBJECT_FACTORY=对象工厂
action.CreateLiquibaseChangeLog.text=Liquibase 空更新日志
action.CreateLiquibaseChangeLogItem.description=创建 Liquibase 更改
action.CreateLiquibaseChangeLogItem.text=Liquibase 更改
action.CreateReverseEngineeringItem.description=将数据库列逆向工程为 JPA 实体特性
action.CreateReverseEngineeringItem.text=数据库中的实体特性…
action.JpbAddAttributesFromPojo.text=从 DTO 添加特性
action.JpbAddAttributesToDTO.text=将特性添加到 DTO
action.JpbAddMapperMethods.description=添加 Mapper 方法
action.JpbAddMapperMethods.text=Mapper 方法…
action.JpbConfigureToolWindow.description=配置编辑器工具栏和工具窗口
action.JpbConfigureToolWindow.text=配置编辑器工具栏和工具窗口
action.JpbCreateCustomDs.text=数据库连接…
action.JpbCreateCustomType.text=Hibernate 自定义类型
action.JpbCreateDto.text=创建 DTO
action.JpbCreateEntity.text=JPA 实体
action.JpbCreateEntityActionWithRelationFrom.text=引用实体…
action.JpbCreateEntityActionWithRelationTo.text=引用的实体
action.JpbCreateEntityFromPojo.text=从 POJO 生成 JPA 实体
action.JpbCreateEntityView.text=Blaze 持久性实体视图
action.JpbCreateHibernateEvent.text=创建 Hibernate 事件
action.JpbCreateIndex.description=创建索引
action.JpbCreateIndex.text=索引/约束…
action.JpbCreateJpaConverter.text=JPA 转换器
action.JpbCreateJpaDto.text=DTO
action.JpbCreateJpaRepository.text=Spring Data JPA 仓库
action.JpbCreateMapper.text=MapStruct 接口
action.JpbCreateRelatedEntityPopup.description=添加带有引用实体的特性
action.JpbCreateRelatedEntityPopup.text=创建引用的实体
action.JpbCreateRepositoryMethod.description=创建仓库方法
action.JpbCreateRepositoryMethod.text=仓库方法…
action.JpbCreateRevisionEntity.text=修订实体
action.JpbCreateSpringDataSource.description=基架数据源属性
action.JpbCreateSpringDataSource.text=数据源
action.JpbCreateSpringProjection.text=Spring Data 投影
action.JpbDeleteDataStore.text=删除…
action.JpbDetectDataSource.text=检测连接…
action.JpbEditCustomDataSource.text=编辑数据库连接
action.JpbExtractMappedSuperClass.text=提取到 MappedSuperclass
action.JpbFlywayAddDdlChange.text=添加 DDL/SQL 语句
action.JpbFlywayCreateSqlChange.description=创建 DDL 语句
action.JpbFlywayCreateSqlChange.text=DDL/SQL 语句
action.JpbFlywayGenerateDiffDdlChanges.text=生成差异 DDL 语句
action.JpbGenerateEntityAttribute.description=添加实体特性
action.JpbGenerateEntityAttribute.text=实体特性…
action.JpbGenerateLifecycleCallback.description=添加 JPA 生存期回调
action.JpbGenerateLifecycleCallback.text=生存期回调…
action.JpbGenerateNamedQuery.description=添加命名查询
action.JpbGenerateNamedQuery.text=命名查询…
action.JpbGenerateUtilities.description=JPA 实用工具
action.JpbGenerateUtilities.text=JPA 实用工具…
action.JpbLiquibaseDeleteTag.text=删除标记
action.JpbMapperCreation.text=创建 MapStruct 接口
action.JpbReEntityAttributeFromDb.text=数据库中的实体特性
action.JpbReferencesTreeNotification.text=引用
action.JpbRefreshJpaStructure.text=刷新 JPA 资源管理器树
action.JpbSafeDeleteAttribute.description=安全删除特性
action.JpbSafeDeleteAttribute.text=安全删除…
action.JpbSafeDeleteClass.text=安全删除类
action.JpbSafeDeleteMethod.description=安全删除方法
action.JpbSafeDeleteMethod.text=安全删除…
action.JpbSearchInLibraries.text=在库中搜索
action.JpbShowEntityDdl.text=显示 DDL
action.JpbShowInspectorPopup.description=显示检查器弹出窗口
action.JpbShowInspectorPopup.text=显示检查器弹出窗口
action.JpbShowJpaSettings.text=JPA Buddy 设置
action.JpbSyncDtoWithEntity.text=从实体添加特性
action.JpbSyncEntityWithDto.text=DTO 中的实体特性
action.actions.text=操作
action.add.text=添加
action.add.to.source.text=添加到源
action.browse.text=浏览
action.create.dto.text=创建 DTO
action.create.jpa.converter.text=创建 JPA 转换器
action.create.projection.text=创建投影
action.delete.tag.text=删除标记
action.delete.text=删除…
action.description.create.projection=创建投影…
action.description.migration=类型迁移…
action.description.smart.refactoring=智能重构
action.documentation.text=文档
action.edit.lowercase=编辑
action.extract.lowercase=提取…
action.navigate.lowercase=导航
action.new.text=新建
action.select.item.text=选择条目
add=添加
add.attribute.dto=将特性添加到 DTO
add.attributes.from.dto.to.entity=将来自 DTO 的特性添加到{0}
add.attributes.to.entity=将特性添加到实体
addShortCut=添加键盘快捷键
additional.db.drivers=其他数据库驱动程序
apply=应用
attributeItem.readModel=读取特性模型
bean.injection.symbols.comment=如果输入的符号数量小于指定数量，则不会显示 Bean 注入补全。
border.title.autowiring.code.style=自动装配代码样式
cancel=取消
category.all.results=所有结果
changes.please.enter.a.valid.regex=请输入有效的{0}
checkbox.update.entity.from.dto=从 DTO 更新实体
choose.table.columns=选择表列
class.comment=类注释
class.name.postfix=类名后缀
column.name.attribute=特性
column.name.column=列
column.name.condition=条件
column.name.direction=方向
column.name.entity=实体
column.name.ignoreCase=忽略大小写
column.name.name=名称
column.name.nullability=为 null 性
column.name.nullable=可为 null
column.name.operator=运算符
column.name.repository=仓库
column.name.unique=唯一
columns=列
command.name.add.lifecycle.callback=添加生存期回调 ''{0}''
command.name.append.changes.to.sql.file=将更改追加到 Sql 文件
command.name.change.repository.method.nullability=更改仓库方法为 null 性
command.name.create=创建{0}
command.name.create.changeset=创建 ChangeSet
command.name.create.tag=创建 {0} 标记
command.name.generate.repository.method=生成仓库方法
command.name.override.repository.method=重写仓库方法
configurable.group.jpa.buddy.tools.settings.description=<html><body>JPA Buddy 是一种开发工具，旨在自动执行与 Java 和 Kotlin 应用程序中的数据建模相关的日常工作。
configurable.group.jpa.buddy.tools.settings.display.name=JPA Buddy
configure.editor.header.and.tool.windows=配置编辑器工具栏和工具窗口
continue=继续
copy=复制
could.not.parse.repository.method.name=无法解析仓库方法名称。\n请检查“{0}”是否使用 Spring Data 方法命名约定。
create=创建
create.db.connection=创建数据库连接
db.connection.0.has.been.created=数据库连接“{0}”已创建
db.driver.version=驱动程序版本
ddl.generate.in.existing.file.feature.description=使用此功能，只需点击几下即可为您的 JPA 实体生成 DDL 语句。它可以生成初始化脚本以从头开始创建数据库架构，也可以生成差异 DDL 以根据 JPA 实体将现有数据库更新为有效状态。此外，此功能对于替代容易出错的 spring.jpa.hibernate.ddl-auto 属性非常有用。通过使用 JPA Buddy 操作，您将能够在执行之前完全控制 DDL、设置正确的 Java -> DB 类型映射、使用特性转换器和 Hibernate 类型映射字段、生成 drop 语句等。
default.beans.inject.strategy=默认 Bean 注入器策略
default.beans.inject.strategy.constructor=创建 final Bean 引用字段并通过类构造函数初始化
default.beans.inject.strategy.field=使用 @Autowired 注解创建 Bean 引用字段
default.beans.inject.strategy.setter=使用 @Autowired 注解创建 Bean 引用字段和 setter 方法
default.repository.name.suffix=默认仓库名称后缀
delete=删除
delete.db.persistenceUnit=是否删除持久性单元“{0}”?
designer.settings=设计器设置
designers=设计器
designers.changelog=Liquibase 更新日志
designers.entity=JPA 实体
designers.repository=Spring Data 仓库
designers.sql=SQL 文件类型
detect.dataSource.not.found=<html>JPA Buddy 在属性文件中找不到任何数据源配置。请记住，JPA Buddy 只能检测<a href\="https\://www.jetbrains.com/help/idea/jpa-buddy-database-connections.html" target\="_blank">支持的数据库</a>的连接。</html>
detected.data.sources=检测到的数据源
dialog.message.entity.projectionTypeInvalid=实体/投影类型无效\!
dialog.message.this.not.valid.length=这不是有效长度
dialog.message.validation.attributeOverridesHaveEmptyValues=特性重写具有空值
dialog.message.validation.columnHaventSpecified=未指定列
dialog.message.value.length.must.be.between.symbols=值长度必须为 1 至 {0} 个字符
dialog.title.attribute.overrides=特性重写
dialog.title.choose.attributes.to.concatenate=选择要串联的特性
dialog.title.choose.attributes.to.include=选择要包含的特性
dialog.title.create.choice.constraint.index=创建{0, choice, 0\#约束|1\#索引}
dialog.title.delete=删除
dialog.title.entity.projection.type.migration=实体/投影类型迁移
dialog.title.new.spring.projection=新建 Spring 投影
dialog.title.spring.auditing=Spring 审核
discard=舍弃
done=更改已保存
driver.class=驱动程序类
dto.and.mapper.feature.description=DTO 对于 Web 应用至关重要，但它们的实现会带来样板代码。数十个几乎复制您的实体的类，每个都带有一个 mapper。使用 <b>DTO 生成</b>功能，您可以节省日常工作的时间。您可以根据 JPA 实体定义创建 DTO 和 MapStruct mapper，但这还不是全部\! 随着时间的推移，实体可能会发生变化，您需要相应地更改 DTO。JPA Buddy 也能解决这个问题。它允许您<b>将实体与其 DTO 同步</b>，反之亦然。此外，JPA Buddy 还提供<b>从 POJO 生成 JPA 实体</b>操作，帮助从任何 java/kotlin 类生成 JPA 实体。如果您按照 API 优先的方式开发应用程序，此功能可能会很有帮助\: 首先为 API 定义 DTO，然后再实现数据模型。
dto.class.comment.help.tooltip=<html>变量 <b>ENTITY_FQN</b> - 创建 DTO 所依据的实体完全限定名称。</html>
dto.comment.description=<html>注释链接正则表达式允许 JPA Buddy 将 DTO 与其 JPA 实体相关联。要在注释中指定目标实体 FQN 的占位符，请使用 <b>(?\\&lt;entity\\&gt;.*)</b> 模式。<br><br>因此，如果正则表达式被定义为 <b>A DTO for the {@link (?.*)} entity.</b>，它将在以下注释中解析\: <i>//A DTO for the {@link io.jpabuddy.demo.entities.Project} entity.</i>。<br><br>当字段为空时，该功能将被禁用。</html>
dto.comment.regexp=注释链接正则表达式
dto.name.pattern.description=<html>如果您在 JPA 实体与 DTO 之间使用强命名约定，您可以在此处声明它们。它允许 JPA Buddy 将 DTO 与其 JPA 实体相关联。<br><br>要为目标 JPA 实体的简单类名称指定占位符，请使用 <b>(?\\&lt;entity\\&gt;.*)</b> 模式。例如，(?.*)Dto 表示 MyEntityDto 类将被视为 MyEntity 的 DTO。<br><br>当字段为空时，该功能将被禁用。</html>
dto.name.pattern.regexp=类名正则表达式
duplicate.method.name=已在仓库中定义名称为 ''{0}'' 的方法
edit=编辑
editor.toolbar=编辑器工具栏
editorMode=编辑器模式
editorMode.enable=启用极简模式
enable.completion=智能补全
entity.attributes.from.dto=DTO 中的实体特性
entity.listener=实体侦听器
entity.listeners=实体侦听器
feature.available.only.with.subscription=此功能仅在 IntelliJ IDEA Ultimate Edition 中可用
field.exists=已存在使用此名称的字段
field.required=字段 ''{0}'' 为必需项
fixes.createCustomEntity=创建 JPA 实体…
fixes.createMappedSuperclassEntity=创建 JPA MappedSuperclass“{0}”
fixes.createMissingAttribute=创建缺少的特性
flyway.diff.feature.description=Flyway 版本化迁移生成是一项非常有用的功能，可以在日常工作中节省大量时间。通过使用此功能，您可以自动生成包含更新数据库所需的 DDL 的迁移，以使其符合您的 JPA 模型。可以通过将 JPA 实体与一个数据库、两个数据库甚至一个 VCS 分支的 JPA 实体与另一个 VCS 分支的 JPA 实体进行比较来生成此类具有差异 DDL 的 Flyway 迁移，这在您无权访问目标数据库时非常有用。
flyway.init.feature.description=Flyway 初始化架构迁移操作可帮助开发者从头开始生成数据库架构。它可以使用您的 JPA 实体或现有数据库作为源。因此，您将获得包含架构初始化所需的 DDL 的 Flyway 版本化迁移。如果您将 Flyway 集成到现有应用程序中，或者决定生成用于数据库初始化的单个脚本而不是运行大量旧迁移，则此功能将非常有用。此外，它还可以帮助设置新的开发或测试环境。
follow.this.link.to.watch.feature=<a href\="{0}">观看此短视频</a>了解功能的实际运作。
following.licence.options=您可以通过以下选项启用此功能\: <ol><li>如果您还没有试用过 IntelliJ IDEA Ultimate，可以<a href\="https\://www.jetbrains.com/lp/idea-extended-trial/\#\:~\:text\=90%2Dday%20Trial%20for%20Your%20Whole%20Team&text\=Complete%20a%20short%20form%20and,a%20set%20of%20simple%20criteria">立即为您甚至整个团队申请试用</a></li><li>如果您是学生或教师，正在教授或学习课程或者开发开源项目，可以<a href\="https\://www.jetbrains.com/idea/buy/?section\=discounts&billing\=yearly">免费获取 IntelliJ IDEA Ultimate</a></li><li><a href\="https\://www.jetbrains.com/idea/buy/?section\=commercial&billing\=yearly">购买 IntelliJ IDEA Ultimate</a></li></ol>
from.db=从数据库
from.dto=从 DTO
generate.ddl.by.entities=使用“通过实体生成 DDL”操作，开发者只需点击几下即可将实体转换为 DDL 语句。它可以生成初始化脚本以从头开始创建数据库架构，也可以生成差异 DDL 以根据 JPA 实体将现有数据库更新为有效状态。此外，此功能对于替代容易出错的 spring.jpa.hibernate.ddl-auto 属性非常有用。通过使用 JPA Buddy 操作，您将能够在执行之前完全控制 DDL、设置正确的 Java -> 数据库类型映射、使用特性转换器和 Hibernate 类型映射字段、生成 drop 语句等。
generate.ddl.from.run.console.feature.description=当您的 JPA 实体无法正确映射到数据库表和字段时，就会出现此异常。JPA Buddy 提供了一个非常有用的功能，可以轻松解决这个问题。直接从堆栈跟踪生成 DDL 以填补 JPA 实体与数据库之间的差异\! 然后，检查生成的脚本，运行它并再次启动应用程序。通过设置 ddl-auto 或 hbm2ddl 属性来重新生成数据库或更新数据库可以解决相同的问题。不过，此解决方案有很大的限制。请观看下面的视频，了解这些限制以及 JPA Buddy 提出的更好的解决方案。
generate.equals.and.hashcode.empty.fields=实体没有要包含到 equals() 和 hashCode() 中的特性
generate.equals.and.hashcode.empty.fields.title=找不到字段
generateEntity.resolveAttributeInfo=解析特性信息
go.to.reference.element=转到引用元素
group.com.intellij.jpb.group.otherNewGroup.text=其他
group.com.intellij.jpb.structure.toolbar.new.flyway.text=所有新操作
group.com.intellij.jpb.structure.toolbar.new.text=所有新操作
hsql.unsupported.rename.sequence=HSQL 不支持重命名序列
hsql.unsupported.rename.view=HSQL 不支持重命名视图
ide=IDE
inspection.ConverterSpecifiedIncorrectlyInspection=转换器的类型与特性类型不匹配
inspection.ConverterSpecifiedIncorrectlyInspectionExt=转换器的类型 {0} 与特性类型 {1} 不匹配
inspection.LombokDataInspection=不建议对 JPA 实体使用 @Data。它可能会导致严重的性能和内存消耗问题。
inspection.LombokEqualsInspection=不建议对 JPA 实体使用 @EqualsAndHashCode。它可能会导致严重的性能和内存消耗问题。
inspection.LombokToStringIncludeInspection=此字段延迟加载，但包含在 @ToString 中。它可能会导致性能和内存消耗问题。
inspection.LombokToStringInspection=@ToString 包括延迟加载的字段和/或关联。这可能会导致性能和内存消耗问题。
inspection.NoArgsConstructorInspection=实体必须具有一个 public 或 protected 无实参构造函数
inspection.cantFindHibernateCustomType=找不到 Hibernate 自定义类型
inspection.cantFindInverseAttribute=找不到反向特性
inspection.cantFindRelatedAttribute=找不到相关特性
inspection.compositeIdClassSerializableInspection=复合 ID 类必须实现 Serializable
inspection.converterNotAnnotated=JPA 转换器必须使用 @Converter 进行注解
inspection.dataClassRequiredEqualsAndHashCode=不建议将 equals()、hashCode() 和 toString() 的数据类实现用于 JPA 实体。它们可能会导致严重的性能和内存消耗问题。
inspection.dataClassRequiredEqualsAndHashCode.key=不建议将数据类用于 JPA 实体。
inspection.entityIdMissing=实体没有主键
inspection.entityIdMissing.fix.createEntityId=添加 ID 特性
inspection.group.key.jpbCommon=JPA Buddy
inspection.incompatibleTableAnnotation=@Table 注解不应该与 SINGLE_TABLE 继承策略一起使用。
inspection.message.unknown.column=未知列 {0}
inspection.missingConverter=类型不受支持的特性应为 @Transient 或具有自定义类型或转换器声明
inspection.serializable.annotator.message=类 ''{0}'' 应实现 ''Serializable''
inspection.toManyVersionAnnotations=每个类只能使用一个 Version 属性或字段
inspector=检查器
inspector.tool.window=检查器工具窗口
intention.create.dto.confirmation.message=此实体没有相关的 DTO。是否要新建一个?
intention.create.dto.confirmation.title=找不到 DTO
intention.showInspector=显示检查器弹出窗口
invalid.method.name=方法名称无效
jpa.buddy.generation=JPA Buddy
jpa.entity.from.pojo=从 POJO 生成 JPA 实体
jpa.structure=JPA 资源管理器
jpa.structure.updated=JPA 资源管理器树已更新
jpaBuddy.title=JPA Buddy
label.index=索引
label.migrate.entity.projection.type.repositoryMethodTo=将仓库方法{0}“{1}”的实体/投影类型迁移到
label.named.query=命名查询
liquibase.diff.feature.description=差异 Liquibase 更新日志生成是一项非常有用的功能，可以在日常工作中节省大量时间。通过使用此功能，您可以自动生成包含更新数据库所需的所有代码的 Liquibase 更新日志，以使其符合您的 JPA 模型。可以通过将 JPA 实体与一个数据库、两个数据库，甚至一个 VCS 分支中的 JPA 实体与另一个 VCS 分支中的 JPA 实体进行比较来生成差异更新日志，这在您无权访问目标数据库时非常有用。
liquibase.diff.in.existing.file.feature.description=差异 Liquibase 更新日志生成是一项非常有用的功能，可以在日常工作中节省大量时间。通过使用此功能，您可以自动生成包含更新数据库所需的所有代码的 Liquibase 更新日志，以使其符合您的 JPA 模型。可以通过将 JPA 实体与一个数据库、两个数据库，甚至一个 VCS 分支中的 JPA 实体与另一个 VCS 分支中的 JPA 实体进行比较来生成差异更新日志，这在您无权访问目标数据库时非常有用。
liquibase.init.feature.description=初始化架构 Liquibase 更新日志操作可帮助开发者从头开始生成数据库架构。它可以使用您的 JPA 实体或现有数据库作为源。因此，您将获得一个 Liquibase 更新日志，其中包含架构初始化所需的所有命令。如果您将 Liquibase 集成到现有应用程序中，或者决定生成用于数据库初始化的单个脚本而不是运行大量旧的更新日志，则此功能非常有用。此外，它还可以帮助设置新的开发或测试环境。
mapper.naming=命名模式
mapper.naming.collection.strategy=集合的映射命名策略
mapper.naming.hint=使用 ${ENTITY_NAME} 和 ${DTO_NAME} 将相应的类名放入方法名称中
mapper.naming.to.dto=从实体到 DTO
mapper.naming.to.entity=从 DTO 到实体
mapper.naming.update=从 DTO 更新实体
mapping.methodAlreadyExists=类中已存在具有相同名称和不同签名的方法
mysql.unsupported.sequence=MySQL 不支持的序列。改用 AUTO_INCRMENT。
new=新
no=否
notification.content.attribute.must.be.embedded.type=特性必须为嵌入式类型\!
notification.content.class.not.found.or.it.not.entity=找不到类 ''{0}'' 或它不是实体
notification.content.containing.file.not.found=找不到包含文件
notification.content.entity.not.found=找不到实体
notification.content.errorMessage={0}<br/> 有关详情，请参阅日志文件({1})
notification.content.incorrect.property.type.for.object.editor=对象编辑器的属性类型不正确\!
notification.content.not.implemented=未实现\!
notification.content.psi.file.not.found.in.jpa.palette=在 JPA 面板中找不到 Psi 文件
ok=确定
open=打开
palette=面板
palette.tool.window=面板工具窗口
plugin.cannot.be.dynamically.uploaded=JPA Buddy 插件目前无法动态卸载
popup.content.dragging.from.palette.not.available.indices=当索引更新时，无法从面板中拖动。
popup.title.choose.repository.class=选择仓库类
popup.title.inspector=检查器
popup.title.jpa.utilities=JPA 实用工具
popup.title.lifecycle.callback=生存期回调
popup.title.liquibase.item=Liquibase 条目
popup.title.repository.method=仓库方法
progress.title.create.dto.class=创建 DTO 类…
project.error.caption=JPA Buddy 错误
project.persistenceUnit.caption=JPA Buddy
project.persistenceUnit.changeSettings=更改设置
project.persistenceUnit.initialized=默认持久性单元已初始化
projection.class.comment.help.tooltip=<html>变量 <b>ENTITY_FQN</b> - 创建投影所依据的实体完全限定名称。</html>
projection.comment.description=<html>注释链接正则表达式允许 JPA Buddy 将投影与其 JPA 实体相关联。要在注释中指定目标实体 FQN 的占位符，请使用 <b>(?\\&lt;entity\\&gt;.*)</b> 模式。<br><br>因此，如果正则表达式被定义为 <b>A Projection for the {@link (?.*)} entity.</b>，它将在以下注释中解析\: <i>//A Projection for the {@link io.jpabuddy.demo.entities.Project} entity.</i>。<br><br>当字段为空时，该功能将被禁用。</html>
projection.name.pattern.description=<html>如果您在 JPA 实体与投影之间使用强命名约定，您可以在此处声明它们。它允许 JPA Buddy 将投影与其 JPA 实体相关联。<br><br>要为目标 JPA 实体的简单类名指定占位符，请使用 <b>(?\\&lt;entity\\&gt;.*)</b> 模式。例如，(?.*)Prj 表示 MyEntityPrj 类将被视为 MyEntity 的投影。<br><br>当字段为空时，该功能将被禁用。</html>
properties.calculation.error=属性计算错误
properties.calculation.error.message=异常信息
properties.calculation.logForDetails=参阅日志了解详细信息
re.columns.from.db.feature.description=如果您喜欢先设计数据库，然后编写 JPA 实体来映射表，那么此功能对您来说将非常方便，并且可以在日常工作中节省大量时间\! 使用“数据库中的列”操作，您将能够将所选特性转换为 JPA 实体中的字段。它还支持 ManyToOne、OneToOne、OneToMany 和 ManyToMany 关联的映射。最棒的是它不会重新生成整个实体，而是将新字段添加到现有的实体声明中。
re.entities.from.db.feature.description=如果您喜欢先设计数据库，然后编写 JPA 实体来映射表，或者如果您是在现有数据库上开发应用程序，那么此功能对您来说将非常方便，并且可以在日常工作中节省大量时间\! 使用“从数据库生成实体”操作，只需点击几下即可将所选数据库表及其特性转换为 JPA 实体，包括约束、索引、列属性等。它还支持 ManyToOne、OneToOne、OneToMany 和 ManyToMany 关联的映射。最棒的是它不会重新生成整个实体，而是将新字段添加到现有的实体声明中。
refactoring.rename.accessors=重命名访问器
refactoring.rename.dto.fields=重命名 DTO 字段
regexp.should.have.one.group={0} 必须有一个名为“{1}”的组，例如 (?<{1}>.*)
remove=移除
repository.equality.condition.form=相等条件形式
repository.no.selected.item=请至少选择 {0} 中的一个条目
repository.no.selected.item.warning=请至少选择其中的一个条目
repository.other.conditions.form=其他条件形式
repository.verb.conditions.form=动词条件形式
save=保存
select.columns=选择列
separator.class=类
separator.entity=实体
separator.item.name=分隔符条目
separator.other=其他
serializable.type=Serializable 类型
show.all=全部显示
show.bean.injection.completion.on=显示 Bean 注入补全\:
showDiff=显示更改
smart.bean.injection=自动检测 Bean 注入类型
smart.bean.injection.help=根据先前为所选类注入的 Bean，自动检测 Bean 注入类型。如果没有注入的 Bean，将使用“默认 Bean 注入器策略”
smart.bean.injection.injectToBeanMethodSignature=对 @Bean 方法使用方法形参注入
smart.completion.availability.disable.caption=禁用
smart.completion.availability.enableCreation.caption=基于现有代码和建议的代码显示选项
smart.completion.availability.enableCreation.example=例如，如果它们对应于现有的 JPA 实体，<br>则在补全列表中显示不存在的 Spring Data JPA 仓库<a href\="https\://www.jetbrains.com/help/idea/jpa-buddy-coding-assistance.html\#code-completion">了解详情</a>
smart.completion.availability.enableExisting.caption=基于现有代码显示选项
smart.completion.availability.enableExisting.example=例如，映射到实体的 DTO 选项以及基于现有 MapStruct <br> mapper 和 Spring Data JPA 仓库的查找选项
spring.data.repository=Spring Data 仓库
sql.empty=生成的 SQL 为空
start.typing.for.search=开始输入以进行搜索
structure.mode.none=不可见
structure.mode.none.help=“JPA 资源管理器”工具窗口完全隐藏。您无法从任何地方访问它。
structure.mode.project=项目工具窗口中的选项
structure.mode.project.help=“JPA 资源管理器”工具窗口可以作为项目的替代表示。要访问它，请打开“项目”工具窗口并从下拉菜单中选择“JPA 资源管理器”。
structure.mode.separate=单独的工具窗口
structure.mode.separate.help=JPA 资源管理器作为单独的工具窗口呈现。
structure.mode.unified=统一工具窗口
structure.mode.unified.help=“JPA 资源管理器”工具窗口在统一工具窗口内显示为标签页。要访问它，请打开 JPA Buddy 工具窗口并选择“结构”标签页。
subscription.request.license=JPA Buddy 许可证
subscription.request.licenseeEmail=被许可人电子邮件地址
subscription.request.link=<a href\="requestLicense">访问链接以获取许可证。</a>
subscription.request.success=感谢您申请\! IntelliJ IDEA Ultimate 许可证申请已成功发送。
subscription.request.title=IntelliJ IDEA Ultimate 许可证
subscription.request.topLabel=我们注意到您正在使用带有 JPA Buddy 插件有效许可证的 IntelliJ IDEA Community Edition，该许可证即将到期。如您所知，JPA Buddy 于 2023 年被 JetBrains 收购。自此之后，JPA Buddy 的所有付费功能均已转移到 IntelliJ IDEA Ultimate。为了使您能够继续访问 JPA Buddy 的付费功能，我们为您提供了为期六个月的 IntelliJ IDEA Ultimate 许可证。
subscription.requestUltimate=IntelliJ IDEA Ultimate 许可证申请
subscription.requestUltimate.description=您有资格获得为期六个月的 IntelliJ IDEA Ultimate 许可证。请点击下方申请许可证。
subscription.required=在 IntelliJ IDEA Ultimate Edition 中可用
subscription.sendRequest=申请许可证
suppress.LombokBuilderAllArgsInspection=Lombok @Builder 需要针对此类的适当构造函数
symbols=符号
text.comment=评论
toolWindow.infoDialog.text=极简模式旨在最大限度地减少对开发者的干扰。如果您喜欢一切触手可及，一定会喜欢它\!<br/><ul><li>JPA Buddy 工具窗口将被隐藏；<li>JPA 资源管理器将在“项目”工具窗口中可用，还包括其他选项(项目、软件包等)；<li>JPA 设计器中的所有操作都可以在<b>生成</b>菜单(<b>{0}</b>)、<b>上下文操作</b>菜单(<b>{1}</b>)和<b>编辑器工具栏<b>中找到；<li>此外，您还可以通过点击“添加键盘快捷键”或稍后在<b>{2} ->  按键映射</b>中绑定您最喜欢的快捷键来调用 JPA 设计器。<li>您还可以为工具窗口指定<a href\="\#designer-settings">自定义可见性设置</a>；</li></ul>请查看我们准备的关于极简模式的<a href\="https\://www.jetbrains.com/help/idea/jpa-buddy-minimalistic-mode.html">指南</a>。
tooltip.choose.class=选择类
tooltip.go.to=转到
tooltip.hibernate.custom.type=Hibernate 自定义类型
tooltip.jpa.converter=JPA 转换器
tooltip.navigate.to=导航到 {0}
tooltip.show.entity.attribute=显示实体特性
tooltip.show.usages=显示用法
tree.dto.and.projection=DTO 和投影
unresolved.reference=未解析的引用\: {0}
use.lombok=使用 Lombok
validation_error=验证错误
view.mode=视图模式
view.mode.custom=自定义
view.mode.custom.help=选择您想看查看的内容和方式。
view.mode.extensive=扩展
view.mode.extensive.help=显示 JPA Buddy 工具窗口及其所有内容。对于那些即将开始使用 JPA 的人很有用。所有热门选项将始终在您眼前，因此更容易学习并选择正确的选项来生成和修改代码。
view.mode.minimalistic=极简
view.mode.minimalistic.help=不显示 JPA Buddy 工具窗口。JPA 资源管理器作为“项目”工具窗口中的一个选项提供。可以使用标准生成快捷键(<b>{0}</b>)或在“编辑器”工具栏中找到代码生成选项。JPA 检查器以弹出窗口形式提供，并且可以按意图或使用快捷键(<b>{1}</b>)调用。对于那些喜欢使用快捷键而不是可视化工具的人来说非常有用。
warning=警告
yes=是
