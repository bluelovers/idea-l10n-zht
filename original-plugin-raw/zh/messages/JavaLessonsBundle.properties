
java.basic.completion.choose.first=您可以按 {0} 选择查找菜单中的第一项。
java.basic.completion.activate=要激活“基本补全”，请按 {0}，您会再次看到查找菜单。
java.basic.completion.choose.item=在查找菜单中选择 {0}，然后按 {1}。
java.basic.completion.complete=按 {0} 补全此语句。
java.basic.completion.deeper.level=有时您需要查看有关静态常量或方法的建议。按两下 {0} 以在查找中获取。
java.basic.completion.module.promotion=您将在 {0} 模块中找到有关重构的更多信息。

java.run.configuration.lets.run=通过 {0} 标记的任何代码均可运行。使用 {1} 运行简单示例。您也可以点击 {0} 并选择 {2} 项。

java.postfix.completion.type=在圆括号后面键入 {0}，以查看后缀补全建议列表。
java.postfix.completion.complete=从列表中选择 {0} 或在编辑器中键入相同的值。按 {1} 补全语句。

java.smart.type.completion.apply=智能类型补全可以筛选建议列表，以使其仅包含当前上下文中适用的类型。按 {0} 查看匹配建议的列表。按 {1} 选择第一项。
java.smart.type.completion.return=智能类型补全还可以为 return 语句提供代码建议。按 {0} 查看 return 的查找菜单。按 {1} 选择第一项

java.statement.completion.lesson.name=语句补全
java.statement.completion.complete.for=按 {0} 补全 {1} 语句。
java.statement.completion.complete.if=键入 {0}，然后按 {1} 以生成语句。
java.statement.completion.complete.condition=在括号 {0} 内添加一个条件，然后按 {1} 跳转到 {2} 语句内。
java.statement.completion.complete.finish.body=键入一行代码: {0}，然后按 {1} 补全语句并应用格式。

java.rename.press.rename=按 {0} 重命名字段 {1}。
java.rename.type.new.name=键入该字段的新名称(例如 {0})，然后按 {1}。
java.rename.confirm.accessors.rename=<ide/> 正在检测相应的 getter/setter，并提出相应的重命名建议。现在只需按 {0} 或点击 {1}

# Next string does not require translation
java.refactoring.menu.inline.variable.eng=现在，将 {0} 变量的单一用法替换为定义该变量的表达式。您可以按 {1} 并通过 <strong>iv</strong> (<strong>i</strong>nline <strong>v</strong>ariable) 筛选重构菜单。选择此项或按 {2}。
java.refactoring.menu.inline.variable=现在，将 {0} 变量的单一用法替换为定义该变量的表达式。您可以按 {1} 并从列表中选择 {2}，或按 {3} 直接调用此操作。
# Next string does not require translation
java.refactoring.menu.introduce.constant.eng=最后，我们从文件名提取扩展。同样，您可以按 {0}，然后通过 <strong>ic</strong> (<strong>i</strong>ntroduce <strong>c</strong>onstant) 进行筛选或按 {1}。
java.refactoring.menu.introduce.constant=最后，从文件名中提取扩展名。您可以再次按 {0} 并选择 {1} 或按 {2}
java.refactoring.menu.confirm.constant=在此对话框中，您可以选择新常量的类型、名称、父类和可见性。您可以保留默认值，然后按 {0} 或点击 {1}。

java.editor.coding.assistance.press.to.fix=按 {0} 将参数替换为空数组。

java.extract.method.edit.method.name=编辑新方法的名称或保留 IDE 建议的方法。然后按 {0}。

java.inheritance.hierarchy.lesson.name=继承层次结构
java.inheritance.hierarchy.goto.implementation=按 {0} 查找 {1} 的实现。
java.inheritance.hierarchy.choose.any.implementation=选择任何实现，然后按 {0} 或点击它。
java.inheritance.hierarchy.navigate.to.base=您可以从派生导航到 super 方法。按 {0} 或点击编辑器间距中的 {1} 图标。
java.inheritance.hierarchy.invoke.implementations.again=基方法的声明具有自身的间距图标 {0}。点击它或再次按 {1}。
java.inheritance.hierarchy.open.in.find.tool.window=对于大型层次结构，您可能想要在 {0} 工具窗口中查找实现。点击 {1}。
java.inheritance.hierarchy.hide.find.tool.window=按 {0} 隐藏 {1} 工具窗口。
java.inheritance.hierarchy.open.method.hierarchy=您可能想要探索这种方法的整个层次结构。按 {0}。
java.inheritance.hierarchy.hide.method.hierarchy=我们(也)隐藏 {0}。再次按 {1}。
java.inheritance.hierarchy.open.class.hierarchy=要查看类层次结构，请按 {0}。
java.inheritance.hierarchy.last.note=<strong>注意:</strong> 也可以对类执行 {0} 和 {1} 操作。{2} 和 {3} 操作可能很少使用，但您始终可以使用 {5} 筛选器通过 {4} 找到它们。

java.find.occurrences.lesson.name=下一个/上一个匹配项
java.find.occurrences.invoke.find=在本课程中，您选择了 {0}。按 {1} 开始在当前文件中执行全文搜索。
java.find.occurrences.find.previous=要跳转到上一个匹配项，请按 {0}。
java.find.occurrences.search.closed.warning=按 {0} 再次打开搜索字段。
java.find.occurrences.find.next=<ide/> 自动将所选文本复制到搜索字段中。我们来查找下一个匹配项。按 {0} 或 {1}。
java.find.occurrences.close.search.tool=在关闭搜索面板的情况下，仍然可以使用这些快捷键在最近找到的匹配项之间导航。按 {0} 关闭搜索面板。
java.find.occurrences.find.next.in.editor=使用 {0} 查找下一个匹配项。
java.find.occurrences.find.previous.in.editor=并按 {0} 返回。
java.find.occurrences.note.about.cyclic=<strong>注意</strong>: 搜索将循环进行。在最后的匹配项处按两下 {0} 时，将选择第一个匹配项。{1}也循环进行。

java.debug.workflow.hotswap.disabled.warning=<strong>热交换</strong>功能在 IDE 设置中已禁用。在“{0} | {1} | {2}”<strong>→</strong>“{3}”中启用，或<callback id="{4}">点击以激活</callback>。
java.debug.workflow.rebuild=对于大型程序，重新运行可能要花很长时间。如果您发现纯方法中存在错误，可以重新构建项目并应用<strong>热交换</strong> JVM 功能。我们来构建项目: {0} 或 {1}。
java.debug.workflow.confirm.hot.swap=确认<strong>热交换</strong>替换。
java.debug.workflow.no.confirmation=<strong>热交换</strong>在后台自动完成。您可能会在左下角可以看到相应的消息。
java.debug.workflow.drop.frame=虽然我们修补了方法，但现在仍在执行过时的 {0}，它将再次抛出异常。删除此框架，然后返回到 {1} 调用之前的状态。点击堆栈帧顶部方法附近的 {2} 或按 {3}。

java.statement.completion.help.link=语句补全
java.inheritance.hierarchy.help.link=源代码层次结构
java.find.help.link=在文件中搜索目标
toggle.case.part=大小写
java.onboarding.module.name=入门导览
java.onboarding.module.description={0} 中的主要功能概览。
java.onboarding.lesson.name=熟悉 IDEA
java.onboarding.change.ui.settings=在本课中，IDEA 会将某些 UI 设置更改为默认状态。完成或退出课程后，将恢复您的偏好设置。
java.onboarding.project.view.description=<strong>项目视图</strong>是主要工具窗口之一。它包含项目目录、SDK 特定的外部库和临时文件。点击带条纹的按钮可以预览演示项目。您也可以按 {0} 打开。
java.onboarding.balloon.project.view=点击以打开<strong>项目视图</strong>
java.onboarding.balloon.source.directory=展开 {0} 目录以查看项目源文件
java.onboarding.balloon.open.file=双击以打开 {0}
java.onboarding.balloon.open.learn.toolbar=切换到“{0}”工具窗口继续学习本课
java.onboarding.indexing.description=第一次打开项目时，<ide/> 会扫描 JDK 和项目本身，以收集编码辅助所需的详细信息。要继续，请等待索引完成。
java.onboarding.run.sample=现在，我们来运行当前文件，点击 {0} 或按 {1}。
java.onboarding.temporary.configuration.description=您已经打开了演示示例。现在，我们来运行它! 在工具栏的高亮显示区域中，您可以看到所选配置的常用运行操作。
java.onboarding.balloon.click.here=点击此处设置断点
java.onboarding.toggle.breakpoint.1=您可能会注意到 {1} 方法没有返回预期值 {0}，而是返回 {2}。我们来查看 return 语句，调试有问题的代码。
java.onboarding.toggle.breakpoint.2=点击高亮显示区域内的间距以设置断点。
java.onboarding.balloon.start.debugging=点击该图标以开始调试
java.onboarding.start.debugging=点击 {0} 图标启动调试过程。
java.onboarding.balloon.about.debug.panel={0} 工具窗口为{1,choice,0#工具栏|1#工具栏}提供了各种调试操作。您可以稍后在 {2} 课程中进行尝试。
java.onboarding.balloon.stop.debugging=点击该图标以停止调试
java.onboarding.stop.debugging=停止调试。点击 {0} 图标。
java.onboarding.type.division=发现代码中的问题后，我们来进行修正。将得到的和除以值的长度。课程脚本已插入 {0}。
java.onboarding.invoke.completion=现在，我们键入一个点来显示所有可用的补全选项。
java.onboarding.choose.values.item=现在，您可以开始键入 {0} 以减少补全列表，或选择此条目并按 {1}。
java.onboarding.invoke.completion.tip=<strong>提示</strong>: <ide/> 会在您键入时自动显示补全选项。此外，您还可以按 {0} 在代码的任何位置显示补全条目。
java.onboarding.invoke.intention.for.warning.1=您刚刚修正了一个错误，但还可以进一步改进这段代码。IDEA 将高亮显示可以改进的代码行，并为这些行添加黄色灯泡。
java.onboarding.invoke.intention.for.warning.2=按 {0} 预览警告并应用快速修复。
java.onboarding.select.fix=应用第一个条目: {0}。在这种情况下，<strong>for-each</strong> 循环将使代码更易于理解。
java.onboarding.invoke.intention.for.code=意图也可以节省您的时间，让编码更轻松。我们来使用意图重新格式化字符串串联。按 {0} 显示可能的选项。
java.onboarding.apply.intention=选择 {0} 并按 {1}。
java.onboarding.invoke.search.everywhere.1=在 <ide/> 中进行处理时，您可能想要搜索项目中的文件、符号、类，乃至 IDE 操作。在本课中，我们将搜索 {0} 操作，以将 {1} 字符串改为小写。
java.onboarding.invoke.search.everywhere.2=按两次 {0} 以打开“{1}”对话框。
java.onboarding.search.everywhere.description=可以看到，所选文本 {0} 已被自动复制到输入字符串中。我们不键入 {0}，而是键入 {1}。
java.onboarding.apply.action=选择“{0}”操作，然后按 {1}。
java.onboarding.case.changed=大小写已更改。
java.onboarding.epilog=恭喜! 您已完成入门导览。此时，您可以:\n\
  - <callback id="{0}">关闭</callback>学习项目{1}\n\
  - <callback id="{2}">显示</callback>更多教程
java.onboarding.finish.title=恭喜
java.onboarding.finish.text=您刚刚完成了 IDEA 入门导览。\n\
现在可以关闭学习项目{0}。\n\
您也可以继续学习，尝试其他课程。
java.onboarding.finish.exit=关闭演示项目
java.onboarding.finish.modules=显示更多课目
java.onboarding.feedback.system.found.jdks=已找到 JDK:
java.onboarding.feedback.system.current.jdk=当前 JDK:
java.onboarding.feedback.system.lang.level=语言级别:
java.debug.workflow.invalid.drop=糟糕，您似乎执行了一个不在课程计划之内的操作。\n\
请重新启动课程。
java.missed.sdk.click.setup=<ide/> 在您的计算机上找不到 JDK。IDE 需要 JDK 来运行 Java 程序并为您提供代码辅助。要配置 JDK，请点击高亮显示的 {0} 链接。
java.missed.sdk.show.options=点击以查看可用的选项
java.missed.sdk.read.more.tip=<strong>提示</strong>: 您可以在<a href=''{0}''>该文档</a>中阅读有关 JDK 的更多信息。
java.missed.sdk.configure=使用其中一个建议的选项来配置 JDK。您可以下载选项，也可以指定指向计算机上现有 JDK 主目录的路径。
java.missed.sdk.wait.installation=IDE 正在安装 JDK，请稍候
java.onboarding.wait.indexing=IDE 正在为 JDK 文件编制索引，请稍候
java.onboarding.feedback.system.jdk.at.start=开始时的 JDK:
java.onboarding.run.options.community=例如，您可以运行代码 {0}、调试代码 {1}，并使用覆盖率 {2} 运行。
java.onboarding.run.options.ultimate=例如，您可以运行代码 {0}、调试代码 {1}、分析 {2}，并使用覆盖率 {3} 运行。
java.onboarding.run.sample.balloon=我们来运行当前文件，点击 {0} 或按 {1}。