# suppress inspection "UnusedProperty" for whole file
## Language plugins
## used in org.jetbrains.plugins.gradle.documentation.GradleDocumentationProvider.findDoc
gradle.documentation.org.gradle.api.Project.apply.plugin.java.non-html=将 Java 编译、测试和捆绑功能添加到项目中。它是其他许多 Gradle 插件的基础。
gradle.documentation.org.gradle.api.Project.apply.plugin.java=<p>将 Java 编译、测试和捆绑功能添加到项目中。它是其他许多 Gradle 插件的基础。另请参阅<a class="xref" href="http://www.gradle.org/docs/current/userguide/tutorial_java_projects.html">第 7 章 <i>Java 快速入门</i></a>。</p><p>自动应用: java-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.groovy.non-html=添加了对构建 Groovy 项目的支持。
gradle.documentation.org.gradle.api.Project.apply.plugin.groovy=<p>添加 Groovy 项目构建支持。另请参阅<a class="xref" href="http://www.gradle.org/docs/current/userguide/tutorial_groovy_projects.html">第 9 章 <i>Groovy 快速入门</i></a>。</p><p>自动应用: java、groovy-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.scala.non-html=添加了对构建 Scala 项目的支持。
gradle.documentation.org.gradle.api.Project.apply.plugin.scala=<p>添加了对构建 Scala 项目的支持。</p><p>自动应用: java、scala-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.antlr.non-html=添加了对使用 Antlr 生成解析器的支持
gradle.documentation.org.gradle.api.Project.apply.plugin.antlr=<p>添加了对使用 <a class="ulink" href="http://www.antlr.org/" target="_top">Antlr</a> 生成解析器的支持。</p><p>自动应用: java</p>

## Integration plugins
gradle.documentation.org.gradle.api.Project.apply.plugin.application.non-html=添加了将 Java 项目作为命令行应用程序运行和捆绑的任务。
gradle.documentation.org.gradle.api.Project.apply.plugin.application=<p>添加了将 Java 项目作为命令行应用程序运行和捆绑的任务。</p><p>自动应用: java</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.ear.non-html=添加了对构建 J2EE 应用程序的支持。
gradle.documentation.org.gradle.api.Project.apply.plugin.ear=<p>添加了对构建 J2EE 应用程序的支持。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.jetty.non-html=将 Web 应用程序部署到嵌入在构建中的 Jetty Web 容器。
gradle.documentation.org.gradle.api.Project.apply.plugin.jetty=<p>将 Web 应用程序部署到嵌入在构建中的 Jetty Web 容器。另请参阅<a class="xref" href="http://www.gradle.org/docs/current/userguide/web_project_tutorial.html">第 10 章 <i>Web 应用程序快速入门</i></a>。</p><p>自动应用: war</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.maven.non-html=添加对发布工件到 Maven 仓库的支持。
gradle.documentation.org.gradle.api.Project.apply.plugin.maven=<p>添加对发布工件到 Maven 仓库的支持。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.osgi.non-html=添加了对构建 OSGi 捆绑包的支持。
gradle.documentation.org.gradle.api.Project.apply.plugin.osgi=<p>添加了对构建 OSGi 捆绑包的支持。</p><p>自动应用: java-base</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.war.non-html=添加了对装配 Web 应用程序 WAR 文件的支持。
gradle.documentation.org.gradle.api.Project.apply.plugin.war=<p>添加了对装配 Web 应用程序 WAR 文件的支持。另请参阅<a class="xref" href="http://www.gradle.org/docs/current/userguide/web_project_tutorial.html">第 10 章 <i>Web 应用程序快速入门</i></a>。</p><p>自动应用: java</p>

## Software development plugins
gradle.documentation.org.gradle.api.Project.apply.plugin.announce.non-html=将消息发布到您最喜爱的平台，例如 Twitter 或 Growl。
gradle.documentation.org.gradle.api.Project.apply.plugin.announce=<p>将消息发布到您最喜爱的平台，例如 Twitter 或 Growl。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.build-announcements.non-html=将构建生命周期中有趣事件的本地公告发送到桌面。
gradle.documentation.org.gradle.api.Project.apply.plugin.build-announcements=<p>将构建生命周期中有趣事件的本地公告发送到桌面。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.checkstyle.non-html=使用 Checkstyle 对项目的 Java 源文件执行质量检查，并根据这些检查生成报告。
gradle.documentation.org.gradle.api.Project.apply.plugin.checkstyle=<p>使用 <a class="ulink" href="http://checkstyle.sourceforge.net/index.html" target="_top">Checkstyle</a> 对项目的 Java 源文件执行质量检查，并根据这些检查生成报告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.codenarc.non-html=使用 CodeNarc 对项目的 Groovy 源文件执行质量检查，并根据这些检查生成报告。
gradle.documentation.org.gradle.api.Project.apply.plugin.codenarc=<p>使用 <a class="ulink" href="http://codenarc.sourceforge.net/index.html" target="_top">CodeNarc</a> 对项目的 Groovy 源文件执行质量检查，并根据这些检查生成报告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse.non-html=生成供 Eclipse IDE 使用的文件，从而可以将项目导入 Eclipse。
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse=<p>生成供 <a class="ulink" href="http://eclipse.org" target="_top">Eclipse IDE</a> 使用的文件，从而可以将项目导入 Eclipse。另请参见<a class="xref" href="http://www.gradle.org/docs/current/userguide/tutorial_java_projects.html">第 7 章 <i>Java 快速入门</i></a>。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse-wtp.non-html=与 Eclipse 插件相同，此外还会生成 Eclipse WTP (Web Tools Platform) 配置文件。导入 Eclipse 后，您的 war/ear 项目应配置为可以使用 WTP。
gradle.documentation.org.gradle.api.Project.apply.plugin.eclipse-wtp=<p>与 Eclipse 插件相同，此外还会生成 Eclipse WTP (Web Tools Platform) 配置文件。导入 Eclipse 后，您的 war/ear 项目应配置为可以使用 WTP。另请参阅<a class="xref" href="http://www.gradle.org/docs/current/userguide/tutorial_java_projects.html">第 7 章 <i>Java 快速入门</i></a>。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.findbugs.non-html=使用 FindBugs 对项目的 Java 源文件执行质量检查，并根据这些检查生成报告。
gradle.documentation.org.gradle.api.Project.apply.plugin.findbugs=<p>使用 <a class="ulink" href="http://findbugs.sourceforge.net" target="_top">FindBugs</a> 对项目的 Java 源文件执行质量检查，并根据这些检查生成报告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.idea.non-html=生成文件并应用 Intellij IDEA IDE 使用的 IDEA 特定自定义，从而可以将项目导入 IDEA。
gradle.documentation.org.gradle.api.Project.apply.plugin.idea=<p>生成文件并应用 <a class="ulink" href="https://www.jetbrains.com/idea/index.html" target="_top">Intellij IDEA IDE</a> 使用的 IDEA 特定自定义，从而可以将项目导入 IDEA。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.jdepend.non-html=使用 JDepend 对项目的源文件执行质量检查，并根据这些检查生成报告。
gradle.documentation.org.gradle.api.Project.apply.plugin.jdepend=<p>使用 <a class="ulink" href="http://clarkware.com/software/JDepend.html" target="_top">JDepend</a> 对项目的源文件执行质量检查，并根据这些检查生成报告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.pmd.non-html=使用 PMD 对项目的 Java 源文件执行质量检查，并根据这些检查生成报告。
gradle.documentation.org.gradle.api.Project.apply.plugin.pmd=<p>使用 <a class="ulink" href="http://pmd.sourceforge.net" target="_top">PMD</a> 对项目的 Java 源文件执行质量检查，并根据这些检查生成报告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.project-report.non-html=生成包含 Gradle 构建的相关实用信息的报告。
gradle.documentation.org.gradle.api.Project.apply.plugin.project-report=<p>生成包含 Gradle 构建的相关实用信息的报告。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.signing.non-html=添加对构建文件和工件进行数字签名的功能。
gradle.documentation.org.gradle.api.Project.apply.plugin.signing=<p>添加对构建文件和工件进行数字签名的功能。</p>
gradle.documentation.org.gradle.api.Project.apply.plugin.sonar.non-html=提供与 Sonar 代码质量平台的集成。被 sonar-runner 插件取代。
gradle.documentation.org.gradle.api.Project.apply.plugin.sonar=<p>提供与 <a class="ulink" href="http://www.sonarsource.org" target="_top">Sonar</a>代码质量平台的集成。被 <a class="link" href="http://www.gradle.org/docs/current/userguide/sonar_runner_plugin.html"> <code class="literal">sonar-runner</code></a> 插件取代。</p>

gradle.cmd.option.full.stacktrace=打印出所有异常的完整(非常详细的)堆栈跟踪。
gradle.cmd.option.stacktrace=打印出所有异常的堆栈跟踪。
gradle.cmd.option.scan=创建构建扫描。如果尚未应用构建扫描插件，Gradle 将发出警告。
gradle.cmd.option.build.cache=启用 Gradle 构建缓存。Gradle 将尝试重用以前构建的输出。
gradle.cmd.option.no.build.cache=禁用 Gradle 构建缓存。
gradle.cmd.option.configure.on.demand=仅配置必要的项目。Gradle 将尝试减少大型多项目构建的配置时间。
gradle.cmd.option.no.configure.on.demand=禁用按需使用配置。
gradle.cmd.option.max.workers=配置 Gradle 允许使用的并发工作线程数。
gradle.cmd.option.parallel=并行构建项目。Gradle 将尝试确定要使用的最佳执行器线程数。
gradle.cmd.option.no.parallel=禁用并行执行以构建项目。
gradle.cmd.option.priority=指定 Gradle 守护程序及其启动的所有进程的调度优先级。值为 'normal' (默认值)或 'low'。
gradle.cmd.option.profile=分析构建执行时间并在 <build_dir>/reports/profile 目录中生成报告。
gradle.cmd.option.quiet=仅记录错误。
gradle.cmd.option.warn=将日志级别设置为警告。
gradle.cmd.option.info=将日志级别设置为信息。
gradle.cmd.option.debug=在调试模式下记录(包含正常堆栈跟踪)
gradle.cmd.option.warning.mode=指定要生成的警告模式。值为 'all'、'fail'、'summary' (默认值)或 'none'。
gradle.cmd.option.include.build=在复合中包括指定的构建。
gradle.cmd.option.offline=在不访问网络资源的情况下执行构建。
gradle.cmd.option.refresh.dependencies=刷新依赖项的状态。
gradle.cmd.option.dry.run=在禁用所有任务操作的情况下运行构建。
gradle.cmd.option.write.locks=保持锁定配置的依赖项解析，忽略现有锁定信息(如果存在)。
gradle.cmd.option.update.locks=执行依赖锁的部分更新，让传入的模块表示法更改版本。
gradle.cmd.option.no.rebuild=不重新构建项目依赖项。
gradle.cmd.option.build.file=指定构建文件。
gradle.cmd.option.settings.file=指定设置文件。
gradle.cmd.option.gradle.user.home=指定 Gradle 用户主目录。
gradle.cmd.option.project.dir=指定 Gradle 的起始目录。默认为当前目录。
gradle.cmd.option.project.cache.dir=指定项目特定的缓存目录。默认为根项目目录中的 .gradle。
gradle.cmd.option.system.prop=设置 JVM 的系统属性(例如 -Dmyprop=myvalue)。
gradle.cmd.option.init.script=指定初始化脚本。
gradle.cmd.option.project.prop=设置构建脚本的项目属性(例如 -Pmyprop=myvalue)。
gradle.cmd.option.exclude.task=指定要从执行中排除的任务。
gradle.cmd.option.rerun.tasks=忽略先前缓存的任务结果。
gradle.cmd.option.continue=任务失败后继续执行任务。
gradle.documentation.groovy.initial.value.got.during.last.import=上次导入时已获取初始值
gradle.documentation.groovy.gradle.property=Gradle 属性: {0}
gradle.cmd.option.help=显示帮助消息。
gradle.cmd.option.version=打印版本信息。
gradle.cmd.option.no.scan=禁用构建扫描的创建。
gradle.cmd.option.configuration.cache=启用配置缓存。Gradle 将尝试重用先前构建中的构建配置。
gradle.cmd.option.no.configuration.cache=禁用配置缓存。
gradle.cmd.option.configuration.cache.problems=配置配置缓存处理问题的方式(失败或警告)。\n默认为失败。
gradle.cmd.option.watch.fs=启用监视文件系统的更改，允许在下个构建时重新使用有关文件系统的数据。
gradle.cmd.option.no.watch.fs=禁用监视文件系统。
gradle.cmd.option.console=指定要生成的控制台输出类型。值为 'plain'、'auto' (默认值)、'rich' 或 'verbose'。
gradle.cmd.option.continuous=持续构建允许您在任务输入更改时自动重新执行请求的任务。
gradle.cmd.option.export.keys=导出用于依赖项验证的公钥。
gradle.cmd.option.refresh.keys=刷新用于依赖项验证的公钥。
gradle.cmd.option.dependency.verification=配置依赖验证模式(严格、宽松或关闭)
gradle.cmd.option.write.verification.metadata=为项目中使用的依赖项生成校验和(逗号分隔列表)。
gradle.cmd.option.daemon=使用 Gradle 守护程序运行构建。如果未运行，则启动守护进程。
gradle.cmd.option.no.daemon=不要使用 Gradle 守护进程来运行构建。如果您已将 Gradle 配置为在默认情况下始终与守护进程一起运行，则有时会很有用。
gradle.cmd.option.status=显示正在运行和最近停止的 Gradle 守护进程的状态。
gradle.cmd.option.stop=停止 Gradle 守护程序(如果其正在运行)。
gradle.cmd.option.foreground=在前台启动 Gradle 守护程序。