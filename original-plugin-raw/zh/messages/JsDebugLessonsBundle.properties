js.debugger.module.name={0} 调试器 101
js.debugger.module.description=了解如何逐步运行程序并在不离开 IDE 的情况下找出其中的问题。

js.debugger.before.title=调试前: 运行/调试配置
js.debugger.before.intro.1=使用 <ide/> 可以在代码编写位置运行和调试各种 JavaScript 应用。
js.debugger.before.intro.2=我们将在本模块中介绍一些步骤，无论您调试何种代码，这些步骤都很有用。我们将以一个非常基本的 <a href=''{0}''>Node.js</a> 应用为例，该应用应比较两个数字，并返回 {1} 或 {2}。在继续之前，请确保您的计算机上<a href=''{3}''>已安装</a> Node.js (对于全新安装，您需要重启 <ide/>)。如果您准备好继续，请按 {4}。
js.debugger.before.describe.tool.window=在按下 {0} 时发生了两个动作。首先是使用 Node.js 运行文件并打开 {1} 工具窗口，其中显示运行代码的结果。其次，<ide/> 创建了一项临时运行/调试配置，供我们以这样的方式运行文件。现在使用 {2} 隐藏工具窗口，更好地了解运行/调试配置。
js.debugger.before.save.1=因此，这些配置充当运行/调试应用程序的入口点。它们可以是临时的，也可以是永久的。主要区别在于，如果达到 5 个配置的默认限制，则会自动删除临时配置。
js.debugger.before.save.2=来看看如何将临时配置转换为永久配置。打开右上角的 {0} 下拉菜单，然后选择 {1}。
js.debugger.before.edit=现在，如果要调整这项新运行/调试配置的设置或使用其他设置，该怎么办? 再次打开 {0} 菜单，然后点击 {1}。
js.debugger.before.manage.1=这是管理运行/调试配置的地方。花点时间了解一下这里能找到什么，准备好继续操作后，请关闭窗口。
js.debugger.before.manage.2=花点时间了解一下这里能找到什么，准备好继续操作后，请关闭窗口。
js.debugger.before.next=本课程到此为止。要开始下一个课程，请点击下面的按钮或使用 {0}。

js.debugger.part.1.title=调试代码。第 I 部分
js.debugger.part.1.start.1=现在已经有了运行/调试配置，来看看如何使用内置调试器。
js.debugger.part.1.start.2=首先再运行一​​次代码以检查返回的内容，因为上一课中并未重点介绍。点击含有配置的下拉列表旁边的 {0} 按钮，以运行当前所选配置。
js.debugger.part.1.gutter=所比较的数字 {0} 和 {1} 不相等，因此运行代码时应得到 {2}。我们来找出得到 {3} 的原因。在第 1 行，点击 #1 和代码之间的间距(空白)以放置断点。
js.debugger.part.1.set.breakpoint=我们可以使用断点来暂停执行应用程序。在间距中看到的红色圆圈就是 <ide/> 中的断点。如果再次点击，就会将其移除。您也可以点击鼠标右键来自定义其行为，例如为它设置条件。点击右上角的 {0} 按钮(或按 {1})以继续。
js.debugger.part.1.tool.window.1=了解一下“{0}”工具窗口。左侧为停止/重新运行配置和管理断点的图标。顶部有几个选项卡和一组用于逐步执行代码的图标。
js.debugger.part.1.tool.window.2=我们所在的“{0}”选项卡是完成大部分工作的位置。右侧为按范围分组的所有{1} 及其值。“{2}”视图显示调用堆栈。如果仔细查看，您会看到执行路径每个点处的应用程序状态。现在，切换到“{3}”选项卡。
js.debugger.part.1.scripts.tab={0} 选项卡显示应用程序记录的错误等消息。在调试 Node.js 应用程序时，<ide/> 还显示 {1} 选项卡，从中可以运行 JavaScript 代码段并查看控制台消息。切换到 {2} 选项卡以继续。
js.debugger.part.1.next={0} 选项卡列出加载到当前正在运行的进程中的所有文件。双击即可查看任何文件的内容。要转到本课程的第二部分，请点击下方按钮或使用 {1}。

js.debugger.part.2.title=调试代码。第 II 部分
js.debugger.part.2.step.into.1=<strong>重要提示</strong>: 请确保第 1 行有一个断点，并且调试器已启动({0})并在 {1} 选项卡上打开，然后再向前移动。
js.debugger.part.2.step.into.2=我们来继续查找代码中的错误，并了解在 <ide/> 中进行调试时的一些其他实用信息。为了更好地了解代码执行方式，我们可以在其中添加更多断点，然后使用 {0} 按钮({1})从一个断点切换到另一个断点，不过还有一种速度更快的方法。我们来按 {2} 并使用 {3} ({4})进入执行的下一行。
js.debugger.part.2.buttons.1=要了解有关逐步执行该程序的详细信息，请查看<a href="{0}">我们的在线帮助</a>。
js.debugger.part.2.buttons.2=现在，如果我们要检查一个表达式的值该怎么办呢? <ide/> 让您能够使用 {0} 功能快速执行此操作。按 {1} 继续。
js.debugger.part.2.evaluate.1=添加 {0} 作为表达式，然后按 {1}。看一下结果: 它等于 {2}。这就是问题所在。为了让函数捕获不同的数字，需要略微更改表达式，以使其结果等于 {3}。
js.debugger.part.2.evaluate.2=现在关闭弹出窗口，并修正我们在代码中发现的问题。在 {0} 中的第 2 行，将 {1} 替换为 {2}。
js.debugger.part.2.stop=最后来了解不再需要调试器时如何将其停止。首先点击添加的断点以将其移除。然后使用 {0}({1})停止调试器，并按 {2} 关闭其工具窗口。
js.debugger.part.2.end=恭喜! 您已经完成了 {0}，并了解了调试各种应用的一些基本方法。如果需要，您可以再运行一次代码，以确认现在一切正常。要深入了解特定类型应用的调试，请查看我们的 <a href=''{1}''>Web 帮助</a>和<a href=''{2}''>博文</a>。
