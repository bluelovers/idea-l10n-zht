dart.color.settings.description.error=分析错误
dart.color.settings.description.warning=分析警告
dart.color.settings.description.hint=分析提示
dart.color.settings.description.block.comment=块注释
dart.color.settings.description.doc.comment=文档注释
dart.color.settings.description.line.comment=行注释
dart.color.settings.description.number=数字
dart.color.settings.description.string=字符串
dart.color.settings.description.valid.string.escape=转义序列
dart.color.settings.description.invalid.string.escape=无效的转义序列
dart.color.settings.description.operator=运算符
dart.color.settings.description.parentheses=圆括号
dart.color.settings.description.brackets=中括号
dart.color.settings.description.braces=大括号
dart.color.settings.description.comma=逗号
dart.color.settings.description.dot=点
dart.color.settings.description.semicolon=分号
dart.color.settings.description.colon=冒号
dart.color.settings.description.fat.arrow=Fat arrow
dart.color.settings.description.bad.character=错误字符
dart.color.settings.description.symbol.literal=Symbol literal
dart.color.settings.description.annotation=注解
dart.color.settings.description.class=类
dart.color.settings.description.constructor=构造函数
dart.color.settings.description.dynamic.local.variable.declaration=动态局部变量声明
dart.color.settings.description.dynamic.local.variable.reference=Dynamic local variable reference
dart.color.settings.description.dynamic.parameter.declaration=动态形参声明
dart.color.settings.description.dynamic.parameter.reference=动态形参引用
dart.color.settings.description.enum=枚举
dart.color.settings.description.enum.constant=枚举常量
dart.color.settings.description.function.type.alias=Function type alias
dart.color.settings.description.identifier=标识符
dart.color.settings.description.instance.field.declaration=Instance field declaration
dart.color.settings.description.instance.field.reference=Instance field reference
dart.color.settings.description.instance.getter.declaration=Instance getter declaration
dart.color.settings.description.instance.getter.reference=Instance getter reference
dart.color.settings.description.instance.method.declaration=Instance method declaration
dart.color.settings.description.instance.method.reference=Instance method reference
dart.color.settings.description.instance.setter.declaration=Instance setter declaration
dart.color.settings.description.instance.setter.reference=Instance setter reference
dart.color.settings.description.import.prefix=导入前缀
dart.color.settings.description.keyword=关键字
dart.color.settings.description.label=标签
dart.color.settings.description.library.name=Library name
dart.color.settings.description.local.function.declaration=局部函数声明
dart.color.settings.description.local.function.reference=Local function reference
dart.color.settings.description.local.variable.declaration=局部变量声明
dart.color.settings.description.local.variable.reference=Local variable reference
dart.color.settings.description.parameter.declaration=形参声明
dart.color.settings.description.parameter.reference=形参引用
dart.color.settings.description.static.field.declaration=static 字段声明
dart.color.settings.description.static.getter.declaration=static getter 声明
dart.color.settings.description.static.getter.reference=static getter 引用
dart.color.settings.description.static.method.declaration=static 方法声明
dart.color.settings.description.static.method.reference=Static method reference
dart.color.settings.description.static.setter.declaration=static setter 声明
dart.color.settings.description.static.setter.reference=static setter 引用
dart.color.settings.description.top.level.function.declaration=顶层函数声明
dart.color.settings.description.top.level.function.reference=Top level function reference
dart.color.settings.description.top.level.getter.declaration=Top level getter declaration
dart.color.settings.description.top.level.getter.reference=Top level getter reference
dart.color.settings.description.top.level.setter.declaration=Top level setter declaration
dart.color.settings.description.top.level.setter.reference=Top level setter reference
dart.color.settings.description.top.level.variable.declaration=Top level variable declaration
dart.color.settings.description.type.name.dynamic='dynamic' 类型
dart.color.settings.description.type.parameter=类型形参
dart.color.settings.description.unresolved.instance.member.reference=Unresolvable dynamic reference

error.label.invalid.string.escape=无效的转义序列
dart.analysis.progress.title=正在分析…
dart.analysis.progress.with.file=正在分析 {0}

action.title.dart.file=Dart 文件
action.description.create.dart.file=创建 Dart 文件
list.item.dart.file=Dart 文件
new.dart.file.title=新建 Dart 文件
title.create.dart.file.0=创建 Dart 文件 {0}
dart.title=Dart
dart.sdk.path.label=Dart SDK 路径(&D):
version.label=版本:
set.sdk.to.see.sample.content.options=请设置 Dart SDK 路径。
dart.sdk.bad.dartpub.path=找不到可执行文件: \n\
{0}
overrides.method.in=重写 ''{1}'' 中的方法 ''{0}''
overrides.operator.in=重写 ''{1}'' 中的运算符 ''{0}''
implements.method.in=实现 ''{1}'' 中的方法 ''{0}''
fields.to.generate.getters=选择要生成 Getter 的字段
fields.to.generate.setters=选择要生成 Setter 的字段
fields.to.generate.getters.setters=选择要生成 Getter 和 Setter 的字段
command.generate.getters.and.setters=生成 getter 和 setter
command.generate.setters=生成 setter
command.generate.getters=生成 getter
command.implement.methods=实现方法
command.override.methods=重写方法
dialog.title.choose.methods.to.override=选择要重写的方法
dialog.title.choose.methods.to.implement=选择要实现的方法
tab.title.subclasses.of.0={0} 的子类
tab.title.overriding.methods.of.0={0} 的重写方法

runner.command.line.configuration.name=Dart 命令行应用
runner.command.line.configuration.description=Dart 命令行应用程序
runner.web.app.configuration.name=Dart Web 应用
command.line.run.config.label.dart.file=Dart 文件(&F):
command.line.run.config.label.vm.options=虚拟机选项(&V):
command.line.run.config.checkbox.enable.asserts=启用断言(&N)
command.line.run.config.checkbox.checked.mode=检查模式
command.line.run.config.label.program.arguments=程序实参(&R):
command.line.run.config.label.working.directory=工作目录(&W):

remote.debug.configuration.name=Dart 远程调试
remote.debug.configuration.description=Debug 远程 Dart 命令行应用程序
remote.debug.search.sources.in=在以下位置搜索源码(&E):
remote.debug.hint=<html>启动后，此调试配置将提示要连接到的 Dart 服务协议 URL。<br/><br/>适用于 <a href='https://dart.dev/tools/dart-vm'>Dart VM</a> apps pass <code>--enable-vm-service</code> 以及可能的 <code>--pause_isolates_on_start</code> 虚拟机选项。<br/>对于其他上下文，例如 Dart Web 应用 — 使用适当的标志和选项。</html>

webdev.debug.configuration.name=Dart Web
webdev.debug.configuration.description=使用 webdev 工具启动 Dart Web 应用程序
web.run.config.label.html.file=HTML 文件(&F):
web.run.config.label.webdev.port=Webdev 端口(&P):
choose.html.main.file=选择 HTML 文件
old.dart.sdk.for.webdev=使用 Webdev 调试 Dart Web 应用时需要 Dart SDK {0}+，当前版本: {1}。

dart.project.description=创建用于 Dart 编程语言的项目
project.template.not.selected=未选择项目模板
dart.web.app.title=Dart Web 应用
dart.commandline.app.title=Dart 命令行应用
choose.dart.main.file=选择 Dart 文件
choose.dart.directory=选择 Dart 目录
livetemplate.description.iter=迭代(for..in)
livetemplate.description.itar=遍历数组元素
template.context.type.dart=Dart
template.context.type.dart.statement=语句
dart.surround.with.brackets=[expr]
dart.surround.with.parenthesis=(expr)
dart.surround.with.not.parenthesis=!(expr)
working.dir.0=工作目录: {0}
dart.pub.get.title=Pub Get
dart.pub.upgrade.title=Pub Upgrade
dart.pub.outdated.title=Pub Outdated
dart.pub.build.title=Pub Build
dart.webdev.build.title=Webdev Build
dart.pub.cache.repair.title=Pub Repair Cache
dart.pub.cache.repair.message=<html><a href='https://dart.dev/tools/pub/cmd/pub-cache'>pub cache repair</a> 命令可对系统缓存中所有托管的软件包和 git 软件包执行干净的重装<br/>。<br/><br/>是否开始修复缓存?</html>

runner.test.configuration.name=Dart 测试
runner.test.configuration.description=Dart 单元测试运行配置
test.run.config.label.test.mode=测试模式(&M):
test.run.config.label.test.file=测试文件(&F):
test.run.config.label.test.folder=测试文件夹(&F):
test.run.config.label.group.or.test.name=组或测试名称(&N):
test.run.config.label.target.name=目标名称(&T):
test.run.config.label.test.runner.options=测试运行程序选项(&R):

dart.pub.exception=异常: {0}
dart.refactoring.extract.method.error=提取方法错误
dart.refactoring.move.file.dialog.title=移动文件例外
dart.refactoring.move.file.dialog.error.applying.change=尝试应用移动文件重构时发生异常。
dart.refactoring.move.file.dialog.error.computing.change=尝试为文件移动计算文件变更时发生异常: {0}

dart.fix.getter.none.found=找不到要为之生成 getter 的 private 字段
dart.fix.setter.none.found=找不到要为之生成 setter 的 private 字段
dart.fix.getter.setter.none.found=找不到要为之生成 getter/setter 的 private 字段
dart.fix.implement.none.found=找不到要实现的方法
dart.fix.override.none.found=找不到要重写的方法

dart.hierarchy.object=所有类派生自 Object

inspections.group.name=Dart
dart.sdk.is.not.configured=未配置 Dart SDK
setup.dart.sdk=设置 Dart SDK
dart.support.is.not.enabled.for.project=未为项目启用 Dart 支持
dart.support.is.not.enabled.for.module.0=未为模块 ''{0}'' 启用 Dart 支持
enable.dart.support=启用 Dart 支持
open.dart.settings=打开 Dart 设置
dart.support.enabled.for.module.0=为模块 ''{0}'' 启用了 Dart 支持
dart.support.enabled=已启用 Dart 支持
dart.sdk.0.open.dart.settings=<html>Dart SDK {0}<br/><br/><a href="settings">打开 Dart 设置</a></html>
old.dart.sdk.configured=要正确地高亮显示代码，需要使用 Dart SDK {0}+。当前版本: {1}
download.dart.sdk=下载 Dart SDK
dart.sdk.update.title=Dart SDK 更新
new.dart.sdk.available.for.download..notification=<html>有新版本的 Dart SDK ({0})可供下载。<br/>当前版本: {1}。<br/><br/><a href="download">下载 Dart SDK</a>\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;\\&nbsp;<a href="settings">打开 Dart 设置</a></html>
dart.sdk.update.check.failed=无法检查 Dart SDK 更新。
checking.dart.sdk.update=正在检查 Dart SDK 更新
dart.sdk.0.is.up.to.date=配置的 Dart SDK {0} 已处于最新状态。
new.dart.sdk.0.available.for.download..dialog=<html>有新版本的 Dart SDK ({0})可供<a href="{1}">下载</a>。</html>
dart.sdk.0.available.for.download=<html>Dart SDK {0} 可供<a href="{1}">下载</a>。</html>

outdated.dependencies.inspection.name=软件包依赖项过时
pub.get.never.done=尚未运行 'Pub get'
pubspec.edited=已编辑 Pubspec
pub.get=Pub get
pub.upgrade=Pub upgrade
pub.outdated=Pub outdated
webdev.build=Webdev build…
open.pubspec=打开 pubspec
ignore.warning=忽略

path.package.reference.inspection.name=未解析的路径软件包
pubspec.yaml.not.found.in=在 {0} 中找不到 pubspec.yaml 文件
path.package.reference.to.itself=Dart 软件包无法将自身列为依赖项

path.to.dart.file.not.set=未指定 Dart 源代码路径
dart.file.not.found=找不到 Dart 文件: {0}
not.a.dart.file.or.directory=指定的文件不是 Dart 文件或目录: {0}
work.dir.does.not.exist=工作目录不存在: {0}
test.dir.not.in.project=目录不在 Dart 项目中

path.to.html.file.not.set=未指定 HTML 文件路径
html.file.not.found=找不到 HTML 文件: {0}
not.a.html.file=指定的文件不是 HTML 文件: {0}
html.file.not.within.dart.project=HTML 文件应位于 Dart 项目中
html.file.right.in.dart.project.root=HTML 文件应位于子文件夹(如 'web')中，不应位于 Dart 项目根中

dart.generate.code=生成 Dart 代码
dart.generate.constructor=生成构造函数
dart.generate.named.constructor=生成命名构造函数
dart.generate.toString=生成 toString()
dart.generate.equalsAndHashcode=Generate ==() 和 hashCode
project.0=项目 ''{0}''
debugger.trying.to.connect=正在尝试连接
connect.to.running.app.title=连接到正在运行的应用
enter.url.to.running.dart.app=调试正在运行的 Dart 或 Flutter 应用程序的服务 URL:
connect.to.running.app.comment=正在运行的 Dart 进程具有 VM 调试器服务，IDE 可以通过 URL 连接到该服务。在命令行上启动进程后，将打印此 URL。
dart.line.breakpoints.title=Dart 行断点
test.0.in.1={0} ({1} 内)
all.tests.in.0={0} 中的测试
open.observatory.action.text=打开 Observatory
open.observatory.action.description=在浏览器中打开 Observatory URL (面向 Dart 应用的分析器)
dart.pop.frame.action.text=丢帧(Dart)
dart.pop.frame.action.description=将当前框架从堆栈中弹出
stop.dart.webdev.server=停止 Dart Webdev 服务器
dart.webdev.server.output.contains.errors=<html><a href="">Dart Webdev 服务器</a>输出包含错误。</html>
dart.webdev.server.output.contains.warnings=<html><a href="">Dart Webdev 服务器</a>输出包含警告。</html>
stop.pub.process.action=停止 Pub 进程
rerun.pub.command.action.name=重新运行 Pub 命令
rerun.pub.command.action.description=再次运行相同的 Pub 命令

checkbox.collapse.parts=部分
checkbox.collapse.generic.parameters=泛型形参
dart.project.generate.sample.content.label=生成示例内容(&G):
dart.project.templates.loading.message=正在加载 Dart 项目模板…

toolwindow.stripe.Dart_Analysis=Dart 分析
dart.reanalyze.action.name=重新分析 Dart 源代码
dart.reanalyze.action.description=重新分析所有 DART 源文件(无需重新启动 DART 分析服务器)
dart.restart.server.action.name=重启 Dart 分析服务器
group.by.severity=按严重程度分组
group.by.severity.description=按严重程度分组: 表的顶部为错误，然后是警告，最后是提示
open.dart.plugin.settings=启用 Dart 插件设置
analysis.server.settings.diagnostics=查看分析器诊断
analysis.server.settings.package.analysis=将分析范围设置为当前软件包
action.DartProblemsViewPanel.open.documentation.text=打开文档
action.DartProblemsViewPanel.open.documentation.description=在浏览器中打开详细的问题描述
# this text becomes a hyperlink that is added to the red code tooltip right after the error message. Example: "Dead code. (<a href='https://dart.dev/tools/diagnostic-messages#dead_code'>Documentation</a>)"
error.doc.link=文档

analysis.server.terminated=分析服务器已终止
analysis.server.not.running=分析服务器未运行。
dart.vm.file.does.not.exist.at.0=以下位置不存在 Dart VM 文件: {0}
analysis.server.snapshot.file.does.not.exist.at.0=在以下位置不存在 Dart 分析服务器快照文件: {0}
dart.vm.file.is.not.executable.at.0=Dart VM 文件在以下位置无法执行: {0}
analysis.server.snapshot.file.is.not.readable.at.0=Dart 分析服务器快照文件在以下位置无法读取: {0}
issue.occurred.with.analysis.server=分析服务器发生问题

action.Dart.DartSortMembers.text=对 Dart 文件中的成员排序
action.Dart.DartSortMembers.description=对 Dart 代码中的成员排序
action.Dart.DartSortMembers.progress.title=正在对 Dart 文件中的成员排序…
dart.sort.members.action.name.ellipsis=对 Dart 文件中的成员排序…
dart.sort.members.hint.failed=无法对成员排序
dart.sort.members.hint.already.good=成员排序: 成员已排序
dart.sort.members.hint.success=已成功对代码排序
dart.sort.members.files.no.dart.files=找不到适用的 Dart 文件。
dart.sort.members.files.dialog.question=对 {0, choice, 1#个选定的文件|2#the {0} 个选定的 Dart 文件} 运行 Dart 成员排序器?

action.Dart.DartStyle.text=使用 'dart format' 重新格式化代码
action.Dart.DartStyle.description=使用 'dart format' 命令格式化 Dart 代码
action.Dart.DartStyle.progress.title=正在运行 'dart format'…
dart.style.action.name.ellipsis=使用 'dart format' 重新格式化代码…
dart.style.hint.failed=无法重新格式化代码
dart.style.hint.already.good=重新格式化: 无格式变更
dart.style.hint.success=重新格式化: 代码成功格式化
dart.style.files.no.dart.files=找不到适用的 Dart 文件。
dart.style.files.dialog.question=在{0, choice, 1#所选文件|2# {0} 个所选 Dart 文件}上运行 ''dart format''?
organized.directives=组织的指令

code.style.settings.dartfmt.faq=<html>代码已使用 Dart SDK 中的 <a href='https://dart.dev/tools/dart-format'>dart format</a> 工具格式化。请参阅 <a href='https://github.com/dart-lang/dart_style/wiki/FAQ'>FAQ</a>。</html>
code.style.settings.label.line.length=行长度(&L):

action.Dart.DartFix.text=运行 'dart fix'
# suppress inspection "UnusedProperty" -- used by DartFixAction, which is temporarily commented out in plugin.xml
action.Dart.DartFix.description=运行 'dart fix' 来修正和迁移 Dart 源
dart.fix.action.name.ellipsis=使用 Dartfix 修正代码…

failed.to.create.file.0.1=无法创建文件 {0}:\n\
{1}

dart.quick.assist.family.name=由 Dart 分析服务器提供快速协助
goto.super.class.chooser.title=选择超类
usages.in.comments.to.rename=要重命名的注释中的用法
usages.in.code.to.rename=代码中要重命名的用法
dynamic.usages.to.rename=要重命名的代码中的潜在(动态)用法
rename.need.reRun=无法重命名。\n\
找到用法后，代码发生了更改。\n\
请再次调用“重命名”重构。

exportable.DartCodeFoldingSettings.presentable.name=代码折叠设置

analysis.server.status.good.text=提交分析器反馈…

analysis.server.show.diagnostics.text=查看分析器诊断…
analysis.server.show.diagnostics.error=打开 Dart 分析服务器诊断页面时出错

dart.feedback.url=https://github.com/dart-lang/sdk/issues/new?title={0}\\&body=
dart.feedback.template=\n\
\n\
\n\
## 版本信息\n\
\n\
- `IDEA {0}`\n\
- `{1}`\n\
- `{2}`

dart.smartKeys.insertDefaultArgValues.text=在补全中插入默认实参值
dart.editor.showClosingLabels.text=在 Dart 源代码中显示关闭标签

label.update.imports.on.paste=粘贴时更新导入:
dialog.paste.on.import.title=粘贴时更新导入
dialog.paste.on.import.text=<html>您粘贴的代码段使用的库在新上下文中无法访问。<br/><br/>是否更新新文件中的导入?</html>

action.Dart.pub.cache.repair.text=Pub Cache Repair…
action.Dart.pub.cache.repair.description=运行 'pub cache repair'
action.Dart.build.text=Webdev Build…
action.Dart.build.description=运行 'webdev build'
action.Dart.pub.outdated.text=Pub Outdated
action.Dart.pub.outdated.description=运行 'pub outdated'
action.Dart.pub.upgrade.text=Pub Upgrade
action.Dart.pub.upgrade.description=运行 'pub upgrade'
action.Dart.pub.get.text=Pub Get
action.Dart.pub.get.description=运行 'pub get'
action.Generate.EqualsAndHashcode.Dart.text===() 和 hashCode
action.Generate.ToString.Dart.text=toString()
action.Generate.GetSetAccessor.Dart.text=Getter 和 Setter
action.Generate.SetAccessor.Dart.text=Setter
action.Generate.GetAccessor.Dart.text=Getter
action.Generate.Named.Constructor.Dart.text=已命名的构造函数
action.Generate.Constructor.Dart.text=构造函数
action.Dart.Analyzer.Diagnostics.text=Dart Analyzer Diagnostics
action.Dart.Analyzer.Diagnostics.description=查看 Dart 分析器诊断
action.Dart.Restart.Analysis.Server.text=重启 Dart 分析服务器
action.Dart.Restart.Analysis.Server.description=重启 Dart 分析服务器
action.Dart.Reanalyze.text=重新分析 Dart 源代码
action.Dart.Reanalyze.description=Reanalyze all Dart source files
action.Dart.NewDartFile.text=Dart 文件
action.Dart.NewDartFile.description=Create new Dart file
action.Dart.stop.dart.webdev.server.text=停止 Dart Webdev 服务器

action.description.run.pub.build=运行 'pub build'
action.text.pub.build=Pub Build…
action.text.webdev.build=Webdev Build…
action.description.run.webdev.build=运行 'webdev build'
border.breaking.policy=中断策略
radio.text.break.on.all.exceptions=在遇到所有异常时都中断
radio.text.break.on.uncaught.exceptions=在遇到未捕捉的异常时中断
breakpoint.type.title.dart.exception.breakpoint=Dart 异常断点
break.on.exceptions=遇到异常时中断
intention.family.name.suppress.errors.and.warnings.in.dart.code=禁止 Dart 代码中的错误和警告
intention.text.suppress.0=禁止 ''{0}''
intention.text.suppress.0.using.eol.comment=使用 EOL 注释禁止 ''{0}''
find.usages.type.top.level.variable=顶层变量
find.usages.type.local.variable=局部变量
find.usages.type.class=类
find.usages.type.method=方法
find.usages.type.function=函数
find.usages.type.field=字段
find.usages.type.parameter=形参
find.usages.type.constructor=构造函数
find.usages.type.typedef=typedef
find.usages.type.operator=运算符
find.usages.type.label=标签
find.usages.type.reference=引用
find.usages.type.library=库
label.text.method.name=方法名称:
checkbox.text.extract.all.0.occurrences=提取全部 {0} 个匹配项
dialog.title.extract.method=提取方法
checkbox.text.extract.getter=提取 getter
checkbox.text.extract.all.occurrences=提取所有匹配项
notification.content.you.can.enable.it.back.in.the.a.href.event.log.a.settings=可以在 <a href="">{0}</a> 设置中恢复。
notification.title.warning.disabled=警告被禁用。
progress.title.activating.package.webdev=正在激活软件包 'webdev'
progress.title.loading.coverage.data=正在加载覆盖率数据…
progress.title.activating.coverage.package=正在激活覆盖率软件包…
dialog.title.select.working.directory=选择工作目录
button.browse.dialog.title.select.dart.sdk.path=选择 Dart SDK 路径
label.text.name=名称:
dialog.title.extract.local.variable=提取局部变量
dialog.title.rename.0=重命名 {0}
progress.text.checking.availability.at.the.selection=选择时检查适用性。
progress.text.validating.the.specified.parameters=正在验证指定形参。
coverage.string.0.of.1.files={0}/{1} 个文件
coverage.string.0.of.1.files.covered=已覆盖 {0}/{1} 个文件
filetype.dart.description=Dart
validation.info.input.and.output.folders.must.be.different=输入文件夹和输出文件夹不得相同
validation.info.output.folder.not.specified=未指定输出文件夹
validation.info.input.folder.not.specified=未指定输入文件夹
validation.info.build.mode.not.specified=未指定构建模式
button.browse.dialog.title.output.folder=输出文件夹
button.text.build2=构建
action.title.dart.rename.refactoring=Dart 重命名重构
analysis.issues.may.affect.the.execution=<a href=''{0}''>分析问题</a>可能影响 ''{1}'' 的执行。

dart.problems.view.filtering.by.severity=按严重程度筛选
dart.problems.view.filtering.by.0=按{0}筛选
dart.problems.view.filtering.by.0.and.severity=按 {0} 和严重程度筛选
dart.problems.view.filter.current.content.root=当前内容根
dart.problems.view.filter.current.dart.package=当前 Dart 软件包
dart.problems.view.filter.current.directory=当前目录
dart.problems.view.filter.current.file=当前文件
dart.problems.view.0.errors={0} 个{0, choice, 1#错误|2#错误}
dart.problems.view.0.warnings={0} 个{0, choice, 1#警告|2#警告}
dart.problems.view.0.hints={0} 个{0, choice, 1#提示|2#提示}
dart.problems.view.status.0.and.1={0}、{1}
dart.problems.view.status.0.and.1.and.2={0}、{1}、{2}
dart.problems.view.status.0.and.filters.1={0} ({1})
dart.problems.view.column.name.location=位置
dart.problems.view.column.name.description=描述
dart.problems.view.action.name.filter.problems=筛选
dart.problems.view.action.description.filter.problems=筛选“Dart 分析”工具窗口中显示的问题
dart.problems.view.action.name.analysis.server.settings=分析器设置
dart.problems.view.action.description.analysis.server.settings=Dart 分析服务器设置
dart.problems.view.popup.title.analysis.server.settings=Dart 分析服务器设置
dart.problems.view.popup.title.dart.problems.filter=Dart 问题筛选器
dart.problems.filter.popup.title.files=文件
dart.problems.filter.popup.title.severity=严重程度
dart.problems.filter.popup.link.reset.filter=重置筛选器
dart.problems.filter.popup.radio.whole.project=整个项目(&O)
dart.problems.filter.popup.radio.current.content.root=当前内容根(&C)
dart.problems.filter.popup.radio.current.dart.package=当前 Dart 软件包(&P)
dart.problems.filter.popup.radio.current.directory=当前目录(&D)
dart.problems.filter.popup.radio.current.file=当前文件(&F)
dart.problems.filter.popup.check.box.errors=错误(&E)
dart.problems.filter.popup.check.box.warnings=警告(&W)
dart.problems.filter.popup.check.box.hints=提示(&H)

progress.title.move.file=移动文件
progress.title.extract.local.variable=提取局部变量
progress.title.extract.method=提取方法
progress.title.inline.local.variable=内联局部变量
progress.title.rename=重命名
progress.title.inline.method=内联方法
error.failed.to.edit.file.file.not.found.0=无法编辑文件，未找到: {0}
error.none.of.the.files.were.in.this.project.content.0=这些文件均不在此项目内容中: {0}
radio.inline.all.references.remove.method=内联所有引用并移除该方法
radio.inline.this.reference.leave.method=内联此引用并保留该方法
label.method.0=方法 {0}

dart.build.dialog.label.build.mode=构建模式:
dart.build.dialog.radio.button.release=发布(&R)
dart.build.dialog.radio.button.debug=调试(&D)
dart.build.dialog.radio.button.other=其他(&O):
dart.build.dialog.label.input.folder=输入文件夹(&I):
dart.build.dialog.label.output.folder=输出文件夹(&U):

settings.page.checkbox.enable.dart.support.for.project.0=为项目 ''{0}'' 启用 Dart 支持(&E)
settings.page.checkbox.enable.dart.support.check.box=启用 Dart 支持(&E)
settings.page.label.enable.dart.support.for.following.modules=为以下模块启用 Dart 支持:
settings.page.label.enable.dart.support.for.following.projects=为以下项目启用 Dart 支持:
error.path.to.sdk.not.specified=错误: 未指定 Dart SDK 路径。
error.folder.specified.as.sdk.not.exists=错误: 指定为 Dart SDK 主目录的文件夹不存在。
error.sdk.not.found.in.specified.location=错误: 在指定位置找不到 Dart SDK。
warning.no.modules.selected.dart.support.will.be.disabled=警告: 未选择任何模块。将对该项目禁用 Dart 支持。
warning.no.projects.selected.dart.support.will.be.disabled=警告: 未选择任何项目。Dart 支持将被禁用。
settings.page.checkbox.check.sdk.update=检查 SDK 更新(&U):
settings.page.check.updates.combobox.item.stable.channel=稳定通道
settings.page.check.updates.combobox.item.stable.and.dev.channels=稳定通道和开发通道
settings.page.button.check.updates.now=立即检查(&W)
settings.page.label.webdev.server.port=Webdev 服务器端口(&P):

debugger.error.cannot.evaluate=无法评估
debugger.error.no.running.isolate=无正在运行的 isolate。
debugger.error.no.connection.to.dart.vm=未连接到 Dart 虚拟机
debugger.unnamed.frame=未命名
debugger.isolate.name.running={0} (正在运行)
debugger.dialog.message.cancelled=已取消
debugger.asynchronous.gap.frame=<asynchronous gap>
debugger.link.see.stack.trace=堆栈跟踪

notification.content.message.with.view.details.link={0} (<a href="">查看详细信息</a>)
notification.title.dart.analysis.issue=Dart 分析问题
dialog.message.cannot.activate.pub.package.coverage=无法激活 'coverage' pub 软件包。
notification.link.don.t.show.for.this.session=不对此会话显示
notification.link.never.show.again=不再显示
dialog.message.dart.project.path.not.specified=未指定 Dart 项目路径。
dialog.message.folder.not.found=找不到文件夹: {0}
dialog.message.folder.not.in.project.content=文件夹不在项目内容中: {0}
dialog.message.group.or.test.name.not.specified=未指定组名称或测试名称
test.mode.all.in.folder=文件夹中的所有
test.mode.all.in.file=文件中的所有
test.mode.test.group.or.test.by.name=按名称分组或测试
dialog.message.no.tests.to.run=没有要运行的测试
dart.coverage.presentable.text=Dart 覆盖率

doc.popup.containing.class=包含类:
doc.popup.type=类型:
dart.color.settings.description.constructor.tearoff=构造函数 tear-off
dart.color.settings.description.instance.method.tearoff=实例方法 tear-off
dart.color.settings.description.local.function.tearoff=局部函数 tear-off
dart.color.settings.description.static.method.tearoff=static 方法 tear-off
dart.color.settings.description.top.level.function.tearoff=顶层函数 tear-off
dart.color.settings.description.type.alias=类型别名
press.completion.shortcut.again.for.more.results=再次按 {0} 可查看更多结果
notification.group.dart.support=已启用 Dart 支持
notification.group.dart.analysis=Dart 分析
notification.group.dart.webdev=Dart webdev
notification.group.dart.analysis.server=Dart 分析服务器
notification.group.dart.pub.tool=Dart 'pub' 工具
notification.group.dart.analysis.issue=Dart 分析问题