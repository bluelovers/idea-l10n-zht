action.Meson.LoadMesonProject.text=加载 Meson 项目
annotator.meson.options.error.bad.statement=meson.options 中只允许 option() 调用
build.all.target.name=所有
clean.and.refresh.project.action.description=擦除项目并强制重新加载链接的 Meson 项目
clean.and.refresh.project.action.name=擦除并重新加载 Meson 项目
converter.failed.to.find.compiler.executable=找不到可执行文件\: {0}
converter.no.targets=空 Meson 内省
converter.unknown.compiler.executable=未知的编译器可执行文件\: {0}
execution.build.task.name=正在构建\: {0}
execution.build.task.target=正在使用目标 {1} 构建 {0}
execution.clean.task.name=正在清理\: {0}
filetype.description=Meson 文件
group.Meson.ToolsMenu.text=Meson
meson=Meson
model.cant.read.file.error=无法读取文件 ''{0}''
model.compiler.exe.empty.error=Meson 内省文件格式错误\: 未指定编译器可执行文件
model.compiler.id.empty.error=Meson 内省文件格式错误\: 未指定编译器 ID
model.error.happened.during.reload.error=Meson 设置期间发生错误
model.generic.error=无法解析 Meson 内省
model.introspection.file.parse.error=Meson 内省文件格式错误\: 找不到内省文件
model.language.empty.error=Meson 内省文件格式错误\: 未指定语言
model.target.type.empty.error=Meson 内省文件格式错误\: 未指定目标类型
model.unsupported.introspection.version.error=不受支持的内省版本。\n当前版本\: ''{0}''\n支持版本\: ''{1}''
model.version.empty.error=Meson 内省文件格式错误\: 版本为空
open.meson.build.file.action.name=打开 meson.build 文件
open.settings.action.description=打开 Meson 设置
open.settings.action.name=Meson 设置
options.language.arguments.key=键
options.language.assignment=大括号和运算符//赋值
options.language.boolean=字面量//布尔值
options.language.braces=大括号和运算符//大括号
options.language.brackets=大括号和运算符//中括号
options.language.calls.function=调用//函数调用
options.language.calls.method=调用//方法调用
options.language.comment=评论
options.language.identifier=标识符
options.language.integer=字面量//数字
options.language.invalid.seq=字符串//转义序列//无效
options.language.keyword=关键字
options.language.logical=大括号和运算符//逻辑
options.language.other=大括号和运算符//其他
options.language.parentheses=大括号和运算符//圆括号
options.language.string=字面量//字符串
options.language.valid.seq=字符串//转义序列//有效
project.generation.panel.language=语言\:
project.generation.panel.language.c=C
project.generation.panel.language.cpp=C++
project.generation.panel.language.standard=语言标准\:
project.generation.panel.type=类型\:
project.generation.panel.type.executable=可执行文件
project.generation.panel.type.library=库
project.status.action.select=选择 meson.build
refresh.project.action.description=强制重新加载链接的 Meson 项目
refresh.project.action.name=重新加载 Meson 项目
resolver.cancelled.error=项目重新加载被取消
resolver.configuring.step.display.name=正在导入到 CLion 项目模型
resolver.meson.failed=Meson 失败，错误代码为 {0}
resolver.meson.file.not.found.message=在 ''{0}'' 中找不到 ''meson.build''
resolver.meson.not.found=缺少 Meson
resolver.meson.not.found.description=找不到 Meson。请按照<a href\="{0}">官方安装指南</a>安装 Meson
resolver.meson.not.started=无法运行 Meson
resolver.no.environment=无环境
resolver.not.in.process.message=Meson 仅支持 'in-process' 模式。在注册表中设置 'Meson.system.in.process' 键
resolver.preparation.step.display.name=正在准备
resolver.reload.step.display.name=正在运行 Meson
resolver.unexpected.error.message=重新加载 Meson 项目期间发生意外错误
settings.global.configurable.empty.text=未检测到 Meson 项目
settings.profile.tab.buildDir=构建目录\:
settings.profile.tab.compile.options=构建选项\:
settings.profile.tab.compiler.info=编译器解析\:
settings.profile.tab.compiler.info.automatic=自动的
settings.profile.tab.compiler.info.force.build=构建
settings.profile.tab.compiler.info.force.host=主机
settings.profile.tab.compiler.info.hint=此功能主要用于交叉编译。在某些情况下，需要使用主机编译器(而非构建编译器)进行代码高亮显示。默认的自动模式会选择最合适的选项，即“构建”或“主机”，其适用于大多数用例。手动选择编译器可以帮助解决重新加载项目后由于编译器信息不正确而导致代码高亮显示不正确的问题。
settings.profile.tab.meson.executable=Meson 可执行文件\:
settings.profile.tab.meson.executable.comment.cancelled=版本检测已取消
settings.profile.tab.meson.executable.comment.cant.detect=找到了可执行文件，但未检测到其版本
settings.profile.tab.meson.executable.comment.cant.launch=Meson 无法启动。请按照<hyperlink>官方安装指南</hyperlink>安装 Meson
settings.profile.tab.meson.executable.comment.classic.detected=Meson 版本\: {0}
settings.profile.tab.meson.executable.comment.classic.detected.old=Meson 版本\: {0}。需要升级到 0.55.0 或更高版本
settings.profile.tab.meson.executable.comment.detecting=正在检测…
settings.profile.tab.meson.executable.comment.meson.not.exists=找不到 Meson。请按照<hyperlink>官方安装指南</hyperlink>安装 Meson
settings.profile.tab.meson.executable.comment.mesonplusplus.detected=Meson++ 版本\: {0}。某些功能可能不可用
settings.profile.tab.meson.executable.comment.muon.detected=Muon 版本\:{0} (Meson 兼容版本 {1})
settings.profile.tab.meson.executable.comment.no.toolchain=找不到工具链
settings.profile.tab.meson.executable.comment.not.zero.code=Meson 已退出，代码为 {0}。请按照<hyperlink>官方安装指南</hyperlink>安装 Meson
settings.profile.tab.meson.executable.comment.unexpected=版本检测意外完成
settings.profile.tab.meson.executable.comment.wrapper.detected=Meson，附带的包装器版本\: {0}
settings.profile.tab.meson.executable.dialog.name=选择 Meson 可执行文件
settings.profile.tab.meson.executable.empty.text.cant.detect=无法检测 Meson
settings.profile.tab.meson.executable.empty.text.detected=已检测到\: {0}
settings.profile.tab.meson.executable.empty.text.detecting=正在检测…
settings.profile.tab.meson.setup.options=设置选项\:
settings.profile.tab.toolchain.name=工具链\:
show.settings.action.name=显示 Meson 设置
template.meson.cant.generate.project=无法创建新项目\: {0}
template.meson.cant.generate.project.unknown.reason=未知原因
template.meson.project=Meson
template.meson.project.c.executable=C 可执行文件的 meson.build
template.meson.project.c.library=C 库的 meson.build
template.meson.project.cpp.executable=C++ 可执行文件的 meson.build
template.meson.project.cpp.library=C++ 库的 meson.build
toolwindow.empty.text=未加载 Meson 项目
toolwindow.nodes.build.all.node.text=全部构建
toolwindow.nodes.build.node.description=构建目标
toolwindow.nodes.build.node.text=构建目标
toolwindow.nodes.build.target.node.text=构建 {0}
toolwindow.nodes.clean.node.text=清理
toolwindow.nodes.configure.autofeature.feature.node.text=功能\: {0}
toolwindow.nodes.configure.autofeature.feature.progress.title=启用功能 {0}…
toolwindow.nodes.configure.autofeature.feature.task.name=启用功能 {0}
toolwindow.nodes.configure.autofeature.node.description=覆盖所有 'auto' 功能的值(默认值\: auto)
toolwindow.nodes.configure.autofeature.node.text=auto 功能
toolwindow.nodes.configure.backend.node.backend.node.text=使用后端 {0}
toolwindow.nodes.configure.backend.node.backend.progress.title=使用后端 {0}…
toolwindow.nodes.configure.backend.node.backend.task.name=使用后端 {0}
toolwindow.nodes.configure.backend.node.description=要使用的后端(默认值\: ninja)
toolwindow.nodes.configure.backend.node.text=后端类型
toolwindow.nodes.configure.buildtype.node.buildtype.node.text=使用构建类型 {0}
toolwindow.nodes.configure.buildtype.node.buildtype.progress.title=使用构建类型 {0}…
toolwindow.nodes.configure.buildtype.node.buildtype.task.name=使用构建类型 {0}
toolwindow.nodes.configure.buildtype.node.description=要使用的构建类型(默认值\: 调试)
toolwindow.nodes.configure.buildtype.node.text=构建类型
toolwindow.nodes.configure.defaultlibrary.node.defaultlibrary.node.text=选择 {0} 库类型
toolwindow.nodes.configure.defaultlibrary.node.defaultlibrary.progress.title=选择 {0} 库类型…
toolwindow.nodes.configure.defaultlibrary.node.defaultlibrary.task.name=选择 {0} 库类型
toolwindow.nodes.configure.defaultlibrary.node.description=默认库类型(默认值\: 共享)
toolwindow.nodes.configure.defaultlibrary.node.text=默认库类型
toolwindow.nodes.configure.node.description=配置 meson
toolwindow.nodes.configure.node.text=配置
toolwindow.nodes.configure.optimization.node.description=优化级别(默认值\: 0)
toolwindow.nodes.configure.optimization.node.optimization.node.text=优化级别\: {0}
toolwindow.nodes.configure.optimization.node.optimization.progress.title=选择优化级别\: {0}
toolwindow.nodes.configure.optimization.node.optimization.task.name=选择优化级别 {0}
toolwindow.nodes.configure.optimization.node.text=优化级别
toolwindow.nodes.configure.warnlevel.node.description=要使用的编译器警告级别(默认值\: 1)
toolwindow.nodes.configure.warnlevel.node.text=警告级别
toolwindow.nodes.configure.warnlevel.node.warnlevel.node.text=警告级别\: {0}
toolwindow.nodes.configure.warnlevel.node.warnlevel.progress.title=选择警告级别\: {0}…
toolwindow.nodes.configure.warnlevel.node.warnlevel.task.name=选择警告级别\: {0}
toolwindow.nodes.configure.werror.node.text=将警告视为错误
toolwindow.nodes.configure.werror.node.werror.progress.title=将警告视为错误…
toolwindow.nodes.configure.werror.node.werror.task.name=将警告视为错误
toolwindow.nodes.dist.node.dist.progress.title=正在创建版本归档…
toolwindow.nodes.dist.node.dist.task.name=正在创建版本归档
toolwindow.nodes.dist.node.text=创建版本归档
toolwindow.nodes.install.node.description=安装项目
toolwindow.nodes.install.node.install.node.text=安装
toolwindow.nodes.install.node.install.progress.title=安装项目…
toolwindow.nodes.install.node.install.task.name=安装项目
toolwindow.nodes.install.node.installnorebuild.node.text=安装(无重建)
toolwindow.nodes.install.node.installnorebuild.progress.title=安装项目…
toolwindow.nodes.install.node.installnorebuild.task.name=安装项目(无重建)
toolwindow.nodes.install.node.installonlychanges.node.text=安装(仅更改)
toolwindow.nodes.install.node.installonlychanges.progress.title=安装项目…
toolwindow.nodes.install.node.installonlychanges.task.name=安装项目(仅更改)
toolwindow.nodes.install.node.text=安装
toolwindow.nodes.subprojects.node.description=子项目操作
toolwindow.nodes.subprojects.node.download.node.text=下载子项目
toolwindow.nodes.subprojects.node.download.progress.title=下载子项目…
toolwindow.nodes.subprojects.node.download.task.name=下载子项目
toolwindow.nodes.subprojects.node.purge.node.text=清除子项目
toolwindow.nodes.subprojects.node.purge.progress.title=清除子项目…
toolwindow.nodes.subprojects.node.purge.task.name=清除子项目
toolwindow.nodes.subprojects.node.text=子项目
toolwindow.nodes.subprojects.node.update.node.text=更新子项目
toolwindow.nodes.subprojects.node.update.progress.title=更新子项目…
toolwindow.nodes.subprojects.node.update.task.name=更新子项目
toolwindow.nodes.test.node.test.progress.title=运行测试…
toolwindow.nodes.test.node.test.task.name=运行测试
toolwindow.nodes.test.node.text=test
