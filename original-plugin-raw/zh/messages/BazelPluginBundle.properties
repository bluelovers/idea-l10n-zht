action.Bazel.AddToProjectViewDirectoriesAction.description=将此目录添加到项目视图文件。
action.Bazel.AddToProjectViewDirectoriesAction.text=添加到项目视图目录
action.Bazel.ExcludeFromProjectViewDirectoriesAction.description=从项目视图文件中排除该目录。
action.Bazel.ExcludeFromProjectViewDirectoriesAction.text=从项目视图目录中排除
action.Bazel.NewBazelPackageAction.text=新建 Bazel 软件包
action.link.bazel.project.from.linked.project=链接 Bazel 项目
action.load.project.view.file=加载项目视图
action.new.bazel.package.description=创建新的 {0} 软件包
action.new.bazel.package.text={0} 软件包
action.run.all.tests=运行所有测试
action.run.all.tests.under=运行 {0} 下的所有测试
action.run.all.tests.under.with.coverage=使用覆盖率运行 {0} 下的所有测试
action.run.all.tests.with.coverage=使用覆盖率运行所有测试
advanced.settings.display.name=高级设置
annotation.bazelrc.deprecated.flag=标志\: {0} 已弃用
annotation.bazelrc.flag.not.applicable=标志\: {0} 不适用于命令 {1}
annotation.bazelrc.idle.flag=标记\: {0} 不执行任何操作
annotation.bazelrc.undocumented.flag=未记录的标志\: {0}
annotation.bazelrc.unknown.flag=未知标志\: {0}
application.settings.display.name=高级设置
application.settings.plugin.enable.phased.sync.checkbox.text=启用分阶段同步
application.settings.plugin.enable.phased.sync.help.text=分阶段同步分多个步骤运行，使得代码在有限的依赖项解析下可以更快可用。
application.settings.plugin.experimental.settings=实验性设置
application.settings.update.channel.dropdown.help.description=您可以从 Nightly 切换到 EAP/Release 通道，将 Bazel 插件降级为稳定版本。
application.settings.update.channel.dropdown.title=更新通道\:
application.settings.updates.title=更新设置
background.progress.building.targets=正在构建 个目标…
background.progress.syncing.project=正在同步项目...
background.task.description.preparing.for.debugging.kotlin=正在准备在目标 {0} 中调试 Kotlin 协程
balloon.add.target.dependency.to.build.file.failed.message=请手动将目标依赖项添加到相应的 BUILD 文件中
balloon.add.target.dependency.to.build.file.failed.title=无法自动添加目标依赖项
bazel.bin.not.found=找不到 bazel-bin (重新同步项目可修复)
bazel.dummy.module.type.name=Bazel 合成模块
bazel.language.codestyle.display.name=Bazel 项目视图
bazel.language.description=BazelVersion 语言
bazel.language.project.parser.error=应为 {0}
bazel.language.projectview.description=Bazel 项目的 ProjectView 文件
bazel.toolwindow.tab.query=Bazel 查询
bazel.toolwindow.tab.query.placeholder.query=输入查询表达式，例如 'deps(//my\:target)'
bazel.toolwindow.tab.targets=已加载的目标
bazelquery.error.empty.quotation=空引号
bazelquery.error.incorrect.word=单词不正确
bazelquery.error.missing.comma=应为 <comma>
bazelquery.error.missing.expression=应为 <表达式>
bazelquery.error.missing.expression.got.integer=应为 <expression>，实际为 <integer>
bazelquery.error.missing.flag=预期标志值
bazelquery.error.missing.integer=应为 <integer>
bazelquery.error.missing.quote=应为 <quote>
bazelquery.error.missing.right.parenthesis=应为 <right parenthesis>
bazelquery.error.missing.space=应为 <space>
bazelquery.error.missing.target=应为目标模式作为集合表达式的实参
bazelquery.error.missing.variable.value=let 表达式中变量的预期值
bazelquery.error.missing.word=应为 <word>
bazelquery.error.unexpected.token=意外的标记
bazelquery.error.unexpected.token.infix.operator=意外的标记\: 表达式开头出现中缀运算符
bazelquery.error.unexpected.token.integer=意外的标记\: <integer>
bazelquery.error.unexpected.token.paren=意外的标记\: 圆括号不匹配
bazelquery.error.unfinished.flag=未完成的标志
bazelquery.flags.language.description=BazelQuery 标志语言
bazelquery.language.description=BazelQuery 语言
bazelquery.query.completion.description=查询表达式
bazelquery.query.description=执行依赖图查询。
bazelquery.query.option.description=选项
bazelrc.language.description=Bazelrc 语言
bazelrc.language.parser.missing.import.path=应为导入路径
bsp.run.error.cannotRun=无法运行此目标
build.and.resync.action.text=构建并重新同步项目
buildifier.configurable.display.name=Buildifier 设置
buildifier.executable.auto.detected.path=自动检测\: {0}
buildifier.executable.label=Buildifier 可执行文件\:
buildifier.executable.not.found=无法在 {0, choice, 0\#%PATH%|1\#$PATH} 中自动检测到 buildifier 可执行文件
buildifier.formatted.ignored=文档格式设置已被忽略
buildifier.formatting.service.name=Starlark 文件
buildifier.run.error.message=无法运行 buildifier
buildifier.select.path.to.executable=选择可执行文件路径
button.bazel.query.cancel=取消
button.bazel.query.evaluate=求值
button.bazel.query.select=选择
cancel.action.text=停止
configurable.display.name.bazel.experimental.project.settings=实验性设置
console.task.apk.install.apk.not.found=构建后未找到 APK {0}
console.task.apk.install.could.not.get.apk=无法获取目标的 APK 路径。请尝试重新同步项目。
console.task.apk.install.could.not.get.application.id=无法获取 applicationId
console.task.apply.changes=将更改应用于项目模型
console.task.apply.changes.on.target.utils.message=将更改应用于内部目标模型
console.task.base.sync=收集项目目标
console.task.build.in.progress.many=正在构建 {0} 个目标…
console.task.build.in.progress.one=正在构建 {0}...
console.task.build.no.targets=没有可构建的目标。跳过。
console.task.build.title=构建
console.task.copy.plugin.to.sandbox=将插件复制到沙盒
console.task.exception.cancellation=已取消
console.task.exception.cancellation.message=任务已取消
console.task.exception.copy.plugin.to.sandbox=无法将插件复制到沙盒。
console.task.exception.no.intellij.platform.plugin.sdk=找不到 IntelliJ 平台插件 SDK。
console.task.exception.no.plugin.jars=未找到插件 jar。请尝试重新同步项目。
console.task.exception.other=已失败
console.task.exception.plugin.jar.could.not.copy=无法将插件 jar {0} 复制到沙盒 {1}\: {2}。
console.task.exception.plugin.jar.not.found=未找到插件 jar {0}。
console.task.exception.timed.out=超时
console.task.exception.timeout.message=任务超时。请查看任务输出了解更多信息，或在注册表中增加超时时间 ("bsp.request.timeout.seconds")
console.task.execute.post.sync.hooks=执行同步后挂钩
console.task.execute.pre.sync.hooks=执行预同步挂钩
console.task.execute.sync.hooks=执行同步挂钩
console.task.mobile.cannot.run.on.multiple.devices=无法在多台设备上运行。
console.task.mobile.install.in.progress=正在运行 mobile-install…
console.task.mobile.install.in.progress.target={0} 的 mobile-install…
console.task.mobile.install.title=mobile-install
console.task.mobile.install.waiting.for.target.device=正在等待目标设备上线…
console.task.mobile.no.target.device=找不到目标设备。
console.task.model.add.android.fetched.sdks=添加提取的 Android SDK
console.task.model.add.fetched.jdks=添加提取的 JDK
console.task.model.add.go.support.in.targets=在目标中添加 Go 支持
console.task.model.add.scala.fetched.sdks=添加提取的 Scala SDK
console.task.model.apply.changes=将更改应用到工作区模型
console.task.model.apply.changes.attempt.0.1.failed=无法将更改应用到工作区模型(尝试 {0}/{1})
console.task.model.apply.changes.attempt.0.1.wsm=[Bazel] 将更改应用到工作区模型(尝试 {0}/{1})
console.task.model.apply.changes.attempt.0.fallback=在 {0} 次尝试中，未能快速应用到工作区模型，回退到在 WriteAction 中执行较慢的应用方式
console.task.model.apply.changes.wsm=[Bazel] 将更改应用到工作区模型
console.task.model.calculate.add.go.fetched.sdk=计算并添加提取的 Go SDK
console.task.model.calculate.jdks.infos=计算所有唯一的 jdk 信息
console.task.model.calculate.python.sdks=计算所有 python sdk 信息
console.task.model.calculate.python.source.deps=计算 python 依赖项
console.task.model.calculate.scala.sdk.infos=计算所有 scala sdk 信息
console.task.model.calculate.structure=计算项目结构
console.task.model.collect=收集模型
console.task.query.jvm.environment.cancel=查询 JVM 环境已取消
console.task.query.jvm.environment.failed=查询 JVM 环境失败
console.task.query.jvm.environment.in.progress=正在查询 JVM 环境
console.task.query.jvm.environment.success=查询 JVM 环境完成
console.task.query.jvm.environment.title=查询 JVM 环境
console.task.run.cancelled=运行已被取消.
console.task.status.cancelled=已取消.
console.task.status.error=以错误结束。
console.task.status.ok=成功完成。
console.task.status.other=已完成.
console.task.sync.activity.name={0} 同步
console.task.sync.cancelled=同步已取消。
console.task.sync.failed=同步失败。
console.task.sync.fatalfailure=同步失败。未成功导入任何目标。
console.task.sync.import.fail=找不到文件\: {1} 中引用的 {0} 不存在。请使用 try_import 选择性地导入文件
console.task.sync.in.progress=正在同步…
console.task.sync.partialsuccess=同步部分成功，但存在错误
console.task.sync.success=同步完成。
console.task.sync.title=同步
console.tasks.test.framework.name=Bazel
console.tasks.title={0}\: {1}
coverage.bazel.presentable.text=Bazel 覆盖率
debug.editor.label=调试端口
editor.action.copy.target.id=复制目标标签
error.message.failed.to.resolve.sources.0=无法解析目标的源文件\: {0}\n请验证它们是否已正确生成
file.change.processing.step.commit=正在提交文件更改
file.change.processing.step.query=正在查询 Bazel
file.change.processing.title.change=正在处理文件更改\: {0}
file.change.processing.title.create=正在处理文件创建\: {0}
file.change.processing.title.delete=正在处理文件移除
file.chooser.bazel.query.select.directory.description=选择项目内的目录。
file.chooser.bazel.query.select.directory.title=选择目录
findusages.starlark.code.usages=代码中的用法
findusages.starlark.load.usages=加载语句中的用法
go.before.run.error.args.parsing.failure=无法解析 script_path 中的实参\: {0}
go.before.run.error.invalid.script.path=无法读取 script_path\: {0}
go.before.run.error.parsing.script.failure=无法解析 script_path 中的实参\: {0}
go.debug.background.progress.start.title=正在准备调试 Go 目标 {0}
go.debug.progress.manager.preparing.process.title=正在准备 Go 应用程序运行状态
go.runner.wrong.configuration=无法从运行配置中获取 BSP 目标
go.test.handler.error.target.missing.from.config=无法从运行配置中获取目标
hotswap.error.parsing.jars=解析运行时 jar 时出错
hotswap.error.reading.jars=读取运行时 jar 时出错
hotswap.missing.file.inside.jar=在 jar {1} 中找不到类文件 {0}。
inspection.configurator.bazel.commandline.description=Bsp 命令行检查
inspection.description.bazel.version="Bazel 有可用的新版本\: {0}"
inspection.display.name.bazel.version.check=Bazel 版本检查
jvm.runner.header=运行配置
jvm.runner.test.header=测试配置
label.bazel.query.select.directory=所选目录\: 
notification.bazel.query.graph.visualization.failed=无法生成图表可视化
notification.bazel.query.graphviz.missing.nonunix=可能缺少 graphviz。您可以从 https\://graphviz.org/download/.notification.bazel.query.graph.visualization.failed\=Failed to generate graph visualization 下载
notification.bazel.query.graphviz.missing.unix=可能缺少 graphviz。您可以使用 `apt install graphviz` 或 `brew install graphviz` 安装 graphviz
notification.bazel.query.selected.dir.outside.project=所选目录位于当前项目之外
notification.unresolved.imports=检测到未解析的 import
notificationGroup.Bazel.title=Bazel
notificationGroup.BazelPlugin.title=Bazel 插件
notificationGroup.BazelSlowPlugins.title=Bazel 慢速插件警告
path.validation.cannot.execute=无法执行 {0}
path.validation.ends.with.whitespace=路径不得以空格结尾
path.validation.field.empty=路径字段为空
path.validation.file.not.found=找不到文件 {0}
path.validation.inaccessible=路径无法访问
path.validation.invalid=路径无效\: {0}
path.validation.must.be.absolute=路径必须是绝对路径
plugin.runner.idea.product.null=IDEA 产品信息为 null
post.startup.activity.id.enable.k2.compiler=使用 Bazel 启用 K2 编译器模式
progress.bar.calculate.android.sdk.infos=正在计算所有唯一的 Android SDK 信息
progress.bar.calculate.go.sdk.infos=正在计算所有唯一的 Go SDK 信息
progress.bar.calculate.jdk.infos=正在计算所有唯一的 JDK 信息
progress.bar.calculate.python.sdk.infos=正在计算所有唯一的 Python SDK 信息
progress.bar.calculate.python.source.deps=正在计算 Python 依赖项
progress.bar.collect.project.details=正在收集项目详细信息
progress.bar.update.internal.model=正在更新内部模型
progress.reporter.calculating.scala.sdk.info=正在计算所有唯一的 scala sdk 信息
project.base.path.not.found=无法找到项目的基路径
project.configurable.display.name.bazel=Bazel
project.settings.buildifier.label=Buildifier 可执行文件路径\:
project.settings.display.name=Bazel
project.settings.experimental.settings=实验性设置
project.settings.general.settings=常规设置
project.settings.local.runner.settings=本地 JVM 运行器设置
project.settings.plugin.enable.build.with.jps.checkbox.text=启用使用 IntelliJ IDEA 编译 JVM 目标
project.settings.plugin.enable.kotlin.coroutine.debug.checkbox.text=启用 Kotlin 协程调试
project.settings.plugin.enable.local.jvm.actions.checkbox.text=启用使用本地 JVM 运行器运行 Bazel 目标的选项
project.settings.plugin.enable.query.tab.checkbox.text=启用“Bazel 查询”标签页(需要重新启动)
project.settings.plugin.enable.query.tab.help.text=在 Bazel 工具窗口添加“Bazel 查询”标签页，以便直接访问 IDE 中的 Bazel 查询功能。(重置窗口面板前应用设置)
project.settings.plugin.hotswap.enabled.checkbox.help.text=如果启用，热交换将通过“作为 Java 应用程序”的相关操作，对 Java/Kotlin 可用。
project.settings.plugin.hotswap.enabled.checkbox.text=为 Java/Kotlin 启用热交换
project.settings.plugin.run.buildifier.on.save.checkbox.text=在文件保存时运行 buildifier
project.settings.plugin.show.excluded.directories.as.separate.node.checkbox.text=将排除的目录显示为项目树中的单独节点
project.settings.plugin.title=插件设置
project.settings.plugin.use.intellij.test.runner.checkbox.text=使用 IntelliJ 测试运行程序
project.settings.plugin.use.intellij.test.runner.help.text=如果启用，将使用 IntelliJ Junit 测试运行程序。仅当操作通过文件装订区域执行时才有效，并会禁用目标树形微件的本地 JVM 测试。需要 Junit 插件。
project.settings.project.view.label=项目视图路径\:
project.view.tree.project.view.file.hint=已选择
python.debug.error.no.id=无法获取构建目标 ID
python.debug.error.no.script=无法解析目标 {0} 的 Python 脚本名称
python.debug.error.no.sdk=无法解析目标 {0} 的 Python SDK
python.debug.error.wrong.state=PythonBspDebugRunner 与不受支持的状态类型一起使用
quickfix.bazel.version=更新版本
quickfix.bazelrc.delete.noop.flag.declaration=删除 NO_OP 标志声明
quickfix.bazelrc.delete.noop.flag.presentation=删除 NO_OP 标志使用
quickfix.bazelrc.rename.flag.description=将旧标志名称替换为新标志名称。
quickfix.bazelrc.rename.flag.presentation=替换为 {0} 变体
rebuild.action.text=重建之前的目标
resync.action.text=重新同步项目
runconfig.bazel.params=Bazel 形参
runconfig.run.description=使用 {0} 运行目标
settings.editor.label.test.filter=测试筛选器
sources.attach.action.text=从 Bazel 附加源
sources.files.not.resolved=Bazel 源不可用
sources.pending.text=正在附加源…
starlark.debug.action.name=Starlark 调试
starlark.debug.breakpoint.type.title=Starlark 行断点
starlark.debug.config.target.label=目标
starlark.debug.config.template=Starlark 调试 {0}
starlark.debug.config.type.description=远程 Starlark 调试
starlark.debug.config.type.name=远程 Starlark 调试
starlark.debug.connecting.progress.name=正在连接到调试器
starlark.debug.exception.cancellation=调试会话已取消
starlark.debug.exception.connect=无法连接到调试服务器(可能需要手动重启 Bazel)
starlark.debug.not.top.frame=表达式求值只能在顶层堆栈帧上使用
starlark.debug.task.title=正在调试 Starlark 分析
starlark.debug.value.obtain.failed=未能获得结果
starlark.language.description=Starlark 语言
state.android.use.mobile.install.name=使用 mobile-install
state.bazel.intellij.sdk=IntelliJ SDK
state.generic.run.configuration.header=运行配置
state.generic.test.configuration.header=测试配置
target.debug.run.action.text=调试运行 {0}
target.debug.test.action.text=调试测试 {0}
target.debug.with.jvm.runner.action.text=将 {0} 作为 Java 应用程序进行调试
target.debug.with.jvm.runner.config.name=将 {0} 作为 Java 应用程序进行调试
target.partial.sync.action.text=重新同步目标
target.run.action.text=运行 {0}
target.run.config.name=运行 {0}
target.run.with.coverage.action.text=使用覆盖率运行 {0}
target.run.with.jvm.runner.action.text=将 {0} 作为 Java 应用程序运行
target.run.with.jvm.runner.config.name=将 {0} 作为 Java 应用程序运行
target.test.action.text=测试 {0}
target.test.with.jvm.runner.action.text=将 {0} 作为 Java 应用程序进行测试
target.test.with.jvm.runner.config.name=将 {0} 作为 Java 应用程序进行测试
text.bazel.ignored.group.description=Bazel 会忽略文件提供程序
text.field.project.settings.select.path.description=选择项目视图文件的路径。
text.field.project.settings.select.path.title=选择路径
tool.window.generic.config.file=项目视图文件
widget.build.target.popup.message=构建目标
widget.collect.targets.overlapping.sources.message=目标 {0} 和 {1} 共享 {2}。请在所选项目视图文件中排除其中一个目标，以避免错误的高亮显示
widget.collect.targets.overlapping.sources.title=检测到共享源
widget.config.file.popup.message=在编辑器中打开 {0}
widget.copy.target.id=复制目标标签
widget.factory.display.name=文件目标
widget.fastbuild.completed.description=热交换已完成且无错误
widget.fastbuild.completed.title=热交换成功
widget.fastbuild.error.missing.path=缺少 bazelBinPath。请尝试重新同步项目。
widget.fastbuild.error.no.targets=无法确定文件的构建目标。请尝试重新同步项目。
widget.fastbuild.error.null.bazel.exec.path=bazelExecPath 为 null。请尝试重新同步项目。
widget.fastbuild.error.null.jvm.toolchain=jvmToolchainInfo 为 null。请尝试重新同步项目。
widget.fastbuild.error.params.not.found=未找到用于快速编译的形参文件。正在回退到 Bazel 构建。
widget.fastbuild.error.recompile=重新编译
widget.fastbuild.error.title=热交换失败
widget.fastbuild.error.wrong.canonical.path=热交换失败，出现错误\: {0} 不在工作区根 {1} 下。
widget.fastbuild.hotswaping=正在热交换
widget.fastbuild.recompile=重新编译
widget.filter.action.group=筛选目标
widget.filter.can.run=显示可运行目标
widget.filter.can.test=显示可测试目标
widget.filter.turn.off=显示所有目标
widget.new.bazel.package.popup.title=新建 Bazel 软件包
widget.no.renderable.component="[不可呈现]"
widget.no.targets.message=没有可显示的目标
widget.open.build.file=跳转到 BUILD 文件
widget.project.tree.excluded.directories=排除的目录
widget.settings.popup.message=打开 {0} 设置
widget.side.menu.error.title=错误
widget.suggest.enable.k2.action=启用
widget.suggest.enable.k2.message=Kotlin K2 编译器模式会通过 Bazel 提供更好的 IDE 性能
widget.suggest.enable.k2.title=启用 K2 编译器模式
widget.target.choose=选择目标
widget.target.search.clear=清除搜索查询
widget.target.search.display.as.tree=以树状结构显示搜索结果
widget.target.search.hint=搜索目标 ({0})
widget.target.search.match.case=区分大小写({0})
widget.target.search.no.results=未找到匹配的目标
widget.target.search.regex=使用正则表达式搜索({0})
widget.title=文件的可用目标
widget.tooltip.text.active=检查文件的可用目标
widget.tooltip.text.inactive=打开文件以查看可用目标
