change.signature.dialog.title=更改签名
click.to.open=点击以打开 {0}
clion.assembly.compile.arguments=在程序集标签页的顶部，您可以找到编译器实参字段。添加 {0} 标志并点击 {1} 可刷新程序集视图
clion.assembly.help.link=程序集视图
clion.assembly.invoke=当您调用 {0} 时，<ide/> 会使用所选配置中的编译器设置将代码编译为程序集。
clion.assembly.invoke.context.menu=在 <ide/> 中，您可以探索底层程序集代码，而无需启动调试会话。在当前文件内点击右键，然后从上下文菜单中选择“{0}”。
clion.assembly.lesson.name=文件的程序集视图
clion.assembly.note=对于 ARM 基础架构和 MSVC 工具链，禁用“使用 Intel 语法”选项。
clion.assembly.options=使用“选项”菜单切换到 x86 程序集(Intel)语法和/或查看带有符号名称但没有任何特定语法的原始输出
clion.assembly.preview=在预览中，您可以看到哪个源代码生成哪个程序集
clion.basic.editing.module.description=可以帮助您编辑代码的操作
clion.basic.editing.module.name=代码编辑
clion.change.signature.click.refactor=点击“{0}”按钮以执行重构。
clion.change.signature.conclusion=请注意，<ide/> 已相应调整所有调用点，现在将字符串字面量 {0} 作为第二个形参传递给 {1}。
clion.change.signature.extract.parameter=现在，按 {0} 以使用形参重构。
clion.change.signature.help.link=“更改签名”重构
clion.change.signature.lesson.intro=“更改签名”重构结合了可应用于函数签名的多项不同修改。您可以使用此重构更改函数名称和返回值类型，以及添加、移除形参，对形参重新排序。\n更改函数签名时，CLion 会搜索该函数的所有用法，并更新函数的可以安全修改以反映更改的所有调用、实现和重写替换。
clion.change.signature.lesson.name=更改签名
clion.change.signature.move.parameter.down=点击向下按钮或按 {2}，将 {0} 形参移至 {1} 形参下方。
clion.change.signature.next.button=下一步
clion.change.signature.open.dialog=在此示例中，{0} 函数期望目标作为其第一个形参，源作为其第二个形参，一些用户可能会觉得这不直观。我们来将它们翻转过来。
clion.change.signature.open.dialog.press=按 {0} 打开“更改签名”对话框。
clion.change.signature.refactor.button=重构
clion.change.signature.select.parameter.1=虽然“更改签名”可用于在一个对话框中执行许多不同的更改，但修改函数签名的一些特定重构也有其自己的专用操作。
clion.change.signature.select.parameter.2=<strong>形参</strong>重构可用于将局部变量或表达式转换为函数形参。在此示例中，函数 {0} 打印以逗号分隔的范围的元素。我们来将分隔符字符串转换成新形参。
clion.change.signature.select.parameter.3=按 {0} 选择分隔符字符串。
clion.change.signature.type.new.parameter.name=<ide/> 现在已将字符串字面量转换为新的函数形参。我们只需要给它一个有意义的名称。输入 {0}。
clion.change.signature.type.new.parameter.refactor=按 {0} 执行重构。
clion.clang.format.close.popup=要关闭“快速文档”弹出窗口，请按 {0}。
clion.clang.format.configure=为项目启用 ClangFormat
clion.clang.format.create.yaml=点击 {0} 按钮以创建 YAML 配置文件。
clion.clang.format.dialog=如果项目根下没有 .clang-format 文件，<ide/> 会根据当前 IDE 代码样式设置建议创建该文件。如果您拒绝，则 ClangFormat 将启用默认的 LLVM 样式。
clion.clang.format.go.back.to.source=太棒了\! 现在让我们回到 code_formatting.cpp，用 ClangFormat 重新设置代码格式
clion.clang.format.lesson.name=使用 ClangFormat 设置代码格式
clion.clang.format.replace.completion=按 {0} 将 LLVM 替换为 Google 代码样式
clion.clang.format.widget=<ide/> 将通知您当前文件正在使用 ClangFormat 设置
clion.clang.format.workflow.explanation=在 <ide/> 中，您可以使用 ClangFormat 作为内置代码格式化程序的替代。
clion.clang.format.yaml.code.assistant=为了帮助您编辑 .clang 格式的配置，<ide/> 提供了编码辅助。
clion.clang.format.yaml.completion=按 {0} 获取当前键的可用值
clion.clang.format.yaml.quick.documentation=按 {0} 查看 {1} 文档
clion.clang.format.yes=是
clion.code.assistance.module.description=了解如何使用本地历史记录和程序集视图、获取形参信息以及预览快速弹出窗口。
clion.code.assistance.module.name=代码辅助
clion.code.formatting.apply.settings=点击 {0} 按钮以应用新的代码样式设置。
clion.code.formatting.clear.selection=要清理选区，按 {0}。
clion.code.formatting.configure.indent=为 C/C++ 配置缩进
clion.code.formatting.configure.indent.item=从列表中选择 {0}。
clion.code.formatting.help.link=代码格式设置
clion.code.formatting.indent.widget.name=代码样式状态微件
clion.code.formatting.invoke.again=您还可以使用 {0} 或按两次 {1} 来更改 IDE 和项目设置。按下其中一个快捷键。
clion.code.formatting.lesson.name=使用内置格式化程序设置代码格式
clion.code.formatting.open.code.style.widget=点击高亮显示的区域以{0}。
clion.code.formatting.reformat.selection=<ide/> 可以帮助您进行代码格式化。点击 {0} 重新设置所选代码块的格式。
clion.code.formatting.show.whitespaces=显示空格
clion.code.formatting.show.whitespaces.request=键入 {0} 以查看 {1} 选择器。
clion.code.formatting.use.tab.character=使用制表符
clion.code.formatting.use.tab.character.option=启用 {0} 选项，将缩进字符从空格切换到制表符
clion.code.formatting.use.tab.indent.style=选择 {0} 可将缩进从 {1} 个字符切换为 {2} 个字符
clion.code.formatting.whitespaces.toggle=打开空格
clion.code.formatting.whole.file=要重新设置整个源文件的格式，请在未选择任何行的情况下使用 {0}。
clion.code.formatting.whole.file.again=再次重新格式化整个源文件以应用新的代码样式设置，使用 {0}。
clion.code.formatting.workflow.explanation=太棒了\! 现在我们来研究一下如何在 <ide/> 中更改代码样式设置
clion.collapse.all.collapse=如果要收起文件中的所有区域，请按 {0}。
clion.collapse.all.expand=同样，按 {0} 可展开所有可用区域。
clion.collapse.help.link=展开或收起代码元素
clion.collapse.hit.expand=要展开代码区域，请按 {0}。
clion.collapse.lesson.name=收起
clion.collapse.region.collapse=您可以收起任何所选代码段并为其创建自定义折叠区域以使其“可折叠”。尝试选择第 6-8 行中的三个成员变量，并使用“{0}”折叠选区。
clion.collapse.try.collapse=有时您需要收起一段代码以提高可读性。请尝试使用 {0} 收起代码段。
clion.comments.comment.block=您可以注释掉代码块。例如，我们来注释掉所选块，请按 {0}。
clion.comments.comment.one.line=使用 {0} 注释掉任意行。
clion.comments.help.link=高级编辑
clion.comments.lesson.name=添加和移除注释
clion.comments.uncomment.line=使用相同快捷键 {0} 对已注释的行取消注释。
clion.completion.complete.statement=按 {0} 可补全此语句。
clion.completion.module.description=让 IDE 补全您的代码。请尝试基本、智能和其他类型的补全。
clion.completion.module.name=代码补全
clion.debug.lesson.name=调试工作流
clion.debug.workflow.evaluate.expression=要检查 final 表达式，您可以对其求值。我们复制 {0} 并将其粘贴到“调试”窗口内高亮显示的字段中。
clion.debug.workflow.exception.description=程序抛出异常，您可以在“运行”窗口中进行查看。
clion.debug.workflow.fix.error=糟糕，字符串替换中有一个错误\! 现在，我们来修正此错误。从 {1} 中移除第一个实参 {0}。
clion.debug.workflow.lesson.name=调试工作流
clion.debug.workflow.rerun.debug=我们按 {0} 或点击工具栏上的“{1}”来完成调试。
clion.debug.workflow.step.into=要找出导致异常的原因，我们步入当前调用。在“调试”窗口中按 {0} 或点击“{1}”。
clion.essential.module.description=了解 {0} 最基本的功能
clion.essential.module.name=基础
clion.extract.and.inline.lesson.name=提取并内联
clion.extract.constant=按 {0} 将此处用于计算圆面积的 pi 字面量值提取到常量中。
clion.extract.constant.help.link=提取常量
clion.extract.constant.intro=<ide/> 为您的 C++ 代码提供了许多有用的就地重构。例如，<strong>提取常量</strong>重构可以帮助您消除硬编码常量，使代码更易于阅读和维护。
clion.extract.constant.replace.occurrences=由于相同的数字字面量多次出现，<ide/> 为您提供了替换所有匹配项或仅替换此匹配项的选项。选择“{0}”。
clion.extract.constant.replace.occurrences.item=替换全部 2 个匹配项
clion.extract.extend.selection=按三次 {1} 选择表达式 {0}。
clion.extract.function=现在，按 {0} 将所选代码提取到函数中。
clion.extract.function.button.name=提取
clion.extract.function.click.extract=现在，点击<strong>提取</strong>以执行重构。
clion.extract.function.click.inline=点击<strong>内联</strong>按钮进行确认。
clion.extract.function.conclusion=您还可以使用内联重构来内联常量和预处理器宏。
clion.extract.function.dialog=“提取函数”对话框可用于指定新函数的声明位置、返回值类型和名称。
clion.extract.function.inline.button.name=内联
clion.extract.function.intro=代码现在好多了，但我们可以应用更多重构。<ide/> 允许您使用<strong>提取函数</strong>将任何表达式或代码段提取到单独的函数中。对于下一行中的表达式，我们将其提取到一个单独的函数而不是局部变量中。
clion.extract.function.new.function.name=将名称设置为 {0}。
clion.extract.inline=点击“{0}”，然后按 {1}。
clion.extract.inline.done=<ide/> 现在再次内联了 {0}，撤消了我们之前进行的“提取函数”重构。
clion.extract.inline.intro=<ide/> 现在已将周长的计算重构为新函数。不过，有时您想进行相反的操作\: 去除函数并在调用点内联其主体。为了实现这一点，<ide/> 具有<strong>内联</strong>重构，这与“提取函数”重构相反。
clion.extract.lesson.name=提取变量
clion.extract.new.constant.name=输入 {0} 作为新常量的名称，然后按 {1}。
clion.extract.new.constant.type=指定新的变量类型或保留建议的类型。按 {0} 继续重构。
clion.extract.new.variable.name=输入 {0} 作为新局部变量的名称，然后按 {1}。
clion.extract.variable=按 {0} 将表达式提取到变量中。
clion.extract.variable.declare.const=声明 const
clion.extract.variable.expression=然后，选择“{0}”
clion.extract.variable.expression.option=现在，您有一些其他选项来声明新的局部变量。选择“声明 const”。
clion.extract.variable.help.link=提取/引入变量
clion.extract.variable.intro=现在，硬编码值消失，但表达式仍然很长。我们来通过<strong>提取变量</strong>重构将圆的面积提取到局部变量中。
clion.inline.help.link=内联
clion.intn.name.replace.if=将 'if else' 替换为 '?\:'
clion.multiple.selections.deselect.symbol=按 {0} 可取消选择上一个匹配项。
clion.multiple.selections.escape=按 {0} 可重置多个选区并返回单文本光标模式。
clion.multiple.selections.help.multiple.carets=多个文本光标和选择范围
clion.multiple.selections.lesson.name=多个选区
clion.multiple.selections.replace=输入 {0}，将 {1} 的所有匹配项替换为 {0}。
clion.multiple.selections.select.all=按 {0} 可选择文件中的所有匹配项。
clion.multiple.selections.select.next.symbol=再次按 {0} 可选择此符号的下一个匹配项。
clion.multiple.selections.select.symbol=按 {0} 可选择文本光标处的符号。
clion.navigation.module.description=跳转到源，导航到声明、实现和文件结构。
clion.navigation.module.name=导航
clion.onboarding.apply.action=选择“{0}”操作，然后按 {1}。
clion.onboarding.apply.intention=选择使形参成为常量引用的操作，然后按 {0}。
clion.onboarding.balloon.about.debug.panel=“{0}”工具窗口为工具栏提供了各种调试操作。您可以稍后在“{1}”课次中进行尝试。
clion.onboarding.balloon.click.here=点击此处设置断点
clion.onboarding.balloon.open.file=双击以打开 {0}
clion.onboarding.balloon.open.learn.toolbar=切换到“{0}”工具窗口继续学习本课次
clion.onboarding.balloon.project.directory=双击项目目录可以将其展开并查看项目文件
clion.onboarding.balloon.project.view=点击以打开<strong>项目</strong>视图
clion.onboarding.balloon.start.debugging=点击图标开始调试或按 {0}。
clion.onboarding.balloon.stop.debugging=点击该图标以停止调试
clion.onboarding.case.changed=大小写已更改。
clion.onboarding.change.ui.settings=在本课次中，<ide/> 会将某些 UI 设置更改为默认状态。完成或退出课次后，将还原您的偏好设置。
clion.onboarding.epilogue=恭喜\! 您已完成入门导览。此时，您可以\:\n  - <callback id\="{0}">关闭</callback>学习项目{1}\n  - <callback id\="{2}">显示</callback>更多课次
clion.onboarding.feedback.system.found.toolchain=找到的工具链\:
clion.onboarding.feedback.system.no.toolchain=无
clion.onboarding.feedback.system.used.toolchain=使用的工具链\:
clion.onboarding.indexing.description=第一次打开项目时，<ide/> 会扫描标准模板库和项目本身，以收集编码辅助所需的详细信息。要继续，请等待索引编制完成。
clion.onboarding.invoke.completion=现在，我们输入一个 {0} 来显示所有可用的补全选项。
clion.onboarding.invoke.completion.tip=<strong>提示</strong>\: 您可以按 {0} 在代码的任何位置显示补全条目。
clion.onboarding.invoke.intention.for.code=意图可以节省您的时间，让编码变得更容易，让您的代码更安全、更高效。在这里，{0} 按值传入 {1}，这意味着每次调用 {1} 时都会复制它。这样效率很低。让我们用一个意图来消除不必要的复制。按 {2}。
clion.onboarding.invoke.intention.for.warning.1=您刚刚修正了一个 bug，但还可以进一步改进这段代码。<ide/> 会高亮显示可以改进的代码行，并为这些行添加黄色灯泡。
clion.onboarding.invoke.intention.for.warning.2=按 {0} 预览警告并应用快速修复。
clion.onboarding.invoke.search.everywhere.1=在 <ide/> 中工作时，您可能需要搜索项目中的文件、符号、类，乃至 IDE 操作。在本课次中，我们将搜索“{0}”操作，以将 {1} 字符串改为小写。
clion.onboarding.invoke.search.everywhere.2=按两次 {0} 以打开“{1}”对话框。
clion.onboarding.lesson.name=熟悉 {0}
clion.onboarding.module.description={0} 中的主要功能概览
clion.onboarding.module.name=入门导览
clion.onboarding.no.toolchain=为了编译并运行代码，您首先需要<callback id\="{0}">配置</callback> C/C++ 编译器。
clion.onboarding.project.view.description=<strong>项目</strong>视图是主要工具窗口之一。它包含项目目录、外部库和临时文件。点击带条纹的按钮可以预览演示项目内容。您也可以按 {0} 打开。
clion.onboarding.return.to.welcome=并返回欢迎屏幕
clion.onboarding.run.options=您已经打开了演示项目。现在，我们来运行它吧\! 在工具栏的高亮显示区域中，您可以看到所选配置的常用运行操作。例如，您可以构建代码 {0}、运行代码 {1}、调试代码 {2}、使用覆盖率运行 {3}、分析代码 {4}，以及使用 Memcheck 运行 {5}。
clion.onboarding.run.sample=现在，我们来运行当前文件，点击“{0}”或按 {1}。
clion.onboarding.run.sample.balloon=我们来运行当前文件，点击“{0}”或按 {1}。
clion.onboarding.search.everywhere.description=您可以看到，所选文本 {0} 已被自动复制到输入字符串中。我们不输入 {0}，而是输入 {1}。
clion.onboarding.select.fix=应用第一个条目\: {0}。执行此修正后，代码会看起来很整洁。
clion.onboarding.select.item=<ide/> 会在您输入时自动显示补全选项。使用键盘上的箭头选择“{0}”条目，然后按 {1}。
clion.onboarding.start.debugging=点击“{0}”图标启动调试过程。
clion.onboarding.start.typing=现在，开始输入 {0} 以缩减补全列表，或选择此条目并按 {1}。
clion.onboarding.stop.debugging=我们来停止调试。点击“{0}”图标。
clion.onboarding.toggle.breakpoint.1=您可能会注意到 {1} 函数没有返回预期值 {0}，而是返回 {2}。我们在 return 语句处停止，调试有问题的代码。
clion.onboarding.toggle.breakpoint.2=点击高亮显示区域内的装订区域以设置断点。
clion.onboarding.toggle.case.part=大小写
clion.onboarding.toolchain.description=<ide/> 已经为此课程配置默认的 C/C++ 工具链。您可以对其进行修改或为您的项目重新创建一个。为此，请转到“偏好设置 -> 构建、执行、部署 -> 工具链”。
clion.onboarding.toolchain.tip=<strong>提示</strong>\: 您可以在 <ide/> 偏好设置中的“构建、执行、部署 -> 工具链”下配置 C/C++ 工具链。
clion.onboarding.type.division=发现代码中的问题后，我们来进行修正。将得到的和除以值的长度。课次脚本已插入 {0}。
clion.postfix.completion.complete=从列表中选择 {0}，然后按 {1} 补全语句。
clion.postfix.completion.type=对于 C++，后缀补全对于使用 C++ 样式的转换、`make_shared`/`make_unique`、各种循环和 `begin`/`end` 习惯用法进行包装的情况特别有用。在类名后键输入 {0} 以查看后缀补全的选项。
clion.qfix.name.remove.parameter=移除形参 'redundant' 的声明
clion.quick.fix.use.range.based.loop="改用基于范围的 for 循环"
clion.rad.change.signature.move.parameter.down=通过点击“下移”按钮将 {0} 形参移至 {1} 形参下方。
clion.rad.intn.name.replace.if=将 'if' 语句转换为 '?\:' 表达式
clion.rad.qfix.name.remove.parameter=移除未使用的形参
clion.refactorings.module.description=通过重命名、提取和其他类型的重构保持代码整洁。
clion.refactorings.module.name=重构
clion.rename.again=“重命名”重构有一些附加选项。再次尝试将 {0} 重命名为 {1}。点击代码中类型名称 {0} 的任何匹配项，然后按 {2}。
clion.rename.applied=<ide/> 现在更改了声明/定义以及所有用法中类模板的名称。这将应用于整个项目。请注意，“重命名”重构 {0} 会自动重命名此注释内的 {1} 匹配项。
clion.rename.conclusion=<ide/> 现在再次更改了类模板的名称，但与以前不同的是，这不会影响注释。
clion.rename.description=“重命名”重构可用于全局重命名符号、文件和目录，并自动更正代码中对它们的所有引用。
clion.rename.dialog.next.button=下一个
clion.rename.dialog.title=重命名
clion.rename.disable.update.option=禁用“同时在注释和字符串中重命名”
clion.rename.enable.update.option=启用“{0}”
clion.rename.found.usages=<ide/> 会显示注释和字符串字面量中找到的所有文本匹配项。
clion.rename.found.usages.options=您可以在此处使用工具栏控件导航/分组/筛选找到的匹配项。
clion.rename.help.link=“重命名”重构
clion.rename.lesson.name=重命名
clion.rename.option.text=在注释和字符串字面量中搜索
clion.rename.press.rename=按 {0} 可重命名类模板 {1}。
clion.rename.show.option.popup=点击要重命名的元素旁边的图标或按 {0} 以访问其他选项。
clion.rename.type.new.name=为此类模板输入一个新名称(例如 {0})，然后按 {1}。
clion.rename.undo=与任何重构一样，可以使用“撤消”轻松撤消对类型的重命名。请按 {0}。
clion.run.configuration.add.new.program.arguments=在程序实参中输入 {0}，然后点击“运行”
clion.run.configuration.dialog.run.button=运行
clion.run.configuration.dialog.title=运行/调试配置
clion.run.configuration.gutters=您可以通过多种方式运行代码。您可以通过点击“{0}”并选择“{1}”条目从装订区域运行。或者，您可以按 {2}。
clion.run.configuration.lesson.name=运行配置
clion.run.configuration.program.arguments=程序实参
clion.run.configuration.run.current=我们通过点击工具栏上的“{0}”来运行此演示程序。
clion.run.configuration.run.current.balloon=我们来运行此示例
clion.run.configuration.settings.description=这是管理所有运行配置的位置。您可以在此处设置程序形参、工作目录、环境变量等。
clion.run.debug.module.description=使用 IDE 可视调试器运行代码并修正错误。
clion.run.debug.module.name=运行并调试
clion.selection.select.string=再次按 {0} 以选择整个字符串。
clion.smart.completion.finish.completion=选择“{0}”并按 {1}。
clion.smart.completion.help.link=类型匹配补全
clion.smart.completion.introduction=智能类型补全会筛选建议列表，从而只包含当前上下文中适用的类型。
clion.smart.completion.use.smart.completion=在这种情况下，只有将枚举 {0} 的值传递给函数 {1} 才有意义。按 {2} 查看匹配建议的列表。请注意，仅显示不同的 {0} 枚举值。
clion.statement.completion.complete.condition=在圆括号 {0} 内添加一个条件，然后按 {1} 跳转到 {2} 语句内。
clion.statement.completion.complete.finish.body=输入一行代码\: {0}，然后按 {1} 补全语句并应用格式设置。
clion.statement.completion.complete.for=按 {0} 补全 {1} 语句。
clion.statement.completion.complete.if=输入 {0}，然后按 {1} 以生成语句。
clion.statement.completion.help.link=语句补全
clion.statement.completion.lesson.intro1=您可以使用语句补全创建语法正确的代码结构。该功能会插入必要的语法元素(圆括号、大括号和分号)，并使您处于可以开始输入下一条语句的位置。
clion.statement.completion.lesson.intro2=补全语句适用于补全声明(例如，类、命名空间和枚举)和语句(<code>if/else</code>、<code>while</code>、<code>do</code>、<code> >for</code>、<code>switch/case</code>、<code>try/catch</code>)。
clion.statement.completion.lesson.name=语句补全
clion.tab.completion.lesson.intro=使用 Tab (而不是回车键)补全不是简单地插入所选建议，而是完全替换文本光标处的单词。这对于快速修正代码非常有用，因为您不必手动选择和移除单词。
clion.tab.completion.lesson.name=Tab 补全
clion.tab.completion.select.item=使用键盘箭头选择“{0}”条目或者直接开始输入。
clion.tab.completion.start.completion=假设您想将此处的 {0} 替换为 {1} 类成员。按 {2} 可查看补全建议。
clion.tab.completion.use.tab.completion=如果按 {0}，将在 {2} 前面插入 {1}。相反，按 {3} 可将 {2} 替换为 {1}。
toolbar.settings.button=IDE 和项目设置
unwrap.try=解包 'if...'
