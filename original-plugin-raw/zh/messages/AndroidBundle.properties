action.AnActionButton.update.sites.text.deselect.all=取消全选
action.AnActionButton.update.sites.text.select.all=全选
action.Android.AddRTLSupport.description=在可能的情况下添加从右到左(RTL)支持
action.Android.AddRTLSupport.text=添加从右到左(RTL)支持…
action.Android.AnalyzeApk.description=选择要分析的 APK
action.Android.AnalyzeApk.text=分析 APK…
action.Android.DumpResourceTrace.text=转储资源跟踪
action.Android.OpenBuildAnalyzerAction.description=打开构建分析器(需要成功构建才能显示报告)。
action.Android.OpenBuildAnalyzerAction.text=分析构建性能
action.Android.OpenBuildAnalyzerResultsAction.description=根据过往构建的结果打开构建分析器
action.Android.OpenBuildAnalyzerResultsAction.text=显示先前构建的结果分析
action.Android.RunAndroidSdkManager.description=运行 Android SDK 管理器
action.Android.RunAndroidSdkManager.text=Android SDK 管理器
action.Android.ToggleResourceTrace.text=跟踪资源更新
action.ConvertFromWebp.description=将 WebP 文件转换为 PNG
action.ConvertFromWebp.text=转换为 PNG…
action.ConvertToWebp.description=将 PNG 文件转换为 WebP
action.ConvertToWebp.text=转换为 WebP…
action.DumbAware.AbstractDependenciesPanel.text.add.dependency=添加依赖项
action.DumbAware.ToolWindowHeader.text.hide=隐藏
action.ReportProblem.description=向 Android Studio 团队提交 bug 报告
action.ReportProblem.text=提交 bug 报告…
action.ResourceExplorer.open.description=打开资源管理器
action.ResourceExplorer.open.text=资源管理器
action.label.code.style.notification.disable=禁用通知
action.label.code.style.notification.open.settings=打开代码样式设置
action.label.open.project.structure=打开项目结构
activity.class.not.specified.error=未指定 Activity 类
activity.not.declared.in.manifest=Activity ''{0}'' 未在 AndroidManifest.xml 中声明
add.dependency.intention.text=添加库依赖项
add.string.resource.intention.text=提取字符串资源
advanced.setting.project.view.default=将项目视图设置为默认视图
android.9patch.creator.error=创建 9-Patch 文件时出现意外错误\: {0}
android.9patch.creator.error.title=创建 9-Patch 文件
android.9patch.creator.save.title=另存为 .9.png
android.9patch.creator.title=创建 9-Patch 文件…
android.9patch.file.type.description=Android 9-Patch
android.aapt.use.custom.package.name=重命名清单包(&K)\:
android.add.activity.to.manifest.intention.text=将 Activity 添加到清单
android.add.broadcast.receiver.to.manifest.intention.text=将广播接收器添加到清单
android.add.service.to.manifest.intention.text=将服务添加到清单
android.apk.settings.title=资源打包
android.apk.sign.gradle.invalid.destination=该目标文件夹不存在或不可写
android.apk.sign.gradle.missing.destination=请为签署的 {0} 指定目标文件夹
android.apk.sign.gradle.missing.variants=请选择要构建并签署的构建变体
android.apk.sign.gradle.no.model=缺少 Gradle 项目信息。请检查 IDE 是否已成功将其状态与 Gradle 项目模型同步。
android.apk.sign.gradle.no.variants=未定义构建变体
android.application.title=Android 应用程序
android.apt.settings.title=R.java 和 Manifest.java 文件
android.as.wizard.welcome.dialog.title=Android Studio 安装向导
android.autogeneration.notification.group=Android 自动生成
android.baseline.profile.run.configuration.group.variants.allvariants=为所有变体生成基线配置文件
android.baseline.profile.run.configuration.group.variants.current=为当前变体生成基线配置文件
android.baseline.profile.run.configuration.group.variants.title=变体
android.baseline.profile.run.configuration.type.description=Android 基线配置文件运行配置
android.baseline.profile.run.configuration.type.name=Android 基线配置文件
android.browse.instrumentation.class.dialog.title=选择插桩类
android.browse.test.class.dialog.title=选择测试类
android.cannot.create.dir.error=无法创建目录{0}
android.cannot.create.file.error=无法创建文件 {0}
android.cannot.create.new.key.error=无法创建新密钥或密钥库
android.cannot.debug.noDebugPermissions=无法从设备 {1} 上的模块 {0} 调试应用程序。\n此应用程序在清单中未启用 ''debuggable'' 特性。\n如果您已在清单中手动设置该特性，请将其移除并让 IDE 自动分配。\n如果您使用的是 Gradle，请确保您的当前变体可调试。
android.cannot.find.file.error=未找到文件{0}
android.cannot.run.library.project.error=该模块不能是 Android 库
android.compilation.error.apt.gen.not.specified=没有为模块 {0} 指定 AAPT 目标目录
android.compilation.error.manifest.not.found=[{0}] AndroidManifest.xml 文件未找到。请查看 Android facet 设置。
android.compilation.error.specify.platform=[{0}] Android SDK 未指定或无法解析
android.compile.messages.generating.r.java.content.name=正在生成源
android.complication.configuration.type.name=Wear OS 复杂功能
android.component.entry.point=Android 组件
android.confirm.password.label=确认(&C)\:
android.convert.to.data.binding.layout.intention.text=转换为数据绑定布局
android.create.new.key.error.prefix=密钥已创建，存在错误\:
android.ddms.actions.layoutinspector.description=检查所选窗口的布局
android.ddms.actions.layoutinspector.description.disabled=调试时检查布局已禁用
android.ddms.actions.layoutinspector.dumpdisplay.notification.failure=由于异常，检索显示列表信息失败\: {0}
android.ddms.actions.layoutinspector.dumpdisplay.notification.nonode=检索显示列表信息失败，找不到目标节点。
android.ddms.actions.layoutinspector.dumpdisplay.notification.success=显示写入 logcat 的列表信息。
android.ddms.actions.layoutinspector.menu.dump.display=转储显示列表
android.ddms.actions.layoutinspector.menu.show.bound=显示布局边界
android.ddms.actions.layoutinspector.notification.group=布局检查器
android.ddms.actions.layoutinspector.notification.title=布局检查器
android.ddms.actions.layoutinspector.title=布局检查器
android.ddms.actions.layoutinspector.title.legacy=旧版布局检查器
android.ddms.actions.layoutinspector.update.notification.failure=无法从设备更新图像。
android.ddms.actions.layoutinspector.windowpicker=选择窗口
android.ddms.actions.screenrecord=屏幕录制
android.ddms.actions.screenrecord.description=录制设备显示屏的视频
android.ddms.actions.screenshot=屏幕捕获
android.ddms.actions.screenshot.copied.to.clipboard=图像已复制到剪贴板
android.ddms.actions.screenshot.description=从设备获取屏幕截图
android.ddms.actions.screenshot.title=屏幕捕获
android.ddms.actions.terminate.vm=终止应用程序
android.ddms.actions.terminate.vm.description=终止所选 Android 应用程序
android.ddms.nodevices=[none]
android.ddms.notification.layoutinspector.reboot.live.inspector=无法检测到实时检查服务。要启用实时检查，请重启设备。
android.ddms.screenrecord.options.ok.button.text=开始录制
android.ddms.screenrecorder.options.bit.rate=比特率(Mbps)\:
android.ddms.screenrecorder.options.bit.rate.invalid=比特率必须为整数。
android.ddms.screenrecorder.options.info=<html>Screen Recorder 最多可以录制 3 分钟的设备显示器。</html>
android.ddms.screenrecorder.options.resolution=分辨率(原生 %)\:
android.ddms.screenrecorder.options.show.taps=显示点按
android.ddms.screenrecorder.options.show.taps.tooltip=显示点按的视觉反馈
android.ddms.screenrecorder.options.use.emulator.recording=使用模拟器录制(webm)
android.ddms.screenrecorder.options.use.emulator.recording.tooltip=使用 Emulator Recording API 进行录制。如果未选中，将改用 ADB 录制。
android.ddms.screenshot.generic.error=获取屏幕截图时出现意外错误\: {0}
android.ddms.screenshot.image.processor.task.title=正在更新图像
android.ddms.screenshot.save.error=保存屏幕截图时出现意外错误\: {0}
android.ddms.screenshot.save.ok.button.text=保存
android.ddms.screenshot.save.title=另存为 PNG
android.ddms.screenshot.task.error.invalid.bpp=从设备接收到不支持的图像(每像素位数 \= {0})
android.ddms.screenshot.task.error1=从设备获取屏幕截图时出现意外错误\: {0}
android.ddms.screenshot.task.step.load=正在将屏幕截图加载到内存中…
android.ddms.screenshot.task.step.obtain=正在从设备获取屏幕截图…
android.declarative.watchface.configuration.type.description=Wear OS 声明式 WatchFace 配置
android.declarative.watchface.configuration.type.name=Wear OS 表盘
android.defender.config.failed=<html>Microsoft Defender 配置脚本失败。请在日志中查找“WindowsDefenderChecker”记录。<br><br>或者，您可以尝试手动配置 Microsoft Defender。</html>
android.defender.config.failed.instructions=手动配置
android.defender.config.prompt=<html>IDE 已检测到启用了实时保护的 Microsoft Defender。它可能会严重降低 IDE 性能。建议确保将以下路径添加到 Defender 文件夹排除列表\: <br>{0}<br><br>如果您之前自动或手动排除了它们，请选择“{2}”。注意\: 运行“{1}”将要求管理员权限。</html>
android.defender.config.prompt.no.script=<html>IDE 已检测到启用了实时保护的 Microsoft Defender。它可能会严重降低 IDE 性能。建议确保将以下路径添加到 Defender 文件夹排除列表\: <br>{0}<br><br></html>
android.dest.directory.title=生成文件的目录(&Y)\:
android.dex.compiler.vm.options.title=Android DX 编译器虚拟机选项
android.dictionary.name=Android 字典
android.editor.settings.appearance.enable.flags.for.languages=启用语言标志
android.editor.settings.appearance.title=Android 编辑器
android.editor.settings.general.code.folding.string.references=字符串引用
android.emulator=模拟器
android.emulator.settings.incompatible.snapshot.policy.ask=删除前询问
android.emulator.settings.incompatible.snapshot.policy.delete=自动删除
android.emulator.settings.incompatible.snapshot.policy.ignore=不删除
android.export.package.bundle.description=<html>生成签署的应用 Bundle 以上传到应用商店来获得以下好处\:<ul><li>更小的下载大小</li><li>按需应用功能</li><li>仅资产模块</li></ul></html>
android.export.package.bundle.gradle.error=生成签署的 Bundle 需要您将 Android Gradle 插件更新到 3.2.0 或更高版本。
android.export.package.bundle.key.export=导出加密密钥，将发布的应用注册在
android.export.package.bundle.key.export.error.description=无法导出加密密钥，请修正问题，然后重试。\n\n详细信息\: {0}。
android.export.package.bundle.key.export.error.title=导出加密密钥失败
android.export.package.city.label=城市或地区(&L)\:
android.export.package.country.code.label=国家/地区代码(XX)(&X)\:
android.export.package.destination.akp.label=目标 APK 路径(&D)\:
android.export.package.incorrect.password.length=密码必须至少为 6 个字符
android.export.package.key.certificate.name.label=名字和姓氏(&F)\:
android.export.package.key.validity.label=有效期(年)(&V)\:
android.export.package.keystore.error.title=密钥库加载错误
android.export.package.new.key.alias.label=别名(&A)\:
android.export.package.organization.label=组织(&R)\:
android.export.package.organization.unit.label=组织单位(&O)\:
android.export.package.passwords.cannot.contain.quote.character=密码不得包含引号字符
android.export.package.passwords.not.match.error=密码不匹配
android.export.package.run.proguard.label=运行 ProGuard(&P)
android.export.package.specify.certificate.field.error=至少一个证书颁发者字段需要为非空
android.export.package.specify.key.alias.error=请指定键别名
android.export.package.specify.key.password.error=请指定密钥的密码
android.export.package.specify.key.store.password.error=请指定密钥库的密码
android.export.package.specify.keystore.location.error=请指定密钥库位置
android.export.package.specify.password.error=请指定密码
android.export.package.state.label=州或省(&T)\:
android.export.package.success.message=已成功创建文件 {0}
android.export.package.wizard.title=生成已签署的 App Bundle 或 APK
android.extended.device.chooser.avd.label=Android Virtual Device(&A)\:
android.extract.package.cannot.find.key.error=找不到密钥 {0}
android.extract.package.choose.keystore.title=选择密钥库文件
android.extract.package.error.0.message=错误\: {0}
android.extract.package.specify.apk.path.error=请指定目标 APK 路径
android.extract.package.task.title=生成 APK 文件
android.extract.style.title=提取 Android 样式
android.facet.editor.is.library.checkbox=库模块(&B)
android.facet.settings.apk.path.label=APK 路径(&P)\:
android.facet.settings.compile.resources.by.ide=通过 IDE 生成(&G)
android.facet.settings.custom.debug.keystore.label=自定义调试密钥库(&U)\:
android.facet.settings.pack.test.sources=将测试代码和资源包含到 APK 中
android.facet.settings.run.proguard=构建调试 APK 时运行 ProGuard
android.file.not.exist.error=文件{0}不存在
android.final.package.element.type.name=Android 最终软件包
android.find.style.applications.title=尽可能使用样式
android.font.file.type.description=字体
android.generate.r.java.by.res.dir=使用在“结构”部分中指定的资源目录(&O)
android.generate.signed.app.bundle.or.apk.action.text=生成已签署的 App Bundle 或 APK…
android.gradle.link.appengine.outdated=更新 'appengine' 插件版本。
android.ij.wizard.welcome.dialog.title=Android Support 插件安装向导
android.import.dependencies.add.module.dependency.task.title=添加依赖关系 {0} --> {1}
android.import.dependencies.dialog.title=从属性文件导入 Android 依赖项
android.import.dependencies.error.message.header=导入完成，但有错误\:
android.import.dependencies.import.module.task.title=从 {1} 导入库模块 {0}
android.import.dependencies.new.module.task.title=在 {1} 中创建库模块 {0}
android.import.dependencies.source.roots.dialog.label=选择要添加到项目的源根
android.import.dependencies.source.roots.dialog.title=导入源根
android.inline.file.inline.all.text=内联所有引用并移除文件(&A)
android.inline.file.inline.this.text=内联此用法并保留文件(&T)
android.inline.layout.command.name=内联布局文件 ''{0}''
android.inline.layout.title=内联 Android 布局
android.inline.style.command.name=内联样式 ''{0}''
android.inline.style.inline.all.text=内联所有引用并移除样式(&A)
android.inline.style.inline.this.text=内联此用法并保留样式(&T)
android.inline.style.title=内联 Android 样式
android.inspections.dom.name=Android 资源验证
android.inspections.element.not.allowed.name=不允许 Android XML 元素
android.inspections.group.name=Android
android.inspections.nav.file=导航文件
android.inspections.nav.name.not.valid=''{0}'' 不是标记 ''{1}'' 的有效目标
android.inspections.non.constant.res.ids.in.switch.message=资源 ID 不能在 Android 库模块的 switch 语句中使用
android.inspections.non.constant.res.ids.in.switch.name=switch 语句中存在非常量资源 ID
android.inspections.on.click.missing.incorrect.signature=''{1}'' 中方法 ''{0}'' 的签名不正确
android.inspections.on.click.missing.name=相关 Activity 中缺少 onClick 处理程序
android.inspections.on.click.missing.problem=方法 ''{0}'' 在 ''{1}'' 中缺失或签名不正确
android.inspections.root.tag.name=Android XML 根标记验证
android.inspections.unknown.attribute.message=未知特性 {0}
android.inspections.unknown.attribute.name=未知 Android XML 特性
android.inspections.unresolvable.tag=不可解析的标记
android.invalid.sdk.message=您的 Android SDK 路径无效。请在 <a href\="\#">Settings</a> 中进行更新。
android.journeys.configuration.type.description=Journeys-with-Gemini 运行配置。此功能尚处于实验阶段。
android.journeys.configuration.type.name=Journey 测试(实验性)
android.journeys.editor.error.loading.file=加载 Journey 文件时出错。
android.journeys.editor.error.parsing.file=解析 Journey 文件时出错。
android.journeys.editor.toolbar.run.button.tooltip.disabled.build=运行 Journey (已禁用)\: 找不到兼容的构建系统
android.journeys.editor.toolbar.run.button.tooltip.disabled.empty=运行 Journey (已禁用)\: 添加操作以运行 Journey
android.journeys.editor.toolbar.run.button.tooltip.disabled.indexing=运行 Journey (已禁用)\: 项目索引期间运行 Journey 被禁用
android.journeys.editor.toolbar.run.button.tooltip.disabled.module=运行 Journey (已禁用)\: 未找到 Android 模块
android.journeys.editor.toolbar.run.button.tooltip.enabled=运行 Journey
android.key.password.label=密码(&S)\:
android.launch.task.clear.app.data.description=清除应用存储
android.launch.task.clear.app.data.error=无法清除设备 {1} 上 {0} 的应用存储
android.launch.task.show.logcat=打开 {0} 的 logcat 面板\n
android.launch.task.show.logcat.emulator=模拟器 {0}
android.launch.task.show.logcat.unknown.avd=未知 AVD 名称
android.launch.task.show.logcat.unknown.manufacturer=未知制造商
android.launch.task.show.logcat.unknown.model=未知模型
android.launch.task.show.logcat.unknown.version=未知版本
android.launch.task.succeeded={0}已成功
android.launch.task.succeeded.with.warnings={0}已成功，有 {1} 个警告
android.layout.preview.edit.configuration.available.qualifiers.label=可用的限定符(&V)\:
android.layout.preview.edit.configuration.chosen.qualifiers.label=选择的限定符(&H)\:
android.layout.screenview.action.description=Show {0} 图面
android.local.properties.file.settings.tooltip=打开设置对话框以更改目录
android.manifest.merger.not.supported.error=不支持清单合并。请重新配置清单文件
android.name.extract.color.resource.intention.text=提取颜色资源
android.new.component.action.command.name=新建 Android 组件
android.new.component.action.description=从“其他”类别创建新的 Android 对象
android.new.component.action.title.non.gradle=Android 组件
android.new.component.dialog.activity.item=Activity
android.new.component.dialog.application.item=应用程序
android.new.component.dialog.broadcast.receiver.item=广播接收器
android.new.component.dialog.broadcast.remote.interface=远程接口
android.new.component.dialog.fragment.item=Fragment
android.new.component.dialog.service.item=服务
android.other.configuration=其他配置…
android.override.resource.in.intention.text=重写 {0} 中的资源
android.progress.title.setting.up.run.configurations=正在设置运行配置…
android.proguard.vm.options.title=Android ProGuard 虚拟机选项
android.project.open.permission.readonly.message=此项目文件夹的写入权限受到限制。要获得完整的 IDE 功能，请在导入之前授予对该目录及其内容的写入权限。
android.project.open.permission.readonly.title=写入权限问题
android.proxy.settings.dialog.message=<html>{0} 配置为使用 HTTP 代理。Gradle 可能需要这些 HTTP 代理设置才能访问互联网(例如下载依赖项。)<br/><br/>是否要将以下 HTTP 设置存储到全局 gradle.properties 文件?<br/><br/><b>注意</b>\: 您可以在 gradle.properties 文件中手动设置密码，但要自担风险。<br/><br/>有关详情，请参阅 <a href\=''https\://developer.android.com/studio/intro/studio-config.html\#proxy''>Android Studio 文档</a>。<br/><br/>
android.proxy.settings.dialog.no.ide.message=<html>{0} 配置为不使用 HTTP 代理，但 Gradle 当前正在使用这些代理设置访问互联网(例如下载依赖项。)<br/><br/>是否要在全局 gradle.properties 文件中保留当前的 HTTP 设置?<br/><br/><b>注意</b>\: 您可以在 gradle.properties 文件中手动设置密码，但要自担风险。<br/><br/>有关详情，请参阅 <a href\=''https\://developer.android.com/studio/intro/studio-config.html\#proxy''>Android Studio 文档</a>。<br/><br/>
android.proxy.settings.dialog.title=代理设置
android.psd.file.type.description=Adobe Photoshop 图像
android.refactoring.gradle.warning.rename.source.root=新的源根名称不会自动传播<br/>到 Gradle 配置。<br/>您需要在 *.gradle 文件中手动进行相应<br/>更改。
android.refactoring.migrateto.defaulttargetsdktocompilesdkifunset.error.message=此重构仅适用于 Android 应用程序或库项目
android.refactoring.migrateto.defaulttargetsdktocompilesdkifunset.error.title=无法执行重构
android.refactoring.migrateto.defaulttargetsdktocompilesdkifunset.progress.findusages=正在查找用法…
android.refactoring.migrateto.defaulttargetsdktocompilesdkifunset.title=如果未设置，则将默认 TargetSdk 迁移到 CompileSdk…
android.refactoring.migrateto.namespaces.progress.analyze.code=正在分析代码文件…
android.refactoring.migrateto.namespaces.progress.analyze.manifest=正在分析清单文件…
android.refactoring.migrateto.namespaces.progress.analyze.xml=正在分析 XML 资源文件…
android.refactoring.migrateto.namespaces.progress.inferring=正在推断命名空间…
android.refactoring.migrateto.namespaces.title=迁移到资源命名空间…
android.refactoring.migrateto.nontransitiverclass.error.old.agp.message=不可传递的 R 类不适用于使用低于 4.2.0 版本的 Android Gradle 插件的项目
android.refactoring.migrateto.nontransitiverclass.error.old.agp.title=无法执行重构
android.refactoring.migrateto.nontransitiverclass.progress.findusages=正在查找 R 类用法…
android.refactoring.migrateto.nontransitiverclass.progress.inferring=正在推断软件包名称…
android.refactoring.migrateto.nontransitiverclass.progress.rewriting=正在重写资源引用…
android.refactoring.migrateto.nontransitiverclass.title=迁移到不可传递的 R 类…
android.refactoring.migrateto.nontransitiverclass.warning.recommend.upgrade=此功能在 AGP 4.2 版本中为实验性功能，升级到 7.0.0 或更新版本可获得最佳结果。
android.refactoring.migrateto.nontransitiverclass.warning.uncommitted.changes=项目可能包含未提交的更改。在继续之前，您应该提交或恢复这些更改。
android.refactoring.migrateto.resourceview.header=要迁移的资源引用
android.refactoring.rtl.addsupport.dialog.apply.button.text=按搜索结果面板底部的“执行 RTL 重构”按钮，以进行从右到左(RTL)重构
android.refactoring.rtl.addsupport.dialog.label.text=此重构将向您的 Android 应用添加 RTL 支持。\n\n请检查以下选项\:\n
android.refactoring.rtl.addsupport.dialog.ok.button.text=运行
android.refactoring.rtl.addsupport.dialog.option.label.layouts.options.generate.v17.txt=生成 -v17 版本
android.refactoring.rtl.addsupport.dialog.option.label.layouts.options.replace.leftright.txt=用开始/结束属性替换左/右属性
android.refactoring.rtl.addsupport.dialog.option.label.layouts.options.txt=布局选项
android.refactoring.rtl.addsupport.dialog.option.label.update.layouts.text=更新布局文件
android.refactoring.rtl.addsupport.dialog.option.label.update.manifest.text=更新 AndroidManifest.xml
android.refactoring.rtl.addsupport.dialog.title=添加从右到左(RTL)支持…
android.refactoring.rtl.addsupport.title=添加从右到左(RTL)支持
android.run.configuration.all.in.module.radio=模块中的所有(&A)
android.run.configuration.all.in.package.radio=软件包中的所有(&I)
android.run.configuration.class.label=类(&L)
android.run.configuration.class.radio=类(&S)
android.run.configuration.complication=提供程序
android.run.configuration.complication.launch.options=复杂功能启动选项
android.run.configuration.complication.slots.no.type.supported=此槽位不支持任何类型
android.run.configuration.complication.slots.title=复杂功能槽位
android.run.configuration.complication.slots.updating=正在更新槽位
android.run.configuration.complication.will.run.in.debug=所选复杂功能将在设备上安装的调试表盘中运行。
android.run.configuration.component.not.chosen={0} 未选择
android.run.configuration.component.not.found=找不到 {0}
android.run.configuration.debug.surface.warn=警告\: 如果后台服务的响应时间过长，所选 Wear 设备可能会终止后台服务，这可能会影响调试。为了避免这种情况，请将设备端 Wear OS 配套应用更新到最新版本。
android.run.configuration.general.tab.title=常规
android.run.configuration.generate.baseline.profile=生成基线配置文件
android.run.configuration.install.flags.label=安装标志\:
android.run.configuration.loading=正在加载…
android.run.configuration.logcat.skip.content.label=启动前清除日志(&C)
android.run.configuration.method.label=方法(&T)
android.run.configuration.method.radio=方法(&E)
android.run.configuration.misc.tab.title=杂项
android.run.configuration.module.label=模块\:
android.run.configuration.module.not.chosen=未选择模块
android.run.configuration.not.supported=当前项目不支持运行配置 {0}。无法获取 APK 文件的位置。
android.run.configuration.not.supported.applicationid=当前项目不支持运行配置 {0}。无法获取应用程序 ID。
android.run.configuration.not.supported.package=当前项目中不支持运行配置 {0}。无法获取软件包。
android.run.configuration.package.label=包(&K)
android.run.configuration.run=运行 {0}
android.run.configuration.synchronization.warning=项目同步时无法编辑配置
android.run.configuration.tile=磁贴
android.run.configuration.type.description=Android 启动/调试配置
android.run.configuration.type.name=Android 应用
android.run.configuration.watchface=表盘
android.run.configuration.wear.component.not.chosen={0} 未选择
android.run.configuration.wear.component.not.found=找不到 {0}
android.run.configuration.wear.install.flags=安装标志\:
android.run.configuration.wear.module.not.chosen=未选择模块
android.run.configuration.wear.version.affects.debugging=警告\: 运行 API 级别 26 及以下级别的 Wear 设备如果响应时间过长，可能会终止后台服务，这可能会影响调试。要避免这种情况，请使用运行 API 级别 28 或更高级别的设备。
android.run.configuration.wear.while.project.is.synchronizing.warning=项目同步时无法编辑配置
android.run.sdk.manager.action.text=SDK 管理器
android.safeargs.fix.import=导入
android.sdk.configure.jdk.error=请配置内部 JDK
android.sdk.manager.installer.install.error=请求的操作未成功完成。有关详细信息，请参阅 IDE 日志。
android.sdk.manager.installer.install.finished=请等待请求的操作完成。
android.sdk.manager.installer.panel.description=正在完成请求的操作
android.sdk.manager.installer.panel.title=SDK 组件安装程序
android.sdk.missing.msg=您的 Android SDK 缺失、过期或损坏。
android.sdk.missing.title=SDK 问题
android.sdk.not.configured.notification=没有为模块 ''{0}'' 配置 Android SDK 或已损坏
android.sdk.open.manager=打开 SDK 管理器
android.sdk.presentable.name=Android SDK
android.suggested.dependency.action.family.name=添加库依赖项
android.suggested.dependency.action.name.prefix=添加对 {0} 的依赖关系
android.suggested.import.action.family.name=添加库依赖关系并导入
android.suggested.import.action.name.prefix=添加对 {0} 的依赖关系并导入
android.suggested.imports.title=建议的导入
android.test.run.configuration.instrumentation.label=插桩类\:
android.test.run.configuration.type.description=Android Instrumented Tests 配置
android.test.run.configuration.type.name=Android Instrumented Tests
android.tile.configuration.type.name=Wear OS 磁贴
android.update.project.properties.dialog.text=以下 Android 模块的结构已被更改\:<br>{0}<br>是否要更新相关的 project.properties 文件?<br><a href\="once">仅一次</a><br><a href\="always">始终更新这些模块的文件</a><br><a href\="never">永不更新这些模块的文件</a>
android.update.project.properties.dialog.title=更新属性文件
android.usageGroup.properties.new.flag=要添加的属性标志\: {0}
android.usageGroup.resource.references.from.package=对 {0} 中定义的资源的引用
android.usageType.gradle.build.script=在 Gradle 构建脚本中
android.usageType.gradle.properties.file=Gradle 属性文件
android.usageType.manifest=在 Android 清单中
android.usageType.permission.reference.code=代码中的权限引用
android.usageType.resource.declaration.xml=Android 资源 XML 中的资源声明
android.usageType.resource.file=Android 资源文件
android.usageType.resource.reference.code=代码中的资源引用
android.usageType.resource.reference.xml=Android 资源 XML 中的资源引用
android.use.custom.r.java.source.dir=使用自定义资源目录(&M)\:
android.watchface.configuration.type.name=Wear OS 表盘服务(已弃用)
android.wizard.action.new.component=创建一个新的 {0}
android.wizard.action.requires.aidlEnabled={0} (需要在 Gradle 构建文件中将 buildFeatures.aidl 设置为 true)
android.wizard.action.requires.androidx={0} (需要 AndroidX 支持)
android.wizard.action.requires.minsdk={0} (需要 minSdk >\= {1})
android.wizard.action.requires.new.agp={0} (需要 Android Gradle 插件 {1} 或更新版本)
android.wizard.activity.add=将 Activity 添加到 {0}
android.wizard.activity.add.cpp.docslinktext=请参阅文档
android.wizard.activity.invalid.androidx=所选 Activity 模板要求项目具有 androidx.* 依赖项。
android.wizard.activity.invalid.min.sdk=所选 Activity 模板的最低 SDK 级别为 {0}。
android.wizard.activity.invalid.needs.kotlin=所选活动模板需要 Kotlin。
android.wizard.activity.not.found=未选择 Activity 模板
android.wizard.buildConfigurationLanguage.combo.tooltip=用于构建脚本的构建配置语言
android.wizard.config.activity.title=配置 Activity
android.wizard.config.component.title=配置组件
android.wizard.config.fragment.title=配置 Fragment
android.wizard.config.journey.title=配置 Journey
android.wizard.cppStandard.combo.tooltip=用于原生模块的 C++ 标准
android.wizard.fragment.add=将 Fragment 添加到 {0}
android.wizard.fragment.invalid.androidx=所选片段模板要求项目具有 androidx.* 依赖项。
android.wizard.fragment.invalid.min.sdk=所选 Fragment 模板的最低 SDK 级别为 {0}。
android.wizard.fragment.invalid.needs.kotlin=所选片段模块需要 Kotlin。
android.wizard.fragment.not.found=未选择 Fragment 模板
android.wizard.language.combo.empty=(选择语言)
android.wizard.language.combo.header=源语言
android.wizard.language.combo.tooltip=用于代码生成的编程语言
android.wizard.module.config.new.base.missing=<No Base Module found>
android.wizard.module.config.title=配置您的模块
android.wizard.module.description=Android 模块用于开发要在 <b>Android</b> 操作系统上运行的应用。<br><b>Android</b> 模块包括一个或多个<b>操作组件</b>且可能支持一些机型，<br>包括<b>手机与平板电脑</b>、<b>Wear</b> 和 <b>Android Auto</b>。
android.wizard.module.help.baselineprofiles.minversionrequired=您的项目正在使用不受支持的 androidx.benchmark 版本。请更新到所需的最低版本 1.2.2。
android.wizard.module.help.baselineprofiles.target.module.description=选择您想要为其生成基线配置文件的应用程序
android.wizard.module.help.baselineprofiles.usegmd.description=添加 Gradle 托管设备配置，以便在持续集成构建中使用或从命令行使用，从而在完全托管和控制的环境下生成基线配置文件。<a href\="https\://developer.android.com/studio/test/gradle-managed-devices">了解详情</a>
android.wizard.module.help.benchmark.module.type=要运行的基准测试类型。如需了解详情，请参阅 https\://d.android.com/benchmark。\n\nMicrobenchmark - 衡量要优化的小段代码的 CPU 性能和分配。\n\nMacrobenchmark - 衡量和检查应用的启动和滚动性能。
android.wizard.module.help.benchmark.target.module=选择您想要进行基准测试的应用程序
android.wizard.module.help.buildconfigurationlanguage.description=配置构建脚本以构建模块
android.wizard.module.help.choose=帮助我选择
android.wizard.module.help.loading=加载
android.wizard.module.help.name=要将模块放置在子文件夹中，请使用语法\: \:subfolder\:module_name，例如 \:libraries\:lib1
android.wizard.module.help.refreshing=正在加载统计信息…
android.wizard.module.import.eclipse.title=导入 Eclipse ADT 项目
android.wizard.module.import.gradle.description=将现有 Gradle 项目作为模块导入
android.wizard.module.import.gradle.title=导入 Gradle 项目
android.wizard.module.import.source.browse.bad.modules.1=找不到子项目 %1$s 的源。\n这可能导致缺少依赖项。
android.wizard.module.import.source.browse.bad.modules.2=找不到子项目 %1$s 和 %2$s 的源。\n这可能导致缺少依赖项。
android.wizard.module.import.source.browse.bad.modules.more=找不到 %1$s 和其他 %2$d 个子项目的源。\n这可能导致缺少依赖项。
android.wizard.module.import.source.browse.cant.import=指定 Gradle 或 Android Eclipse 项目的位置
android.wizard.module.import.source.browse.description=选择要作为新的子项目导入的现有 ADT 或 Gradle 项目
android.wizard.module.import.source.browse.error=内部错误，请检查 IDE 日志
android.wizard.module.import.source.browse.invalid.location=路径不存在
android.wizard.module.import.source.browse.taken.location=此位置已导入
android.wizard.module.import.source.browse.title=选择源位置
android.wizard.module.import.source.title=从源中导入模块
android.wizard.module.new.automotive=Automotive
android.wizard.module.new.automotive.description=创建新的 Android Automotive 模块。
android.wizard.module.new.baselineprofiles.module.app=基线配置文件生成器
android.wizard.module.new.baselineprofiles.module.description=基线配置文件生成器是一个可帮助您为应用生成基线配置文件并进行基准测试的模块。
android.wizard.module.new.baselineprofiles.module.description.extra=基线配置文件是通过运行此模块中的生成器类生成的文件，其中包含 Android 运行时(ART)通过提前(AOT)编译优化包含的代码路径的提示。它可以将您的应用的性能提升高达 30%。<a href\="http\://d.android.com/baseline-profiles">了解详情</a>
android.wizard.module.new.benchmark.module.app=基准
android.wizard.module.new.benchmark.module.description=创建新的基准模块。
android.wizard.module.new.dynamic.download.options=模块下载选项
android.wizard.module.new.dynamic.module=动态功能
android.wizard.module.new.dynamic.module.description=创建可以动态交付的新 Android App Bundle 模块。
android.wizard.module.new.dynamic.module.instant=免安装的动态功能
android.wizard.module.new.dynamic.module.instant.description=创建一个将作为免安装应用交付的新 Android 模块。
android.wizard.module.new.dynamic.select.base=请选择一个项目基础模块
android.wizard.module.new.google.cloud=Google Cloud
android.wizard.module.new.java.or.kotlin.library=Java 或 Kotlin 库
android.wizard.module.new.java.or.kotlin.library.description=创建新的 Java 或 Kotlin 库。
android.wizard.module.new.kotlin.multiplatform.library=Kotlin Multiplatform 共享模块
android.wizard.module.new.kotlin.multiplatform.library.description=创建一个新的 Kotlin Multiplatform 共享库模块。
android.wizard.module.new.library=Android 库
android.wizard.module.new.library.description=创建新 Android 库。
android.wizard.module.new.mobile=手机与平板电脑
android.wizard.module.new.mobile.description=创建新的 Android 手机和平板电脑模块。
android.wizard.module.new.module.header=选择模块类型
android.wizard.module.new.module.menu=新建模块…
android.wizard.module.new.module.menu.description=向项目添加一个新模块
android.wizard.module.new.module.title=创建新的模块
android.wizard.module.new.native.library=Android 原生库
android.wizard.module.new.native.library.description=创建新的 Android 原生库。
android.wizard.module.new.tv=电视
android.wizard.module.new.tv.description=创建新的 Android TV 模块。
android.wizard.module.new.wear=Wear OS
android.wizard.module.new.wear.description=创建新的 Wear OS 模块。
android.wizard.module.package.too.long=软件包名称过长
android.wizard.module.presentable.name=Android
android.wizard.module.will.not.use.version.catalog=新模块将不使用版本目录信息
android.wizard.new.activity.title=新建 Android Activity
android.wizard.new.component.title=新建 Android 组件
android.wizard.new.fragment.title=新建 Android Fragment
android.wizard.new.journey.title=新建 Journey 测试
android.wizard.project.create.error=新建项目向导中出错
android.wizard.project.help.buildconfigurationlanguage.description=配置构建脚本以构建模块，以及是否使用 Gradle 版本目录进行了配置
android.wizard.project.loading.sdks=正在查找可供下载的 SDK…
android.wizard.project.loading.stats.fail=无法加载统计信息。值可能已过期。
android.wizard.project.new.choose=选择项目模板
android.wizard.project.new.configure=配置您的项目
android.wizard.target.source.set.header=目标源集
android.wizard.validate.agp.version.for.kmp.module=需要 Android Gradle 插件版本 {0} 或更高版本
android.wizard.validate.empty.application.name=请输入应用程序名称 (在启动器中显示) 或库的描述性名称
android.wizard.validate.empty.module.name=请输入有效的模块名称
android.wizard.validate.invalid.class.name=请输入有效的类名
android.wizard.validate.kgp.version.for.kmp.module=需要 Kotlin Gradle 插件版本 {0} 或更高版本
android.wizard.validate.lowercase.application.name=大多数应用的应用程序名称以大写字母开头
android.wizard.validate.module.already.exists=模块“{0}”已存在
android.wizard.validate.module.empty.package.name.baseline.profiles=空的软件包名称
android.wizard.validate.module.illegal.character=模块名称 ''{1}'' 中存在非法字符 ''{0}''
android.wizard.validate.module.invalid.application.baseline.profiles=目标应用程序不是 Android 应用
android.wizard.validate.module.invalid.application.id.baseline.profiles=目标应用程序没有有效的应用程序 ID
android.wizard.validate.module.needs.androidx=项目需要转换为 androidx.* 依赖项
android.wizard.validate.module.needs.new.agp=组合需要 Android Gradle 插件 {0} 或更新版本
android.wizard.validate.module.needs.new.agp.baseline.profiles=基线配置文件需要 Android Gradle 插件 {0} 或更高版本
android.wizard.validate.module.needs.new.agp.kts=Kts 需要 Android Gradle 插件 {0} 或更新版本
android.wizard.validate.module.needs.new.agp.macro.benchmark=宏基准测试需要 Android Gradle 插件 {0} 或更新版本
android.wizard.validate.module.not.present.baseline.profiles=没有可用的有效目标模块
android.wizard.validate.module.same.package.name.baseline.profiles=软件包名称与目标模块的应用程序 ID 相同
android.wizard.validate.module.sync.needed.baseline.profiles=首先需要完成 Gradle 同步
android.wizard.validate.project.illegal.character=项目名称 ''{1}'' 中存在非法字符 ''{0}''
android.wizard.validate.select.compose.sdk=Compose 需要安装 Android SDK 31 或更新版本
android.wizard.validate.select.language=请选择语言
android.xml.code.style.notification=您可以使用标准 Android 方式设置 XML 资源的格式。在“XML 代码样式”设置中选择 '设置自… | Android'。
assert.level.title=断言
avd.manager.arm.images=ARM 镜像
avd.manager.x86.images=x86 镜像
cannot.find.testcase.error=找不到 junit.framework.TestCase 类
cannot.parse.sdk.error=无法解析 Android SDK
cannot.resolve.color.literal.error=无法解析颜色 ''{0}''
cannot.resolve.flag.error=无法解析标志
cannot.resolve.float.literal.error=无法解析浮点数 ''{0}''
cannot.resolve.format.error=无法解析格式
cant.find.activity.class.error=找不到 android.app.Activity 类
cant.find.class.error=找不到 {0} 类
check.resource.dir.error=找不到模块 {0} 的资源目录
checkbox.disable.sdk.diff.patching=禁用 SDK 差异修补
checkbox.force.https.sources=使用 http\://... 强制要提取的 https\://... 源
checkbox.group.tags.with.the.same.name=具有相同名称的组标签
checkbox.hide.obsolete.packages=隐藏过时软件包
checkbox.include.namespace.declarations=包含命名空间声明
checkbox.insert.blank.line.before.tag=在标签前插入空行
checkbox.insert.line.break.after.last.attribute=在最后一个特性之后插入换行符
checkbox.insert.line.break.before.first.attribute=在第一个特性之前插入换行符
checkbox.insert.line.breaks.around.style.declaration=在样式声明周围插入换行符
checkbox.show.package.details=显示软件包详细信息
checkbox.use.custom.formatting.settings.for.android.xml.files=对 Android XML 文件使用自定义格式设置
choose.device.dialog.title=选择部署目标
configurable.AndroidFacetEditorTab.display.name=Android SDK 设置
configurable.AndroidProjectStructureConfigurableForIdea.display.name=Android 项目结构
configurable.AndroidProjectStructureConfigurableForIdea.redirect.text=请使用 <a href\="aps">Android 项目结构</a>配置页面。
configurable.DeploymentConfigurable.displayName=部署
configurable.EssentialsModeSettingsPage.displayName=基础模式
configurable.ExperimentalSettingsConfigurable.display.name=实验性
configurable.ExperimentalSettingsConfigurable.idea.display.name=Android (实验性)
configurable.GradleCompilerSettingsConfigurable.displayName=Gradle-Android 编译器
configurable.GradleFacetEditorTab.display.name=Android Gradle 模块设置
configurable.IdeSdksConfigurable.display.name=SDK 位置
configurable.MemorySettingsConfigurable.display.name=内存设置
configurable.ProfilingConfigurable.display.name=CPU 记录配置
configurable.SdkUpdaterConfigurable.display.name=Android SDK 更新程序
configurable.TaskSettings.display.name=任务设置
configurable.group.android.settings.display.name=Android
configurable.group.build.android.settings.description=<html><body>使用 Android 构建工具配置项目集成。
configurable.group.build.android.settings.parent=构建
configurable.group.tools.android.settings.description=<html><body>配置 Android 工具设置。
connection.assistant.adb.devices=检测到至少一台 Android 设备。
connection.assistant.adb.failure=找不到 ADB。
connection.assistant.adb.no_devices.body=
connection.assistant.adb.no_devices.title=未检测到 Android 设备。
connection.assistant.adb.unexpected=出现意外错误，请提交错误。
connection.assistant.loading=正在加载…
connection.assistant.usb.no_devices.body=
connection.assistant.usb.no_devices.title=未检测到 USB 设备
copy.resources.from.artifacts.setting=在 Make 之前运行“process-resources”Maven 任务(&U)
create.file.resource.intention.name=创建 {0} 资源文件 ''{1}''
create.file.resource.quickfix.name=在 {1} 中创建资源文件 ''{0}''
create.on.click.handler.intention.text=创建 onClick 事件处理程序
create.value.resource.intention.name=创建 {0} 值资源 ''{1}''
create.value.resource.quickfix.name=在 ''{1}'' 中创建值资源 ''{0}''
ddms.corrupted.error=警告\: 由于缺少调试信息，某些进程无法显示。这可能是由于当前正在运行的其他应用程序(如带有 Android 插件的 IntelliJ)或来自不同通道(Beta 或 Canary)的 Android Studio 的另一个实例造成的。请关闭这些应用程序，以确保显示所有进程。如果没有正在运行的应用程序，请尝试断开/重新连接设备，并通过 `adb kill-server` 命令重新启动 adb 服务器。
debug.level.title=调试
default.activity.not.found.error=找不到默认 Activity
deployment.configurable.checkbox.apply.changes.fail=“应用更改”失败时自动执行“运行”(&A)
deployment.configurable.checkbox.apply.code.changes.fail=“应用更改”更改失败时自动执行“运行”(&P)
deployment.configurable.text.automatic.rerun.condition=<html>仅在使用“应用更改”时出现不兼容更改的情况下，启用这些选项才会触发应用程序的自动重新运行。<br/>在某些情况下，当“应用更改”或“应用代码更改”成功时，您可能需要手动重新启动应用程序以查看您的更改。<br/>例如，查看您在 Activity 的 onCreate() 方法中所做的更改。</html>
deployment.failed.no.certificates.explanation=由于 APK 未签署或签署不正确，安装失败。\n如果这是基于 Gradle 的项目，请确保在 Gradle 构建脚本中指定了签署配置。
deployment.failed.reason.devicedisconnected=安装失败，因为设备“{0}”已断开连接。
deployment.failed.reason.dexopt=该设备可能具有与当前版本不匹配的过时的 dex jar (dexopt 错误)
deployment.failed.reason.different.signature=该设备已经具有一个软件包相同但签名不同的应用程序
deployment.failed.reason.oldersdk=由于应用的 minSdkVersion 比设备的 API 级别({0})更新，安装失败。\n请更新您应用的 minSdkVersion。
deployment.failed.reason.version.downgrade=该设备已具有此应用程序的较新版本
deployment.failed.splitapk.nomatch=当前选择的变体“{0}”使用拆分 APK，但 {1} 个拆分 APK 均不与 ABI 为“{2}”的当前设备兼容。
deployment.failed.title=应用程序安装失败
deployment.failed.uninstall.prompt.androidthings.errortext=无法卸载以下软件包\:\n{0}
deployment.failed.uninstall.prompt.androidthings.text=您的 APK 和其他已安装的软件包的意图是 IOT_LAUNCHER。一次只能安装一个具有该意图的 APK。安装 APK 之前，请尝试卸载这些软件包。\n\n警告\: 卸载将移除应用程序数据\!\n\n是否要卸载以下应用程序?\n{0}
deployment.failed.uninstall.prompt.generic.text=安装失败，消息 {0}。\n可以通过卸载 APK 的现有版本(如果有)来解决此问题，然后重新安装。\n\n警告\: 卸载将移除应用程序数据\!\n\n是否要卸载现有的应用程序?
deployment.failed.uninstall.prompt.text=自 {0} 起安装失败。\n要继续，您必须卸载现有的应用程序。\n\n警告\: 卸载将移除应用程序数据\!\n\n是否要卸载现有的应用程序?
deployment.target.not.found=找不到目标设备。
directory.not.specified.error=未指定目录
do.not.ask.for.this.session=不再要求此会话
downloading.android.plugin.components=正在下载 Android 插件组件
element.cannot.resolve=无法解析类 {0}
error.file.download.failed=无法下载 ''{0}''\:\n{1}
error.level.title=错误
error.report.at.b.android=<html>提交反馈时出错\: {0}<br>考虑在 <a href\="https\://code.google.com/p/android/issues/list">Android 问题跟踪器</a>中创建问题</html>
error.report.to.google.action=报告给 Google(&R)
essentials.mode.group=基础模式
essentials.mode.notification.content=基础模式可以通过限制代码荧光笔和预览资源使用来提高性能。所有荧光笔都将在文件保存操作时运行。
essentials.mode.notification.ignore=ignore.essentials.mode.notification
essentials.mode.notification.title=基础模式已启用
essentials.mode.recommendation.content=切换到基础模式可能会提高 IDE 性能。在接收到文件保存操作之前，背景荧光笔和预览资源会受到限制。
essentials.mode.recommendation.title=是否试用基础模式?
exportable.AndroidFoldingSettings.presentable.name=Android 代码折叠
extract.dimension.intention.text=提取尺寸资源
feedback.notifications.title=感谢您的反馈\!
file.must.be.under.module.error=无法计算 {0} 的相对路径
file.name.not.specified.error=未指定文件名
gradle.default.jdk.name=默认 JDK
gradle.embedded.jdk.name=嵌入式 JDK
gradle.local.jdk.name=Gradle 本地 JDK
gradle.project.jdk.name=项目 JDK
gradle.settings.autoSync.behavior.default=始终自动同步项目(默认)
gradle.settings.autoSync.behavior.manual=根据提醒手动同步
gradle.settings.autoSync.dialog.continue=关闭
gradle.settings.autoSync.dialog.enable=自动同步此项目
gradle.settings.autoSync.dialog.message=使用 Gradle 的某些 {0} 功能需要同步，以便获取项目的最新信息。同步项目以确保获得最佳的 {0} 体验。您可以延后此会话的同步通知。
gradle.settings.autoSync.dialog.snooze=延后到明天
gradle.settings.autoSync.dialog.sync=立即同步
gradle.settings.autoSync.dialog.title=同步项目(推荐)
gradle.settings.autoSync.due.action.enableAutoSync=自动同步此项目
gradle.settings.autoSync.due.action.snooze=延后到明天
gradle.settings.autoSync.due.action.sync=立即同步
gradle.settings.autoSync.due.message=使用 Gradle 的某些 {0} 功能需要同步，以便获取项目的最新信息。同步项目以确保获得最佳的 {0} 体验。您可以延后此会话的同步通知。
gradle.settings.autoSync.settings.label=项目同步模式
gradle.settings.jdk.browse.button.tooltip.text=选择 JDK 主目录
gradle.settings.jdk.component.label.text=Gradle JDK\:
gradle.settings.jdk.default.component.label.text=默认 Gradle JDK\:
gradle.settings.jdk.default.override.path.hint=重写用于新创建项目的 Gradle 守护进程执行的默认 Gradle JDK 路径
gradle.settings.jdk.edit.path.hint=编辑 Gradle 守护进程(后台进程)使用的 JDK。<a href\="https\://developer.android.com/build/jdks\#jdk-config-in-studio">了解详情</a>
gradle.settings.jdk.invalid.path.error=指定的 Gradle JDK 路径不是有效的 JDK 主目录\:\n{0}
gradle.settings.jvm.criteria.default.component.label.text=默认 Gradle JVM 标准\:
group.Android.InstantRunActions.text=Instant Run
group.Android.MainToolbarRight.text=Android 主工具栏靠右
group.Internal.Android.text=Android
group.advanced.settings.project.view=项目视图
group.layout.files.title=布局文件
group.other.xml.resource.files.title=其他 XML 资源文件
group.value.resource.files.selectors.title=值资源文件和选择器
heap.dump.analysis.exception=堆转储分析时出错。有关详细信息，请参阅 idea.log。
heap.dump.analysis.notification.action.title=审阅报告
heap.dump.analysis.notification.ready.content=分析完成。
heap.dump.analysis.notification.submit.error.content=提交报告时出错。请参见 idea.log 了解详细信息。
heap.dump.analysis.notification.submitted.content=感谢您提交报告。
heap.dump.analysis.notification.title=内存使用报告
heap.dump.analysis.report.dialog.action.dont.send=不发送
heap.dump.analysis.report.dialog.action.send=发送
heap.dump.analysis.report.dialog.footer=提交此报告，即表明您允许 Google 根据 <a href\="http\://www.google.com/policies/privacy/">Google 的隐私政策</a>收集和处理此数据。
heap.dump.analysis.report.dialog.header=<html>{0} 检测到异常高的内存使用。<br>您可以将以下内存使用报告发送到 Google，帮助团队调查问题的根源。
heap.dump.analysis.report.dialog.title=内存使用报告
heap.dump.analysis.task.title=正在准备内存报告
heap.dump.snapshot.already.pending=内存报告已挂起。重启 {0} 以开始分析。
heap.dump.snapshot.created=已在 {0} 创建堆转储。下次您启动时 {1} 会对它进行分析。
heap.dump.snapshot.created.no.analysis=已在 {0} 创建堆转储。
heap.dump.snapshot.error.check.log=创建堆转储时出错。请检查 idea.log 了解详细信息。
heap.dump.snapshot.exception=创建堆转储时出错。有关详细信息，请参阅 idea.log。
heap.dump.snapshot.indicator.low.memory.text=检测到内存不足。正在捕获 {0} 堆转储
heap.dump.snapshot.indicator.text=正在捕获 {0} 堆转储
heap.dump.snapshot.no.space=空间不足，无法在 {0} 创建堆转储。堆转储所需的估计大小\: {1}MB，但只有 {2}MB 可用。
heap.dump.snapshot.restart.dialog.message=堆转储分析需要重启 {0}。要立即重启吗?
heap.dump.snapshot.restart.dialog.restart.later=稍后重启
heap.dump.snapshot.restart.dialog.restart.now=立即重启
heap.dump.snapshot.restart.dialog.title=确认重启
heap.dump.snapshot.task.title=正在捕获堆转储
heap.dump.snapshot.title=捕获堆转储
implement.parcelable.intention.text=添加 Parcelable 实现
info.level.title=信息
label.android.sdk.location=Android SDK 位置\:
label.below.are.the.available.sdk=<html>以下为可用的 SDK 开发者工具。安装后，IDE 将自动检查更新。选中“显示软件包详细信息”以显示 SDK 工具的可用版本。</html>
label.download.location=下载位置
label.each.android.sdk.platform.package=<html>每个 Android SDK 平台软件包默认都包含 Android 平台以及与 API 级别有关的源。安装后，Android Studio 将自动检查更新。选中“显示包详细信息”以显示各个 SDK 组件。</html>
label.loading.sources=正在加载源…
label.looking.for.updates=正在查找更新…
label.manager.for.the.android.sdk=IDE 使用的 Android SDK 和工具的管理器
label.sdk.location.must.be.set=必须设置 SDK 位置
label.these.are.the.sites=安装和更新 SDK 平台和工具时请参阅这些站点。
live.edit=Live Edit
live.edit.action.disable.title=禁用 Live Edit
live.edit.action.enable.title=启用 Live Edit
live.edit.advanced.settings.configurable.display.name=Live Edit 高级配置
live.edit.configurable.action.name=配置设置
live.edit.configurable.display.name=Compose Live Edit
live.edit.configurable.display.name.comment=即时反映在模拟器和实体设备上运行的 Android 应用的可组合函数中所做的代码更改的功能。对设备/模拟器的设置更改将需要重新运行应用程序。<a href\="https\://developer.android.com/studio/run\#live-edit">了解详情</a>。
live.edit.configurable.enable.allow.structural.redefinition=允许类结构重新定义(实验性)
live.edit.configurable.enable.allow.structural.redefinition.comment=在违反语言语义的情况下，允许对某些 UNSAFE 类进行结构上的重新定义。
live.edit.configurable.enable.debug.mode=启用调试模式
live.edit.configurable.enable.debug.mode.comment=启用 Live Edit 解释器跟踪并禁用 Houdini 异常清除
live.edit.configurable.enable.embedded.compiler=使用嵌入式编译器
live.edit.configurable.enable.inline.analysis=启用源内联分析
live.edit.configurable.enable.partial.recompose.comment=启用 @Composable 函数的 Live Edit 部分重组
live.edit.configurable.refresh.rate=刷新率(毫秒)
live.edit.configurable.refresh.rate.comment=调整 GUI 代码更改检测间隔
live.edit.disable.all=无
live.edit.disable.all.description=关闭 Live Edit。
live.edit.mode.automatic=自动推送编辑内容
live.edit.mode.manual.onkey=手动推送编辑内容 ({0})
live.edit.mode.manual.onsave=保存时手动推送编辑内容({0})
live.edit.tooltip.description=<html>将对代码中的 Composable 的更改立即应用到连接的模拟器或实体设备。
live.edit.tooltip.url.label=Live Edit 文档
live.literals=Compose 字面量的 Live Edit
live.literals.action.disable.title=禁用字面量的 Live Edit
live.literals.action.enable.title=启用字面量的 Live Edit
live.literals.action.show.problems.title=显示问题…
live.literals.configurable.display.name=Compose 字面量的 Live Edit
live.literals.configurable.select.live.literals=(已弃用)字面量的 Live Edit
live.literals.configurable.select.live.literals.comment=实时更新模拟器和实体设备中的 Composable 中使用的字面量。在启用字面量的 Live Edit 后需要构建，以便该功能正常运行。<a href\="https\://developer.android.com/jetpack/compose/tooling\#live-edit-literals">了解详情</a>。
live.literals.customize.appearance.title=自定义字面量装饰…
live.literals.highlight.toggle.description=在编辑器中切换字面量装饰
live.literals.highlight.toggle.hide.title=禁用字面量装饰
live.literals.highlight.toggle.show.title=启用字面量装饰
live.literals.highlight.toggle.title=切换字面量装饰
live.literals.is.disabled=字面量的 Live Edit\: 关
live.literals.is.enabled=字面量的 Live Edit\: 开
live.literals.problems.dialog.title=问题
live.literals.tooltip.description=<html>代码中某些字面量的更改将立即反映在模拟器中。<br/>使用此图标可以启用/禁用该功能，打开编辑器标记，并查看字面量的 Live Edit 状态。
live.literals.tooltip.url.label=字面量的 Live Edit 文档
low.memory.notification.content=IDE 内存不足，这可能会影响性能。请考虑增加堆大小。
low.memory.notification.title=内存不足
memory.settings.has.user.properties=<i>{0}</i> 中指定的用户 Gradle 属性由项目共享，并且优先于项目级别属性。要为守护进程指定项目级别的堆大小上限，请在用户级别属性中移除 <i>org.gradle.jvmargs</i> 设置，然后重新打开此面板。
memory.settings.ide.bottom.message=这是全局设置，适用于您使用 {0} 打开的所有项目。在对 IDE 堆大小的任何更改生效之前，您需要重启 IDE。
memory.settings.panel.daemon.info=这些设置仅应用于当前项目，并且更改仅会在重新构建项目(通过从菜单栏选择“构建”>“重新构建项目”)后生效。更改堆大小并重新构建项目后，您可能会发现具有旧设置的守护进程并需要将其手动停止。
memory.settings.panel.ide.info=根据可用内存和当前项目，建议 IDE 堆大小为 {0}。
memory.settings.panel.show.daemons.info=查找现有的 Gradle 守护进程
memory.settings.panel.top.message=对操作系统应为 {0} 个进程(如核心 IDE 或 Gradle 守护程序)分配的最大 RAM 大小进行配置。与分配过少内存类似，分配过多内存也可能会降低性能。
memory.settings.panel.use.recommended.values=使用建议值
memory.settings.postsync.configure=配置…
memory.settings.postsync.do.not.ask.for.project=此项目不再询问
memory.settings.postsync.do.not.show.again=不再显示
memory.settings.postsync.message=根据可用内存和项目大小，将堆大小上限从 {0}MB 增加到 {1}MB 可以优化 IDE 性能。
memory.settings.postsync.save=使用建议设置并重启
memory.settings.postsync.title={0} 的性能可以提高
memory.settings.restart.needed=内存设置已保存。为了使新设置生效，您需要重启 IDE。要立即重启吗?
new.file.dialog.text=输入一个新的文件名
new.resource.action.description=创建新的资源文件
new.resource.action.name=创建资源文件“{0}”
new.resource.action.title=Android 资源文件
new.resource.command.name=新建资源文件
new.resource.dialog.title=新建资源文件
new.resource.dir.action.name=创建资源目录“{0}”
new.resource.dir.action.title=Android 资源目录
new.resource.dir.command.name=新建资源目录
new.resource.dir.dialog.title=新建资源目录
new.sampledata.dir.action.description=创建新的示例数据目录
new.sampledata.dir.action.title=示例数据目录
new.typed.resource.action.description=创建一个新的 {0} 资源文件
new.typed.resource.action.title={0}资源文件
new.typed.resource.command.name=新建 {0} 资源文件
new.typed.resource.dialog.title=新建 {0} 资源文件
no.android.targets.error=在此 SDK 中找不到任何 Android 目标
no.facet.error=找不到 {0} 的 Android facet
no.jdk.for.android.found.error=找不到合适版本的 Java SDK。除 Android SDK 外，您还需要定义一个 JDK 1.5、1.6 或 1.7
no.provider.type.error=复杂功能数据源在清单中没有受支持的类型声明。
not.activity.subclass.error={0} 不是 Activity 子类或别名
not.resource.file.error=文件 {0} 不是资源文件
not.valid.activity.name.error=不是有效的 Activity 名称“{0}”
not.valid.package.name.error=不是有效的软件包名称“{0}”
package.name.must.contain.2.ids.error=软件包名称必须包含 2 个分段(例如 com.example)
package.not.found.error=清单文件中未指定软件包
progress.connecting.to.download.file.text=正在连接到 ''{0}''…
progress.download.file.text=正在从 ''{1}'' 下载 ''{0}''…
progress.downloading.0.files.text=正在下载 {0} {0, choice, 1\#文件|2\#文件}…
progress.text.collecting.feedback.information=正在收集反馈信息
progress.title.collecting.data=正在收集数据
project.gradle.catalog.settings.dsl=Android Studio 不支持 Gradle 设置 DSL 中定义的版本目录条目\: 请考虑在 TOML 文件中指定版本目录条目。
project.migrated.to.gradle.local.java.home.button=打开 Gradle JDK 设置
project.migrated.to.gradle.local.java.home.info=了解详情
project.migrated.to.gradle.local.java.home.info.url=https\://d.android.com/r/studio-ui/jdk-macro
project.migrated.to.gradle.local.java.home.message=''{0}'' 项目 JDK 配置现在通过 \#GRADLE_LOCAL_JAVA_HOME 宏进行设置。这简化了 JDK 配置体验并使其更加可靠。您可以在 Gradle JDK 设置中更改此设置。
project.migrated.to.gradle.local.java.home.title=Gradle JDK 配置已移动
project.sync.exception.environment.variable.java.home.invalid=为环境变量 JAVA_HOME 选择的路径({0})包含无效或损坏的 JDK。
project.sync.exception.environment.variable.java.home.undefined=使用 gradleJvm \#JAVA_HOME 宏时未定义环境变量 JAVA_HOME。
project.sync.exception.environment.variable.studio.gradle.jdk.invalid=为环境变量 STUDIO_GRADLE_JDK 选择的路径({0})包含无效或损坏的 JDK。
project.sync.exception.environment.variable.studio.gradle.jdk.undefined=使用 gradleJvm STUDIO_GRADLE_JDK 时未定义环境变量 STUDIO_GRADLE_JDK。
project.sync.exception.gradle.local.java.home.invalid=在 .gradle/config.properties 文件的 java.home 下选择的路径({0})包含无效或损坏的 JDK。
project.sync.exception.gradle.local.java.home.undefined=使用 gradleJvm \#GRADLE_LOCAL_JAVA_HOME 宏时，项目 gradle/config.properties 文件中未定义 java.home。
project.sync.exception.gradle.project.jdk.invalid=Gradle JVM 被配置为 \#USE_PROJECT_JDK，但 Project JDK 无效或未定义。
project.sync.exception.gradle.properties.java.home.invalid=在 gradle.properties 文件下选择的路径({0})包含无效或损坏的 JDK。
project.sync.exception.gradle.properties.java.home.undefined=使用 gradleJvm \#GRADLE_JAVA_HOME 宏时，gradle.properties 文件中未定义 org.gradle.java.home。
project.sync.exception.gradlejvm.table.entry.java.home.invalid=为 Android Studio 的配置文件夹中名为 {1} 的 jdk.table.xml 条目选择的路径({0})包含无效或损坏的 JDK。
project.sync.exception.gradlejvm.table.entry.java.home.undefined=Android Studio 配置文件夹中名为 {0} 的 jdk.table.xml 条目的 javaHome 元素未定义。
project.sync.exception.gradlejvm.table.entry.undefined=Android Studio 的配置文件夹中名为 {0} 的 jdk.table.xml 条目未定义。
project.sync.jdk.recovery.message=为了解决该问题，已将其更改为使用 {0} ({1})。
project.sync.unsupported.modules.detected.button=移除不支持的模块并重新同步
project.sync.unsupported.modules.detected.message=不支持编译以下模块\: {0}。<br/><br/>很遗憾，您不能在一个项目中同时拥有非 Gradle Java 模块和 Android-Gradle 模块。如果您并非有意添加，请考虑通过选择下面的选项将其移除<br/>
project.sync.unsupported.modules.detected.title=检测到不支持的模块
project.sync.warning.multiple.gradle.daemons.message=<html>可能会产生多个 Gradle 守护进程，因为 Gradle JDK 和 JAVA_HOME 的位置不同。<br>项目 ''{0}'' 在运行 Gradle 时使用以下 JDK 位置\:<br>''{1}''<br>系统环境变量 JAVA_HOME 为\:<br>''{2}''<br>如果您不需要使用不同的路径(或者如果 JAVA_HOME 未定义)，则可以通过将 JAVA_HOME 和 JDK 位置设置为相同的路径来避免产生多个守护进程。
project.sync.warning.multiple.gradle.daemons.url=https\://docs.gradle.org/current/userguide/gradle_daemon.html\#sec\:why_is_there_more_than_one_daemon_process_on_my_machine
project.upgrade.addBuildTypeFirebaseCrashlyticsUsageInfo.tooltipText=为发布 buildType 启用原生符号上传
project.upgrade.addFirebaseCrashlyticsClasspathDependencyUsageInfo.tooltipText=添加对 Firebase Crashlytics Gradle 插件的依赖
project.upgrade.addFirebaseCrashlyticsNdkUsageInfo.tooltipText=添加 Firebase Crashlytics NDK 依赖关系
project.upgrade.addFirebaseCrashlyticsSdkUsageInfo.tooltipText=添加对 Firebase Crashlytics SDK 的依赖
project.upgrade.addGoogleAnalyticsSdkUsageInfo.tooltipText=添加对 Google Analytics SDK 的依赖
project.upgrade.addGoogleMavenRepositoryUsageInfo.tooltipText=添加 Google Maven 仓库
project.upgrade.addGoogleServicesClasspathDependencyUsageInfo.tooltipText=添加对 Google Services Gradle 插件的依赖
project.upgrade.agpUpgradeRefactoringProcessor.commandName=将 AGP 版本从 {0} 升级到 {1}
project.upgrade.agpUpgradeRefactoringProcessor.usageView.header=AGP 升级助手
project.upgrade.agpVersionRefactoringProcessor.commandName=将 AGP 依赖项从 {0} 升级到 {1}
project.upgrade.agpVersionRefactoringProcessor.target.presentableText=正在升级 AGP 配置
project.upgrade.agpVersionRefactoringProcessor.usageType=更新版本字符串
project.upgrade.agpVersionRefactoringProcessor.usageView.header=将 AGP 版本从 {0} 升级到 {1}
project.upgrade.agpVersionUsageInfo.tooltipText=将 AGP 版本从 {0} 更新到 {1}
project.upgrade.aidlBuildFeature.enable.tooltipText=在此模块中启用 aidl
project.upgrade.aidlDefaultRefactoringProcessor.commandName=在需要的地方显式启用 aidl
project.upgrade.aidlDefaultRefactoringProcessor.enable.usageType=插入 aidl 指令
project.upgrade.aidlDefaultRefactoringProcessor.usageView.header=显式启用 aidl 构建功能
project.upgrade.androidManifestExtractNativeLibsToUseLegacyPackagingRefactoringProcessor.addUseLegacyPackaging.tooltipText=添加 useLegacyPackaging 声明
project.upgrade.androidManifestExtractNativeLibsToUseLegacyPackagingRefactoringProcessor.addUseLegacyPackaging.usageType=添加 useLegacyPackaging 声明
project.upgrade.androidManifestExtractNativeLibsToUseLegacyPackagingRefactoringProcessor.commandName=将 extractNativeLibs 从 Android 清单移动到构建文件
project.upgrade.androidManifestExtractNativeLibsToUseLegacyPackagingRefactoringProcessor.removeExtractNativeLibs.tooltipText=移除 extractNativeLibs 声明
project.upgrade.androidManifestExtractNativeLibsToUseLegacyPackagingRefactoringProcessor.removeExtractNativeLibs.usageType=移除 extractNativeLibs 声明
project.upgrade.androidManifestExtractNativeLibsToUseLegacyPackagingRefactoringProcessor.usageView.header=将 extractNativeLibs 从 Android 清单移动到构建文件
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.addNamespace.tooltipText=添加命名空间声明
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.addNamespace.usageType=添加命名空间声明
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.addTestNamespace.tooltipText=添加 testNamespace 声明
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.addTestNamespace.usageType=添加 testNamespace 声明
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.commandName=将软件包从 Android 清单移至构建文件
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.removePackage.tooltipText=移除软件包声明
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.removePackage.usageType=移除软件包声明
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.usageView.header=将软件包从 Android 清单移至构建文件
project.upgrade.androidManifestUseEmbeddedDexToUseLegacyPackagingRefactoringProcessor.addUseLegacyPackaging.tooltipText=添加 useLegacyPackaging 声明
project.upgrade.androidManifestUseEmbeddedDexToUseLegacyPackagingRefactoringProcessor.addUseLegacyPackaging.usageType=添加 useLegacyPackaging 声明
project.upgrade.androidManifestUseEmbeddedDexToUseLegacyPackagingRefactoringProcessor.commandName=将 Android 清单中的 useEmbeddedDex 包含到构建文件中
project.upgrade.androidManifestUseEmbeddedDexToUseLegacyPackagingRefactoringProcessor.usageView.header=将 Android 清单中的 useEmbeddedDex 包含到构建文件中
project.upgrade.androidResourcesUsageInfo.move.tooltipText=将用法从 aaptOptions 移至 androidResources
project.upgrade.androidResourcesUsageInfo.remove.tooltipText=移除 aaptOptions
project.upgrade.applyGoogleServicesPluginUsageInfo.tooltipText=应用 Google Services 插件
project.upgrade.buildConfigBuildFeature.enable.tooltipText=保留现有的 buildConfig 行为
project.upgrade.buildConfigDefaultRefactoringProcessor.commandName=启用 buildConfig 构建功能
project.upgrade.buildConfigDefaultRefactoringProcessor.enable.usageType=保留现有的 buildConfig 行为
project.upgrade.buildConfigDefaultRefactoringProcessor.usageView.header=启用 buildConfig 构建功能
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.changeDependencyConfigurationUsageType=更改依赖关系配置
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.commandName=替换弃用的配置
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.renameConfigurationUsageType=重命名配置
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.usageView.header=替换弃用的配置
project.upgrade.dataBindingEnabledUsageInfo.tooltipText=将启用的 dataBinding 迁移到 buildFeatures
project.upgrade.deprecated.notification.body=Android Studio 的未来版本将不支持 Android Gradle 插件版本 {0}。启动 AGP 升级助手，将此项目的 AGP 版本更新到至少 {1}。
project.upgrade.deprecated.notification.title=强烈建议进行项目更新
project.upgrade.deprecatedOperatorUsageInfo.rewrite.tooltipText=重写用法
project.upgrade.emulatorSnapshotsUsageInfo.move.tooltipText=将用法从 failureRetention 移至 emulatorSnapshots
project.upgrade.emulatorSnapshotsUsageInfo.remove.tooltipText=移除 failureRetention
project.upgrade.excludeLibraryConstraintsDefaultRefactoringProcessor.commandName=禁用库的依赖项约束
project.upgrade.excludeLibraryConstraintsDefaultRefactoringProcessor.shortDescription=`android.dependency.excludeLibraryComponentsFromConstraints` 的默认值即将更改，这意味着 Android Gradle 插件将不再为 Android 库对齐运行时和编译类路径。这有望提升性能。升级后，您可以从 gradle.properties 中移除该属性，以切换到改进后的行为。
project.upgrade.excludeLibraryConstraintsDefaultRefactoringProcessor.tooltipText=添加 excludeLibraryComponentsFromConstraints 属性
project.upgrade.excludeLibraryConstraintsDefaultRefactoringProcessor.usage=库的依赖项约束
project.upgrade.excludeLibraryConstraintsDefaultRefactoringProcessor.usageView.header=禁用库的依赖项约束
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsClasspathUsageType=添加对 Firebase Crashlytics Gradle 插件的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsNativeSymbolUploadUsageType=为发布 buildType 启用原生符号上传
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsNdkUsageType=添加 Firebase Crashlytics NDK 依赖关系
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsSdkUsageType=添加对 Firebase Crashlytics SDK 的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.addGmavenRepositoryUsageType=添加 Google Maven 仓库
project.upgrade.fabricCrashlyticsRefactoringProcessor.addGoogleAnalyticsSdkUsageType=添加对 Google Analytics SDK 的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.addGoogleServicesClasspathUsageType=添加对 Google Services Gradle 插件的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.applyGoogleServicesPluginUsageType=应用 Google Services 插件
project.upgrade.fabricCrashlyticsRefactoringProcessor.commandName=将 crashlytics 从 fabric 迁移到 firebase
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeCrashlyticsEnableNdkUsageType=移除 enableNdk crashlytics 标志
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricClasspathUsageType=移除对 Fabric Gradle 插件的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricCrashlyticsSdkUsageType=移除对 Fabric SDK 的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricNdkUsageType=移除 Fabric NDK 依赖关系
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricRepositoryUsageType=移除 Fabric Maven 仓库
project.upgrade.fabricCrashlyticsRefactoringProcessor.replaceFabricPluginUsageType=将 Fabric 插件替换为 Firebase Crashlytics 插件
project.upgrade.fabricCrashlyticsRefactoringProcessor.usageView.header=将 crashlytics 从 fabric 迁移到 firebase
project.upgrade.gMavenRepositoryRefactoringProcessor.commandName=将 google() GMaven 添加到 buildscript 仓库
project.upgrade.gMavenRepositoryRefactoringProcessor.usageType=添加 GMaven 声明
project.upgrade.gMavenRepositoryRefactoringProcessor.usageView.header=将 google() GMaven 添加到 buildscript 仓库
project.upgrade.gradleDaemonJvmCriteria.commandName=将 Daemon JVM 标准升级至 {0} 版本
project.upgrade.gradleDaemonJvmCriteria.enable.usageType=将 Daemon JVM 标准升级至 {0} 版本
project.upgrade.gradleDaemonJvmCriteria.shortDescription=新版 Android Gradle 插件所需的 JDK 版本高于该项目当前配置的版本。\n请将项目 Gradle Daemon JVM 标准更新为推荐的版本 {0}。
project.upgrade.gradleDaemonJvmCriteria.usageView.header=将 Daemon JVM 标准升级至 {0} 版本
project.upgrade.gradlePluginsRefactoringProcessor.commandName=升级 Gradle 插件
project.upgrade.gradlePluginsRefactoringProcessor.usageView.header=升级 Gradle 插件
project.upgrade.gradlePluginsRefactoringProcessor.wellKnownGradlePluginUsageType=更新 Gradle 插件版本
project.upgrade.gradleVersionRefactoringProcessor.commandName=将 Gradle 版本升级到 {0}
project.upgrade.gradleVersionRefactoringProcessor.gradleUrlUsageType=更新 Gradle 分发 URL
project.upgrade.gradleVersionRefactoringProcessor.usageView.header=将 Gradle 版本升级到 {0}
project.upgrade.gradleVersionUsageInfo.tooltipText=将 Gradle 版本升级到 {0}
project.upgrade.installationUsageInfo.move.tooltipText=将用法从 adbOptions 移至安装
project.upgrade.installationUsageInfo.remove.tooltipText=移除 adbOptions
project.upgrade.java8DefaultRefactoringProcessor.acceptNewUsageType=接受新默认值(保持不变)
project.upgrade.java8DefaultRefactoringProcessor.commandName=更新默认 Java 语言级别
project.upgrade.java8DefaultRefactoringProcessor.existingDirectiveUsageType=现有语言级别指令(保持不变)
project.upgrade.java8DefaultRefactoringProcessor.groupingName=添加指令以继续使用 Java 7
project.upgrade.java8DefaultRefactoringProcessor.insertOldUsageType=继续使用 Java 7 (插入语言级别指令)
project.upgrade.java8DefaultRefactoringProcessor.usageView.header=更新默认 Java 语言级别
project.upgrade.javaLanguageLevelUsageInfo.tooltipText.acceptNewDefault=接受新默认值
project.upgrade.javaLanguageLevelUsageInfo.tooltipText.existing=保留现有显式 {0}
project.upgrade.javaLanguageLevelUsageInfo.tooltipText.insertOldDefault=插入显式 {0} 以保留以前的行为
project.upgrade.kotlinLanguageLevelUsageInfo.tooltipText.acceptNewDefault=接受新默认值
project.upgrade.kotlinLanguageLevelUsageInfo.tooltipText.existing=保留现有显式 {0}
project.upgrade.kotlinLanguageLevelUsageInfo.tooltipText.insertOldDefault=插入显式 {0} 以保留以前的行为
project.upgrade.lintOptionsUsageInfo.move.tooltipText=将用法从 lintOptions 迁移到 lint
project.upgrade.lintOptionsUsageInfo.remove.tooltipText=移除 lintOptions
project.upgrade.lintVersionUsageInfo.tooltipText=将 Android Lint 版本从 {0} 更新至 {1}
project.upgrade.migratePackagingOptionsRefactoringProcessor.commandName=将 packagingOptions DSL 属性迁移到子块
project.upgrade.migratePackagingOptionsRefactoringProcessor.move.tooltipText=移动属性
project.upgrade.migratePackagingOptionsRefactoringProcessor.move.usageType=移动属性
project.upgrade.migratePackagingOptionsRefactoringProcessor.remove.tooltipText=移除属性(拆分后)
project.upgrade.migratePackagingOptionsRefactoringProcessor.remove.usageType=移除属性(拆分后)
project.upgrade.migratePackagingOptionsRefactoringProcessor.split.tooltipText=拆分 jniLibs 和资源之间的属性
project.upgrade.migratePackagingOptionsRefactoringProcessor.split.usageType=拆分 jniLibs 和资源之间的属性
project.upgrade.migratePackagingOptionsRefactoringProcessor.usageView.header=将 packagingOptions 迁移到子块
project.upgrade.migrateTestCoverageEnabledRefactoringProcessor.commandName=将 testCoverageEnabled 迁移至 enableUnitTestCoverage 和 enableAndroidTestCoverage
project.upgrade.migrateTestCoverageEnabledRefactoringProcessor.move.tooltipText=将用法从 testCoverageEnabled 移至 enableUnitTestCoverage 和 enableAndroidTestCoverage
project.upgrade.migrateTestCoverageEnabledRefactoringProcessor.move.usageType=将 testCoverageEnabled 迁移至 enableUnitTestCoverage 和 enableAndroidTestCoverage
project.upgrade.migrateTestCoverageEnabledRefactoringProcessor.usageView.header=将 testCoverageEnabled 迁移至 enableUnitTestCoverage 和 enableAndroidTestCoverage
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.commandName=将 DSL 属性从 aaptOptions 迁移到 androidResources
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.move.usageType=将属性迁移到 androidResources
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.remove.usageType=移除 aaptOptions
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.usageView.header=从 aaptOptions 迁移到 androidResources
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.commandName=将启用的 booleans 迁移到 buildFeatures
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.dataBindingEnabledUsageType=将启用的 dataBinding 迁移到 buildFeatures
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.usageView.header=将启用的 booleans 迁移到 buildFeatures
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.viewBindingEnabledUsageType=将启用的 viewBinding 迁移到 buildFeatures
project.upgrade.migrateToEmulatorSnapshotsRefactoringProcessor.commandName=将 DSL 属性从 failureRetention 迁移到 emulatorSnapshots
project.upgrade.migrateToEmulatorSnapshotsRefactoringProcessor.move.usageType=将属性迁移到 emulatorSnapshots
project.upgrade.migrateToEmulatorSnapshotsRefactoringProcessor.remove.usageType=移除 failureRetention
project.upgrade.migrateToEmulatorSnapshotsRefactoringProcessor.usageView.header=从 failureRetention 迁移到 emulatorSnapshots
project.upgrade.migrateToInstallationRefactoringProcessor.commandName=将 DSL 属性从 adbOptions 迁移到安装
project.upgrade.migrateToInstallationRefactoringProcessor.move.usageType=将属性迁移到安装
project.upgrade.migrateToInstallationRefactoringProcessor.remove.usageType=移除 adbOptions
project.upgrade.migrateToInstallationRefactoringProcessor.usageView.header=从 adbOptions 迁移到安装
project.upgrade.migrateToLintRefactoringProcessor.commandName=将 DSL 属性从 lintOptions 迁移到 lint
project.upgrade.migrateToLintRefactoringProcessor.move.usageType=将属性迁移到 lint
project.upgrade.migrateToLintRefactoringProcessor.remove.usageType=移除 lintOptions
project.upgrade.migrateToLintRefactoringProcessor.usageView.header=从 lintOptions 迁移到 lint
project.upgrade.migrateToTestCoverageRefactoringProcessor.commandName=将 DSL 属性从 jacoco 迁移到 testCoverage
project.upgrade.migrateToTestCoverageRefactoringProcessor.move.usageType=将属性迁移到 testCoverage
project.upgrade.migrateToTestCoverageRefactoringProcessor.remove.usageType=移除 jacoco
project.upgrade.migrateToTestCoverageRefactoringProcessor.usageView.header=从 jacoco 迁移到 testCoverage
project.upgrade.noLanguageLevelAction.acceptNewDefault=接受 Java 8 的新默认值
project.upgrade.noLanguageLevelAction.insertOldDefault=插入指令以继续使用 Java 7
project.upgrade.noPropertyPresentAction.acceptNewDefault=接受完整模式下的新 R8 默认设置
project.upgrade.noPropertyPresentAction.insertOldDefault=插入属性以在兼容性模式下继续使用 R8
project.upgrade.nonConstantRClassDefaultRefactoringProcessor.commandName=保留常量 R 类值
project.upgrade.nonConstantRClassDefaultRefactoringProcessor.usageType=插入 android.nonFinalRClass 属性以保留现有行为
project.upgrade.nonConstantRClassDefaultRefactoringProcessor.usageView.header=保留常量 R 类值
project.upgrade.nonConstantRClassUsageInfo.tooltipText=插入 android.nonFinalRClass 属性以保留现有行为
project.upgrade.nonTransitiveRClassDefaultRefactoringProcessor.commandName=保留可传递 R 类
project.upgrade.nonTransitiveRClassDefaultRefactoringProcessor.usageType=插入 android.nonTransitiveRClass 属性以保留现有行为
project.upgrade.nonTransitiveRClassDefaultRefactoringProcessor.usageView.header=保留可传递 R 类
project.upgrade.nonTransitiveRClassUsageInfo.tooltipText=插入 android.nonTransitiveRClass 属性以保留现有行为
project.upgrade.notification.body=Android Gradle 插件版本 {0} 有可用的升级。启动 AGP 升级助手以更新此项目的 AGP 版本。
project.upgrade.notification.title=建议进行项目更新
project.upgrade.notifyCancelledUpgrade.body=启动 AGP 升级助手以继续升级。
project.upgrade.notifyCancelledUpgrade.title=已取消 Android Gradle 插件升级
project.upgrade.obsoleteConfigurationConfigurationUsageInfo.tooltipText=将配置从 {0} 重命名为 {1}
project.upgrade.obsoleteConfigurationDependencyUsageInfo.tooltipText=将配置从 {0} 更新到 {1}
project.upgrade.projectJdkRefactoringProcessor.commandName=升级项目 JDK 以运行 Gradle
project.upgrade.projectJdkRefactoringProcessor.enable.usageType=升级项目 JDK
project.upgrade.projectJdkRefactoringProcessor.usageView.header=升级项目 JDK 以运行 Gradle
project.upgrade.projectJdkUsageInfo.tooltipText=设置项目 JDK
project.upgrade.r8FullModeDefaultRefactoringProcessor.acceptNewUsageType=接受新的默认 R8 模式(保持不变)
project.upgrade.r8FullModeDefaultRefactoringProcessor.commandName=更新默认 R8 处理模式
project.upgrade.r8FullModeDefaultRefactoringProcessor.existingDirectiveUsageType=现有的 fullMode 属性(保持不变)
project.upgrade.r8FullModeDefaultRefactoringProcessor.groupingName=添加属性以在兼容性模式下继续使用 R8
project.upgrade.r8FullModeDefaultRefactoringProcessor.insertOldUsageType=继续在兼容性模式下使用 R8 (插入属性)
project.upgrade.r8FullModeDefaultRefactoringProcessor.usageView.header=更新默认 R8 处理模式
project.upgrade.r8FullModeDefaultUsageInfo.tooltipText.acceptNewDefault=接受新默认值
project.upgrade.r8FullModeDefaultUsageInfo.tooltipText.existing=保留现有显式属性
project.upgrade.r8FullModeDefaultUsageInfo.tooltipText.insertOldDefault=插入属性以保留以前的行为
project.upgrade.redundantProperties.tooltipText=移除属性
project.upgrade.redundantProperties.usageType=移除属性
project.upgrade.redundantPropertiesRefactoringProcessor.commandName=移除冗余属性
project.upgrade.redundantPropertiesRefactoringProcessor.usageView.header=移除冗余属性
project.upgrade.references.text=考虑的参考
project.upgrade.removeBuildTypeUseProguard.tooltipText=移除 useProguard 设置
project.upgrade.removeBuildTypeUseProguard.usageType=移除 useProguard 设置
project.upgrade.removeBuildTypeUseProguardRefactoringProcessor.commandName=移除 buildType useProguard 设置
project.upgrade.removeBuildTypeUseProguardRefactoringProcessor.usageView.header=移除 buildType useProguard 设置
project.upgrade.removeCrashlyticsEnableNdkUsageInfo.tooltipText=移除 enableNdk crashlytics 标志
project.upgrade.removeFabricClasspathDependencyUsageInfo.tooltipText=移除对 Fabric Gradle 插件的依赖
project.upgrade.removeFabricCrashlyticsSdkUsageInfo.tooltipText=移除对 Fabric SDK 的依赖
project.upgrade.removeFabricMavenRepositoryUsageInfo.tooltipText=移除 Fabric Maven 仓库
project.upgrade.removeFabricNdkUsageInfo.tooltipText=移除 Fabric NDK 依赖关系
project.upgrade.removeImplementationPropertiesRefactoringProcessor.commandName=移除忽略的配置属性
project.upgrade.removeImplementationPropertiesRefactoringProcessor.usageView.header=移除忽略的配置属性
project.upgrade.removeImplementationProperty.tooltipText=移除属性
project.upgrade.removeImplementationProperty.usageType=移除属性
project.upgrade.removeSourceSetJniRefactoringProcessor.commandName=从 sourceSets 中移除 jni 资源目录
project.upgrade.removeSourceSetJniRefactoringProcessor.usageView.header=从 sourceSets 中移除 jni 资源目录
project.upgrade.renderScriptBuildFeature.enable.tooltipText=在此模块中启用 renderScript
project.upgrade.renderScriptDefaultRefactoringProcessor.commandName=在需要的地方显式启用 renderScript
project.upgrade.renderScriptDefaultRefactoringProcessor.enable.usageType=插入 renderScript 指令
project.upgrade.renderScriptDefaultRefactoringProcessor.usageView.header=显式启用 renderScript 构建功能
project.upgrade.replaceFabricPluginUsageInfo.tooltipText=将 Fabric 插件替换为 Firebase Crashlytics 插件
project.upgrade.repositoriesNoGMavenUsageInfo.tooltipText=将 google() 添加到 buildscript 仓库
project.upgrade.resValuesBuildFeature.enable.tooltipText=保留现有的 resValues 行为
project.upgrade.resValuesDefaultRefactoringProcessor.commandName=启用 resValues 构建功能
project.upgrade.resValuesDefaultRefactoringProcessor.enable.usageType=保留现有的 resValues 行为
project.upgrade.resValuesDefaultRefactoringProcessor.usageView.header=启用 resValues 构建功能
project.upgrade.rewriteDeprecatedOperatorsRefactoringProcessor.commandName=重写已弃用的运算符
project.upgrade.rewriteDeprecatedOperatorsRefactoringProcessor.rewrite.usageType=重写用法
project.upgrade.rewriteDeprecatedOperatorsRefactoringProcessor.usageView.header=重写已弃用的运算符
project.upgrade.shadersBuildFeature.enable.tooltipText=在此模块中启用着色器文件夹的编译
project.upgrade.shadersDefaultRefactoringProcessor.commandName=需要时明确启用着色器文件夹的编译
project.upgrade.shadersDefaultRefactoringProcessor.enable.usageType=插入着色器指令
project.upgrade.shadersDefaultRefactoringProcessor.usageView.header=明确启用着色器文件夹的编译
project.upgrade.sourceSetJniUsageInfo.tooltipText=从 sourceSet 移除 jni
project.upgrade.sourceSetJniUsageInfo.usageType=从 sourceSet 移除 jni
project.upgrade.studio.notification.body.different.channel.recommendation=您的项目配置了此版本的 Android Studio ({0})不支持的编译 SDK 版本。我们建议安装 {1} 或更高版本以处理此项目。您也可以使用<a href\="https\://developer.android.com/studio/preview/install-preview\#install_alongside_your_stable_version">以下指南</a>在当前版本的基础上安装其他版本的 Android Studio。
project.upgrade.studio.notification.body.no.recommendation=您的项目配置了此版本的 Android Studio ({0})不支持的编译 SDK 版本。目前，没有任何版本的 Android Studio 支持此编译 SDK。在处理此项目时，您可能会遇到问题。如果遇到问题，请通过选择<b>帮助 > 提交 bug 报告…</b> 提交 bug。
project.upgrade.studio.notification.body.same.channel.recommendation=您的项目配置了此版本的 Android Studio ({0})不支持的编译 SDK 版本。您可以升级到 {1} 或更高版本，以获得对此项目更好的 IDE 支持。<br/><br/>请记住，更新流程会将您转到 Android Studio 的最新版本。如果该版本比您的当前版本高出好几个版本，它可能不再支持您的项目使用的某些组件或 API。
project.upgrade.studio.notification.no.recommendation.title=Android Studio 不支持指定的 Android API 级别
project.upgrade.studio.notification.title=建议升级 Android Studio
project.upgrade.targetSdkDefaultsToCompileSdk.commandName=禁用“targetSdk 默认为 compileSdk”
project.upgrade.targetSdkDefaultsToCompileSdk.enable.usageType=保留现有的 targetSdk 默认值
project.upgrade.targetSdkDefaultsToCompileSdk.shortDescription=targetSdk 的默认值即将更改，这意味着现在将默认启用“targetSdk 默认为 compileSdk”。此处理器添加了一个标志来保留之前的行为(默认为 minSdk)。
project.upgrade.targetSdkDefaultsToCompileSdk.tooltipText=保留现有的 targetSdk 默认值
project.upgrade.targetSdkDefaultsToCompileSdk.usageView.header=禁用“targetSdk 默认为 compileSdk”
project.upgrade.testCoverageUsageInfo.move.tooltipText=将用法从 jacoco 移至 testCoverage
project.upgrade.testCoverageUsageInfo.remove.tooltipText=移除 jacoco
project.upgrade.usageView.doAction=完成升级(&U)
project.upgrade.usageView.need.reRun=无法执行升级。\n找到用法后代码有更改。\n请再次执行用法搜索。
project.upgrade.usageView.tabText=更新用法
project.upgrade.useAndroidXDefaultRefactoringProcessor.commandName=禁用 AndroidX 库的用法
project.upgrade.useAndroidXDefaultRefactoringProcessor.enable.usageType=保留现有的 AndroidX 行为
project.upgrade.useAndroidXDefaultRefactoringProcessor.shortDescription=useAndroidX 的默认值即将更改，这意味着 AndroidX 库现在将默认可用。此处理器添加了一个标志来保留之前的行为(不使用 AndroidX)。
project.upgrade.useAndroidXDefaultRefactoringProcessor.tooltipText=保留现有的 AndroidX 行为
project.upgrade.useAndroidXDefaultRefactoringProcessor.usageView.header=禁用 AndroidX 库的用法
project.upgrade.useR8OptimizedResourceShrinking.commandName=禁用 R8 优化资源缩减
project.upgrade.useR8OptimizedResourceShrinking.enable.usageType=保留现有的 R8 优化资源缩减行为
project.upgrade.useR8OptimizedResourceShrinking.shortDescription=R8 优化资源缩减的默认值正在更改，这意味着 R8 优化资源缩减现在将默认启用。此处理器添加了一个标志以保留先前的行为(不使用 R8 优化资源缩减)。
project.upgrade.useR8OptimizedResourceShrinking.tooltipText=保留现有的 R8 优化资源缩减行为
project.upgrade.useR8OptimizedResourceShrinking.usageView.header=禁用 R8 优化资源缩减
project.upgrade.useR8StrictModeForKeepRules.commandName=禁用“针对 Keep 规则的 R8 严格模式”
project.upgrade.useR8StrictModeForKeepRules.enable.usageType=保留现有“针对 Keep 规则的 R8 严格模式”行为
project.upgrade.useR8StrictModeForKeepRules.shortDescription=“针对 Keep 规则的 R8 严格模式”的默认值正在更改，这意味着现在将默认启用 R8 严格模式。此处理器添加了一个标志以保留之前的行为(不使用“针对 Keep 规则的 R8 严格模式”)。
project.upgrade.useR8StrictModeForKeepRules.tooltipText=保留现有“针对 Keep 规则的 R8 严格模式”行为
project.upgrade.useR8StrictModeForKeepRules.usageView.header=禁用“针对 Keep 规则的 R8 严格模式”
project.upgrade.viewBindingEnabledUsageInfo.tooltipText=将启用的 viewBinding 迁移到 buildFeatures
provider.module.not.chosen=未选择模块。
provider.slots.empty.error=没有添加复杂功能槽位。
provider.type.empty=没有为槽位“{0}”指定类型。
provider.type.invalid.error=复杂功能数据源类型“{0}”不存在。
provider.type.manifest.not.available=清单信息目前不可用。
provider.type.mismatch.error=复杂功能数据源无法提供类型 {0}。
quick.fixes.family=Android 快速修复
redo.parcelable.intention.text=替换 Parcelable 实现
remove.parcelable.intention.text=移除 Parcelable 实现
resource.explorer.copy.value.description=将资源值复制到剪贴板
resource.explorer.copy.value.title=复制值
resource.manager.collapse.section=收起
resource.manager.expand.section=展开
root.element.not.specified.error=未指定根元素
run.error.apk.not.signed=当前所选变体的 APK 无法签名。请为此变体({0})指定签名配置。
run.error.apk.not.valid=当前项目无法运行
select.platform.error=请选择 Android SDK
select.target.dialog.text=请选择 Android 目标
specific.activity.not.launchable.error=Activity 必须导出或包含 intent-filter
specify.package.name.error=必须指定软件包名称
sys.health.send.feedback=发送反馈
sys.health.too.many.exceptions=已检测到大量内部异常。这表明 IDE 存在严重问题。请考虑重新安装 Android Studio。如果问题仍然存在，请通过以下链接报告错误。
tab.name.sdk.platforms=SDK 平台
tab.name.sdk.tools=SDK 工具
tab.name.sdk.update.sites=SDK 更新站点
title.cannot.open.file=无法打开文件 {0}
tooltip.disabling.sdk.diff.patching=禁用 SDK 差异修补可能会增大 SDK 软件包下载体积，但是将提升下载后包的安装速度。如果在您的计算机上安装本地补丁将花费大量时间，但您具有无流量限制的快速网络连接，这样选择较为实用。SDK 差异修补默认启用，并且是高端硬件的首选安装方法。
unsupported.jvm.dragndrop.message=在受拖放问题(1.8.0_60 至 1.8.0_76)影响的 JDK8 版本上运行。请参见 <a href\="https\://youtrack.jetbrains.com/issue/IDEA-146691">IDEA-146691</a> 了解详细信息，并考虑使用问题范围之外的 JDK。
unsupported.jvm.openjdk.message=OpenJDK 表现出间歇性的性能和 UI 问题。我们建议使用 Oracle JRE/JDK。
unsupported.mac.intelonarm.message=Android Studio 运行在 Rosetta 2 下，这可能会影响性能。我们推荐使用官方 Apple 芯片(arm64)版本。
updates.settings.channel.locked=
verbose.level.title=详细
virus.scanning.dont.show.again=不再显示
virus.scanning.dont.show.again.this.project=不再为此项目显示
virus.scanning.warn.message=防病毒程序可能会影响构建性能。{0} 检查了以下目录\: {1}
warning.level.title=警告
wearos.complication.no.type.supported=此槽位不支持任何类型
wearos.complication.progress.updating.slots=正在更新槽位
wearos.complication.slot.launch.options=复杂功能启动选项
wearos.complication.slots.title=复杂功能槽位
wearos.selected.complications.will.run.in.debug=所选复杂功能将在设备上安装的调试表盘中运行。
whatsnew.action.custom.description=了解最新版本 {0} 的新功能和改进
windows.ucrt.warn.message=未安装 Windows 版 Universal C Runtime。ADB 等平台工具可能无法正常工作。
