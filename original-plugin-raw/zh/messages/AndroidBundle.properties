action.DeviceAndSnapshotComboBox.text=选择设备
action.Android.FixAndroidRunConfigurations.text=修复 Android 运行配置
action.Android.FixAndroidRunConfigurations.description=如果 Android 运行配置中缺少“Gradle-aware Make”启动任务，请添加此任务
action.LayoutEditor.AddSampleData.text=添加示例数据文件
action.LayoutEditor.AddSampleData.description=添加新的数据示例文件
action.ConvertFromWebp.text=转换为 PNG…
action.ConvertToWebp.text=转换为 WebP…
action.InferAnnotations.text=推断支持注解…
action.AndroidAddRTLSupport.text=在可能的情况下添加 RTL 支持…
action.AndroidAddRTLSupport.description=在可能的情况下添加从右到左(RTL)支持
action.AndroidFindStyleApplicationsAction.text=在可能的情况下使用样式(_W)…
action.AndroidFindStyleApplicationsAction.description=在可能的情况下，将特性替换为 Android 样式引用
action.AndroidInlineIncludeAction.text=内联布局(_L)…
action.AndroidInlineIncludeAction.description=内联包含的 Android 布局
action.AndroidInlineStyleReferenceAction.text=内联样式(_S)…
action.AndroidInlineStyleReferenceAction.description=内联 Android 样式
action.AndroidExtractAsIncludeAction.text=布局(_L)…
action.AndroidExtractAsIncludeAction.description=将一个或多个视图提取到单独的布局中
action.AndroidEnableInstantAppsSupport.text=启用免安装应用支持…
action.AndroidEnableInstantAppsSupport.description=为模块启用免安装应用支持
action.AndroidExtractStyleAction.text=样式(_Y)…
action.AndroidExtractStyleAction.description=从布局中拉取与样式相关的特性，并将其作为新样式提取
action.AndroidMigrateToResourceNamespacesAction.text=迁移到资源命名空间…
action.AndroidMigrateToResourceNamespacesAction.description=迁移到资源命名空间
action.AndroidMigrateToAndroidxAction.text=迁移到 AndroidX…
action.AndroidMigrateToAndroidxAction.description=迁移到 AndroidX 软件包名称
action.AndroidMigrateToAppCompatAction.text=迁移到 AppCompat…
action.AndroidMigrateToAppCompatAction.description=将应用迁移到 AppCompat
action.AndroidUnusedResourceAction.text=移除未使用的资源…
action.AndroidUnusedResourceAction.description=移除未使用的资源
action.AndroidModularizeAction.text=模块化…
action.AndroidModularizeAction.description=将类及其关联资源移到另一个模块
action.AndroidConnectDebuggerAction.text=将调试器附加到 Android 进程
action.AndroidConnectDebuggerAction.description=将调试器附加到 Android 进程
action.IdeaNewProject.text=IDEA 新建项目…
action.StatisticsViewer.text=显示统计信息查看器
group.Internal.Android.text=Android
action.Android.DeviceExplorer.Help.text=打开设备资源管理器帮助
action.Android.DeviceExplorer.GotoSdcardFolder.text=导航到 SD 卡文件夹
action.Android.DeviceExplorer.GotoDatabaseFolder.text=导航到数据库文件夹
action.Android.DeviceExplorer.GotoSharedPrefsFolder.text=导航到共享的偏好设置文件夹
action.Android.RunAndroidAvdManager.text=AVD 管理器
action.Android.RunAndroidAvdManager.toolbar.text=添加设备定义…
action.Android.RunAndroidAvdManager.popup.text=打开 AVD Manager
action.Android.RunAndroidAvdManager.description=打开 Android 虚拟设备 (AVD) 管理器，来管理仿真器映像和快照
group.AndroidToolsGroup.text=Android
action.Android.CreateResourcesActionGroup.text=Android 资源文件
action.Android.ExportProjectZip.text=将项目导出为 Zip 文件…
action.Project.InterproceduralThreadAnnotations.text=过程间线程注解检查器
action.Project.CallGraph.text=上下文调用路径

add.string.resource.intention.text=提取字符串资源
extract.dimension.intention.text=提取尺寸资源
implement.parcelable.intention.text=添加 Parcelable 实现
remove.parcelable.intention.text=移除 Parcelable 实现
redo.parcelable.intention.text=替换 Parcelable 实现
add.dependency.intention.text=添加库依赖项
package.not.found.error=清单文件中未指定软件包
cannot.resolve.flag.error=无法解析标志
cannot.resolve.format.error=无法解析格式
create.value.resource.quickfix.name=在 ''{1}'' 中创建值资源 ''{0}''
create.value.resource.intention.name=创建 {0} 值资源 ''{1}''
create.file.resource.quickfix.name=在 {1} 中创建资源文件 ''{0}''
create.file.resource.intention.name=创建 {0} 资源文件 ''{1}''
quick.fixes.family=Android 快速修复
not.resource.file.error=文件 {0} 不是资源文件
check.resource.dir.error=找不到模块 {0} 的资源目录
choose.device.dialog.title=选择部署目标
select.platform.error=请选择 Android SDK
cant.load.avds.error=无法重新加载 AVD 列表。请检查 SDK
package.name.must.contain.2.ids.error=软件包名称必须包含 2 个分段(例如 com.example)
run.error.apk.not.valid=当前项目无法运行
run.error.apk.not.signed=当前所选变体的 APK 无法签名。请为此变体({0})指定签名配置。
not.valid.activity.name.error=不是有效的 Activity 名称“{0}”
specify.package.name.error=必须指定软件包名称
not.valid.package.name.error=不是有效的软件包名称“{0}”
cant.find.activity.class.error=找不到 android.app.Activity 类
cant.find.class.error=找不到 {0} 类
activity.class.not.specified.error=未指定 Activity 类
not.activity.subclass.error={0} 不是 Activity 子类或别名
no.facet.error=找不到 {0} 的 Android facet
android.logcat.color.page.name=Android Logcat
warning.level.title=警告
verbose.level.title=详细
info.level.title=信息
debug.level.title=调试
error.level.title=错误
assert.level.title=断言
select.target.dialog.text=请选择 Android 目标
default.activity.not.found.error=找不到默认 Activity
specific.activity.not.launchable.error=Activity 必须导出或包含 intent-filter
activity.not.declared.in.manifest=Activity ''{0}'' 未在 AndroidManifest.xml 中声明
new.typed.resource.command.name=新建 {0} 资源文件
new.typed.resource.dialog.title=新建 {0} 资源文件
new.file.dialog.text=输入一个新的文件名
new.typed.resource.action.description=创建新的 {0} 资源文件
new.typed.resource.action.title={0}资源文件
new.resource.action.title=Android 资源文件
new.resource.dir.action.title=Android 资源目录
new.resource.action.description=创建新的资源文件
new.resource.command.name=新建资源文件
new.resource.dialog.title=新建资源文件
new.resource.dir.command.name=新建资源目录
new.resource.dir.dialog.title=新建资源目录
new.sampledata.dir.action.title=示例数据目录
new.sampledata.dir.action.description=创建新的示例数据目录
no.android.targets.error=在此 SDK 中找不到任何 Android 目标
android.run.configuration.type.name=Android 应用
android.run.configuration.type.description=Android 启动/调试配置
android.test.run.configuration.type.name=Android Instrumented Tests
android.test.run.configuration.type.description=Android Instrumented Tests 配置
android.run.configuration.package.label=包(&K)
android.run.configuration.class.label=类(&L)
android.run.configuration.method.label=方法(&T)
android.run.configuration.all.in.module.radio=模块中的所有(&A)
android.run.configuration.all.in.package.radio=软件包中的所有(&I)
android.run.configuration.class.radio=类(&S)
android.browse.test.class.dialog.title=选择测试类
android.run.configuration.method.radio=方法(&E)
android.test.run.configuration.instrumentation.label=插桩类:
android.browse.instrumentation.class.dialog.title=选择插桩类
cannot.find.testcase.error=找不到 junit.framework.TestCase 类
android.run.configuration.logcat.skip.content.label=启动前清除日志(&C)
cant.load.avds.error.prefix=无法重新加载 AVD 列表:
android.generate.signed.apk.action.text=生成已签名的 APK…
android.generate.signed.apk.action.bundle.text=生成已签名的捆绑包/APK…
android.file.not.exist.error=文件{0}不存在
android.confirm.password.label=确认(&C):
android.export.package.passwords.not.match.error=密码不匹配
android.export.package.specify.keystore.location.error=请指定密钥库位置
android.export.package.specify.key.password.error=请指定密钥的密码
android.export.package.specify.key.store.password.error=请指定密钥库的密码
android.export.package.specify.password.error=请指定密码
android.export.package.incorrect.password.length=密码必须至少为 6 个字符
android.cannot.find.file.error=未找到文件{0}
android.export.package.keystore.error.title=密钥库加载错误
android.export.package.key.validity.label=有效期(年)(&V):
android.export.package.key.certificate.name.label=名字和姓氏(&F):
android.export.package.organization.unit.label=组织单位(&O):
android.export.package.city.label=城市或地区(&L):
android.export.package.state.label=州或省(&T):
android.export.package.country.code.label=国家/地区代码(XX)(&X):
android.export.package.specify.key.alias.error=请指定键别名
android.export.package.specify.certificate.field.error=至少一个证书颁发者字段需要为非空
android.export.package.organization.label=组织(&R):
android.cannot.create.new.key.error=无法创建新密钥或密钥库
android.create.new.key.error.prefix=密钥已创建，存在错误:
android.extract.package.choose.keystore.title=选择密钥库文件
android.export.package.destination.akp.label=目标 APK 路径(&D):
android.extract.package.cannot.find.key.error=无法找到密钥 {0}
android.extract.package.specify.apk.path.error=请指定目标 APK 路径
android.extract.package.task.title=生成 APK 文件
android.export.package.wizard.title=正在已签名的 APK
android.export.package.wizard.bundle.title=生成签署的 Bundle 或 APK
android.export.package.bundle.description=<html>生成签署的应用 Bundle 以上传到应用商店来获得以下好处:<ul><li>更小的下载大小</li><li>按需应用功能</li><li>仅资产模块</li></ul></html>
android.export.package.bundle.gradle.error=生成签署的 Bundle 需要您将 Android Gradle 插件更新到 3.2.0 或更高版本。
android.export.package.bundle.key.export=导出加密密钥，将发布的应用注册在
android.export.package.success.message=已成功创建文件 {0}
android.apk.sign.gradle.no.model=缺少 Gradle 项目信息。请检查 IDE 是否已成功将其状态与 Gradle 项目模型同步。
android.apk.sign.gradle.missing.destination=请为签署的 {0} 指定目标文件夹
android.apk.sign.gradle.invalid.destination=该目标文件夹不存在或不可写
android.apk.sign.gradle.missing.variants=请选择要构建并签署的构建变体
android.apk.sign.gradle.no.variants=未定义构建变体
file.must.be.under.module.error=无法计算 {0} 的相对路径
android.extract.package.choose.dest.apk=选择目标 APK 文件
android.cannot.create.file.error=无法创建文件 {0}
android.cannot.create.dir.error=无法创建目录{0}
android.manifest.not.found.error=AndroidManifest.xml 不存在或根标记不正确
android.run.configuration.not.supported=当前项目不支持运行配置 {0}。无法获取 APK 文件的位置。
android.apt.settings.title=R.java 和 Manifest.java 文件
android.dest.directory.title=生成文件的目录(&Y):
android.generate.r.java.by.res.dir=使用在“结构”部分中指定的资源目录(&O)
android.use.custom.r.java.source.dir=使用自定义资源目录(&M):
android.wizard.new.activity.title=新建 Android Activity
android.wizard.new.fragment.title=新建 Android Fragment
android.wizard.new.component.title=新建 Android 组件
android.wizard.config.activity.title=配置 Activity
android.wizard.config.component.title=配置组件
android.wizard.config.fragment.title=配置 Fragment
android.wizard.action.new.component=创建新的 {0}
android.wizard.action.requires.minsdk={0} (需要 minSdk >= {1})
android.wizard.action.requires.androidx={0} (需要 AndroidX 支持)
android.wizard.action.requires.new.agp={0} (需要 Android Gradle 插件 {1} 或更新版本)
android.wizard.module.presentable.name=Android
android.wizard.module.description=Android 模块用于开发要在 <b>Android</b> 操作系统上运行的应用。<br><b>Android</b> 模块包括一个或多个<b>操作组件</b>且可能支持一些机型，<br>包括<b>手机与平板电脑</b>、<b>Wear</b> 和 <b>Android Auto</b>。
android.wizard.module.import.eclipse.title=导入 Eclipse ADT 项目
android.wizard.module.import.gradle.title=导入 Gradle 项目
android.wizard.module.import.gradle.description=将现有 Gradle 项目作为模块导入
android.wizard.module.import.source.title=从源中导入模块
android.wizard.module.import.source.browse.title=选择源位置
android.wizard.module.import.source.browse.description=选择要作为新的子项目导入的现有 ADT 或 Gradle 项目
android.wizard.module.import.source.browse.invalid.location=路径不存在
android.wizard.module.import.source.browse.taken.location=此位置已导入
android.wizard.module.import.source.browse.bad.modules.1=无法找到子项目 %1$s 的源。\n\
这可能导致缺少依赖项。
android.wizard.module.import.source.browse.bad.modules.2=无法找到子项目 %1$s 和 %2$s 的源。\n\
这可能导致缺少依赖项。
android.wizard.module.import.source.browse.bad.modules.more=无法找到 %1$s 和其他 %2$d 个子项目的源。\n\
这可能导致缺少依赖项。
android.wizard.module.import.source.browse.cant.import=指定 Gradle 或 Android Eclipse 项目的位置
android.wizard.module.import.source.browse.error=内部错误，请检查 IDE 日志
android.wizard.module.enable.instant=启用免安装应用支持
android.wizard.module.new.module.menu=新建模块…
android.wizard.module.new.module.menu.description=向项目添加一个新模块
android.wizard.module.new.module.title=创建新的模块
android.wizard.module.new.module.header=选择模块类型
android.wizard.module.new.mobile=手机与平板电脑
android.wizard.module.new.mobile.description=创建新的 Android 手机和平板电脑模块。
android.wizard.module.new.library=Android 库
android.wizard.module.new.library.description=创建新 Android 库。
android.wizard.module.new.dynamic.module=动态功能
android.wizard.module.new.dynamic.module.description=创建可以动态交付的新 Android App Bundle 模块。
android.wizard.module.new.dynamic.module.instant=免安装的动态功能
android.wizard.module.new.dynamic.module.instant.description=创建一个将作为免安装应用交付的新 Android 模块.
android.wizard.module.new.dynamic.select.base=请选择一个项目基础模块
android.wizard.module.new.dynamic.download.options=模块下载选项
android.wizard.module.new.automotive=Automotive
android.wizard.module.new.automotive.description=创建新的 Android Automotive 模块。
android.wizard.module.new.wear=Wear OS
android.wizard.module.new.wear.description=创建新的 Wear OS 模块。
android.wizard.module.new.tv=Android TV
android.wizard.module.new.tv.description=创建新的 Android TV 模块。
android.wizard.module.new.java.or.kotlin.library=Java 或 Kotlin 库
android.wizard.module.new.java.or.kotlin.library.description=创建新的 Java 或 Kotlin 库。
android.wizard.module.new.google.cloud=Google Cloud
android.wizard.module.new.benchmark.module.app=基准
android.wizard.module.new.benchmark.module.description=创建新的基准模块。
android.wizard.module.config.title=配置您的模块
android.wizard.module.config.new.base.missing=<No Base Module found>
android.wizard.module.help.choose=帮助我选择
android.wizard.module.help.loading=加载
android.wizard.module.help.refreshing=正在加载统计信息…
android.wizard.module.help.name=要将模块放置在子文件夹中，请使用语法: :subfolder:module_name，例如 :libraries:lib1
android.wizard.module.package.too.long=软件包名称过长
android.wizard.project.create.error=新建项目向导中出错
android.wizard.project.new.choose=选择项目模板
android.wizard.project.new.configure=配置您的项目
android.wizard.project.help.appcompat=当最低 SDK 设置为 API 级别 29 或更高级别时，或者在创建需要最新版本 Play 服务的 Activity 时，选项将被禁用。
android.wizard.project.loading.sdks=正在查找可供下载的 SDK…
android.wizard.project.loading.stats.fail=无法加载统计信息。值可能已过期。
android.wizard.activity.add=将 Activity 添加到 {0}
android.wizard.activity.add.cpp.docslinktext=请参阅文档
android.wizard.activity.not.found=未选择 Activity 模板
android.wizard.activity.invalid.min.sdk=所选 Activity 模板的最低 SDK 级别为 {0}。
android.wizard.activity.invalid.androidx=所选 Activity 模板要求项目具有 androidx.* 依赖项。
android.wizard.activity.invalid.needs.kotlin=所选活动模板需要 Kotlin。
android.wizard.fragment.add=将 Fragment 添加到 {0}
android.wizard.fragment.invalid.androidx=所选片段模板要求项目具有 androidx.* 依赖项。
android.wizard.fragment.invalid.needs.kotlin=所选片段模块需要 Kotlin。
android.wizard.fragment.invalid.min.sdk=所选 Fragment 模板的最低 SDK 级别为 {0}。
android.wizard.fragment.not.found=未选择 Fragment 模板
android.wizard.language.combo.header=源语言
android.wizard.language.combo.empty=(选择语言)
android.wizard.language.combo.tooltip=用于代码生成的编程语言
android.wizard.validate.invalid.class.name=请输入有效的类名
android.wizard.validate.empty.module.name=请输入有效的模块名称
android.wizard.validate.module.already.exists=模块“{0}”已存在
android.wizard.validate.module.illegal.character=模块名称 ''{1}'' 中存在非法字符 ''{0}''
android.wizard.validate.module.needs.androidx=项目需要转换为 androidx.* 依赖项
android.wizard.validate.module.needs.new.agp=组合需要 Android Gradle 插件 {0} 或更新版本
android.wizard.validate.project.illegal.character=项目名称 ''{1}'' 中存在非法字符 ''{0}''
android.wizard.validate.empty.application.name=请输入应用名称 (在启动器中显示) 或库的描述性名称
android.wizard.validate.lowercase.application.name=大多数应用的应用名称以大写字母开头
android.wizard.validate.select.language=请选择语言
android.wizard.validate.select.appcompat=使用旧版 android.support 库将阻止您使用最新的 Play 服务和 Jetpack 库
android.invalid.sdk.message=您的 Android SDK 路径无效。请在 <a href="#">Settings</a> 中进行更新。
android.facet.editor.is.library.checkbox=库模块(&B)
android.facet.not.editable.text=无法编辑此 facet，因为它自动创建。仅可编辑手动创建的 Android facet。
android.run.sdk.manager.action.text=SDK 管理器
copy.resources.from.artifacts.setting=在 Make 之前运行“process-resources”Maven 任务(&U)
android.apk.settings.title=资源打包
android.inspections.group.name=Android
android.inspections.dom.name=Android 资源验证
android.inspections.root.tag.name=Android XML 根标记验证
android.inspections.unknown.attribute.name=未知 Android XML 特性
android.inspections.unknown.attribute.message=未知特性 {0}
android.compile.messages.generating.r.java.content.name=正在生成源
android.new.component.action.title.non.gradle=Android 组件
android.new.component.action.description=从“其他”类别创建新的 Android 对象
android.new.component.action.command.name=新建 Android 组件
android.new.component.dialog.activity.item=活动
android.new.component.dialog.fragment.item=片段
android.new.component.dialog.service.item=服务
android.new.component.dialog.broadcast.receiver.item=广播接收器
android.new.component.dialog.broadcast.remote.interface=远程接口
android.dex.compiler.vm.options.title=Android DX 编译器 VM 选项
android.proguard.vm.options.title=Android ProGuard VM 选项
android.dex.compiler.configurable.display.name=Android 编译器
android.run.configuration.general.tab.title=常规
android.run.configuration.misc.tab.title=杂项
android.facet.settings.apk.path.label=APK 路径(&P):
android.logcat.no.android.facets.error=项目中没有 Android facet
android.facet.settings.compile.resources.by.ide=通过 IDE 生成(&G)
android.export.package.new.key.alias.label=别名(&A):
android.key.password.label=密码(&S):
android.cannot.debug.noDebugPermissions=无法从设备 {1} 上的模块 {0} 调试应用。\n\
此应用在清单中未启用 ''debuggable'' 特性。\n\
如果您已在清单中手动设置该特性，请将其移除并让 IDE 自动分配。\n\
如果您使用的是 Gradle，请确保您的当前变体可调试。
android.cannot.run.library.project.error=该模块不能是 Android 库
android.compilation.error.specify.platform=[{0}] Android SDK 未指定或无法解析
android.compilation.error.manifest.not.found=[{0}] AndroidManifest.xml 文件未找到。请查看 Android facet 设置。
android.compilation.error.apt.gen.not.specified=没有为模块 {0} 指定 AAPT 目标目录
android.restart.logcat.action.text=重启
android.restart.logcat.action.description=重启记录
android.configure.logcat.header.text=Logcat 标题
android.configure.logcat.header.description=为 logcat 标题(时间，pid/tid等)配置过滤器
android.configure.logcat.header.title=配置 Logcat 标题
android.new.component.dialog.application.item=应用
android.sdk.missing.title=SDK 问题
android.sdk.missing.msg=您的 Android SDK 缺失、过期或损坏。
android.sdk.open.manager=打开 SDK 管理器
android.sdk.presentable.name=Android SDK
android.sdk.configure.jdk.error=请配置内部 JDK
no.jdk.for.android.found.error=找不到合适版本的 Java SDK。除 Android SDK 外，您还需要定义一个 JDK 1.5、1.6 或 1.7
cannot.parse.sdk.error=无法解析 Android SDK
ddms.corrupted.error=警告: 调试信息可能不可用。请使用 ADB 关闭其他应用: Monitor、DDMS、Eclipse
android.font.file.type.description=字体
android.import.dependencies.error.message.header=导入完成，但有错误:
android.import.dependencies.add.module.dependency.task.title=添加依赖关系 {0} --> {1}
android.import.dependencies.new.module.task.title=在 {1} 中创建库模块 {0}
android.import.dependencies.import.module.task.title=从 {1} 导入库模块 {0}
android.import.dependencies.dialog.title=从属性文件导入 Android 依赖项
android.import.dependencies.source.roots.dialog.title=导入源根
android.import.dependencies.source.roots.dialog.label=选择要添加到项目的源根
android.layout.preview.default.error.message=无法执行渲染
android.layout.preview.edit.configuration.available.qualifiers.label=可用的限定符(&V):
android.layout.preview.edit.configuration.choosen.qualifiers.label=选择的限定符(&H):
new.resource.dir.action.name=创建资源目录“{0}”
new.resource.action.name=创建资源文件“{0}”
android.extended.device.chooser.avd.label=Android Virtual Device(&A):
deployment.target.not.found=找不到目标设备。
deployment.failed.splitapk.nomatch=当前选择的变体“{0}”使用拆分 APK，但 {1} 个拆分 APK 均不与 ABI 为“{2}”的当前设备兼容。
deployment.failed.reason.different.signature=该设备已经具有一个软件包相同但签名不同的应用
deployment.failed.reason.dexopt=该设备可能具有与当前版本不匹配的过时的 dex jar (dexopt 错误)
deployment.failed.reason.version.downgrade=该设备已具有此应用的较新版本
deployment.failed.uninstall.prompt.text=自 {0} 起安装失败。\n\
要继续，您必须卸载现有的应用。\n\
\n\
警告: 卸载将移除应用数据!\n\
\n\
要卸载现有的应用吗?
deployment.failed.uninstall.prompt.generic.text=安装失败，消息 {0}。\n\
可以通过卸载 APK 的现有版本(如果有)来解决此问题，然后重新安装。\n\
\n\
警告: 卸载将移除应用数据!\n\
\n\
要卸载现有的应用吗?
deployment.failed.uninstall.prompt.androidthings.text=您的 APK 和其他已安装的软件包的意图是 IOT_LAUNCHER。一次只能安装一个具有该意图的 APK。安装 APK 之前，请尝试卸载这些软件包。\n\
\n\
警告: 卸载将移除应用数据!\n\
\n\
您要卸载以下应用吗?\n\
{0}
deployment.failed.uninstall.prompt.androidthings.errortext=无法卸载以下软件包:\n\
{0}
deployment.failed.reason.devicedisconnected=安装失败，因为设备“{0}”已断开连接。
deployment.failed.reason.oldersdk=由于应用的 minSdkVersion 比设备的 API 级别({0})更新，安装失败。\n\
请更新您应用的 minSdkVersion。
deployment.failed.title=应用安装失败
deployment.failed.no.certificates.explanation=由于 APK 未签署或签署不正确，安装失败。\n\
如果这是基于 Gradle 的项目，请确保在 Gradle 构建脚本中指定了签署配置。
android.inspections.non.constant.res.ids.in.switch.name=switch 语句中存在非常量资源 ID
android.inspections.non.constant.res.ids.in.switch.message=资源 ID 不能在 Android 库模块的 switch 语句中使用
android.logcat.clear.log.action.title=清除 Logcat
android.logcat.clear.log.action.tooltip=清除设备上的 logcat 缓冲区
android.logcat.filters.none=无过滤器
android.logcat.filters.selected=仅显示所选应用
android.logcat.filters.edit=编辑过滤器配置
android.logcat.new.filter.dialog.name.label=过滤器名称(&N):
android.logcat.new.filter.dialog.tag.label=日志标记(&T):
android.logcat.new.filter.dialog.message.label=日志消息(&M):
android.logcat.new.filter.dialog.pid.label=PID(&P):
android.logcat.new.filter.dialog.package.name.label=包名称(&A):
android.logcat.new.filter.dialog.log.level.label=日志级别(&L):
android.logcat.new.filter.dialog.name.not.specified.error=未指定过滤器名称
android.logcat.new.filter.dialog.incorrect.log.tag.pattern.error=日志标记正则表达式模式无效\n\
{0}
android.logcat.new.filter.dialog.incorrect.message.pattern.error=日志消息正则表达式模式无效\n\
{0}
android.logcat.new.filter.dialog.incorrect.application.name.pattern.error=应用名称正则表达式模式无效\n\
{0}
android.logcat.new.filter.dialog.incorrect.pid.error=PID 必须为正整数
android.logcat.new.filter.dialog.title=创建新的 Logcat 过滤器
android.logcat.remove.logcat.filter.button=删除所选 logcat 过滤器
android.logcat.add.logcat.filter.button=添加一个新的 logcat 过滤器
android.logcat.new.logcat.dialog.label=指定一个或多个过滤参数:
android.logcat.new.filter.dialog.name.busy.error=过滤器 {0} 已经存在
android.logcat.edit.filter.dialog.no.filters=点击添加图标以添加过滤器

android.emulator=模拟器
android.ddms.nodevices=[none]

android.ddms.actions.terminate.vm=终止应用
android.ddms.actions.terminate.vm.description=终止所选 Android 应用
android.ddms.actions.screenshot=屏幕截图
android.ddms.actions.screenshot.description=从设备获取屏幕截图
android.ddms.actions.screenshot.copied.to.clipboard=图像已复制到剪贴板
android.ddms.actions.screenrecord=屏幕录制
android.ddms.actions.screenrecord.description=录制设备显示屏的视频
android.ddms.actions.layoutinspector.title=Layout Inspector
android.ddms.actions.layoutinspector.title.legacy=旧版 Layout Inspector
android.ddms.actions.layoutinspector.description=检查所选窗口的布局
android.ddms.actions.layoutinspector.description.disabled=调试时检查布局已禁用
android.ddms.actions.layoutinspector.windowpicker=选择窗口
android.ddms.actions.layoutinspector.notification.group=Layout Inspector
android.ddms.actions.layoutinspector.notification.title=Layout Inspector
android.ddms.actions.layoutinspector.dumpdisplay.notification.success=显示写入 logcat 的列表信息。
android.ddms.actions.layoutinspector.dumpdisplay.notification.nonode=检索显示列表信息失败，找不到目标节点。
android.ddms.actions.layoutinspector.dumpdisplay.notification.failure=由于异常，检索显示列表信息失败: {0}
android.ddms.actions.layoutinspector.update.notification.failure=无法从设备更新图像。
android.ddms.actions.layoutinspector.menu.show.bound=显示布局边界
android.ddms.actions.layoutinspector.menu.dump.display=转储显示列表
android.ddms.notification.layoutinspector.reboot.live.inspector=无法检测到实时检查服务。要启用实时检查，请重启设备。
android.ddms.screenshot.task.step.obtain=正在从设备获取屏幕截图…
android.ddms.screenshot.task.step.load=正在将屏幕截图加载到内存中…
android.ddms.screenshot.task.error1=从设备获取屏幕截图时出现意外错误: {0}
android.ddms.screenshot.task.error.invalid.bpp=从设备接收到不支持的图像(每像素位数 = {0})
android.ddms.screenshot.save.error=保存屏幕截图时出现意外错误: {0}
android.ddms.screenshot.generic.error=获取屏幕截图时出现意外错误: {0}
android.ddms.screenshot.save.title=另存为 PNG
android.ddms.screenshot.save.ok.button.text=保存
android.ddms.screenshot.image.processor.task.title=更新图像
android.ddms.screenrecord.options.ok.button.text=开始录制
android.facet.settings.custom.debug.keystore.label=自定义调试密钥库(&U):
android.export.package.run.proguard.label=运行 ProGuard(&P)
android.extract.package.specify.proguard.cfg.path.error=请指定 ProGuard 配置文件路径
android.facet.settings.pack.test.sources=将测试代码和资源包含到 APK 中



android.inspections.element.not.allowed.name=不允许 Android XML 元素
android.inspections.unresolvable.tag=不可解析的标记
element.cannot.resolve=无法解析类 {0}
android.facet.settings.run.proguard=构建调试 APK 时运行 ProGuard
file.name.not.specified.error=未指定文件名
root.element.not.specified.error=未指定根元素
directory.not.specified.error=未指定目录
android.manifest.merger.not.supported.error=不支持清单合并。请重新配置清单文件
android.extract.style.title=提取 Android 样式
android.inline.style.title=内联 Android 样式
android.inline.style.command.name=内联样式 ''{0}''
android.inline.style.inline.all.text=内联所有引用并移除样式(&A)
android.inline.style.inline.this.text=内联此用法并保留样式(&T)
android.inline.layout.command.name=内联布局文件 ''{0}''
android.inline.file.inline.all.text=内联所有引用并移除文件(&A)
android.inline.file.inline.this.text=内联此用法并保留文件(&T)
android.inline.layout.title=内联 Android 布局
android.facet.importing.notification.group=导入错误
android.autogeneration.notification.group=Android 自动生成
android.facet.importing.title=导入模块 ''{0}'' 时出错
android.find.style.applications.title=尽可能使用样式
android.aapt.use.custom.package.name=重命名清单包(&K):
android.psd.file.type.description=Adobe Photoshop 图像
android.9patch.file.type.description=Android 9-Patch
android.9patch.creator.title=创建 9-Patch 文件…
android.9patch.creator.save.title=另存为 .9.png
android.9patch.creator.error=创建 9-Patch 文件时出现意外错误: {0}
android.9patch.creator.error.title=创建 9-Patch 文件
android.update.project.properties.dialog.text=以下 Android 模块的结构已被更改:<br>{0}<br>是否要更新相关的 project.properties 文件?<br><a href="once">仅一次</a><br><a href="always">始终更新这些模块的文件</a><br><a href="never">永不更新这些模块的文件</a>
android.update.project.properties.dialog.title=更新属性文件
error.report.at.b.android=<html>提交反馈时出错: {0}<br>考虑在 <a href="https://code.google.com/p/android/issues/list">Android 问题跟踪器</a>中创建问题</html>
error.report.to.google.action=报告给 Google(&R)
android.refactoring.migratetoappcompat=迁移到 AppCompat
android.refactoring.migrateto.androidx=迁移到 AndroidX
android.refactoring.rtl.addsupport.title=添加从右到左(RTL)支持
android.refactoring.rtl.addsupport.dialog.title=添加从右到左(RTL)支持…
android.refactoring.rtl.addsupport.dialog.ok.button.text=运行
android.refactoring.rtl.addsupport.dialog.apply.button.text=按搜索结果面板底部的“执行 RTL 重构”按钮，以进行从右到左(RTL)重构
android.refactoring.rtl.addsupport.dialog.label.text=此重构将向您的 Android 应用添加 RTL 支持。\n\
\n\
请检查以下选项:\n\

android.refactoring.rtl.addsupport.dialog.option.label.update.manifest.text=更新 AndroidManifest.xml
android.refactoring.rtl.addsupport.dialog.option.label.update.layouts.text=更新布局文件
android.refactoring.rtl.addsupport.dialog.option.label.layouts.options.txt=布局选项
android.refactoring.rtl.addsupport.dialog.option.label.layouts.options.replace.leftright.txt=用开始/结束属性替换左/右属性
android.refactoring.rtl.addsupport.dialog.option.label.layouts.options.generate.v17.txt=生成 -v17 版本
android.refactoring.gradle.warning.rename.source.root=新的源根名称不会自动传播<br/>到 Gradle 配置。<br/>您需要在 *.gradle 文件中手动进行相应<br/>更改。
create.on.click.handler.intention.text=创建 onClick 事件处理程序
android.inspections.on.click.missing.name=相关 Activity 中缺少 onClick 处理程序
android.inspections.on.click.missing.problem=方法 ''{0}'' 在 ''{1}'' 中缺失或签名不正确
android.inspections.on.click.missing.incorrect.signature=''{1}'' 中方法 ''{0}'' 的签名不正确
exportable.AndroidFoldingSettings.presentable.name=Android 代码折叠
android.gradle.link.appengine.outdated=更新 'appengine' 插件版本。
android.component.entry.point=Android 组件











connection.assistant.loading=正在加载…
connection.assistant.usb.no_devices.title=未检测到 USB 设备
connection.assistant.usb.no_devices.body=
connection.assistant.adb.no_devices.title=未检测到 Android 设备。
connection.assistant.adb.no_devices.body=
connection.assistant.adb.devices=检测到至少一台 Android 设备。
connection.assistant.adb.failure=无法找到 ADB。
connection.assistant.adb.unexpected=出现意外错误，请提交错误。
title.cannot.open.file=无法打开文件 {0}
feedback.notifications.title=感谢您的反馈!

whatsnew.action.custom.description=了解最新版本 {0} 的新功能和改进

unsupported.jvm.dragndrop.message=在受拖放问题(1.8.0_60 至 1.8.0_76)影响的 JDK8 版本上运行。请参见 <a href="https://youtrack.jetbrains.com/issue/IDEA-146691">IDEA-146691</a> 了解详细信息，并考虑使用问题范围之外的 JDK。
unsupported.jvm.openjdk.message=OpenJDK 表现出间歇性的性能和 UI 问题。我们建议使用 Oracle JRE/JDK.。
sys.health.too.many.exceptions=已检测到大量内部异常。这表明 IDE 存在严重问题。请考虑重新安装 Android Studio。如果问题仍然存在，请通过以下链接报告错误。
sys.health.send.feedback=发送反馈
heap.dump.snapshot.exception=创建堆转储时出错。有关详细信息，请参阅 idea.log。
heap.dump.snapshot.indicator.text=正在捕获 {0} 堆转储
heap.dump.snapshot.indicator.low.memory.text=检测到内存不足。正在捕获 {0} 堆转储
heap.dump.snapshot.created=已在 {0} 创建堆转储。下次您启动时 {1} 会对它进行分析。
heap.dump.snapshot.created.no.analysis=已在 {0} 创建堆转储。
heap.dump.snapshot.error.check.log=创建堆转储时出错。请检查 idea.log 了解详细信息。
heap.dump.snapshot.no.space=空间不足，无法在 {0} 创建堆转储。堆转储所需的估计大小: {1}MB，但只有 {2}MB 可用。
heap.dump.snapshot.title=捕获堆转储
heap.dump.snapshot.task.title=正在捕获堆转储
heap.dump.snapshot.already.pending=内存报告已挂起。重启 {0} 以开始分析。
heap.dump.analysis.exception=堆转储分析时出错。有关详细信息，请参阅 idea.log。
heap.dump.analysis.task.title=正在准备内存报告
heap.dump.analysis.notification.title=内存使用报告
heap.dump.analysis.notification.ready.content=分析完成。
heap.dump.analysis.notification.action.title=审阅报告
heap.dump.analysis.notification.submitted.content=感谢您提交报告。
heap.dump.analysis.notification.submit.error.content=提交报告时出错。请参见 idea.log 了解详细信息。
heap.dump.analysis.report.dialog.title=内存使用报告
heap.dump.analysis.report.dialog.header=<html>{0} 检测到异常高的内存使用。<br>您可以将以下内存使用报告发送到 Google，帮助团队调查问题的根源。
heap.dump.analysis.report.dialog.footer=提交此报告，即表明您允许 Google 根据 <a href="http://www.google.com/policies/privacy/">Google 的隐私政策</a>收集和处理此数据。
heap.dump.analysis.report.dialog.action.send=发送
heap.dump.analysis.report.dialog.action.dont.send=不发送
heap.dump.snapshot.restart.dialog.title=确认重启
heap.dump.snapshot.restart.dialog.message=堆转储分析需要重启 {0}。要立即重启吗?
heap.dump.snapshot.restart.dialog.restart.now=立即重启
heap.dump.snapshot.restart.dialog.restart.later=稍后重启

memory.settings.restart.needed=内存设置已保存。为了使新设置生效，您需要重启 IDE。要立即重启吗?
memory.settings.panel.top.message=对操作系统应为 {0} 个进程(如核心 IDE 或 Gradle 守护程序)分配的最大 RAM 大小进行配置。与分配过少内存类似，分配过多内存也可能会降低性能。
memory.settings.ide.bottom.message=这是全局设置，适用于您使用 {0} 打开的所有项目。在对 IDE 堆大小的任何更改生效之前，您需要重新启动 IDE。
memory.settings.panel.use.recommended.values=使用建议值
memory.settings.panel.ide.info=根据可用内存和当前项目，建议 IDE 堆大小为 {0}。
memory.settings.panel.daemon.info=这些设置仅应用于当前项目，并且更改仅会在重新构建项目(通过从菜单栏选择“构建”>“重新构建项目”)后生效。更改堆大小并重新构建项目后，您可能会发现具有旧设置的守护进程并需要将其手动停止。
memory.settings.panel.show.daemons.info=查找现有的 Gradle 守护进程
memory.settings.postsync.message=根据可用内存和项目大小，将最大堆大小从 {0}MB 增加到 {1}MB 可以优化 IDE 性能。
memory.settings.postsync.title={0} 的性能可以提高
memory.settings.postsync.save=使用建议设置并重启
memory.settings.postsync.configure=配置…
memory.settings.postsync.do.not.ask.for.project=此项目不再询问
memory.settings.postsync.do.not.show.again=不再显示
memory.settings.has.user.properties=<i>{0}</i> 中指定的用户 Gradle 属性由项目共享，并且优先于项目级别属性。要为守护进程指定项目级别的最大堆大小，请在用户级别属性中移除 <i>org.gradle.jvmargs</i> 设置，然后重新打开此面板。

windows.ucrt.warn.message=未安装 Windows 版 Universal C Runtime。ADB 等平台工具可能无法正常工作。

virus.scanning.warn.message=防病毒程序可能会影响构建性能。{0} 检查了以下目录: {1}
virus.scanning.dont.show.again=不再显示
virus.scanning.dont.show.again.this.project=不再为此项目显示
configurable.DeploymentConfigurable.display.name=部署
configurable.ExperimentalSettingsConfigurable.display.name=实验性
configurable.AndroidFacetEditorTab.display.name=Android SDK 设置
configurable.IdeSdksConfigurable.display.name=SDK 位置
configurable.MemorySettingsConfigurable.display.name=内存设置
configurable.SdkUpdaterConfigurable.display.name=Android SDK
configurable.GradleFacetEditorTab.display.name=Android Gradle 模块设置
configurable.ProfilingConfigurable.display.name=CPU 记录配置
configurable.AndroidProjectStructureConfigurableForIdea.display.name=Android 项目结构
configurable.AndroidProjectStructureConfigurableForIdea.redirect.text=请使用 <a href="aps">Android 项目结构</a>配置页面。
checkbox.use.custom.formatting.settings.for.android.xml.files=Use custom formatting settings for Android XML files
checkbox.group.tags.with.the.same.name=Group tags with the same name
checkbox.insert.line.breaks.around.style.declaration=Insert line breaks around style declaration
checkbox.use.same.device.for.future.launches=将同一设备用于未来启动
action.DumbAware.ToolWindowHeader.text.hide=隐藏
action.DumbAware.AbstractDependenciesPanel.text.add.dependency=添加依赖项
action.AnActionButton.text.select.all=全选
action.AnActionButton.text.unselect.all=取消全选
action.AnActionButton.extract.style.text.select.all=取消全选
action.AnActionButton.extract.style.text.unselect.all=取消全选
action.AnActionButton.update.sites.text.select.all=全选
action.AnActionButton.update.sites.text.deselect.all=取消全选
text.loading=正在加载…

compose.feature.in.non-canary.title=Jetpack Compose 功能不受支持
compose.feature.in.non-canary.message=<html>Jetpack Compose 是一项预览功能，仅 Canary 版本的 Android Studio 中包含对 Compose 的支持。要在您的应用项目中使用 Compose，请下载并安装 IDE 的最新 <a href="https://developer.android.com/studio/preview"> Canary 版本</a>。</html>
configurable.group.build.android.settings.display.name=Android
configurable.group.build.android.settings.description=<html><body>使用 Android 构建工具配置项目集成。
downloading.android.plugin.components=正在下载 Android 插件组件
label.manager.for.the.android.sdk=IDE 使用的 Android SDK 和工具的管理器
label.android.sdk.location=Android SDK 位置:
tab.name.sdk.platforms=SDK 平台
tab.name.sdk.tools=SDK 工具
tab.name.sdk.update.sites=SDK 更新站点
label.sdk.location.must.be.set=必须设置 SDK 位置
label.each.android.sdk.platform.package=<html>每个 Android SDK 平台软件包默认都包含 Android 平台以及与 API 级别有关的源。安装后，IDE 将自动检查更新。选中“显示软件包详细信息”可显示单个 SDK 组件。</html>
checkbox.show.package.details=显示软件包详细信息
label.looking.for.updates=正在查找更新…
checkbox.hide.obsolete.packages=隐藏过时软件包
label.below.are.the.available.sdk=<html>以下为可用的 SDK 开发者工具。安装后，IDE 将自动检查更新。选中“显示包详细信息”以显示 SDK 工具的可用版本。</html>
label.these.are.the.sites=<html>这些是检查 Android SDK 更新和工具的站点。如果未选中，SDK 管理器将不会检查站点有无更新。通过添加其他附加组件更新站点可以添加新的附加组件或其他 SDK 软件包。</html>
label.loading.sources=正在加载源…
checkbox.force.https.sources=使用 http://... 强制要提取的 https://... 源
checkbox.disable.sdk.diff.patching=禁用 SDK 差异修补
tooltip.disabling.sdk.diff.patching=禁用 SDK 差异修补可能会增大 SDK 软件包下载体积，但是将提升下载后包的安装速度。如果在您的计算机上安装本地补丁将花费大量时间，但您具有无流量限制的快速网络连接，这样选择较为实用。SDK 差异修补默认启用，并且是高端硬件的首选安装方法。
dialog.title.device.file.explorer.download.location=Device File Explorer 下载位置
dialog.message.path.must.be.existing.directory=路径必须为现有目录
dialog.title.invalid.path=无效路径
configurable.name.device.file.explorer=Device File Explorer
configurable.name.android.device.file.explorer=Android Device File Explorer

android.proxy.settings.dialog.title=代理设置
android.proxy.settings.dialog.message=<html>{0} 配置为使用 HTTP 代理。Gradle 可能需要进行这些 HTTP 代理设置才能访问 Internet(例如下载依赖项。)<br/><br/>是否要将以下 HTTP 设置存储到全局 gradle.properties 文件?<br/><br/><b>注意: </b>您可以在 gradle.properties 文件中手动设置密码，但要自担风险。<br/><br/>有关更多详细信息，请参阅 <a href=''https://developer.android.com/studio/intro/studio-config.html#proxy''>Android Studio 文档</a>。<br/><br/>
label.download.location=下载位置
android.application.title=Android 应用
android.final.package.element.type.name=Android 最终软件包
android.extract.package.error.0.message=错误: {0}
android.export.package.passwords.cannot.contain.quote.character=密码不得包含引号字符


android.run.configuration.not.supported.applicationid=当前项目不支持运行配置 {0}。无法获取应用程序 ID。
android.layout.screenview.action.description=Show {0} 图面
android.wizard.module.new.native.library=Android 原生库
android.wizard.module.new.native.library.description=创建新的 Android 原生库。
android.wizard.cppStandard.combo.tooltip=用于原生模块的 C++ 标准
project.upgrade.agpUpgradeRefactoringProcessor.usageView.header=AGP 升级助手
project.upgrade.agpUpgradeRefactoringProcessor.commandName=将 AGP 版本从 {0} 升级到 {1}
project.upgrade.references.text=考虑的参考
project.upgrade.usageView.tabText=更新用法
project.upgrade.usageView.need.reRun=无法执行升级。\n\
找到用法后代码有变更。\n\
请再次执行用法搜索。
project.upgrade.usageView.doAction=完成升级(&U)
project.upgrade.agpClasspathDependencyRefactoringProcessor.target.presentableText=正在升级 AGP 配置
project.upgrade.agpClasspathDependencyRefactoringProcessor.commandName=将 AGP 依赖项从 {0} 升级到 {1}
project.upgrade.agpClasspathDependencyRefactoringProcessor.usageView.header=将 AGP 类路径依赖项版本从 {0} 升级到 {1}
project.upgrade.agpClasspathDependencyRefactoringProcessor.usageType=更新版本字符串
project.upgrade.agpVersionUsageInfo.tooltipText=将 AGP 版本从 {0} 更新到 {1}
project.upgrade.gMavenRepositoryRefactoringProcessor.commandName=将 google() GMaven 添加到 buildscript 仓库
project.upgrade.gMavenRepositoryRefactoringProcessor.usageView.header=将 google() GMaven 添加到 buildscript 仓库
project.upgrade.gMavenRepositoryRefactoringProcessor.usageType=添加 GMaven 声明
project.upgrade.repositoriesNoGMavenUsageInfo.tooltipText=将 google() 添加到 buildscript 仓库
project.upgrade.gradleVersionUsageInfo.tooltipText=将 Gradle 版本升级到 {0}
project.upgrade.java8DefaultRefactoringProcessor.commandName=更新默认 Java 语言级别
project.upgrade.java8DefaultRefactoringProcessor.groupingName=添加指令以继续使用 Java 7
project.upgrade.java8DefaultRefactoringProcessor.usageView.header=更新默认 Java 语言级别
project.upgrade.java8DefaultRefactoringProcessor.existingDirectiveUsageType=现有语言级别指令(保持不变)
project.upgrade.java8DefaultRefactoringProcessor.acceptNewUsageType=接受新默认值(保持不变)
project.upgrade.java8DefaultRefactoringProcessor.insertOldUsageType=继续使用 Java 7 (插入语言级别指令)
project.upgrade.noLanguageLevelAction.acceptNewDefault=接受 Java 8 的新默认值
project.upgrade.noLanguageLevelAction.insertOldDefault=插入指令以继续使用 Java 7
project.upgrade.javaLanguageLevelUsageInfo.tooltipText.insertOldDefault=插入显式 {0} 以保留以前的行为
project.upgrade.javaLanguageLevelUsageInfo.tooltipText.acceptNewDefault=接受新默认值
project.upgrade.javaLanguageLevelUsageInfo.tooltipText.existing=保留现有显式 {0}
project.upgrade.kotlinLanguageLevelUsageInfo.tooltipText.insertOldDefault=插入显式 {0} 以保留以前的行为
project.upgrade.kotlinLanguageLevelUsageInfo.tooltipText.acceptNewDefault=接受新默认值
project.upgrade.kotlinLanguageLevelUsageInfo.tooltipText.existing=保留现有显式 {0}
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.commandName=替换弃用的配置
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.usageView.header=替换弃用的配置
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.renameConfigurationUsageType=重命名配置
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.changeDependencyConfigurationUsageType=更改依赖关系配置
project.upgrade.obsoleteConfigurationDependencyUsageInfo.tooltipText=将配置从 {0} 更新到 {1}
project.upgrade.obsoleteConfigurationConfigurationUsageInfo.tooltipText=将配置从 {0} 重命名为 {1}
project.upgrade.fabricCrashlyticsRefactoringProcessor.usageView.header=将 crashlytics 从 fabric 迁移到 firebase
project.upgrade.fabricCrashlyticsRefactoringProcessor.commandName=将 crashlytics 从 fabric 迁移到 firebase
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricRepositoryUsageType=移除 Fabric Maven 仓库
project.upgrade.fabricCrashlyticsRefactoringProcessor.addGmavenRepositoryUsageType=添加 Google Maven 仓库
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricClasspathUsageType=移除对 Fabric Gradle 插件的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.addGoogleServicesClasspathUsageType=添加对 Google Services Gradle 插件的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsClasspathUsageType=添加对 Firebase Crashlytics Gradle 插件的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.replaceFabricPluginUsageType=将 Fabric 插件替换为 Firebase Crashlytics 插件
project.upgrade.fabricCrashlyticsRefactoringProcessor.applyGoogleServicesPluginUsageType=应用 Google Services 插件
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricCrashlyticsSdkUsageType=移除对 Fabric SDK 的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsSdkUsageType=添加对 Firebase Crashlytics SDK 的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.addGoogleAnalyticsSdkUsageType=添加对 Google Analytics SDK 的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricNdkUsageType=移除 Fabric NDK 依赖关系
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsNdkUsageType=添加 Firebase Crashlytics NDK 依赖关系
project.upgrade.removeFabricMavenRepositoryUsageInfo.tooltipText=移除 Fabric Maven 仓库
project.upgrade.addGoogleMavenRepositoryUsageInfo.tooltipText=添加 Google Maven 仓库
project.upgrade.removeFabricClasspathDependencyUsageInfo.tooltipText=移除对 Fabric Gradle 插件的依赖
project.upgrade.addGoogleServicesClasspathDependencyUsageInfo.tooltipText=添加对 Google Services Gradle 插件的依赖
project.upgrade.addFirebaseCrashlyticsClasspathDependencyUsageInfo.tooltipText=添加对 Firebase Crashlytics Gradle 插件的依赖
project.upgrade.replaceFabricPluginUsageInfo.tooltipText=将 Fabric 插件替换为 Firebase Crashlytics 插件
project.upgrade.applyGoogleServicesPluginUsageInfo.tooltipText=应用 Google Services 插件
project.upgrade.removeFabricCrashlyticsSdkUsageInfo.tooltipText=移除对 Fabric SDK 的依赖
project.upgrade.addFirebaseCrashlyticsSdkUsageInfo.tooltipText=添加对 Firebase Crashlytics SDK 的依赖
project.upgrade.addGoogleAnalyticsSdkUsageInfo.tooltipText=添加对 Google Analytics SDK 的依赖
project.upgrade.removeFabricNdkUsageInfo.tooltipText=移除 Fabric NDK 依赖关系
project.upgrade.addFirebaseCrashlyticsNdkUsageInfo.tooltipText=添加 Firebase Crashlytics NDK 依赖关系
project.upgrade.removeCrashlyticsEnableNdkUsageInfo.tooltipText=移除 enableNdk crashlytics 标志
project.upgrade.addBuildTypeFirebaseCrashlyticsUsageInfo.tooltipText=为发布 buildType 启用原生符号上传
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeCrashlyticsEnableNdkUsageType=移除 enableNdk crashlytics 标志
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsNativeSymbolUploadUsageType=为发布 buildType 启用原生符号上传
project.upgrade.notifyCancelledUpgrade.title=已取消 Android Gradle 插件升级
project.upgrade.notifyCancelledUpgrade.body=<a href="resume">恢复升级</a>。
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.commandName=将启用的 booleans 迁移到 buildFeatures
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.usageView.header=将启用的 booleans 迁移到 buildFeatures
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.dataBindingEnabledUsageType=将启用的 dataBinding 迁移到 buildFeatures
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.viewBindingEnabledUsageType=将启用的 viewBinding 迁移到 buildFeatures
project.upgrade.dataBindingEnabledUsageInfo.tooltipText=将启用的 dataBinding 迁移到 buildFeatures
project.upgrade.viewBindingEnabledUsageInfo.tooltipText=将启用的 viewBinding 迁移到 buildFeatures
android.emulator.notification.title=Android 模拟器
live.literals.highlight.toggle.show.title=启用文字装饰
live.literals.highlight.toggle.hide.title=禁用文字装饰
live.literals.highlight.toggle.description=在编辑器中切换文字装饰
live.literals.is.enabled=文字的 Live Edit：开
live.literals.is.disabled=文字的 Live Edit：关
live.literals.configurable.display.name=Compose 文字的 Live Edit
live.literals.configurable.enable.live.literals=启用文字的 Live Edit
live.literals=Compose 文字的 Live Edit
live.literals.problems.dialog.title=问题
live.literals.breadcrumbs.highlights=文字装饰
live.literals.action.enable.title=启用文字的 Live Edit
live.literals.action.disable.title=禁用文字的 Live Edit
live.literals.action.show.problems.title=显示问题…
live.literals.customize.appearance.title=自定义文字装饰…
android.refactoring.migrateto.namespaces.title=迁移到资源命名空间…
android.refactoring.migrateto.namespaces.progress.analyze.xml=正在分析 XML 资源文件…
android.refactoring.migrateto.namespaces.progress.analyze.manifest=正在分析清单文件…
android.refactoring.migrateto.namespaces.progress.analyze.code=正在分析代码文件…
android.refactoring.migrateto.namespaces.progress.inferring=正在推断命名空间…
android.refactoring.migrateto.nontransitiverclass.title=迁移到不可传递的 R 类…
android.refactoring.migrateto.nontransitiverclass.progress.findusages=正在查找 R 类用法…
android.refactoring.migrateto.nontransitiverclass.progress.inferring=正在推断软件包名称…
android.refactoring.migrateto.nontransitiverclass.progress.rewriting=正在重写资源引用…
android.refactoring.migrateto.resourceview.header=要迁移的资源引用
project.upgrade.removeSourceSetJniRefactoringProcessor.commandName=从 sourceSets 中移除 jni 资源目录
project.upgrade.removeSourceSetJniRefactoringProcessor.usageView.header=从 sourceSets 中移除 jni 资源目录
project.upgrade.sourceSetJniUsageInfo.usageType=从 sourceSet 移除 jni
project.upgrade.sourceSetJniUsageInfo.tooltipText=从 sourceSet 移除 jni
android.usageType.gradle.build.script=在 Gradle 构建脚本中
android.usageType.manifest=在 Android 清单中
android.usageType.resource.declaration.xml=Android 资源 XML 中的资源声明
android.usageType.resource.reference.xml=Android 资源 XML 中的资源引用
android.usageType.resource.reference.code=代码中的资源引用
android.usageType.permission.reference.code=代码中的权限引用
android.usageType.resource.file=Android 资源文件
android.editor.settings.appearance.title=Android 编辑器
android.editor.settings.appearance.enable.flags.for.languages=启用语言标志
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.commandName=从 aaptOptions 迁移到 androidResources
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.usageView.header=从 aaptOptions 迁移到 androidResources
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.move.usageType=将属性迁移到 androidResources
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.remove.usageType=移除 aaptOptions
project.upgrade.androidResourcesUsageInfo.move.tooltipText=将用法从 aaptOptions 移动到 androidResources
project.upgrade.androidResourcesUsageInfo.remove.tooltipText=移除 aaptOptions
do.not.ask.for.this.session=不再要求此会话
android.suggested.import.action.family.name=添加库依赖关系并导入
android.suggested.import.action.name.prefix=添加对 {0} 的依赖关系并导入
android.suggested.imports.title=建议的导入
live.literals.highlight.toggle.title=切换文字装饰
android.suggested.dependency.action.family.name=添加库依赖项
android.suggested.dependency.action.name.prefix=添加对 {0} 的依赖关系
wear.assistant.device.list.title=将设备与 Wear OS 模拟器配对
wear.assistant.device.list.phone.header=选择配套设备
wear.assistant.device.list.wear.header=选择 Wear OS 模拟器
wear.assistant.device.list.no.phone=无可用设备。在设备管理器中创建手机模拟器。<br/><br/><a href="">查看设备管理器</a>
wear.assistant.device.list.no.wear=无可用 Wear OS 模拟器。在设备管理器中创建 Wear OS 模拟器。<br/><br/><a href="">查看设备管理器</a>
wear.assistant.device.list.forget.connection=忘记 {0} 连接
cannot.resolve.float.literal.error=无法解析浮点数 ''{0}''
cannot.resolve.color.literal.error=无法解析颜色 ''{0}''
project.upgrade.notification.title=建议进行项目更新
project.upgrade.notification.body=Android Gradle 插件可以<a href='upgrade'>升级</a>。
live.literals.configurable.enable.live.literals.comment=启用文字的 Live Edit 后需要构建，以便该功能可以正常工作。
wear.assistant.device.list.tooltip.requires.api=Wear 配对要求 API 级别 >= 30
wear.assistant.device.list.tooltip.requires.play=Wear 配对需要 Google Play
wear.assistant.device.list.tooltip.learn.more=了解详情
live.literals.tooltip.description=<html>代码中某些文字的变更将立即反映在模拟器或 Compose 预览中。<br />使用此图标可启用/禁用该功能，打开编辑器标记，并查看文字的 Live Edit 状态。
live.literals.tooltip.url.label=文字的 Live Edit 文档
wear.assistant.device.connection.error.title=发现问题
wear.assistant.device.connection.error.subtitle=检索之前选择的设备时发现问题
wear.assistant.device.connection.check.again=再次检查
wear.assistant.device.connection.start.device.title=正在启动设备
wear.assistant.device.connection.start.device.subtitle=<html>正在启动设备并在配套设备和 Wear OS 设备之间建立连接</html>
wear.assistant.device.connection.start.device.top.label=正在启动设备…
wear.assistant.device.connection.start.device.bottom.label=正在启动 {0}
wear.assistant.device.connection.connecting.device.top.label=正在检查配对状态
wear.assistant.device.connection.connecting.device.bottom.label=正在设备之间建立通信网桥
wear.assistant.device.connection.wear.os.installed=<html>Wear OS 已安装到配套设备</html>
wear.assistant.device.connection.wear.os.missing=<html>无法检测到 Wear OS 的安装。</html>
wear.assistant.device.connection.install.wear.os.title=安装 Wear OS 配套应用程序
wear.assistant.device.connection.install.wear.os.subtitle=<html>配套设备上未安装 Wear OS 应用。配对设备需要 Wear OS 应用。可获得其他安装指南。<a href="{0}">了解详情 ↗</a></html>
wear.assistant.device.connection.install.wear.os.button=在 Play Store 中打开 Wear OS
wear.assistant.device.connection.complete.pairing.title=完成 Wear OS 配对
wear.assistant.device.connection.complete.pairing.subtitle=<html>在配套设备上完成 Wear OS 配套应用配对。可获取详细的配对说明。<a href="{0}">了解详情 ↗</a></html>
wear.assistant.device.connection.open.companion.button=打开 Wear OS 配套应用
wear.assistant.device.connection.pairing.success.title=配对成功
wear.assistant.device.connection.pairing.success.subtitle=<html><div style=''text-align: center;''><b>{0} 已和 {1} 配对</b></div></html>
wear.assistant.device.connection.pairing.not.detected=<html>无法检测到 Wear OS 配对完成</html>。
wear.assistant.device.connection.error=<html>{0} 未联机。设备必须联机才能配对。</html>
wear.assistant.device.connection.restart.pairing=重启配对
wear.assistant.device.connection.dropped.title=Wear OS 模拟器连接已断开
wear.assistant.device.connection.dropped.message={0} 已离线。{1} 将在返回后与 {2} 重新连接。
wear.assistant.device.connection.reconnected.title=Wear OS 模拟器已重新连接
wear.assistant.device.connection.reconnected.message={0} 已与 {1} 重新连接。
wear.assistant.device.connection.balloon.link=查看 Wear OS 配对助手
wear.assistant.connection.alert.close.emulators.title=正在关闭其他 Wear OS 模拟器
wear.assistant.connection.alert.close.emulators.subtitle=<html>运行多个 Wear OS 模拟器时无法连接 Wear OS 配对助手。<br/><br/>如果继续，可能会关闭所有其他 Wear OS 模拟器，并继续将 {0} 与 {1} 配对</html>。
wear.assistant.connection.alert.disconnect.pairing.title=正在关闭其他 Wear 虚拟设备
wear.assistant.connection.alert.disconnect.pairing.subtitle=<html>在配对过程中，只有一台 Wear 虚拟设备可以在线。<br/><br/>如果继续则将关闭:<br/>{0}</html>
android.usageType.gradle.properties.file=Gradle 属性文件
android.usageGroup.properties.new.flag=要添加的属性标志: {0}
android.usageGroup.resource.references.from.package=对 {0} 中定义的资源的引用
android.refactoring.migrateto.nontransitiverclass.error.old.agp.title=无法执行重构
android.refactoring.migrateto.nontransitiverclass.error.old.agp.message=不可传递的 R 类不适用于使用低于 4.2.0 版本的 Android Gradle 插件的项目
android.refactoring.migrateto.nontransitiverclass.warning.uncommitted.changes=项目可能包含未提交的变更。在继续之前，您应该提交或恢复这些变更。
android.refactoring.migrateto.nontransitiverclass.warning.recommend.upgrade=此功能在 AGP 4.2 版本中为实验性功能，升级到 7.0.0 或更新版本可获得最佳结果。
wear.assistant.device.connection.install.wear.os.firstStep=<html><b>Google Play Store 安装</b><br/><br/><ol><li>在 Play Store 中打开 Wear OS 应用</li></ol></html>
wear.assistant.device.connection.install.wear.os.additionalSteps=<html><ol start="2"><li>安装 Wear OS 应用</li></ol></html>
wear.assistant.device.connection.complete.pairing.firstStep=<html><b>设置配套应用</b><br/><br/><ol><li>打开 Wear OS 配套应用</li></ol></li></html>
wear.assistant.device.connection.complete.pairing.additionalSteps=<html><ol start="2"> <li>在 'Connect your watch' 步骤选择<b>与模拟器配对</b></li> <br/><li>按照 Wear OS 应用说明进行操作</li></html>
project.upgrade.removeBuildTypeUseProguardRefactoringProcessor.commandName=移除 buildType useProguard 设置
project.upgrade.removeBuildTypeUseProguardRefactoringProcessor.usageView.header=移除 buildType useProguard 设置
project.upgrade.removeBuildTypeUseProguard.usageType=移除 useProguard 设置
project.upgrade.removeBuildTypeUseProguard.tooltipText=移除 useProguard 设置
project.upgrade.removeImplementationPropertiesRefactoringProcessor.commandName=移除忽略的配置属性
project.upgrade.removeImplementationPropertiesRefactoringProcessor.usageView.header=移除忽略的配置属性
project.upgrade.removeImplementationProperty.usageType=移除属性
project.upgrade.removeImplementationProperty.tooltipText=移除属性
wear.assistant.device.connection.status.device.bottom.label=当设备从冷启动启动时，这可能需要几分钟时间…
wear.assistant.factory.reset.button=恢复出厂设置
wear.assistant.factory.reset.title=恢复 Wear OS 模拟器的出厂设置
wear.assistant.factory.reset.subtitle=<html>{0} 之前与其他设备进行过配对。Wear OS 模拟器必须关闭并恢复出厂设置，才能继续与新设备进行配对。</html>
wear.assistant.factory.reset.progress=正在关闭 {0} 并恢复出厂设置
wear.assistant.device.connection.scanning.wear.os.btn=<html><b>已在设备上打开 Play Store。</b>等待安装 Wear OS 应用</html>
wear.assistant.device.connection.scanning.wear.os.lnk=<html>等待用户安装 Wear OS 应用</html>
wear.assistant.device.connection.wear.os.skip=跳过步骤。已安装 Wear OS 应用
wear.assistant.device.connection.wait.pairing.btn=<html><b>已在设备上打开 Wear OS。</b>等待用户在 Wear OS 应用中完成配对。</html>
wear.assistant.device.connection.wait.pairing.lnk=<html>等待用户在 Wear OS 应用中完成配对。</html>
android.wizard.module.help.benchmark.module.type=要运行的基准测试类型。请参阅 http://d.android.com/benchmark 了解更多信息。\n\
\n\
微基准测试 - 测量要优化的小段代码的 CPU 性能和分配。\n\
\n\
宏基准测试 - 测量和检查应用的启动和滚动性能。
android.wizard.module.help.benchmark.target.module=选择您想要进行基准测试的应用程序
android.wizard.validate.module.needs.new.agp.kts=Kts 需要 Android Gradle 插件 {0} 或更新版本
android.wizard.validate.module.needs.new.agp.macro.benchmark=宏基准测试需要 Android Gradle 插件 {0} 或更新版本
wear.assistant.device.list.cloud.sync.title=已启用云同步
wear.assistant.device.list.cloud.sync.subtitle=<html><b>已在 {0} 上启用云同步</b><br/><br/>Wear OS 应用可通过云同步连接到 Wear 模拟器。禁用<br/>云同步可完全断开与设备的连接。<a href="{1}">了解详情↗</a></html>
project.upgrade.gradleVersionRefactoringProcessor.commandName=将 Gradle 版本升级到 {0}
project.upgrade.gradleVersionRefactoringProcessor.usageView.header=将 Gradle 版本升级到 {0}
project.upgrade.gradleVersionRefactoringProcessor.gradleUrlUsageType=更新 Gradle 分发 URL
project.upgrade.gradlePluginsRefactoringProcessor.commandName=升级 Gradle 插件
project.upgrade.gradlePluginsRefactoringProcessor.usageView.header=升级 Gradle 插件
project.upgrade.gradlePluginsRefactoringProcessor.wellKnownGradlePluginUsageType=更新 Gradle 插件版本
android.logcat.new.filter.dialog.expression.label=表达式 (&E):
android.logcat.expression.filter.doc=<p>表达式筛选器是计算结果为布尔值的 {0} 语法表达式。表达式中提供了以下变量:<br><br>{1} </p>
android.ddms.actions.screenshot.title=屏幕截图
android.configure.logcat.suppress.tags.text=禁止标记
android.configure.logcat.suppress.tags.description=禁止 spammy 日志标记
android.configure.logcat.suppress.tags.title=禁止 Logcat 标记
android.configure.logcat.suppress.single.tag.text=禁止日志标记
android.configure.logcat.suppress.single.tag.description=禁止 spammy 日志标记
android.configure.logcat.tag.empty=<空>
android.safeargs.fix.import=导入
android.configure.logcat.suppress.tags.confirm.title=确认筛选器
android.configure.logcat.suppress.tags.confirm.description=是否要筛选具有以下标记的所有日志?
project.upgrade.migrateToInstallationRefactoringProcessor.commandName=从 adbOptions 迁移到安装
project.upgrade.migrateToInstallationRefactoringProcessor.usageView.header=从 adbOptions 迁移到安装
project.upgrade.migrateToInstallationRefactoringProcessor.move.usageType=将属性迁移到安装
project.upgrade.migrateToInstallationRefactoringProcessor.remove.usageType=移除 adbOptions
project.upgrade.installationUsageInfo.move.tooltipText=将用法从 adbOptions 移动到安装
project.upgrade.installationUsageInfo.remove.tooltipText=移除 adbOptions
project.upgrade.migrateToEmulatorSnapshotsRefactoringProcessor.commandName=从 failureRetention 迁移到 emulatorSnapshots
project.upgrade.migrateToEmulatorSnapshotsRefactoringProcessor.usageView.header=从 failureRetention 迁移到 emulatorSnapshots
project.upgrade.migrateToEmulatorSnapshotsRefactoringProcessor.move.usageType=将属性迁移到 emulatorSnapshots
project.upgrade.migrateToEmulatorSnapshotsRefactoringProcessor.remove.usageType=移除 failureRetention
project.upgrade.emulatorSnapshotsUsageInfo.move.tooltipText=将用法从 failureRetention 移动到 emulatorSnapshots
project.upgrade.emulatorSnapshotsUsageInfo.remove.tooltipText=移除 failureRetention
project.upgrade.migrateToTestCoverageRefactoringProcessor.commandName=从 jacoco 迁移到 testCoverage
project.upgrade.migrateToTestCoverageRefactoringProcessor.usageView.header=从 jacoco 迁移到 testCoverage
project.upgrade.migrateToTestCoverageRefactoringProcessor.move.usageType=将属性迁移到 testCoverage
project.upgrade.migrateToTestCoverageRefactoringProcessor.remove.usageType=移除 jacoco
project.upgrade.testCoverageUsageInfo.move.tooltipText=将用法从 jacoco 移动到 testCoverage
project.upgrade.testCoverageUsageInfo.remove.tooltipText=移除 jacoco
android.as.wizard.welcome.dialog.title=Android Studio 安装向导
android.ij.wizard.welcome.dialog.title=Android Support 插件安装向导
android.ddms.screenrecorder.options.info=<html>Screen Recorder 最多可以录制 3 分钟的设备显示器。</html>
android.ddms.screenrecorder.options.bit.rate=比特率(Mbps):
android.ddms.screenrecorder.options.bit.rate.invalid=比特率必须为整数。
android.ddms.screenrecorder.options.resolution=分辨率(% 原生分辨率):
android.ddms.screenrecorder.options.show.taps=显示点按
android.ddms.screenrecorder.options.show.taps.tooltip=显示点按的视觉反馈
android.ddms.screenrecorder.options.use.emulator.recording=使用 Emulator Recording (webm)
android.ddms.screenrecorder.options.use.emulator.recording.tooltip=使用 Emulator Recording API 进行录制。如果未选中，将改用 ADB 录制。
android.logcat.adb.initialize.starting=初始化ADB
android.logcat.adb.initialize.not.found=找不到 ADB 二进制文件
android.logcat.adb.initialize.failure=ADB 连接错误
project.upgrade.migratePackagingOptionsRefactoringProcessor.commandName=将 packagingOptions 指令迁移到子块
project.upgrade.migratePackagingOptionsRefactoringProcessor.usageView.header=将 packagingOptions 指令迁移到子块
project.upgrade.migratePackagingOptionsRefactoringProcessor.move.usageType=移动属性
project.upgrade.migratePackagingOptionsRefactoringProcessor.move.tooltipText=移动属性
project.upgrade.migratePackagingOptionsRefactoringProcessor.split.usageType=拆分 jniLibs 和资源之间的属性
project.upgrade.migratePackagingOptionsRefactoringProcessor.split.tooltipText=拆分 jniLibs 和资源之间的属性
project.upgrade.migratePackagingOptionsRefactoringProcessor.remove.usageType=移除属性(拆分后)
project.upgrade.migratePackagingOptionsRefactoringProcessor.remove.tooltipText=移除属性(拆分后)
project.upgrade.migrateToLintRefactoringProcessor.commandName=从 lintOptions 迁移到 lint
project.upgrade.migrateToLintRefactoringProcessor.usageView.header=从 lintOptions 迁移到 lint
project.upgrade.migrateToLintRefactoringProcessor.move.usageType=将属性迁移到 lint
project.upgrade.migrateToLintRefactoringProcessor.remove.usageType=移除 lintOptions
project.upgrade.lintOptionsUsageInfo.move.tooltipText=将用法从 lintOptions 迁移到 lint
project.upgrade.lintOptionsUsageInfo.remove.tooltipText=移除 lintOptions
project.upgrade.rewriteDeprecatedOperatorsRefactoringProcessor.commandName=重写已弃用的运算符
project.upgrade.rewriteDeprecatedOperatorsRefactoringProcessor.usageView.header=重写已弃用的运算符
project.upgrade.rewriteDeprecatedOperatorsRefactoringProcessor.rewrite.usageType=重写用法
project.upgrade.deprecatedOperatorUsageInfo.rewrite.tooltipText=重写用法
wear.assistant.device.list.tooltip.ok=Wear OS 虚拟设备配对助手
wear.assistant.device.connection.pairing.auto.title=完成 Wear OS 配对
wear.assistant.device.connection.pairing.auto.step=在 Wear OS 应用中启用模拟器配对
wear.assistant.device.connection.pairing.auto.start=<html>正在尝试配对模拟器。</html>
wear.assistant.device.connection.pairing.auto.consent=<html>正在等待用户在 {0} 上完成 Wear OS 应用中的步骤。</html>
wear.assistant.device.connection.pairing.auto.failed=<html>无法启用模拟器配对。</html>
wear.assistant.device.connection.gmscore.error=<html>更新 Wear OS 设备系统镜像以更新 Google Play 服务并启用配对。<a href="https://developer.android.com/studio/intro/update#sdk-manager">了解如何操作。</a>
wear.assistant.device.connection.wear.os.wear3=<html>Wear OS 设备为不同的配套应用配置。<a href="https://developer.android.com/training/wearables/get-started/creating#pairing-assistant">了解详情</a>以手动安装 Wear OS 配套应用并配对设备。</html>
android.compile.messages.generating.r.java=正在生成 R.java…
android.compile.messages.copying.sources.from.libraries=正在从库中复制源…
wear.assistant.device.list.subtitle_one=<html>选择要与 {0} 配对的设备。IDE 将启动并在设备之间建立连接。<a href="{1}">了解详情 ↗</a></html>
wear.assistant.device.list.subtitle_two=<html>选择 <b>Android 11+</b> 配套设备和 Wear OS 模拟器进行配对。IDE 将启动并在设备之间建立连接。<a href="{0}">了解详情 ↗</a></html>
avd.manager.arm.images=ARM 镜像
avd.manager.x86.images=x86 镜像
android.run.configuration.module.label=模块
wear.assistant.device.list.tooltip.offline=设备必须处于在线状态才能与 Wear OS 虚拟设备配对
wear.assistant.device.list.tooltip.unsupported=Wear OS 配对助手无法配对不受支持的设备
android.watchface.configuration.type.name=Wear OS 表盘
android.run.configuration.watchface=表盘
android.tile.configuration.type.name=Wear OS 磁贴
android.run.configuration.tile=磁贴提供程序
project.upgrade.redundantPropertiesRefactoringProcessor.commandName=移除冗余属性
project.upgrade.redundantPropertiesRefactoringProcessor.usageView.header=移除冗余属性
project.upgrade.redundantProperties.usageType=移除属性
project.upgrade.redundantProperties.tooltipText=移除属性
android.sdk.manager.installer.panel.title=SDK 组件安装程序
android.sdk.manager.installer.panel.description=正在完成请求的操作
android.sdk.manager.installer.install.finished=请等待请求的操作完成。
android.sdk.manager.installer.install.error=请求的操作未成功完成。有关详细信息，请参阅 IDE 日志。
android.logcat.error.title=Android Logcat 错误
android.logcat.error.clearLogcat=无法清除 Logcat，执行 "adb logcat -c" 时出现异常。有关详细信息，请参阅 idea.log。
unsupported.mac.intelonarm.message=Android Studio 运行在 Rosetta 2 下，这可能会影响性能。我们推荐使用官方的 Apple silicon (arm64) 版本。
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.commandName=将软件包从 Android 清单移动到构建文件
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.usageView.header=将软件包从 Android 清单移动到构建文件
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.removePackage.usageType=移除软件包声明
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.removePackage.tooltipText=移除软件包声明
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.addNamespace.usageType=添加命名空间声明
project.upgrade.androidManifestPackageToNamespaceRefactoringProcessor.addNamespace.tooltipText=添加命名空间声明
android.complication.configuration.type.name=Wear OS 复杂功能
android.run.configuration.complication=复杂功能提供程序
updates.settings.channel.locked=
wear.assistant.connection.alert.factory.reset.title=Wear OS 恢复出厂设置
wear.assistant.connection.alert.factory.reset.subtitle=<html>Wear OS 模拟器通常只能与一个配套设备配对。<br/><br/>{0} 当前已与 {1} 配对，与 {2} 配对可能需要恢复出厂设置。.</html>
wear.assistant.connection.alert.cant.start.device.title={0} 未启动
wear.assistant.connection.alert.cant.start.device.subtitle=<html>启动 {0} 时出错。设备必须处于在线状态才能配对。</html>
wear.assistant.connection.alert.button.try.again=重试
android.wizard.validate.select.compose.sdk=Compose 需要安装 Android SDK 31 或更新版本
wear.assistant.device.connection.pairing.success.skipandfinish=<html><div style=''text-align: center;''><b>{0} 已与 {1} 配对</b><br/> 点按<b>跳过并完成</b>，然后按照配套应用中的说明<br/>完成配对过程。</div></html>
wear.assistant.connection.alert.cant.bridge.title=连接设备时出错
wear.assistant.connection.alert.cant.bridge.subtitle=连接设备时出现问题。