action.DeviceAndSnapshotComboBox.text=选择设备
action.Android.FixAndroidRunConfigurations.text=修复 Android 运行配置
action.Android.FixAndroidRunConfigurations.description=如果 Android 运行配置中缺少“Gradle-aware Make”启动任务，请添加此任务
action.LayoutEditor.AddSampleData.text=添加示例数据文件
action.LayoutEditor.AddSampleData.description=添加新的数据示例文件
action.ConvertFromWebp.text=转换为 PNG…
action.ConvertToWebp.text=转换为 WebP…
action.InferAnnotations.text=推断支持注解…
action.AndroidAddRTLSupport.text=在可能的情况下添加 RTL 支持…
action.AndroidAddRTLSupport.description=在可能的情况下添加从右到左(RTL)支持
action.AndroidFindStyleApplicationsAction.text=在可能的情况下使用样式(_W)…
action.AndroidFindStyleApplicationsAction.description=在可能的情况下，将特性替换为 Android 样式引用
action.AndroidInlineIncludeAction.text=内联布局(_L)…
action.AndroidInlineIncludeAction.description=内联包含的 Android 布局
action.AndroidInlineStyleReferenceAction.text=内联样式(_S)…
action.AndroidInlineStyleReferenceAction.description=内联 Android 样式
action.AndroidExtractAsIncludeAction.text=布局(_L)…
action.AndroidExtractAsIncludeAction.description=将一个或多个视图提取到单独的布局中
action.AndroidEnableInstantAppsSupport.text=启用免安装应用支持…
action.AndroidEnableInstantAppsSupport.description=为模块启用免安装应用支持
action.AndroidExtractStyleAction.text=样式(_Y)…
action.AndroidExtractStyleAction.description=从布局中拉取与样式相关的特性，并将其作为新样式提取
action.AndroidMigrateToResourceNamespacesAction.text=迁移到资源命名空间…
action.AndroidMigrateToResourceNamespacesAction.description=迁移到资源命名空间
action.AndroidMigrateToAndroidxAction.text=迁移到 AndroidX…
action.AndroidMigrateToAndroidxAction.description=迁移到 AndroidX 软件包名称
action.AndroidMigrateToAppCompatAction.text=迁移到 AppCompat…
action.AndroidMigrateToAppCompatAction.description=将应用迁移到 AppCompat
action.AndroidUnusedResourceAction.text=移除未使用的资源…
action.AndroidUnusedResourceAction.description=移除未使用的资源
action.AndroidModularizeAction.text=模块化…
action.AndroidModularizeAction.description=将类及其关联资源移到另一个模块
action.AndroidConnectDebuggerAction.text=将调试器附加到 Android 进程
action.AndroidConnectDebuggerAction.description=将调试器附加到 Android 进程
action.IdeaNewProject.text=IDEA 新建项目…
action.StatisticsViewer.text=显示统计信息查看器
group.Internal.Android.text=Android
action.Android.DeviceExplorer.Help.text=打开设备资源管理器帮助
action.Android.DeviceExplorer.GotoSdcardFolder.text=导航到 SD 卡文件夹
action.Android.DeviceExplorer.GotoDatabaseFolder.text=导航到数据库文件夹
action.Android.DeviceExplorer.GotoSharedPrefsFolder.text=导航到共享的偏好设置文件夹
action.Android.RunAndroidAvdManager.text=AVD 管理器
action.Android.RunAndroidAvdManager.toolbar.text=添加设备定义…
action.Android.RunAndroidAvdManager.popup.text=打开 AVD Manager
action.Android.RunAndroidAvdManager.description=打开 Android 虚拟设备 (AVD) 管理器，来管理仿真器映像和快照
group.AndroidToolsGroup.text=Android
action.Android.CreateResourcesActionGroup.text=Android 资源文件
action.Android.ExportProjectZip.text=将项目导出为 Zip 文件…
action.Project.InterproceduralThreadAnnotations.text=过程间线程注解检查器
action.Project.CallGraph.text=上下文调用路径

command.0.execution.failed.with.exit.code.1=命令“{0}”执行失败，退出代码 {1}
add.string.resource.intention.text=提取字符串资源
extract.dimension.intention.text=提取尺寸资源
implement.parcelable.intention.text=添加 Parcelable 实现
remove.parcelable.intention.text=移除 Parcelable 实现
redo.parcelable.intention.text=替换 Parcelable 实现
add.dependency.intention.text=添加库依赖项
resource.name=资源名称
intention.family=Android
package.not.found.error=清单文件中未指定软件包
cannot.resolve.flag.error=无法解析标志
cannot.resolve.format.error=无法解析格式
create.value.resource.quickfix.name=在 ''{1}'' 中创建值资源 ''{0}''
create.value.resource.intention.name=创建 {0} 值资源 ''{1}''
create.file.resource.quickfix.name=在 {1} 中创建资源文件 ''{0}''
create.file.resource.intention.name=创建 {0} 资源文件 ''{1}''
quick.fixes.family=Android 快速修复
not.resource.file.error=文件 {0} 不是资源文件
check.resource.dir.error=找不到模块 {0} 的资源目录
choose.device.dialog.title=选择部署目标
replace.avd.question=AVD {0} 已存在。是否替换?
create.avd.dialog.title=创建 Android Virtual Device
rename.alternate.resources.question=为其他配置重命名替代资源?
rename.dialog.title=收藏列表的新名称
specify.avd.name.error=请指定 AVD 名称
select.platform.error=请选择 Android SDK
avd.dialog.title=选择 Android Virtual Device
select.compatible.avd.error=请选择兼容 AVD
cant.remove.avd.error=无法移除 AVD。请关闭模拟器
cant.load.avds.error=无法重新加载 AVD 列表。请检查 SDK
build.android.module.process.title=创建 Android 主软件包
package.name.must.contain.2.ids.error=软件包名称必须包含 2 个分段(例如 com.example)
specify.platform.error=请指定 Android SDK
run.error.apk.not.valid=当前项目无法运行
run.error.apk.not.signed=当前所选变体({0})的 APK 未签署。请为此变体({1})指定签署配置。
cannot.connect.to.adb.error=无法连接到 ADB。可能未指定 Android SDK。
specify.main.package.error=未指定模块 {0} 中的 Android 主软件包
android.module.type.name=应用模块
android.module.type.description=Android 模块用于开发以 Android 操作系统为目标的移动应用。
not.valid.activity.name.error=不是有效的 Activity 名称“{0}”
specify.package.name.error=必须指定软件包名称
not.valid.package.name.error=不是有效的软件包名称“{0}”
cant.find.activity.class.error=找不到 android.app.Activity 类
cant.find.class.error=找不到 {0} 类
activity.class.not.specified.error=未指定 Activity 类
not.activity.subclass.error={0} 不是 Activity 子类或别名
no.facet.error=找不到 {0} 的 Android facet
android.logcat.tab.title=Logcat
android.logcat.title=Android Monitor
android.logcat.error.dialog.title=Android Logcat 错误
android.logcat.color.page.name=Android Logcat
warning.level.title=警告
verbose.level.title=Verbose
info.level.title=信息
debug.level.title=调试
error.level.title=错误
assert.level.title=断言
rename.resource.question=重命名资源“{0}”?
rename.resource.dialog.text=将资源 {0} 重命名为
create.project.library=创建项目库 ''{0}''(&P)
create.global.library=创建全局库 ''{0}''(&A)
create.library.dialog.title=创建 Android 库
select.target.dialog.text=请选择 Android 目标
default.activity.not.found.error=找不到默认 Activity
specific.activity.not.launchable.error=Activity 必须导出或包含 intent-filter
activity.not.declared.in.manifest=Activity ''{0}'' 未在 AndroidManifest.xml 中声明
activity.without.launcher.intent=Activity ''{0}'' 没有启动器 intent
activity.declared.but.manifest.merging.disabled=Activity ''{0}'' 在库模块中声明，但是应用模块 ''{1}'' 的清单合并被禁用
new.typed.resource.command.name=新建 {0} 资源文件
new.typed.resource.dialog.title=新建 {0} 资源文件
new.file.dialog.text=输入一个新的文件名
new.typed.resource.action.description=创建新的 {0} 资源文件
new.typed.resource.action.title={0}资源文件
new.resource.action.title=Android 资源文件
new.resource.dir.action.title=Android 资源目录
new.resource.action.description=创建新的资源文件
new.resource.command.name=新建资源文件
new.resource.dialog.title=新建资源文件
new.resource.dir.command.name=新建资源目录
new.resource.dir.dialog.title=新建资源目录
new.sampledata.dir.action.title=示例数据目录
new.sampledata.dir.action.description=创建新的示例数据目录
no.android.targets.error=在此 SDK 中找不到任何 Android 目标
android.choose.color=选择颜色
android.run.configuration.type.name=Android 应用
android.run.configuration.type.description=Android 启动/调试配置
android.run.bundle.configuration.type.name=Android 应用(bundle)
android.run.bundle.configuration.type.description=Android 启动/调试配置(bundle)
android.test.run.configuration.type.name=Android Instrumented Tests
android.test.run.configuration.type.description=Android Instrumented Tests 配置
android.run.configuration.package.label=包(&K)
android.run.configuration.class.label=类(&L)
android.run.configuration.method.label=方法(&T)
android.run.configuration.all.in.module.radio=模块中的所有(&A)
android.run.configuration.all.in.package.radio=软件包中的所有(&I)
android.run.configuration.class.radio=类(&S)
android.browse.test.class.dialog.title=选择测试类
android.run.configuration.method.radio=方法(&E)
android.test.run.configuration.instrumentation.label=插桩类:
android.browse.instrumentation.class.dialog.title=选择插桩类
instrumentation.runner.class.not.specified.error=未指定插桩运行程序类
cannot.find.testcase.error=找不到 junit.framework.TestCase 类
android.run.configuration.do.nothing.label=不启动 Activity(&D)
target.package.not.specified.error=未在 AndroidManifest.xml 中指定目标软件包
android.run.configuration.network.spped.label=网络速度(&N):
android.run.configuration.network.latency.label=网络延迟(&E):
android.run.configuration.wipe.user.data.label=擦除用户数据(&W)
android.run.configuration.disable.boot.animation.label=禁用启动动画(&B)
android.run.configuration.command.line.label=附加命令行选项(&C)
android.run.configuration.logcat.skip.content.label=启动前清除日志(&C)
android.avd.error.title=AVD 错误
cant.load.avds.error.prefix=无法重新加载 AVD 列表:
android.export.signed.package.action.text=导出签署的应用软件包
android.generate.signed.apk.action.text=生成已签名的 APK…
android.generate.signed.apk.action.bundle.text=生成已签名的捆绑包/APK…
android.unable.to.get.output.directory.error=无法获取项目的输出文件夹
android.file.not.exist.error=文件{0}不存在
android.project.contains.errors.error=该项目包含错误
android.export.package.existing.keystore.label=使用现有密钥库(&U)
android.export.package.new.keystore.label=创建新的密钥库(&C)
android.export.package.keystore.location.label=位置(&L):
android.password.label=密码(&S):
android.confirm.password.label=确认(&C):
android.export.package.passwords.not.match.error=密码不匹配
android.export.package.specify.keystore.location.error=请指定密钥库位置
android.export.package.specify.key.password.error=请指定密钥的密码
android.export.package.specify.key.store.password.error=请指定密钥库的密码
android.export.package.specify.password.error=请指定密码
android.export.package.incorrect.password.length=密码必须至少为 6 个字符
android.cannot.find.directory.error=无法找到目录 {0}
android.cannot.find.file.error=未找到文件{0}
android.export.package.new.key.label=创建新的密钥(&C)
export.android.package.existing.key.label=使用现有密钥(&U)
android.export.package.key.alias.label=别名(&A):
android.export.package.keystore.error.title=密钥库加载错误
android.extract.package.select.key.alias.error=请选择别名
android.export.package.key.validity.label=有效期(年)(&V):
android.export.package.key.certificate.name.label=名字和姓氏(&F):
android.export.package.organization.unit.label=组织单位(&O):
android.export.package.city.label=城市或地区(&L):
android.export.package.state.label=州或省(&T):
android.export.package.country.code.label=国家/地区代码(XX)(&X):
android.export.package.specify.key.alias.error=请指定键别名
android.export.package.specify.certificate.field.error=至少一个证书颁发者字段需要为非空
android.export.package.organization.label=组织(&R):
android.cannot.create.new.key.error=无法创建新密钥或密钥库
android.create.new.key.error.prefix=密钥已创建，存在错误:
android.cannot.find.parent.directory.error=找不到文件 {0} 的父目录
android.extract.package.choose.keystore.title=选择密钥库文件
android.export.package.destination.akp.label=目标 APK 路径(&D):
android.extract.package.cannot.find.key.error=无法找到密钥 {0}
android.extract.package.specify.apk.path.error=请指定目标 APK 路径
android.extract.package.task.title=生成 APK 文件
android.export.package.wizard.title=正在已签名的 APK
android.export.package.wizard.bundle.title=生成签署的 Bundle 或 APK
android.export.package.bundle.description=<html>生成签署的应用 Bundle 以上传到应用商店来获得以下好处:<ul><li>更小的下载大小</li><li>按需应用功能</li><li>仅资产模块</li></ul></html>
android.export.package.bundle.gradle.error=生成签署的 Bundle 需要您将 Android Gradle 插件更新到 3.2.0 或更高版本。
android.export.package.bundle.gradle.update=关闭此对话框并更新插件
android.export.package.bundle.key.export=导出加密密钥，将发布的应用注册在
android.export.package.success.message=已成功创建文件 {0}
android.apk.sign.gradle.no.model=缺少 Gradle 项目信息。请检查 IDE 是否已成功将其状态与 Gradle 项目模型同步。
android.apk.sign.gradle.missing.destination=请为签署的 {0} 指定目标文件夹
android.apk.sign.gradle.invalid.destination=该目标文件夹不存在或不可写
android.apk.sign.gradle.missing.variants=请选择要构建并签署的构建变体
android.apk.sign.gradle.missing.signature-version=请至少选择一个要使用的签名版本
android.apk.sign.gradle.no.variants=未定义构建变体
avd.not.found.error=找不到 AVD {0}
avd.not.valid.error=AVD {0} 无效
avd.not.compatible.error=AVD {0} 的构建目标与您的构建目标不兼容
avd.cannot.be.loaded.error=无法加载虚拟设备
navigate.to.android.resource.action=导航到 Android 资源定义
android.identifier.expected={0} 不是一个标识符
android.directory.cannot.be.found.error=无法找到“{0}”目录
create.run.configuration.question=是否要为模块 {0} 创建运行配置?
create.run.configuration.title=创建 Android 运行配置
file.must.be.under.module.error=无法计算 {0} 的相对路径
android.extract.package.choose.dest.apk=选择目标 APK 文件
android.cannot.create.file.error=无法创建文件 {0}
android.cannot.create.dir.error=无法创建目录{0}
android.manifest.not.found.error=AndroidManifest.xml 不存在或根标记不正确
android.run.configuration.not.supported=当前项目不支持运行配置 {0}。无法获取 APK 文件的位置。
android.apt.settings.title=R.java 和 Manifest.java 文件
android.aidl.settings.title=AIDL 编译器
android.generate.r.java.checkbox=在资源更改后重新生成 R.java 文件(&G)
android.dest.directory.title=生成文件的目录(&Y):
android.generate.r.java.by.res.dir=使用在“结构”部分中指定的资源目录(&O)
android.use.custom.r.java.source.dir=使用自定义资源目录(&M):
android.regenerate.idl.when.changed.checkbox=在 AIDL 文件更改后重新生成 Java 文件(&J)
android.as.wizard.welcome.dialog.title=Android Studio 安装向导
android.ij.wizard.welcome.dialog.title=Android Support 插件安装向导
android.wizard.application.project.button=应用(&A)
android.wizard.lib.project.button=库(&L)
android.wizard.test.project.button=测试(&T)
android.wizard.tested.project.label=经过测试的模块(&M):
android.wizard.specify.tested.module.error=请指定经过测试的模块
android.wizard.tested.module.without.facet.error=经过测试的模块必须包含 Android facet
android.wizard.cannot.find.module.parent.dir.error=找不到模块父目录: {0}
android.wizard.invalid.sdk.error=Android SDK 无效
android.wizard.new.activity.title=新建 Android Activity
android.wizard.new.fragment.title=新建 Android Fragment
android.wizard.new.component.title=新建 Android 组件
android.wizard.config.activity.title=配置 Activity
android.wizard.config.component.title=配置组件
android.wizard.config.fragment.title=配置 Fragment
android.wizard.action.new.component=创建新的 {0}
android.wizard.action.requires.minsdk={0} (需要 minSdk >= {1})
android.wizard.action.requires.androidx={0} (需要 AndroidX 支持)
android.wizard.action.requires.new.agp={0} (需要 Android Gradle 插件 {1} 或更新版本)
android.wizard.action.no.app.theme={0} (找不到应用主题)
android.wizard.module.presentable.name=Android
android.wizard.module.description=Android 模块用于开发要在 <b>Android</b> 操作系统上运行的应用。<br><b>Android</b> 模块包括一个或多个<b>操作组件</b>且可能支持一些机型，<br>包括<b>手机与平板电脑</b>、<b>Wear</b> 和 <b>Android Auto</b>。
android.wizard.module.import.eclipse.title=导入 Eclipse ADT 项目
android.wizard.module.import.eclipse.description=将现有 Eclipse ADT 项目作为模块导入
android.wizard.module.import.gradle.title=导入 Gradle 项目
android.wizard.module.import.gradle.description=将现有 Gradle 项目作为模块导入
android.wizard.module.import.library.title=从库中导入模块
android.wizard.module.import.library.browse.title=选择软件包
android.wizard.module.import.library.browse.description=选择要作为新模块导入的 jar 或 aar 软件包
android.wizard.module.import.library.no.path=需要归档文件路径
android.wizard.module.import.library.bad.path=文件不存在
android.wizard.module.import.library.bad.extension=文件不是归档(.jar 或 .aar)
android.wizard.module.import.library.no.name=需要子项目名称
android.wizard.module.import.library.bad.name=Gradle 路径中不允许字符 {0}
android.wizard.module.import.library.taken.name=项目已经包含名称为 {0} 的子项目
android.wizard.module.import.source.title=从源中导入模块
android.wizard.module.import.source.browse.title=选择源位置
android.wizard.module.import.source.browse.description=选择要作为新的子项目导入的现有 ADT 或 Gradle 项目
android.wizard.module.import.source.browse.invalid.location=路径不存在
android.wizard.module.import.source.browse.taken.location=此位置已导入
android.wizard.module.import.source.browse.bad.modules.1=无法找到子项目 %1$s 的源。\n\
这可能导致缺少依赖项。
android.wizard.module.import.source.browse.bad.modules.2=无法找到子项目 %1$s 和 %2$s 的源。\n\
这可能导致缺少依赖项。
android.wizard.module.import.source.browse.bad.modules.more=无法找到 %1$s 和其他 %2$d 个子项目的源。\n\
这可能导致缺少依赖项。
android.wizard.module.import.source.browse.no.modules=选择要导入的模块
android.wizard.module.import.source.browse.cant.import=指定 Gradle 或 Android Eclipse 项目的位置
android.wizard.module.import.source.browse.error=内部错误，请检查 IDE 日志
android.wizard.module.import.source.browse.validating=正在验证
android.wizard.module.enable.instant=启用免安装应用支持
android.wizard.module.new.module.menu=新建模块…
android.wizard.module.new.module.menu.description=向项目添加一个新模块
android.wizard.module.new.module.title=创建新的模块
android.wizard.module.new.module.header=选择模块类型
android.wizard.module.new.module.command=添加模块
android.wizard.module.new.mobile=手机与平板电脑
android.wizard.module.new.mobile.description=创建新的 Android 手机和平板电脑模块。
android.wizard.module.new.library=Android 库
android.wizard.module.new.library.description=创建新 Android 库。
android.wizard.module.new.dynamic.module=动态功能
android.wizard.module.new.dynamic.module.description=创建可以动态交付的新 Android App Bundle 模块。
android.wizard.module.new.dynamic.module.instant=免安装的动态功能
android.wizard.module.new.dynamic.module.instant.description=创建一个将作为免安装应用交付的新 Android 模块.
android.wizard.module.new.dynamic.select.base=请选择一个项目基础模块
android.wizard.module.new.dynamic.on.demand.options=配置按需选项
android.wizard.module.new.dynamic.download.options=模块下载选项
android.wizard.module.new.automotive=Automotive
android.wizard.module.new.automotive.description=创建新的 Android Automotive 模块。
android.wizard.module.new.wear=Wear OS
android.wizard.module.new.wear.description=创建新的 Wear OS 模块。
android.wizard.module.new.tv=Android TV
android.wizard.module.new.tv.description=创建新的 Android TV 模块。
android.wizard.module.new.java.or.kotlin.library=Java 或 Kotlin 库
android.wizard.module.new.java.or.kotlin.library.description=创建新的 Java 或 Kotlin 库。
android.wizard.module.new.google.cloud=Google Cloud
android.wizard.module.new.benchmark.module.app=基准
android.wizard.module.new.benchmark.module.description=创建新的基准模块。
android.wizard.module.config.title=配置您的模块
android.wizard.module.config.new.library=我的库
android.wizard.module.config.new.base.missing=<No Base Module found>
android.wizard.module.help.choose=帮助我选择
android.wizard.module.help.loading=加载
android.wizard.module.help.refreshing=正在加载统计信息…
android.wizard.module.help.name=要将模块放置在子文件夹中，请使用语法: :subfolder:module_name，例如 :libraries:lib1
android.wizard.module.package.too.long=软件包名称过长
android.wizard.project.create.error=新建项目向导中出错
android.wizard.project.target=目标 Android 设备
android.wizard.project.select.form=选择您的应用将在上面运行的机型
android.wizard.project.new.choose=选择项目模板
android.wizard.project.new.configure=配置您的项目
android.wizard.project.no.selected.form=必须至少选择一种机型。
android.wizard.project.missing.form.factor=为了支持 {0}，您需要启用{1}
android.wizard.project.help.appcompat=当最低 SDK 设置为 API 级别 29 或更高级别时，或者在创建需要最新版本 Play 服务的 Activity 时，选项将被禁用。
android.wizard.project.invalid.base.min.sdk=在 {1} 上将最低 SDK 级别设置为 {0} 以与 {2} 兼容
android.wizard.project.loading.sdks=正在查找可供下载的 SDK…
android.wizard.project.loading.stats.fail=无法加载统计信息。值可能已过期。
android.wizard.activity.add=将 Activity 添加到 {0}
android.wizard.activity.add.cpp.docslinktext=请参阅文档
android.wizard.activity.not.found=未选择 Activity 模板
android.wizard.activity.invalid.min.sdk=所选 Activity 模板的最低 SDK 级别为 {0}。
android.wizard.activity.invalid.androidx=所选 Activity 模板要求项目具有 androidx.* 依赖项。
android.wizard.activity.invalid.needs.kotlin=所选活动模板需要 Kotlin。
android.wizard.activity.navigation.configure=配置导航
android.wizard.fragment.add=将 Fragment 添加到 {0}
android.wizard.fragment.invalid.androidx=所选片段模板要求项目具有 androidx.* 依赖项。
android.wizard.fragment.invalid.needs.kotlin=所选片段模块需要 Kotlin。
android.wizard.fragment.invalid.min.sdk=所选 Fragment 模板的最低 SDK 级别为 {0}。
android.wizard.fragment.not.found=未选择 Fragment 模板
android.wizard.gallery.item.none=<无>
android.wizard.language.combo.header=源语言
android.wizard.language.combo.empty=(选择语言)
android.wizard.language.combo.tooltip=用于代码生成的编程语言
android.wizard.validate.invalid.class.name=请输入有效的类名
android.wizard.validate.empty.module.name=请输入有效的模块名称
android.wizard.validate.empty.name=请输入有效名称
android.wizard.validate.module.already.exists=模块“{0}”已存在
android.wizard.validate.module.illegal.character=模块名称 ''{1}'' 中存在非法字符 ''{0}''
android.wizard.validate.module.needs.androidx=项目需要转换为 androidx.* 依赖项
android.wizard.validate.module.needs.new.agp=组合需要 Android Gradle 插件 {0} 或更新版本
android.wizard.validate.project.illegal.character=项目名称 ''{1}'' 中存在非法字符 ''{0}''
android.wizard.validate.empty.application.name=请输入应用名称 (在启动器中显示) 或库的描述性名称
android.wizard.validate.empty.project.name=请输入应用名称
android.wizard.validate.lowercase.application.name=大多数应用的应用名称以大写字母开头
android.wizard.validate.select.language=请选择语言
android.wizard.validate.select.appcompat=使用旧版 android.support 库将阻止您使用最新的 Play 服务和 Jetpack 库
android.invalid.sdk.message=您的 Android SDK 路径无效。请在 <a href="#">Settings</a> 中进行更新。
android.wizard.jdk.autodetect.result.not.found=找不到合适的 JDK
android.facet.editor.is.library.checkbox=库模块(&B)
android.facet.not.editable.text=无法编辑此 facet，因为它自动创建。仅可编辑手动创建的 Android facet。
android.run.sdk.manager.action.text=SDK 管理器
android.choose.sdk.label=请选择 Android SDK 位置
android.choose.sdk.title=选择 SDK
copy.resources.from.artifacts.setting=在 Make 之前运行“process-resources”Maven 任务(&U)
android.apk.settings.title=资源打包
android.create.avd.dialog.sdcard.size=大小(&I):
android.create.avd.dialog.sdcard.file=文件(&F):
android.create.avd.dialog.sdcard.title=SD 卡
android.create.avd.dialog.sdcard.file.browser.title=选择 SD 卡文件
android.facet.settings.res.overlay.panel.title=Res-overlay 目录
android.facet.setting.res.overlay.add=增加(&D)
android.facet.settings.res.overlay.remove=移除(&O)
android.inspections.group.name=Android
android.inspections.dom.name=Android 资源验证
android.inspections.root.tag.name=Android XML 根标记验证
android.inspections.unknown.attribute.name=未知 Android XML 特性
android.inspections.unknown.attribute.message=未知特性 {0}
android.facet.settings.generate.unsigned.apk=生成未签署的 APK(&K)
android.compile.messages.generating.r.java=正在生成 R.java…
android.compile.messages.generating.r.java.content.name=正在生成源
android.compile.messages.copying.sources.from.libraries=正在从库中复制源…
android.new.component.action.title=Android (其他)
android.new.component.action.title.non.gradle=Android 组件
android.new.component.action.description=从其他类别创建新的 Android 对象
android.new.component.action.command.name=新建 Android 组件
android.new.component.dialog.activity.item=活动
android.new.component.dialog.fragment.item=片段
android.new.component.dialog.service.item=服务
android.new.component.dialog.broadcast.receiver.item=广播接收器
android.new.component.dialog.broadcast.remote.interface=远程接口
android.dex.compiler.vm.options.title=Android DX 编译器 VM 选项
android.proguard.vm.options.title=Android ProGuard VM 选项
android.dex.compiler.configurable.display.name=Android 编译器
android.run.configuration.general.tab.title=常规
android.run.configuration.emulator.tab.title=模拟器
android.run.configuration.misc.tab.title=杂项
android.facet.settings.apk.path.label=APK 路径(&P):
android.run.confguration.deploy.and.install.check.box=部署应用(&E)
android.logcat.no.android.facets.error=项目中没有 Android facet
android.facet.settings.compile.resources.by.ide=通过 IDE 生成(&G)
android.keystore.password.label=密码(&S):
android.keystore.confirm.password.label=确认(&O):
android.export.package.new.key.alias.label=别名(&A):
android.key.password.label=密码(&S):
android.cannot.debug.noDebugPermissions=无法从设备 {1} 上的模块 {0} 调试应用。\n\
此应用在清单中未启用 ''debuggable'' 特性。\n\
如果您已在清单中手动设置该特性，请将其移除并让 IDE 自动分配。\n\
如果您使用的是 Gradle，请确保您的当前变体可调试。
android.cannot.run.library.project.error=该模块不能是 Android 库
android.cannot.run.library.project.in.this.buildtype=当前选择的 Gradle 构建类型不支持插桩测试
android.compilation.error.specify.platform=[{0}] Android SDK 未指定或无法解析
android.compilation.error.manifest.not.found=[{0}] AndroidManifest.xml 文件未找到。请查看 Android facet 设置。
android.compilation.error.apt.gen.not.specified=没有为模块 {0} 指定 AAPT 目标目录
android.compilation.error.apk.path.not.specified=没有为模块 {0} 指定最终 APK 路径
android.restart.logcat.action.text=重启
android.restart.logcat.action.description=重启记录
android.configure.logcat.header.text=Logcat 标题
android.configure.logcat.header.description=为 logcat 标题(时间，pid/tid等)配置过滤器
android.configure.logcat.header.title=配置 Logcat 标题
android.new.component.dialog.application.item=应用
android.sdk.missing.title=SDK 问题
android.sdk.missing.msg=您的 Android SDK 缺失、过期或损坏。
android.sdk.open.manager=打开 SDK 管理器
android.sdk.presentable.name=Android SDK
android.sdk.configure.jdk.error=请配置内部 JDK
no.jdk.for.android.found.error=找不到合适版本的 Java SDK。除 Android SDK 外，您还需要定义一个 JDK 1.5、1.6 或 1.7
no.jdk.error=您需要至少创建一个版本为 1.5、1.6 或 1.7 的 JDK
cannot.parse.sdk.error=无法解析 Android SDK
android.add.sdk.tooltip=添加 SDK
android.console.tool.window.title=Android Console
ddms.corrupted.error=警告: 调试信息可能不可用。请使用 ADB 关闭其他应用: Monitor、DDMS、Eclipse
android.font.file.type.description=字体
android.import.dependencies.error.message.header=导入完成，但有错误:
android.import.dependencies.add.module.dependency.task.title=添加依赖关系 {0} --> {1}
android.import.dependencies.new.module.task.title=在 {1} 中创建库模块 {0}
android.import.dependencies.import.module.task.title=从 {1} 导入库模块 {0}
android.import.dependencies.dialog.title=从属性文件导入 Android 依赖项
android.import.dependencies.source.roots.dialog.title=导入源根
android.import.dependencies.source.roots.dialog.label=选择要添加到项目的源根
sdk.broken.error=无法解析 Android SDK。请在 Android facet 设置中重新配置
android.layout.preview.cannot.load.library.error=无法加载平台渲染库
android.layout.preview.tool.window.title=预览
android.layout.preview.default.error.message=无法执行渲染
android.layout.preview.zoom.in.action.text=放大
android.layout.preview.zoom.out.action.text=缩小
android.layout.preview.zoom.actual.action.text=缩放到实际大小
android.layout.preview.zoom.to.fit.action.text=缩放到合适大小
android.layout.preview.refresh.action.text=强制刷新布局
restart.adb.fix.text=重启 ADB 集成，然后重试
android.layout.preview.edit.configuration.available.qualifiers.label=可用的限定符(&V):
android.layout.preview.edit.configuration.choosen.qualifiers.label=选择的限定符(&H):
new.resource.dir.action.name=创建资源目录“{0}”
new.resource.action.name=创建资源文件“{0}”
android.extended.device.chooser.running.device.radio=选择正在运行的设备(&C)
android.extended.device.chooser.launch.emulator.radio=启动模拟器(&L)
android.extended.device.chooser.avd.label=Android Virtual Device(&A):
deployment.target.settings.show.dialog=显示选择器对话框(&C)
deployment.target.settings.usb.device=USB 设备(&U)
deployment.target.settings.emulator=模拟器(&R)
deployment.target.settings.prefer.avd.label=首选 Android Virtual Device(&P):
deployment.target.settings.title=目标设备
deployment.target.settings.wizard.configure.later=不创建运行配置
deployment.target.settings.wizard.show.dialog=显示设备选择器对话框
deployment.target.settings.wizard.usb.device=USB 设备
deployment.target.settings.wizard.emulator=模拟器
deployment.target.not.found=找不到目标设备。
deployment.failed.splitapk.nomatch=当前选择的变体“{0}”使用拆分 APK，但 {1} 个拆分 APK 均不与 ABI 为“{2}”的当前设备兼容。
deployment.failed.reason.different.signature=该设备已经具有一个软件包相同但签名不同的应用
deployment.failed.reason.dexopt=该设备可能具有与当前版本不匹配的过时的 dex jar (dexopt 错误)
deployment.failed.reason.version.downgrade=该设备已具有此应用的较新版本
deployment.failed.uninstall.prompt.text=自 {0} 起安装失败。\n\
要继续，您必须卸载现有的应用。\n\
\n\
警告: 卸载将移除应用数据!\n\
\n\
要卸载现有的应用吗?
deployment.failed.uninstall.prompt.generic.text=安装失败，消息 {0}。\n\
可以通过卸载 APK 的现有版本(如果有)来解决此问题，然后重新安装。\n\
\n\
警告: 卸载将移除应用数据!\n\
\n\
要卸载现有的应用吗?
deployment.failed.uninstall.prompt.androidthings.text=您的 APK 和其他已安装的软件包的意图是 IOT_LAUNCHER。一次只能安装一个具有该意图的 APK。安装 APK 之前，请尝试卸载这些软件包。\n\
\n\
警告: 卸载将移除应用数据!\n\
\n\
您要卸载以下应用吗?\n\
{0}
deployment.failed.uninstall.prompt.androidthings.errortext=无法卸载以下软件包:\n\
{0}
deployment.failed.reason.devicedisconnected=安装失败，因为设备“{0}”已断开连接。
deployment.failed.reason.oldersdk=由于应用的 minSdkVersion 比设备的 API 级别({0})更新，安装失败。\n\
请更新您应用的 minSdkVersion。
deployment.failed.title=应用安装失败
deployment.failed.no.certificates.explanation=由于 APK 未签署或签署不正确，安装失败。\n\
如果这是基于 Gradle 的项目，请确保在 Gradle 构建脚本中指定了签署配置。
android.compilation.error.cannot.create.png.cache.directory=无法为模块 {0} 创建 PNG 缓存目录
android.inspections.non.constant.res.ids.in.switch.name=switch 语句中存在非常量资源 ID
android.inspections.non.constant.res.ids.in.switch.message=资源 ID 不能在 Android 库模块的 switch 语句中使用
android.logcat.clear.log.action.title=清除 logcat
android.logcat.clear.log.action.tooltip=清除设备上的 logcat 缓冲区
android.logcat.filters.none=无过滤器
android.logcat.filters.selected=仅显示所选应用
android.logcat.filters.edit=编辑过滤器配置
android.logcat.new.filter.dialog.name.label=过滤器名称(&N):
android.logcat.new.filter.dialog.tag.label=日志标记(&T):
android.logcat.new.filter.dialog.message.label=日志消息(&M):
android.logcat.new.filter.dialog.pid.label=PID(&P):
android.logcat.new.filter.dialog.package.name.label=包名称(&A):
android.logcat.new.filter.dialog.log.level.label=日志级别(&L):
android.logcat.new.filter.dialog.name.not.specified.error=未指定过滤器名称
android.logcat.new.filter.dialog.incorrect.log.tag.pattern.error=日志标记正则表达式模式无效
android.logcat.new.filter.dialog.incorrect.message.pattern.error=日志消息正则表达式模式无效
android.logcat.new.filter.dialog.incorrect.application.name.pattern.error=应用名称正则表达式模式无效
android.logcat.new.filter.dialog.incorrect.pid.error=PID 必须为正整数
android.logcat.new.filter.dialog.title=创建新的 Logcat 过滤器
android.logcat.edit.filter.dialog.title=编辑 Logcat 过滤器
android.logcat.edit.logcat.filter.button=编辑所选 logcat 过滤器
android.logcat.remove.logcat.filter.button=删除所选 logcat 过滤器
android.logcat.add.logcat.filter.button=添加一个新的 logcat 过滤器
android.logcat.new.logcat.dialog.label=指定一个或多个过滤参数:
android.logcat.new.filter.dialog.name.busy.error=过滤器 {0} 已经存在
android.logcat.edit.filter.dialog.no.filters=点击添加图标以添加过滤器
android.logcat.header.dialog.show.time=显示日期和时间(&T)
android.logcat.header.dialog.show.process.info=显示进程和线程 ID (PID-TID)(&P)
android.logcat.header.dialog.show.packageName=显示软件包名称(&N)
android.logcat.header.dialog.show.tag=显示标记(&G)

android.emulator=模拟器
android.ddms.devicepanel.title=设备
android.ddms.nodevices=[none]

android.ddms.actions.terminate.vm=终止应用
android.ddms.actions.terminate.vm.description=终止所选 Android 应用
android.ddms.actions.initiate.gc=初始化垃圾回收
android.ddms.actions.initiate.gc.description=在所选 VM 上初始化垃圾回收
android.ddms.actions.dump.hprof=转储 Java 堆
android.ddms.actions.dump.hprof.description=为所选客户端转储 Java 堆
android.ddms.actions.dump.hprof.error.unsupported=堆转储; 尚不支持旧设备。请使用以下命令，从设备中手动检索文件\n\
$ adb pull {0}
android.ddms.actions.screenshot=屏幕截图
android.ddms.actions.screenshot.description=从设备获取屏幕截图
android.ddms.actions.screenshot.copied.to.clipboard=图像已复制到剪贴板
android.ddms.actions.screenrecord=屏幕录制
android.ddms.actions.screenrecord.description=录制设备显示屏的视频
android.ddms.actions.methodprofile.start=开始方法跟踪
android.ddms.actions.methodprofile.stop=停止方法跟踪
android.ddms.actions.allocationtracker.start=开始分配跟踪
android.ddms.actions.allocationtracker.stop=停止分配跟踪
android.ddms.actions.allocationtracker.description=录制跟踪处于活动状态时发生的所有分配
android.ddms.actions.layoutinspector.title=Layout Inspector
android.ddms.actions.layoutinspector.title.legacy=旧版 Layout Inspector
android.ddms.actions.layoutinspector.description=检查所选窗口的布局
android.ddms.actions.layoutinspector.description.disabled=调试时检查布局已禁用
android.ddms.actions.layoutinspector.windowpicker=选择窗口
android.ddms.actions.layoutinspector.notification.group=Layout Inspector
android.ddms.actions.layoutinspector.notification.title=Layout Inspector
android.ddms.actions.layoutinspector.dumpdisplay.notification.success=显示写入 logcat 的列表信息。
android.ddms.actions.layoutinspector.dumpdisplay.notification.nonode=检索显示列表信息失败，找不到目标节点。
android.ddms.actions.layoutinspector.dumpdisplay.notification.failure=由于异常，检索显示列表信息失败: {0}
android.ddms.actions.layoutinspector.update.notification.failure=无法从设备更新图像。
android.ddms.actions.layoutinspector.menu.show.bound=显示布局边界
android.ddms.actions.layoutinspector.menu.dump.display=转储显示列表
android.ddms.notification.layoutinspector.reboot.live.inspector=无法检测到实时检查服务。要启用实时检查，请重启设备。
android.ddms.screenshot.task.step.obtain=正在从设备获取屏幕截图…
android.ddms.screenshot.task.step.load=正在将屏幕截图加载到内存中…
android.ddms.screenshot.task.error1=从设备获取屏幕截图时出现意外错误: {0}
android.ddms.screenshot.task.error.invalid.bpp=从设备接收到不支持的图像(每像素位数 = {0})
android.ddms.screenshot.save.error=保存屏幕截图时出现意外错误: {0}
android.ddms.screenshot.generic.error=获取屏幕截图时出现意外错误: {0}
android.ddms.screenshot.save.title=另存为 PNG
android.ddms.screenshot.save.ok.button.text=保存
android.ddms.screenshot.image.processor.task.title=更新图像
android.ddms.screenrecord.options.ok.button.text=开始录制
android.ddms.screenrecorder.info=<html>Screen Recorder 最多可以录制 3 分钟的设备显示器。<br>默认情况下，它以设备的原生分辨率或 720p/4 Mbps 的比特率进行录制。<br>您可以在下面自定义这些选项。最低分辨率为 96x64px。<br>分辨率必须是 16 的倍数。留空将使用默认值。</html>
android.compile.messages.processing.external.apklib.dependencies=正在处理外部 apklib 依赖项
android.maven.cannot.parse.android.sdk.error=无法解析模块 {0} 的 Android SDK。尝试从 Maven 模型强制重新导入
android.facet.settings.custom.debug.keystore.label=自定义调试密钥库(&U):
android.export.package.run.proguard.label=运行 ProGuard(&P)
android.export.package.proguad.config.label=配置文件路径(&O):
android.extract.package.specify.proguard.cfg.path.error=请指定 ProGuard 配置文件路径
android.facet.settings.pack.test.sources=将测试代码和资源包含到 APK 中
android.inspections.lint.name=Android Lint 验证

android.lint.inspections.aapt.crash=潜在 AAPT 崩溃
android.lint.inspections.accepts.user.certificates=\ 网络安全配置允许在您的应用发行版中使用用户证书
android.lint.inspections.adapter.view.children=AdapterViews 在 XML 中不能有子级
android.lint.inspections.add.javascript.interface=调用了 addJavascriptInterface
android.lint.inspections.all.caps=正在组合 textAllCaps 与标记
android.lint.inspections.allow.all.hostname.verifier=不安全的 HostnameVerifier
android.lint.inspections.allow.backup=AllowBackup/FullBackupContent 问题
android.lint.inspections.always.show.action=showAsAction=always 的用法
android.lint.inspections.animator.keep=动画属性缺少 @Keep
android.lint.inspections.annotation.processor.on.compile.path=编译器类路径中的注解处理器
android.lint.inspections.app.compat.custom.view=Appcompat 自定义微件
android.lint.inspections.app.compat.method=正在使用错误的 AppCompat 方法
android.lint.inspections.app.compat.resource=菜单命名空间
android.lint.inspections.app.indexing.service=App Indexing 后台服务
android.lint.inspections.app.link.url.error=应用不支持将 URL 用于 Firebase App Indexing
android.lint.inspections.apply.shared.pref=在 SharedPreferences 上使用 apply()
android.lint.inspections.auth.leak=代码可能包含身份验证泄露
android.lint.inspections.autofill=使用自动填充
android.lint.inspections.back.button=“返回”按钮
android.lint.inspections.battery.life=电池寿命问题
android.lint.inspections.blocked.private.api=使用阻止的私有 API
android.lint.inspections.bottom.app.bar=BottomAppBar 问题
android.lint.inspections.broken.iterator=迭代器损坏
android.lint.inspections.button.case=“取消”/“确定”对话框按钮的大小写
android.lint.inspections.button.order=按钮顺序
android.lint.inspections.button.style=按钮应无边框
android.lint.inspections.byte.order.mark=文件内部的字节顺序标记
android.lint.inspections.canvas.size=画布大小错误
android.lint.inspections.clickable.view.accessibility=自定义视图中存在辅助功能
android.lint.inspections.commit.pref.edits=SharedPreferences 编辑器上缺少 commit()
android.lint.inspections.commit.transaction=缺少 commit() 调用
android.lint.inspections.constant.locale=常量区域设置
android.lint.inspections.content.description=图像没有 contentDescription
android.lint.inspections.convert.to.webp=转换为 WebP
android.lint.inspections.custom.view.styleable=样式/自定义视图名称不匹配
android.lint.inspections.cut.paste.id=可能存在剪切和粘贴错误
android.lint.inspections.data.binding.without.kapt=数据绑定无注解处理
android.lint.inspections.deleted.provider=正在使用删除的提供程序
android.lint.inspections.deprecated=正在使用弃用资源
android.lint.inspections.deprecated.provider=正在使用 BC 提供程序
android.lint.inspections.device.admin=设备管理器的格式错误
android.lint.inspections.dev.mode.obsolete=开发模式已过时
android.lint.inspections.diff.util.equals=可疑的 DiffUtil 相等
android.lint.inspections.disable.baseline.alignment=缺少 baselineAligned 特性
android.lint.inspections.discouraged.private.api=使用不推荐使用的私有 API
android.lint.inspections.draw.allocation=绘图代码中存在内存分配
android.lint.inspections.duplicate.activity=Activity 已多次注册
android.lint.inspections.duplicate.definition=重复的资源定义
android.lint.inspections.duplicate.divider=不必要的分隔线副本
android.lint.inspections.duplicate.ids=单个布局中存在重复 ID
android.lint.inspections.duplicate.included.ids=不同布局中存在重复 ID，并包含 include 标记
android.lint.inspections.duplicate.platform.classes=重复的平台类
android.lint.inspections.duplicate.strings=重复的字符串
android.lint.inspections.duplicate.uses.feature=功能多次声明
android.lint.inspections.ellipsize.max.lines=正在组合 Ellipsize 与 Maxlines
android.lint.inspections.enforce.utf8=资源文件中使用的编码不是 UTF-8
android.lint.inspections.enqueue.work=WorkManager 加入队列
android.lint.inspections.exif.interface=正在使用 android.media.ExifInterface
android.lint.inspections.expired.target.sdk.version=不再支持 TargetSdkVersion
android.lint.inspections.expiring.target.sdk.version=TargetSdkVersion 即将到期
android.lint.inspections.exported.content.provider=内容提供程序不需要权限
android.lint.inspections.exported.preference.activity=PreferenceActivity 不应导出
android.lint.inspections.exported.receiver=接收器不需要权限
android.lint.inspections.exported.service=导出的服务不需要权限
android.lint.inspections.extra.text=资源文件中存在无关文本
android.lint.inspections.extra.translation=额外翻译
android.lint.inspections.find.view.by.id.cast=添加显式转换
android.lint.inspections.full.backup.content=有效的完整备份内容文件
android.lint.inspections.get.content.description.override=在视图上重写 getContentDescription()
android.lint.inspections.get.instance=带 ECB 的 Cipher.getInstance
android.lint.inspections.get.locales=区域设置崩溃
android.lint.inspections.gif.usage=不建议将 .gif 格式用于位图
android.lint.inspections.gradle.compatible=不兼容的 Gradle 版本
android.lint.inspections.gradle.deprecated=弃用的 Gradle 结构
android.lint.inspections.gradle.getter=Gradle 隐式 Getter 调用
android.lint.inspections.gradle.overrides=值被 Gradle 构建脚本重写
android.lint.inspections.gradle.plugin.version=不兼容的 Android Gradle 插件
android.lint.inspections.grant.all.uris=内容提供程序共享一切
android.lint.inspections.grid.layout=GridLayout 验证
android.lint.inspections.half.float=半浮点数不正确
android.lint.inspections.handler.leak=处理程序引用泄漏
android.lint.inspections.hardcoded.debug.mode=清单中 android:debuggable 的值硬编码
android.lint.inspections.hardcoded.text=硬编码文本
android.lint.inspections.hardware.ids=使用了硬件 ID
android.lint.inspections.high.app.version.code=VersionCode 过高
android.lint.inspections.icon.colors=图标颜色不符合建议的视觉样式
android.lint.inspections.icon.densities=图标密度验证
android.lint.inspections.icon.dip.size=图标密度无关的大小验证
android.lint.inspections.icon.duplicates=不同名称下存在重复图标
android.lint.inspections.icon.duplicates.config=各种配置使用相同的位图
android.lint.inspections.icon.expected.size=图标大小不正确
android.lint.inspections.icon.extension=图标格式与文件扩展名不匹配
android.lint.inspections.icon.launcher.shape=启动器图标形状应使用不同的轮廓
android.lint.inspections.icon.location=图像在与密度无关的可绘制对象文件夹中定义
android.lint.inspections.icon.missing.density.folder=缺少密度文件夹
android.lint.inspections.icon.mixed.nine.patch=PNG 和 9-PNG 文件冲突
android.lint.inspections.icon.no.dpi=图标同时出现在 -nodpi 和 dpi 文件夹中
android.lint.inspections.icon.xml.and.png=图标同时指定为 .xml 文件和位图
android.lint.inspections.illegal.resource.ref=名称和版本必须是整数或字符串，而不是资源
android.lint.inspections.implied.quantity=隐含数量
android.lint.inspections.implied.touchscreen.hardware=硬件功能触摸屏未明确标记为可选
android.lint.inspections.include.layout.param=include 上有忽略的布局参数
android.lint.inspections.incompatible.media.browser.service.compat.version=过时版本的 MediaBrowserServiceCompat
android.lint.inspections.inconsistent.arrays=数组元素计数不一致
android.lint.inspections.inconsistent.layout=布局不一致
android.lint.inspections.inefficient.weight=布局权重低效
android.lint.inspections.inflate.params=布局扩展没有父级
android.lint.inspections.inlined.api=正在旧版本上使用内联常量
android.lint.inspections.innerclass.separator=内部类应使用 $ 而不是 .
android.lint.inspections.in.or.mm.usage=正在使用 mm 或 in 尺寸
android.lint.inspections.insecure.base.configuration=不安全的基本配置
android.lint.inspections.instant.apps=免安装应用问题
android.lint.inspections.instantiatable=注册的类不可实例化
android.lint.inspections.intent.reset=可疑的 setType 和 setData 组合
android.lint.inspections.invalid.analytics.name=无效分析名称
android.lint.inspections.invalid.id=ID 声明无效
android.lint.inspections.invalid.ime.action.id=imeActionId 声明无效
android.lint.inspections.invalid.navigation=未指定起始目标
android.lint.inspections.invalid.permission=无效权限特性
android.lint.inspections.invalid.resource.folder=资源文件夹无效
android.lint.inspections.invalid.uses.tag.attribute=uses 元素的名称特性无效
android.lint.inspections.invalid.vector.path=矢量路径无效
android.lint.inspections.invalid.wake.lock.tag=唤醒锁标记无效
android.lint.inspections.invalid.wear.feature.attribute=Wear uses-feature 的特性无效
android.lint.inspections.javascript.interface=方法上缺少 @JavascriptInterface
android.lint.inspections.job.scheduler.service=JobScheduler 问题
android.lint.inspections.keyboard.inaccessible.widget=键盘无法访问的微件
android.lint.inspections.ktx.extension.available=可用的 KTX 扩展
android.lint.inspections.label.for=缺少无障碍功能标签
android.lint.inspections.library.custom.view=库中的自定义视图应使用 res-auto-namespace
android.lint.inspections.lifecycle.annotation.processor.with.java8=生命周期注解处理器带有 Java 8 编译选项
android.lint.inspections.locale.folder=区域设置名称错误
android.lint.inspections.locked.orientation.activity=screenOrientation 清单值不兼容
android.lint.inspections.log.conditional=无条件记录调用
android.lint.inspections.log.tag.mismatch=日志标记不匹配
android.lint.inspections.long.log.tag=日志标记过长
android.lint.inspections.mangled.crlf=文件行结尾杂乱
android.lint.inspections.manifest.order=清单中元素的顺序不正确
android.lint.inspections.manifest.resource=清单资源引用
android.lint.inspections.menu.title=缺少菜单标题
android.lint.inspections.merge.root.frame=FrameLayout 可替换为 <merge> 标记
android.lint.inspections.min.sdk.too.low=API 版本太低
android.lint.inspections.mipmap.icons=使用 Mipmap 启动器图标
android.lint.inspections.missing.application.icon=缺少应用图标
android.lint.inspections.missing.backup.pin=缺少备份 PIN
android.lint.inspections.missing.class=缺少注册的类
android.lint.inspections.missing.constraints=ConstraintLayout 中缺少约束
android.lint.inspections.missing.default.resource=缺少默认
android.lint.inspections.missing.firebase.instance.token.refresh=缺少 Firebase 消息回调
android.lint.inspections.missing.id=Fragment 应指定 ID 或标记
android.lint.inspections.missing.intent.filter.for.media.search=缺少 MEDIA_PLAY_FROM_SEARCH intent-filter
android.lint.inspections.missing.leanback.launcher=缺少 Leanback 启动器 Intent 过滤器
android.lint.inspections.missing.leanback.support=缺少 Leanback 支持
android.lint.inspections.missing.media.browser.service.intent.filter=缺少 MediaBrowserService intent-filter
android.lint.inspections.missing.on.play.from.search=缺少 onPlayFromSearch.
android.lint.inspections.missing.permission=缺少权限
android.lint.inspections.missing.prefix=缺少 Android XML 命名空间
android.lint.inspections.missing.quantity=缺少数量翻译
android.lint.inspections.missing.translation=翻译不完整
android.lint.inspections.missing.tv.banner=TV 缺少横幅
android.lint.inspections.missing.version=缺少应用名称/版本
android.lint.inspections.mock.location=正在生产中使用模拟位置提供程序
android.lint.inspections.motion.layout.invalid.scene.file.reference=layoutDescription 必须指定 scene 文件
android.lint.inspections.motion.scene.file.validation.error=MotionScene 文件中的验证错误
android.lint.inspections.multiple.uses.sdk=清单中存在多个 <uses-sdk> 元素
android.lint.inspections.namespace.typo=命名空间声明拼写错误
android.lint.inspections.negative.margin=负边距
android.lint.inspections.nested.scrolling=嵌套滚动微件
android.lint.inspections.nested.weights=嵌套布局权重
android.lint.inspections.network.security.config=有效的网络安全配置文件
android.lint.inspections.new.api=在旧版本上调用了新方法
android.lint.inspections.nfc.tech.whitespace=NFC 技术列表中有空格
android.lint.inspections.non.constant.resource.id=在需要常量的地方检查资源 ID 的使用情况。
android.lint.inspections.non.resizeable.activity=Activity 设置为不可调整大小
android.lint.inspections.notification.icon.compatibility=通知图标兼容性
android.lint.inspections.not.sibling=无效约束
android.lint.inspections.object.animator.binding=ObjectAnimator 属性不正确
android.lint.inspections.obsolete.layout.param=布局参数过时
android.lint.inspections.obsolete.sdk.int=SDK_INT 版本检查过时
android.lint.inspections.old.target.api=目标 SDK 特性未以最新版本为目标
android.lint.inspections.on.click=onClick 方法不存在
android.lint.inspections.orientation=缺少显式方向
android.lint.inspections.outdated.library=过期的库
android.lint.inspections.overdraw=过度绘制: 多次绘制区域
android.lint.inspections.override=方法与新继承的方法冲突
android.lint.inspections.override.abstract=不要在旧平台上重写 abstract 方法
android.lint.inspections.packaged.private.key=打包的私钥
android.lint.inspections.package.manager.get.signatures=潜在的多重证书利用
android.lint.inspections.parcel.class.loader=默认 Parcel 类加载器
android.lint.inspections.parcel.creator=缺少 Parcelable CREATOR 字段
android.lint.inspections.pending.bindings=缺少待处理的绑定
android.lint.inspections.permission.implies.unsupported.chrome.os.hardware=权限表明不支持的 Chrome OS 硬件
android.lint.inspections.permission.implies.unsupported.hardware=权限暗示不支持的硬件
android.lint.inspections.pin.set.expiry=验证 <pin-set> 到期特性
android.lint.inspections.plurals.candidate=潜在复数
android.lint.inspections.private.api=正在使用专用 API
android.lint.inspections.private.resource=正在使用专用资源
android.lint.inspections.proguard=正在使用过时的 ProGuard 配置
android.lint.inspections.proguard.split=Proguard.cfg 文件包含通用 Android 规则
android.lint.inspections.protected.permissions=正在使用系统应用权限
android.lint.inspections.px.usage=正在使用 'px' 尺寸
android.lint.inspections.query.all.packages.permission=使用 QUERY_ALL_PACKAGES 权限
android.lint.inspections.query.permissions.needed=使用受查询权限影响的 API
android.lint.inspections.recycle=缺少 recycle() 调用
android.lint.inspections.recycler.view=RecyclerView 问题
android.lint.inspections.redundant.namespace=冗余命名空间
android.lint.inspections.reference.type=引用类型不正确
android.lint.inspections.registered=类未在清单中注册
android.lint.inspections.relative.overlap=RelativeLayout 中有重叠项
android.lint.inspections.required.size=缺少 layout_width 或 layout_height 特性
android.lint.inspections.requires.feature=需要功能
android.lint.inspections.res.auto=命名空间的硬编码软件包
android.lint.inspections.resource.as.color=应该传递解析的颜色而不是资源 ID
android.lint.inspections.resource.cycle=资源定义中存在循环
android.lint.inspections.resource.name=资源的前缀错误
android.lint.inspections.resource.type=资源类型错误
android.lint.inspections.risky.library=库具有隐私或安全风险
android.lint.inspections.rtl.compat=从右到左文本兼容性问题
android.lint.inspections.rtl.enabled=正在没有启用 RTL 支持的情况下使用 RTL 特性
android.lint.inspections.rtl.hardcoded=正在使用左/右而不是开始/结束特性
android.lint.inspections.rtl.symmetry=填充和边距对称
android.lint.inspections.scoped.storage=受分区存储影响
android.lint.inspections.scroll.view.count=ScrollViews 只能有一个子项
android.lint.inspections.scroll.view.size=ScrollView 大小验证
android.lint.inspections.sd.card.path=对 /sdcard 进行硬编码引用
android.lint.inspections.selectable.text=动态文本可能应为可选
android.lint.inspections.service.cast=系统服务转换错误
android.lint.inspections.set.java.script.enabled=正在使用 setJavaScriptEnabled
android.lint.inspections.set.text.i18n=TextView 国际化
android.lint.inspections.set.world.readable=File.setReadable() 用于将文件设为全球可读
android.lint.inspections.set.world.writable=File.setWritable() 用于将文件设为全球可写
android.lint.inspections.short.alarm=短暂或频繁警报
android.lint.inspections.show.toast=Toast 已创建但未显示
android.lint.inspections.signature.or.system.permissions=已声明 signatureOrSystem 权限
android.lint.inspections.slices=切片
android.lint.inspections.small.sp=文本大小过小
android.lint.inspections.soon.blocked.private.api=使用即将阻止的私有 API
android.lint.inspections.source.locked.orientation.activity=不兼容的 setRequestedOrientation 值
android.lint.inspections.sp.usage=正在使用 dp 而不是 sp 显示文本大小
android.lint.inspections.sslcertificate.socket.factory.create.socket=对 SSLCertificateSocketFactory.createSocket() 的调用不安全
android.lint.inspections.sslcertificate.socket.factory.get.insecure=调用了 SSLCertificateSocketFactory.getInsecure()
android.lint.inspections.state.list.reachable=<selector> 中的状态不可到达
android.lint.inspections.static.field.leak=static 字段泄漏
android.lint.inspections.string.escaping=字符串转义无效
android.lint.inspections.string.format.count=格式化实参类型不完整或不一致
android.lint.inspections.string.format.invalid=格式字符串无效
android.lint.inspections.string.format.matches=String.format 字符串与 XML 格式字符串不匹配
android.lint.inspections.string.should.be.int=字符串应为 int
android.lint.inspections.suspicious0dp=可疑的 0dp 尺寸
android.lint.inspections.suspicious.import='import android.R' 语句
android.lint.inspections.switch.int.def=Switch 中缺少 @IntDef
android.lint.inspections.synthetic.accessor=合成访问器
android.lint.inspections.test.app.link=URL 不匹配
android.lint.inspections.text.fields=缺少 inputType
android.lint.inspections.text.view.edits=TextView 可能应为 EditText
android.lint.inspections.too.deep.layout=布局层次结构过深
android.lint.inspections.too.many.views=布局视图过多
android.lint.inspections.translucent.orientation=混合了屏幕方向和半透明
android.lint.inspections.trust.all.x509.trust.manager=不安全的 TLS/SSL 信任管理器
android.lint.inspections.typography.dashes=连字符可替换为短划线
android.lint.inspections.typography.ellipsis=省略号字符串可替换为省略号字符
android.lint.inspections.typography.fractions=分数字符串可替换为分数字符
android.lint.inspections.typography.other=其他排版问题
android.lint.inspections.typography.quotes=直引号可替换为弯引号
android.lint.inspections.typos=拼写错误
android.lint.inspections.unique.constants=重叠的枚举常量
android.lint.inspections.unique.permission=权限名称不唯一
android.lint.inspections.unknown.id=引用未知 ID
android.lint.inspections.unknown.id.in.layout=引用不在当前布局中的 ID
android.lint.inspections.unlocalized.sms=短信电话号码缺少国家/地区代码
android.lint.inspections.unpacked.native.code=缺少 android:extractNativeLibs=false
android.lint.inspections.unprotected.smsbroadcast.receiver=未受保护的短信 BroadcastReceiver
android.lint.inspections.unsafe.dynamically.loaded.code=加载用于动态加载代码
android.lint.inspections.unsafe.native.code.location=原生代码位于库目录外
android.lint.inspections.unsafe.protected.broadcast.receiver=不安全的受保护 BroadcastReceiver
android.lint.inspections.unsupported.chrome.os.camera.system.feature=正在查找仅后置摄像头功能
android.lint.inspections.unsupported.chrome.os.hardware=不支持的 Chrome 操作系统硬件功能
android.lint.inspections.unsupported.tv.hardware=不支持的 TV 硬件功能
android.lint.inspections.untranslatable=翻译了不可翻译内容
android.lint.inspections.unused.attribute=特性未在旧版本上使用
android.lint.inspections.unused.ids=未使用的 ID
android.lint.inspections.unused.navigation=未使用的导航
android.lint.inspections.unused.quantity=未使用的数量翻译
android.lint.inspections.unused.resources=未使用的资源
android.lint.inspections.usable.space=正在使用 getUsableSpace()
android.lint.inspections.use.alpha2=正在使用 3 字母代码
android.lint.inspections.use.check.permission=正在使用检查权限调用的结果
android.lint.inspections.use.compound.drawables=节点可替换为带复合可绘制对象的 TextView
android.lint.inspections.useless.leaf=无用的叶式布局
android.lint.inspections.useless.parent=无用的父布局
android.lint.inspections.use.of.bundled.google.play.services=使用捆绑版本的 Google Play 服务
android.lint.inspections.uses.min.sdk.attributes=未定义最低 SDK 和目标 SDK 特性
android.lint.inspections.use.sparse.arrays=HashMap 可替换为 SparseArray
android.lint.inspections.using.c2.dm=正在使用 C2DM
android.lint.inspections.valid.actions.xml=操作描述符无效
android.lint.inspections.valid.fragment=Fragment 不可实例化
android.lint.inspections.valid.restrictions=限制描述符无效
android.lint.inspections.vector.drawable.compat=正在使用 VectorDrawableCompat
android.lint.inspections.vector.path=长矢量路径
android.lint.inspections.vector.raster=矢量图像生成
android.lint.inspections.view.constructor=缺少用于 XML 扩展的视图构造函数
android.lint.inspections.view.holder=视图容器候选
android.lint.inspections.wakelock.timeout=正在无超时使用 wakeLock
android.lint.inspections.wearable.bind.listener=Android Wear BIND_LISTENER 用法已弃用
android.lint.inspections.wear.standalone.app.flag=Wear 独立应用标志无效或缺失
android.lint.inspections.webp.unsupported=WebP 不受支持
android.lint.inspections.web.view.api.availability=WebView API 可用性
android.lint.inspections.web.view.layout=wrap_content 父项中存在 WebView
android.lint.inspections.wifi.manager.leak=WifiManager 泄漏
android.lint.inspections.wifi.manager.potential.leak=WifiManager 潜在泄漏
android.lint.inspections.world.readable.files=openFileOutput() 或类似调用传递 MODE_WORLD_READABLE
android.lint.inspections.world.writeable.files=openFileOutput() 或类似调用传递 MODE_WORLD_WRITEABLE
android.lint.inspections.wrong.call=正在使用错误的绘制/布局方法
android.lint.inspections.wrong.case=视图标记的大小写错误
android.lint.inspections.wrong.constant=常量错误
android.lint.inspections.wrong.folder=资源文件位于错误的 res 文件夹中
android.lint.inspections.wrong.region=可疑的语言/地区组合
android.lint.inspections.wrong.thread=线程错误
android.lint.inspections.wrong.thread.interprocedural=线程错误 (过程间)
android.lint.inspections.wrong.view.cast=视图类型不匹配
android.lint.inspections.xml.escape.needed=缺少 XML 转义

android.lint.fix.add.android.prefix=添加 Android 前缀
android.lint.fix.replace.with.zero.dp=将大小特性替换为 0dp
android.lint.fix.remove.attribute=移除特性
android.lint.fix.convert.to.dp=转换为 “dp”…
android.lint.fix.set.to.wrap.content=将大小特性替换为 'wrap_content'
android.lint.fix.remove.unnecessary.view=移除不必要的视图
android.lint.fix.replace.with.suggested.characters=替换为建议的字符
android.lint.fix.add.target.api=添加 @TargetApi({0}) 注解
android.lint.fix.add.requires.api=添加 @RequiresApi({0}) 注解
android.lint.fix.replace.namespace=替换为自动资源命名空间
android.lint.fix.open.firebase.assistant=打开 Firebase Assistant

android.export.unsigned.package.action.text=导出未签署的应用软件包
android.inspections.element.not.allowed.name=不允许 Android XML 元素
android.inspections.unresolvable.tag=不可解析的标记
element.cannot.resolve=无法解析类 {0}
android.facet.settings.run.proguard=构建调试 APK 时运行 ProGuard
android.facet.settings.proguard.cfg.label=配置文件：
android.debug.sessions.will.be.closed=将关闭以下调试会话:\n\
{0}
android.launch.ddms.title=Android Device Monitor
android.launch.ddms.already.launched.error=Android Device Monitor 已启动
android.disable.adb.service.title=禁用 ADB 集成
android.launch.hierarchy.viewer.action=Hierarchy Viewer
android.facet.settings.include.system.proguard=包含系统 proguard 文件
file.already.exists.error=文件 {0} 已存在
deployment.target.settings.min.sdk.info.message=仅显示兼容的 AVD。请参见 AndroidManifest.xml 中的 'uses-sdk' 标记
android.compilation.warning.circular.app.dependency=由于模块 ''{2}'' 的循环依赖关系，模块 ''{1}'' 中 {0}.R 类中的生成不会为最终字段。
file.name.not.specified.error=未指定文件名
root.element.not.specified.error=未指定根元素
directory.not.specified.error=未指定目录
android.manifest.merger.not.supported.error=不支持清单合并。请重新配置清单文件
invalid.resource.name.error=资源名称 ''{0}'' 无效
android.extract.style.title=提取 Android 样式
android.inline.style.title=内联 Android 样式
android.inline.style.command.name=内联样式 ''{0}''
android.inline.style.inline.all.text=内联所有引用并移除样式(&A)
android.inline.style.inline.this.text=内联此用法并保留样式(&T)
android.extract.as.include.title=提取 Android 布局
android.inline.layout.command.name=内联布局文件 ''{0}''
android.inline.file.inline.all.text=内联所有引用并移除文件(&A)
android.inline.file.inline.this.text=内联此用法并保留文件(&T)
android.inline.layout.title=内联 Android 布局
android.facet.importing.notification.group=导入错误
android.autogeneration.notification.group=Android 自动生成
android.facet.importing.title=导入模块 ''{0}'' 时出错
android.find.style.applications.title=尽可能使用样式
android.aapt.use.custom.package.name=重命名清单包(&K):
android.wizard.cannot.find.main.content.root.error=在模块 {0} 中找不到包含 AndroidManifest.xml 文件的内容根
android.psd.file.type.description=Adobe Photoshop 图像
android.9patch.file.type.description=Android 9-Patch
android.9patch.creator.title=创建 9-Patch 文件…
android.9patch.creator.save.title=另存为 .9.png
android.9patch.creator.error=创建 9-Patch 文件时出现意外错误: {0}
android.9patch.creator.error.title=创建 9-Patch 文件
android.update.project.properties.dialog.text=以下 Android 模块的结构已被更改:<br>{0}<br>是否要更新相关的 project.properties 文件?<br><a href="once">仅一次</a><br><a href="always">始终更新这些模块的文件</a><br><a href="never">永不更新这些模块的文件</a>
android.update.project.properties.dialog.title=更新属性文件
error.report.at.b.android=<html>提交反馈时出错: {0}<br>考虑在 <a href="https://code.google.com/p/android/issues/list">Android 问题跟踪器</a>中创建问题</html>
error.report.to.google.action=报告给 Google(&R)
android.refactoring.migratetoappcompat=迁移到 AppCompat
android.refactoring.migrateto.androidx=迁移到 AndroidX
android.refactoring.rtl.addsupport.title=添加从右到左(RTL)支持
android.refactoring.rtl.addsupport.dialog.title=添加从右到左(RTL)支持…
android.refactoring.rtl.addsupport.dialog.ok.button.text=运行
android.refactoring.rtl.addsupport.dialog.apply.button.text=按搜索结果面板底部的“执行 RTL 重构”按钮，以进行从右到左(RTL)重构
android.refactoring.rtl.addsupport.dialog.label.text=此重构将向您的 Android 应用添加 RTL 支持。\n\
\n\
请检查以下选项:\n\

android.refactoring.rtl.addsupport.dialog.option.label.update.manifest.text=更新 AndroidManifest.xml
android.refactoring.rtl.addsupport.dialog.option.label.update.layouts.text=更新布局文件
android.refactoring.rtl.addsupport.dialog.option.label.layouts.options.txt=布局选项
android.refactoring.rtl.addsupport.dialog.option.label.layouts.options.replace.leftright.txt=用开始/结束属性替换左/右属性
android.refactoring.rtl.addsupport.dialog.option.label.layouts.options.generate.v17.txt=生成 -v17 版本
android.refactoring.gradle.warning.rename.source.root=新的源根名称不会自动传播<br/>到 Gradle 配置。<br/>您需要在 *.gradle 文件中手动进行相应<br/>更改。
create.on.click.handler.intention.text=创建 onClick 事件处理程序
android.inspections.typedef=错误的常量或资源类型
android.inspections.on.click.missing.name=相关 Activity 中缺少 onClick 处理程序
android.inspections.on.click.missing.problem=方法 ''{0}'' 在 ''{1}'' 中缺失或签名不正确
android.inspections.on.click.missing.incorrect.signature=''{1}'' 中方法 ''{0}'' 的签名不正确
android.db.downloading.progress.title=正在下载 Android SQLite 数据库
android.db.uploading.progress.title=正在更新 Android SQLite 数据库
android.gradle.project.change.added=已添加 {0}
android.gradle.project.change.removed=已移除 {0}
android.gradle.project.change.modified={0}: {1} {2}->{3}
android.gradle.project.entity.project=项目 ''{0}''
android.gradle.project.entity.module=模块 ''{0}''
android.gradle.project.entity.content.root=模块 ''{1}''的内容根 ''{0}''
android.gradle.project.entity.dependency.module=模块依赖关系 ''{0}''->''{1}''
android.gradle.project.entity.dependency.library=库依赖关系 ''{0}''->''{1}''
exportable.AndroidFoldingSettings.presentable.name=Android 代码折叠
android.gradle.link.appengine.outdated=更新 'appengine' 插件版本。
android.component.entry.point=Android 组件

android.profiler.hprof.actions.conv=转换 Android Java 堆转储
android.profiler.hprof.actions.conv.contextmenu=导出到标准 .hprof
android.profiler.hprof.actions.conv.saved=堆转储已转换并另存为: {0}
android.profiler.hprof.actions.conv.savedialog.title=转换 Android Java 堆转储
android.profiler.hprof.actions.view.bitmap.title=查看位图
android.profiler.hprof.actions.view.bitmap.description=查看 Android 位图内容
android.profiler.hprof.actions.view.bitmap.fail=由于不支持的 Bitmap.Config，无法转储位图。很可能是不支持的图像格式。

android.captures.analysis.results.title=分析结果
android.captures.analysis.explanation.title=分析结果说明
android.captures.analysis.results.manager.name=捕获分析
android.captures.analysis.results.manager.titlebar.text=分析器任务
android.captures.analysis.results.manager.run.name=执行分析
android.captures.analysis.results.manager.run.description=分析常见问题的捕获
android.captures.analysis.results.manager.run.enabled.name=已启用
android.captures.analysis.results.manager.run.enabled.description=点击以分析捕获
android.captures.analysis.results.manager.run.disabled.name=禁用
android.captures.analysis.results.manager.run.disabled.description=捕获已被分析

instant.run.notification.ir.disabled.plugin.too.old=Instant Run 需要较新的 Android Gradle 插件。<a href="updategradle">更新为 {0}</a>。
instant.run.notification.ir.disabled.for.current.variant=当前变体的 Instant Run 已禁用。<br>某些设置(例如使用 jack)当前与 Instant Run 不兼容。<a href="learnmore">了解详情</a>。
instant.run.notification.ir.disabled.multidex.requires.21=Instant Run 不支持将启用 multidex 的构建变体部署到 API 级别为 20 或更低的目标。<br>要对启用 multidex 的构建变体使用 Instant Run，请部署到 API 级别为 21 或更高的目标。
instant.run.notification.ir.disabled.multiple.devices=Instant Run 已禁用:<br>Instant Run 不支持部署到多个目标。<br>要启用 Instant Run，请部署到单个目标。
instant.run.notification.ir.disabled.secondary.user=Instant Run 已禁用:<br>Instant Run 不支持在工作资料下或以二级用户身份运行应用。<br>要使用 Instant Run，请以主要用户身份登录设备并移除运行配置中的任何 '--user <UserID>' 标志。
instant.run.notification.ir.disabled.target.platform.missing=Instant Run 已禁用:<br>Instant Run 要求待部署到的设备的 API 级别的 Android SDK 已安装。<br>要使用 Instant Run，请打开 SDK 管理器并安装缺少的平台。
instant.run.quickfix.missing.platform=Instant Run 需要安装与您的目标设备({0})对应的平台。
instant.run.notification.ir.disabled.non.debug.variant=Instant Run 已对非调试变体禁用。
instant.run.notification.ir.disabled.testing.variant=Instant Run 已禁用，因为此变体专门用于测试。
instant.run.notification.ir.disabled.jack=使用 Jack 编译器时，Instant Run 被禁用。
instant.run.notification.ir.disabled.external.native.build=使用外部原生构建时，Instant Run 被禁用。
instant.run.notification.ir.disabled.experimental.plugin=使用实验性 Android Gradle 插件时，Instant Run 被禁用。
instant.run.notification.ir.disabled.app.bundle.output=使用应用 Bundle 时，Instant Run 被禁用。
instant.run.notification.ir.disabled.multi.apk=使用多个 APK 时，Instant Run 被禁用。
instant.run.notification.ir.disabled.unknown.reason=Instant Run 已对当前变体禁用。
instant.run.notification.ir.disabled.api.less.than.21=API 级别为 20 或更低的设备不支持 Instant Run。
instant.run.notification.ir.disabled.app.has.code.false=Instant Run 已禁用，因为应用没有 Java 代码。
instant.run.notification.ir.broken.for.secondary.user=Instant Run 检测到您正在具有工作资料或多个用户帐户的目标设备上运行。<br>在工作资料或目标设备上的另一个用户帐户下启动应用将导致崩溃。<br><a href="learnmore">详细了解</a>如何在工作资料下运行应用。

instant.run.notification.fullbuild.mismatching.timestamps=Instant Run 执行了完整构建和安装，因为<br>设备上的安装与磁盘上的本地构建不匹配。
instant.run.notification.fullbuild.manifestresourcechanged=正在执行完整构建和安装:<br>Instant Run 检测到从合并的 AndroidManifest 引用的资源已更改。<a href="learnmore">了解详情</a>。
instant.run.notification.fullbuild.api.less.than.21=正在执行完整构建和安装:<br>在 API 级别低于 21 的设备上，如果应用未运行，则需要完整构建。

instant.run.notification.coldswap=Instant Run 应用了代码变更并重新启动了应用。
instant.run.notification.coldswap.multiprocess=Instant Run 应用了代码变更并重新启动了应用。<br>由于使用多个进程，应用被重新启动。
instant.run.notification.coldswap.nochanges=Instant Run 重新启动了应用。
instant.run.notification.coldswap.tv=Instant Run 应用了代码变更并重新启动了应用。<br>Android TV 应用需要重新启动才能完成所有变更。

instant.run.notification.warmswap=Instant Run 应用了代码变更并重新启动了当前 Activity。
instant.run.notification.hotswap=Instant Run 应用了代码变更。\n\
您可能需要<a href="restart">重新启动</a>{0}当前活动才能看到变更。\n\
您还可以<a href="configure">配置</a> Instant Run 以自动重新启动 Activity。

instant.run.notification.nochanges=没有要部署的变更。
instant.run.prompt.title=Instant Run: 应用变更
instant.run.prompt.body=如果您仅更改方法实现或资源，<br>可以使用“应用变更”按钮使它们更快显示。<a href="learnmore" style="color: #BBDDFF;">了解详情</a>

instant.run.flr.banner.subtitle=<html>我们力求将 Instant Run 打造得完美无缺，但我们需要您项目的更多信息才能调查问题。<br>请执行以下操作，帮助我们排除和修复 Instant Run 问题:<br><ol><li>重新启用 Instant Run 并激活额外的日志记录</li> <li>重现 Instant Run 问题</li> <li>重现问题后，立即点击<b>帮助 | 报告 Instant Run 问题…</4 >向我们发送问题报告。</li> </ol> </html>

instant.run.flr.dialog.description=请描述您的 Instant Run 问题:
instant.run.flr.dialog.includeslogs=<html>为帮助 Google 排查和解决 Instant Run 问题，需要将以下日志文件<br>与此问题报告一并发送。这些日志包含项目详细信息，其中可能包含可识别<br>身份的信息(例如磁盘上的项目路径)。<br><br>这些日志只会由 Google 查看，并且仅用于排查<br>Instant Run 问题。</html>
instant.run.flr.would.you.like.to.enable=要向 Google 报告 Instant Run 问题，您需要首先启用 Instant Run 和额外日志记录。\n\
您想帮助 Google 排查故障并解决 Instant Run 问题吗?
instant.run.flr.dialog.title=报告 Instant Run 问题
instant.run.flr.howto=<html>谢谢! 我们现在已启用 Instant Run 和额外日志记录来诊断问题。<br>下次您遇到 Instant Run 问题时，可以点击<b>帮助 | 报告 Instant Run 问题…</b><br> 向我们发送错误报告。<br> <br>如果您改变主意，想要禁用 Instant Run 的额外日志记录，可以转到<br><b>设置 | 构建、执行、部署 | Instant Run</b><br>，然后取消选中“为 Instant Run 记录额外信息” </html>

instant.run.build.error=Android Studio 无法正确解释 Gradle 构建的结果。\n\
再次按“运行”或“调试”，也许可以让您从此问题中恢复。\n\
请在 b.android.com 上提交错误，并包括此消息和您的 idea.log(帮助 | 显示日志…)。

connection.assistant.loading=正在加载…
connection.assistant.usb.no_devices.title=未检测到 USB 设备
connection.assistant.usb.no_devices.body=
connection.assistant.adb.no_devices.title=未检测到 Android 设备。
connection.assistant.adb.no_devices.body=
connection.assistant.adb.devices=检测到至少一台 Android 设备。
connection.assistant.adb.failure=无法找到 ADB。
connection.assistant.adb.unexpected=出现意外错误，请提交错误。
title.cannot.open.file=无法打开文件 {0}
feedback.notifications.title=感谢您的反馈!

whatsnew.action.custom.description=了解最新版本 {0} 的新功能和改进

unsupported.jvm.dragndrop.message=在受拖放问题(1.8.0_60 至 1.8.0_76)影响的 JDK8 版本上运行。请参见 <a href="https://youtrack.jetbrains.com/issue/IDEA-146691">IDEA-146691</a> 了解详细信息，并考虑使用问题范围之外的 JDK。
unsupported.jvm.openjdk.message=OpenJDK 表现出间歇性的性能和 UI 问题。我们建议使用 Oracle JRE/JDK.。
sys.health.too.many.exceptions=已检测到大量内部异常。这表明 IDE 存在严重问题。请考虑重新安装 Android Studio。如果问题仍然存在，请通过以下链接报告错误。
sys.health.send.feedback=发送反馈
heap.dump.snapshot.exception=创建堆转储时出错。有关详细信息，请参阅 idea.log。
heap.dump.snapshot.indicator.text=正在捕获 {0} 堆转储
heap.dump.snapshot.indicator.low.memory.text=检测到内存不足。正在捕获 {0} 堆转储
heap.dump.snapshot.created=已在 {0} 创建堆转储。下次您启动时 {1} 会对它进行分析。
heap.dump.snapshot.created.no.analysis=已在 {0} 创建堆转储。
heap.dump.snapshot.error.check.log=创建堆转储时出错。请检查 idea.log 了解详细信息。
heap.dump.snapshot.no.space=空间不足，无法在 {0} 创建堆转储。堆转储所需的估计大小: {1}MB，但只有 {2}MB 可用。
heap.dump.snapshot.title=捕获堆转储
heap.dump.snapshot.task.title=正在捕获堆转储
heap.dump.snapshot.already.pending=内存报告已挂起。重启 {0} 以开始分析。
heap.dump.analysis.exception=堆转储分析时出错。有关详细信息，请参阅 idea.log。
heap.dump.analysis.task.title=正在准备内存报告
heap.dump.analysis.notification.title=内存使用报告
heap.dump.analysis.notification.ready.content=分析完成。
heap.dump.analysis.notification.action.title=审阅报告
heap.dump.analysis.notification.submitted.content=感谢您提交报告。
heap.dump.analysis.notification.submit.error.content=提交报告时出错。请参见 idea.log 了解详细信息。
heap.dump.analysis.report.dialog.title=内存使用报告
heap.dump.analysis.report.dialog.header=<html>{0} 检测到异常高的内存使用。<br>您可以将以下内存使用报告发送到 Google，帮助团队调查问题的根源。
heap.dump.analysis.report.dialog.footer=提交此报告，即表明您允许 Google 根据 <a href="http://www.google.com/policies/privacy/">Google 的隐私政策</a>收集和处理此数据。
heap.dump.analysis.report.dialog.action.send=发送
heap.dump.analysis.report.dialog.action.dont.send=不发送
heap.dump.snapshot.restart.dialog.title=确认重启
heap.dump.snapshot.restart.dialog.message=堆转储分析需要重启 Android Studio。要立即重启吗?
heap.dump.snapshot.restart.dialog.restart.now=立即重启
heap.dump.snapshot.restart.dialog.restart.later=稍后重启

memory.settings.restart.needed=内存设置已保存。为了使新设置生效，您需要重启 IDE。要立即重启吗?
memory.settings.panel.top.message=对操作系统应为 Android Studio 进程(例如核心 IDE 或 Gradle 守护进程)分配的最大 RAM 量进行配置。分配过多的内存可能会降低性能，类似于分配过少的内存。
memory.settings.ide.bottom.message=这是全局设置，将应用于您使用 Android Studio 打开的所有项目。您需要重启 IDE 才能使对其堆大小做出的变更生效。
memory.settings.panel.use.recommended.values=使用建议值
memory.settings.panel.ide.info=根据可用内存和当前项目，建议 IDE 堆大小为 {0}。
memory.settings.panel.daemon.info=这些设置仅应用于当前项目，并且更改仅会在重新构建项目(通过从菜单栏选择“构建”>“重新构建项目”)后生效。更改堆大小并重新构建项目后，您可能会发现具有旧设置的守护进程并需要将其手动停止。
memory.settings.panel.show.daemons.info=查找现有的 Gradle 守护进程
memory.settings.postsync.message=根据可用内存和项目大小，将最大堆大小从 {0}MB 增加到 {1}MB 可以优化 IDE 性能。
memory.settings.postsync.title={0} 的性能可以提高
memory.settings.postsync.save=使用建议设置并重启
memory.settings.postsync.configure=配置…
memory.settings.postsync.do.not.ask.for.project=此项目不再询问
memory.settings.postsync.do.not.show.again=不再显示
memory.settings.has.user.properties=<i>{0}</i> 中指定的用户 Gradle 属性由项目共享，并且优先于项目级别属性。要为守护进程指定项目级别的最大堆大小，请在用户级别属性中移除 <i>org.gradle.jvmargs</i> 设置，然后重新打开此面板。
memory.settings.user.properties.error=读取用户 Gradle 属性文件时出现异常: {0}

windows.ucrt.warn.message=未安装 Windows 版 Universal C Runtime。ADB 等平台工具可能无法正常工作。

virus.scanning.warn.message=您的防病毒程序可能会影响您的构建性能。Android Studio 检查了以下目录: {0}
virus.scanning.dont.show.again=不再显示
virus.scanning.dont.show.again.this.project=不再为此项目显示
configurable.DeploymentConfigurable.display.name=部署
configurable.ExperimentalSettingsConfigurable.display.name=实验性
configurable.AndroidFacetEditorTab.display.name=Android SDK 设置
configurable.IdeSdksConfigurable.display.name=SDK 位置
configurable.MemorySettingsConfigurable.display.name=内存设置
configurable.SdkUpdaterConfigurable.display.name=Android SDK
configurable.GradleFacetEditorTab.display.name=Android Gradle 模块设置
configurable.ProfilingConfigurable.display.name=CPU 记录配置
configurable.AndroidProjectStructureConfigurableForIdea.display.name=Android 项目结构
configurable.AndroidProjectStructureConfigurableForIdea.redirect.text=请使用 <a href="aps">Android 项目结构</a>配置页面。
checkbox.use.custom.formatting.settings.for.android.xml.files=对 Android XML 文件使用自定义格式设置
checkbox.group.tags.with.the.same.name=将同名标签分为一组
checkbox.insert.line.breaks.around.style.declaration=在样式声明周围插入换行符
checkbox.use.same.device.for.future.launches=将同一设备用于未来启动
action.DumbAware.ToolWindowHeader.text.hide=隐藏
action.DumbAware.AbstractDependenciesPanel.text.add.dependency=添加依赖项
action.AnActionButton.text.select.all=全选
action.AnActionButton.text.unselect.all=取消全选
action.AnActionButton.extract.style.text.select.all=取消全选
action.AnActionButton.extract.style.text.unselect.all=取消全选
action.AnActionButton.update.sites.text.select.all=全选
action.AnActionButton.update.sites.text.deselect.all=取消全选
text.loading=正在加载…

compose.feature.in.non-canary.title=Jetpack Compose 功能不受支持
compose.feature.in.non-canary.message=<html>Jetpack Compose 是一项预览功能，仅 Canary 版本的 Android Studio 中包含对 Compose 的支持。要在您的应用项目中使用 Compose，请下载并安装 IDE 的最新 <a href="https://developer.android.com/studio/preview"> Canary 版本</a>。</html>
configurable.group.build.android.settings.display.name=Android
configurable.group.build.android.settings.description=<html><body>使用 Android 构建工具配置项目集成。
downloading.android.plugin.components=正在下载 Android 插件组件
label.manager.for.the.android.sdk=IDE 使用的 Android SDK 和工具的管理器
label.android.sdk.location=Android SDK 位置:
tab.name.sdk.platforms=SDK 平台
tab.name.sdk.tools=SDK 工具
tab.name.sdk.update.sites=SDK 更新站点
label.sdk.location.must.be.set=必须设置 SDK 位置
label.each.android.sdk.platform.package=<html>默认情况下，每个 Android SDK 平台软件包包含 Android 平台以及与 API 级别有关的源代码。安装后，IDE 将自动检查更新。选中“显示软件包详细信息”以显示各个 SDK 组件。</html>
checkbox.show.package.details=显示软件包详细信息
label.looking.for.updates=正在查找更新…
checkbox.hide.obsolete.packages=隐藏过时软件包
label.below.are.the.available.sdk=<html>以下为可用的 SDK 开发者工具。安装后，IDE 将自动检查更新。选中“显示包详细信息”以显示 SDK 工具的可用版本。</html>
label.these.are.the.sites=<html>这些是检查 Android SDK 更新和工具的站点。如果未选中，SDK 管理器将不会检查站点有无更新。通过添加其他附加组件更新站点可以添加新的附加组件或其他 SDK 软件包。</html>
label.loading.sources=正在加载源…
checkbox.force.https.sources=使用 http://... 强制要提取的 https://... 源
checkbox.disable.sdk.diff.patching=禁用 SDK 差异修补
tooltip.disabling.sdk.diff.patching=禁用 SDK 差异修补可能会增大 SDK 软件包下载体积，但是将提升下载后包的安装速度。如果在您的计算机上安装本地补丁将花费大量时间，但您具有无流量限制的快速网络连接，这样选择较为实用。SDK 差异修补默认启用，并且是高端硬件的首选安装方法。
dialog.title.device.file.explorer.download.location=Device File Explorer 下载位置
dialog.message.path.must.be.existing.directory=路径必须为现有目录
dialog.title.invalid.path=无效路径
configurable.name.device.file.explorer=Device File Explorer
configurable.name.android.device.file.explorer=Android Device File Explorer

android.proxy.settings.dialog.title=代理设置
android.proxy.settings.dialog.message=<html>{0} 配置为使用 HTTP 代理。Gradle 可能需要进行这些 HTTP 代理设置才能访问 Internet(例如下载依赖项。)<br/><br/>是否要将以下 HTTP 设置存储到全局 gradle.properties 文件?<br/><br/><b>注意: </b>您可以在 gradle.properties 文件中手动设置密码，但要自担风险。<br/><br/>有关更多详细信息，请参阅 <a href=''https://developer.android.com/studio/intro/studio-config.html#proxy''>Android Studio 文档</a>。<br/><br/>
label.download.location=下载位置
android.application.title=Android 应用
android.final.package.element.type.name=Android 最终软件包
android.extract.package.error.0.message=错误: {0}
android.export.package.passwords.cannot.contain.quote.character=密码不得包含引号字符


android.lint.inspections.android.gradle.plugin.version=过时的 Android Gradle 插件版本
android.run.configuration.not.supported.applicationid=当前项目不支持运行配置 {0}。无法获取应用程序 ID。
android.lint.inspections.mutating.shared.prefs=改变不可变的 SharedPrefs 集
android.lint.inspections.remote.view.layout=RemoteView 中不受支持的视图
android.layout.screenview.action.description=Show {0} 图面
android.wizard.module.new.native.library=Android 原生库
android.wizard.module.new.native.library.description=创建新的 Android 原生库。
android.wizard.cppStandard.combo.tooltip=用于原生模块的 C++ 标准
android.lint.inspections.launch.activity.from.notification=通知会启动服务或 BroadcastReceiver
android.lint.inspections.notification.trampoline=通知 Trampoline
project.upgrade.agpUpgradeRefactoringProcessor.usageView.header=AGP 升级助手
project.upgrade.agpUpgradeRefactoringProcessor.commandName=将 AGP 版本从 {0} 升级到 {1}
project.upgrade.references.text=考虑的参考
project.upgrade.usageView.tabText=更新用法
project.upgrade.usageView.need.reRun=无法执行升级。\n\
找到用法后代码有变更。\n\
请再次执行用法搜索。
project.upgrade.usageView.doAction=完成升级(&U)
project.upgrade.agpClasspathDependencyRefactoringProcessor.target.presentableText=正在升级 AGP 配置
project.upgrade.agpClasspathDependencyRefactoringProcessor.commandName=将 AGP 依赖项从 {0} 升级到 {1}
project.upgrade.agpClasspathDependencyRefactoringProcessor.usageView.header=将 AGP 类路径依赖项版本从 {0} 升级到 {1}
project.upgrade.agpClasspathDependencyRefactoringProcessor.usageType=更新版本字符串
project.upgrade.agpVersionUsageInfo.tooltipText=将 AGP 版本从 {0} 更新到 {1}
project.upgrade.gMavenRepositoryRefactoringProcessor.commandName=将 google() GMaven 添加到 buildscript 仓库
project.upgrade.gMavenRepositoryRefactoringProcessor.usageView.header=将 google() GMaven 添加到 buildscript 仓库
project.upgrade.gMavenRepositoryRefactoringProcessor.usageType=添加 GMaven 声明
project.upgrade.repositoriesNoGMavenUsageInfo.tooltipText=将 google() 添加到 buildscript 仓库
project.upgrade.agpGradleVersionRefactoringProcessor.commandName=将 Gradle 版本升级到 {0}
project.upgrade.agpGradleVersionRefactoringProcessor.usageView.header=将 Gradle 版本升级到 {0}
project.upgrade.agpGradleVersionRefactoringProcessor.wellKnownGradlePluginUsageType=更新 Gradle 插件版本
project.upgrade.gradleVersionUsageInfo.tooltipText=将 Gradle 版本升级到 {0}
project.upgrade.java8DefaultRefactoringProcessor.commandName=更新默认 Java 语言级别
project.upgrade.java8DefaultRefactoringProcessor.groupingName=添加指令以继续使用 Java 7
project.upgrade.java8DefaultRefactoringProcessor.usageView.header=更新默认 Java 语言级别
project.upgrade.java8DefaultRefactoringProcessor.existingDirectiveUsageType=现有语言级别指令(保持不变)
project.upgrade.java8DefaultRefactoringProcessor.acceptNewUsageType=接受新默认值(保持不变)
project.upgrade.java8DefaultRefactoringProcessor.insertOldUsageType=继续使用 Java 7 (插入语言级别指令)
project.upgrade.noLanguageLevelAction.acceptNewDefault=接受 Java 8 的新默认值
project.upgrade.noLanguageLevelAction.insertOldDefault=插入指令以继续使用 Java 7
project.upgrade.javaLanguageLevelUsageInfo.tooltipText.insertOldDefault=插入显式 {0} 以保留以前的行为
project.upgrade.javaLanguageLevelUsageInfo.tooltipText.acceptNewDefault=接受新默认值
project.upgrade.javaLanguageLevelUsageInfo.tooltipText.existing=保留现有显式 {0}
project.upgrade.kotlinLanguageLevelUsageInfo.tooltipText.insertOldDefault=插入显式 {0} 以保留以前的行为
project.upgrade.kotlinLanguageLevelUsageInfo.tooltipText.acceptNewDefault=接受新默认值
project.upgrade.kotlinLanguageLevelUsageInfo.tooltipText.existing=保留现有显式 {0}
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.commandName=替换弃用的配置
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.usageView.header=替换弃用的配置
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.renameConfigurationUsageType=重命名配置
project.upgrade.compileRuntimeConfigurationRefactoringProcessor.changeDependencyConfigurationUsageType=更改依赖关系配置
project.upgrade.obsoleteConfigurationDependencyUsageInfo.tooltipText=将配置从 {0} 更新到 {1}
project.upgrade.obsoleteConfigurationConfigurationUsageInfo.tooltipText=将配置从 {0} 重命名为 {1}
project.upgrade.fabricCrashlyticsRefactoringProcessor.usageView.header=将 crashlytics 从 fabric 迁移到 firebase
project.upgrade.fabricCrashlyticsRefactoringProcessor.commandName=将 crashlytics 从 fabric 迁移到 firebase
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricRepositoryUsageType=移除 Fabric Maven 仓库
project.upgrade.fabricCrashlyticsRefactoringProcessor.addGmavenRepositoryUsageType=添加 Google Maven 仓库
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricClasspathUsageType=移除对 Fabric Gradle 插件的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.addGoogleServicesClasspathUsageType=添加对 Google Services Gradle 插件的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsClasspathUsageType=添加对 Firebase Crashlytics Gradle 插件的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.replaceFabricPluginUsageType=将 Fabric 插件替换为 Firebase Crashlytics 插件
project.upgrade.fabricCrashlyticsRefactoringProcessor.applyGoogleServicesPluginUsageType=应用 Google Services 插件
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricCrashlyticsSdkUsageType=移除对 Fabric SDK 的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsSdkUsageType=添加对 Firebase Crashlytics SDK 的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.addGoogleAnalyticsSdkUsageType=添加对 Google Analytics SDK 的依赖
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeFabricNdkUsageType=移除 Fabric NDK 依赖关系
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsNdkUsageType=添加 Firebase Crashlytics NDK 依赖关系
project.upgrade.removeFabricMavenRepositoryUsageInfo.tooltipText=移除 Fabric Maven 仓库
project.upgrade.addGoogleMavenRepositoryUsageInfo.tooltipText=添加 Google Maven 仓库
project.upgrade.removeFabricClasspathDependencyUsageInfo.tooltipText=移除对 Fabric Gradle 插件的依赖
project.upgrade.addGoogleServicesClasspathDependencyUsageInfo.tooltipText=添加对 Google Services Gradle 插件的依赖
project.upgrade.addFirebaseCrashlyticsClasspathDependencyUsageInfo.tooltipText=添加对 Firebase Crashlytics Gradle 插件的依赖
project.upgrade.replaceFabricPluginUsageInfo.tooltipText=将 Fabric 插件替换为 Firebase Crashlytics 插件
project.upgrade.applyGoogleServicesPluginUsageInfo.tooltipText=应用 Google Services 插件
project.upgrade.removeFabricCrashlyticsSdkUsageInfo.tooltipText=移除对 Fabric SDK 的依赖
project.upgrade.addFirebaseCrashlyticsSdkUsageInfo.tooltipText=添加对 Firebase Crashlytics SDK 的依赖
project.upgrade.addGoogleAnalyticsSdkUsageInfo.tooltipText=添加对 Google Analytics SDK 的依赖
project.upgrade.removeFabricNdkUsageInfo.tooltipText=移除 Fabric NDK 依赖关系
project.upgrade.addFirebaseCrashlyticsNdkUsageInfo.tooltipText=添加 Firebase Crashlytics NDK 依赖关系
project.upgrade.removeCrashlyticsEnableNdkUsageInfo.tooltipText=移除 enableNdk crashlytics 标志
project.upgrade.addBuildTypeFirebaseCrashlyticsUsageInfo.tooltipText=为发布 buildType 启用原生符号上传
project.upgrade.fabricCrashlyticsRefactoringProcessor.removeCrashlyticsEnableNdkUsageType=移除 enableNdk crashlytics 标志
project.upgrade.fabricCrashlyticsRefactoringProcessor.addFirebaseCrashlyticsNativeSymbolUploadUsageType=为发布 buildType 启用原生符号上传
project.upgrade.agpGradleVersionRefactoringProcessor.gradleUrlUsageType=更新 Gradle 分发 URL
android.lint.inspections.intent.filter.exported.receiver=未在清单中指定 android:exported
project.upgrade.notifyCancelledUpgrade.title=已取消 Android Gradle 插件升级
project.upgrade.notifyCancelledUpgrade.body=<a href="resume">恢复升级</a>。
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.commandName=将启用的 booleans 迁移到 buildFeatures
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.usageView.header=将启用的 booleans 迁移到 buildFeatures
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.dataBindingEnabledUsageType=将启用的 dataBinding 迁移到 buildFeatures
project.upgrade.migrateToBuildFeaturesRefactoringProcessor.viewBindingEnabledUsageType=将启用的 viewBinding 迁移到 buildFeatures
project.upgrade.dataBindingEnabledUsageInfo.tooltipText=将启用的 dataBinding 迁移到 buildFeatures
project.upgrade.viewBindingEnabledUsageInfo.tooltipText=将启用的 viewBinding 迁移到 buildFeatures
android.emulator.notification.title=Android 模拟器
android.lint.inspections.leanback.uses.wifi=电视设备上的 android.hardware.wifi
live.literals.highlight.toggle.show.title=启用文字装饰
live.literals.highlight.toggle.hide.title=禁用文字装饰
live.literals.highlight.toggle.description=在编辑器中切换文字装饰
android.lint.inspections.notify.data.set.changed=正在使所有 RecyclerView 数据失效
android.lint.inspections.annotate.version.check=注解 SDK_INT 检查
live.literals.is.enabled=文字的 Live Edit：开
live.literals.is.disabled=文字的 Live Edit：关
live.literals.is.available=<html><b>文字的 Live Edit</b><br/><br/>代码中某些文字的变更将立即反映在模拟器或 Compose 预览中。<br/>您可以通过调用<i>{0}</i>操作来切换编辑器标记的可见性。<br/><br/>使用此图标可查看文字的 Live Edit 状态。
live.literals.is.available.disable.hint=禁用此功能。
live.literals.configurable.display.name=Compose 文字的 Live Edit
live.literals.configurable.enable.live.literals=启用文字的 Live Edit
live.literals.is.available.do.not.show=不再显示
live.literals=Compose 文字的 Live Edit
live.literals.problems.dialog.title=问题
live.literals.breadcrumbs.highlights=文字装饰
live.literals.action.enable.title=启用文字的 Live Edit
live.literals.action.disable.title=禁用文字的 Live Edit
live.literals.action.show.problems.title=显示问题...
live.literals.customize.appearance.title=自定义文字装饰...
android.lint.inspections.media.capabilities=清单中的媒体功能属性
android.refactoring.migrateto.namespaces.title=迁移到资源命名空间...
android.refactoring.migrateto.namespaces.progress.analyze.xml=正在分析 XML 资源文件...
android.refactoring.migrateto.namespaces.progress.analyze.manifest=正在分析清单文件...
android.refactoring.migrateto.namespaces.progress.analyze.code=正在分析代码文件...
android.refactoring.migrateto.namespaces.progress.inferring=正在推断命名空间...
android.refactoring.migrateto.nontransitiverclass.title=迁移到不可传递的 R 类...
android.refactoring.migrateto.nontransitiverclass.progress.findusages=正在查找 R 类用法…
android.refactoring.migrateto.nontransitiverclass.progress.inferring=正在推断软件包名称...
android.refactoring.migrateto.nontransitiverclass.progress.rewriting=正在重写资源引用...
android.refactoring.migrateto.resourceview.header=要迁移的资源引用
project.upgrade.removeSourceSetJniRefactoringProcessor.commandName=从 sourceSets 中移除 jni 资源目录
project.upgrade.removeSourceSetJniRefactoringProcessor.usageView.header=从 sourceSets 中移除 jni 资源目录
project.upgrade.sourceSetJniUsageInfo.usageType=从 sourceSet 移除 jni
project.upgrade.sourceSetJniUsageInfo.tooltipText=从 sourceSet 移除 jni
android.lint.inspections.app.links.auto.verify=应用链接自动验证失败
android.lint.inspections.font.validation=字体文件验证
android.usageType.gradle.build.script=在 Gradle 构建脚本中
android.usageType.manifest=在 Android 清单中
android.usageType.resource.declaration.xml=Android 资源 XML 中的资源声明
android.usageType.resource.reference.xml=Android 资源 XML 中的资源引用
android.usageType.resource.reference.code=代码中的资源引用
android.usageType.permission.reference.code=代码中的权限引用
android.usageType.resource.file=Android 资源文件
android.editor.settings.appearance.title=Android 编辑器
android.editor.settings.appearance.enable.flags.for.languages=启用语言标志
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.commandName=从 aaptOptions 迁移到 androidResources
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.usageView.header=从 aaptOptions 迁移到 androidResources
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.move.usageType=将属性迁移到 androidResources
project.upgrade.migrateToAndroidResourcesRefactoringProcessor.remove.usageType=移除 aaptOptions
project.upgrade.androidResourcesUsageInfo.move.tooltipText=将用法从 aaptOptions 移动到 androidResources
project.upgrade.androidResourcesUsageInfo.remove.tooltipText=移除 aaptOptions
android.lint.inspections.coarse.fine.location=android.permission.ACCESS_COARSE_LOCATION 也是必需的
android.lint.inspections.high.sampling.rate=高传感器采样率
android.lint.inspections.custom.x509.trust.manager=实现自定义 TLS 信任管理器
do.not.ask.for.this.session=不再要求此会话
android.suggested.import.action.family.name=添加库依赖关系并导入
android.suggested.import.action.name.prefix=添加对 {0} 的依赖关系并导入
android.suggested.imports.title=建议的导入
live.literals.highlight.toggle.title=切换文字装饰
android.suggested.dependency.action.family.name=添加库依赖项
android.suggested.dependency.action.name.prefix=添加对 {0} 的依赖关系
wear.assistant.device.list.title=将设备与 Wear OS 模拟器配对
wear.assistant.device.list.subtitle=<html>选择 <b>Android 11+</b> 配套设备和 Wear OS 模拟器进行配对。IDE 将启动并在设备之间建立连接。</html>
wear.assistant.device.list.phone.header=选择配套设备
wear.assistant.device.list.wear.header=选择 Wear OS 模拟器
wear.assistant.device.list.no.phone=无可用设备。在 AVD 管理器中创建手机模拟器。<br/><br/><a href="">查看 AVD 管理器</a>
wear.assistant.device.list.no.wear=无可用 Wear OS 模拟器。在 AVD 管理器中创建 Wear OS 模拟器。<br/><br/><a href="">查看 AVD 管理器</a>
wear.assistant.device.list.forget.connection=忘记 {0} 连接
cannot.resolve.float.literal.error=无法解析浮点数 ''{0}''
cannot.resolve.color.literal.error=无法解析颜色 ''{0}''
android.lint.inspections.tile.provider.permissions=没有 BIND_TILE_PROVIDER 权限的 TileProvider
project.upgrade.notification.title=建议进行项目更新
project.upgrade.notification.body=Android Gradle 插件可以<a href='upgrade'>升级</a>。
android.lint.inspections.watch.face.editor=具有不正确 launchMode 的表盘编辑器
live.literals.configurable.enable.live.literals.comment=启用文字的 Live Edit 后需要构建，以便该功能可以正常工作。
wear.assistant.device.list.tooltip.requires.api=Wear 配对要求 API 级别 >= 30
wear.assistant.device.list.tooltip.requires.play=Wear 配对需要 Google Play
wear.assistant.device.list.tooltip.learn.more=了解详情
live.literals.tooltip.description=<html>代码中某些文字的变更将立即反映在模拟器或 Compose 预览中。<br />使用此图标可启用/禁用该功能，打开编辑器标记，并查看文字的 Live Edit 状态。
live.literals.tooltip.url.label=文字的 Live Edit 文档
wear.assistant.device.connection.error.title=发现问题
wear.assistant.device.connection.error.subtitle=检索之前选择的设备时发现问题
wear.assistant.device.connection.check.again=再次检查
wear.assistant.device.connection.start.device.title=正在启动设备
wear.assistant.device.connection.start.device.subtitle=<html>正在启动设备并在配套设备和 Wear OS 设备之间建立连接</html>
wear.assistant.device.connection.start.device.top.label=正在启动设备...
wear.assistant.device.connection.start.device.bottom.label=正在启动 {0}
wear.assistant.device.connection.connecting.device.top.label=正在连接设备...
wear.assistant.device.connection.connecting.device.bottom.label=正在设备之间建立通信网桥
wear.assistant.device.connection.wear.os.installed=<html>Wear OS 已安装到配套设备</html>
wear.assistant.device.connection.wear.os.missing=<html>无法检测到 Wear OS 的安装。</html>
wear.assistant.device.connection.install.wear.os.title=安装 Wear OS 配套应用程序
wear.assistant.device.connection.install.wear.os.subtitle=<html>配套设备上未安装 Wear OS 应用。配对设备需要 Wear OS 应用。可获得其他安装指南。<a href="{0}">了解详情 ↗</a></html>
wear.assistant.device.connection.install.wear.os.button=在 Play Store 中打开 Wear OS
wear.assistant.device.connection.complete.pairing.title=完成 Wear OS 配对
wear.assistant.device.connection.complete.pairing.subtitle=<html>在配套设备上完成 Wear OS 配套应用配对。可获取详细的配对说明。<a href="{0}">了解详情 ↗</a></html>
wear.assistant.device.connection.open.companion.button=打开 Wear OS 配套应用
wear.assistant.device.connection.pairing.success.title=配对成功
wear.assistant.device.connection.pairing.success.subtitle=<html> {0} 已与 {1} 配对</html>
wear.assistant.device.connection.pairing.not.detected=<html>无法检测到 Wear OS 配对完成</html>。
wear.assistant.device.connection.error=<html>{0} 未联机。设备必须联机才能配对。</html>
wear.assistant.device.connection.restart.pairing=重启配对
wear.assistant.device.connection.dropped.title=Wear OS 模拟器连接已断开
wear.assistant.device.connection.dropped.message={0} 已离线。{1} 将在返回后与 {2} 重新连接。
wear.assistant.device.connection.reconnected.title=Wear OS 模拟器已重新连接
wear.assistant.device.connection.reconnected.message={0} 已与 {1} 重新连接。
wear.assistant.device.connection.balloon.link=查看 Wear OS 配对助手
wear.assistant.connection.alert.close.emulators.title=正在关闭其他 Wear OS 模拟器
wear.assistant.connection.alert.close.emulators.subtitle=<html>运行多个 Wear OS 模拟器时无法连接 Wear OS 配对助手。<br/><br/>如果继续，将关闭所有其他 Wear OS 模拟器，并继续将 {0} 与 {1} 配对</html>。
wear.assistant.connection.alert.disconnect.pairing.title=正在断开现有设备的连接
wear.assistant.connection.alert.disconnect.pairing.subtitle=<html>在 {0} 和 {1} 之间创建新连接以启用通信。<br/><br/>这将断开 {2} 与 {3} 的连接。</html>
android.usageType.gradle.properties.file=Gradle 属性文件
android.usageGroup.properties.new.flag=要添加的属性标志: {0}
android.usageGroup.resource.references.from.package=对 {0} 中定义的资源的引用
android.refactoring.migrateto.nontransitiverclass.error.old.agp.title=无法执行重构
android.refactoring.migrateto.nontransitiverclass.error.old.agp.message=不可传递的 R 类不适用于使用低于 4.2.0 版本的 Android Gradle 插件的项目
android.refactoring.migrateto.nontransitiverclass.warning.uncommitted.changes=项目可能包含未提交的变更。在继续之前，您应该提交或恢复这些变更。
android.refactoring.migrateto.nontransitiverclass.warning.recommend.upgrade=此功能在 AGP 4.2 版本中为实验性功能，升级到 7.0.0 或更新版本可获得最佳结果。
wear.assistant.device.connection.install.wear.os.firstStep=<html><b>Google Play Store 安装</b><br/><br/><ol><li>在 Play Store 中打开 Wear OS 应用</li></ol></html>
wear.assistant.device.connection.install.wear.os.additionalSteps=<html><ol start="2"><li>安装 Wear OS 应用</li></ol></html>
wear.assistant.device.connection.complete.pairing.firstStep=<html><b>设置配套应用</b><br/><br/><ol><li>打开 Wear OS 配套应用</li></ol></li></html>
wear.assistant.device.connection.complete.pairing.additionalSteps=<html><ol start="2"> <li>在 'Connect your watch' 步骤选择<b>与模拟器配对</b></li> <br/><li>按照 Wear OS 应用说明进行操作</li></html>
project.upgrade.removeImplementationPropertiesRefactoringProcessor.commandName=移除忽略的配置属性
project.upgrade.removeImplementationPropertiesRefactoringProcessor.usageView.header=移除忽略的配置属性
project.upgrade.removeImplementationProperty.usageType=移除属性
project.upgrade.removeImplementationProperty.tooltipText=移除属性
wear.assistant.device.connection.status.device.bottom.label=正在检查以前的配对状态
wear.assistant.factory.reset.button=恢复出厂设置
wear.assistant.factory.reset.title=恢复 Wear OS 模拟器的出厂设置
wear.assistant.factory.reset.subtitle=<html>{0} 之前与其他设备进行过配对。Wear OS 模拟器必须关闭并恢复出厂设置，才能继续与新设备进行配对。</html>
wear.assistant.factory.reset.progress=正在关闭 {0} 并恢复出厂设置
wear.assistant.device.connection.scanning.wear.os.btn=<html><b>已在设备上打开 Play Store。</b>等待安装 Wear OS 应用</html>
wear.assistant.device.connection.scanning.wear.os.lnk=<html>等待用户安装 Wear OS 应用</html>
wear.assistant.device.connection.wear.os.skip=跳过步骤。已安装 Wear OS 应用
wear.assistant.device.connection.wait.pairing.btn=<html><b>已在设备上打开 Wear OS。</b>等待用户在 Wear OS 应用中完成配对。</html>
wear.assistant.device.connection.wait.pairing.lnk=<html>等待用户在 Wear OS 应用中完成配对。</html>
wear.assistant.device.list.cloud.sync.title=已启用云同步
wear.assistant.device.list.cloud.sync.subtitle=<html><b>已在 {0} 上启用云同步</b><br/><br/>Wear OS 应用可通过云同步连接到 Wear 模拟器。禁用<br/>云同步可完全断开与设备的连接。<a href="{1}">了解详情↗</a></html>